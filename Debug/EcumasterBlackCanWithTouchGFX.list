
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050bc  080267e0  080267e0  000367e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003ce4  0802b89c  0802b89c  0003b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802f580  0802f580  0003f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000234  08062a78  08062a78  00072a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08062cac  08062cac  00080110  2**0
                  CONTENTS
  7 .ARM          00000008  08062cac  08062cac  00072cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08062cb4  08062cb4  00080110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08062cb4  08062cb4  00072cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08062cc8  08062cc8  00072cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  08062cd0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c948  20000110  08062de0  00080110  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000ca58  08062de0  0008ca58  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b3d2  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000efc0  00000000  00000000  000db512  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000041b0  00000000  00000000  000ea4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b90  00000000  00000000  000ee688  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f2218  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041844  00000000  00000000  0012d121  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f237  00000000  00000000  0016e965  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029db9c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011a48  00000000  00000000  0029dc98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080267c8 	.word	0x080267c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	080267c8 	.word	0x080267c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	20000184 	.word	0x20000184

08000b40 <updateDemoValues>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void updateDemoValues(void)
{
 8000b40:	b598      	push	{r3, r4, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b44:	4b8a      	ldr	r3, [pc, #552]	; (8000d70 <updateDemoValues+0x230>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b4c:	da03      	bge.n	8000b56 <updateDemoValues+0x16>
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <updateDemoValues+0x230>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3364      	adds	r3, #100	; 0x64
 8000b54:	e000      	b.n	8000b58 <updateDemoValues+0x18>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <updateDemoValues+0x230>)
 8000b5a:	6013      	str	r3, [r2, #0]
	clt = (clt >= 250) ? -40: clt + 3;
 8000b5c:	4b85      	ldr	r3, [pc, #532]	; (8000d74 <updateDemoValues+0x234>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2bf9      	cmp	r3, #249	; 0xf9
 8000b62:	dc03      	bgt.n	8000b6c <updateDemoValues+0x2c>
 8000b64:	4b83      	ldr	r3, [pc, #524]	; (8000d74 <updateDemoValues+0x234>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	e001      	b.n	8000b70 <updateDemoValues+0x30>
 8000b6c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000b70:	4a80      	ldr	r2, [pc, #512]	; (8000d74 <updateDemoValues+0x234>)
 8000b72:	6013      	str	r3, [r2, #0]
	map = (map >= 450) ? 1: map + 6;
 8000b74:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <updateDemoValues+0x238>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b7c:	da03      	bge.n	8000b86 <updateDemoValues+0x46>
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <updateDemoValues+0x238>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3306      	adds	r3, #6
 8000b84:	e000      	b.n	8000b88 <updateDemoValues+0x48>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <updateDemoValues+0x238>)
 8000b8a:	6013      	str	r3, [r2, #0]
	lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000b8c:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <updateDemoValues+0x23c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcf1 	bl	8000578 <__aeabi_f2d>
 8000b96:	a36c      	add	r3, pc, #432	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	f7ff fdb8 	bl	8000710 <__aeabi_dcmpge>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <updateDemoValues+0x6a>
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <updateDemoValues+0x240>)
 8000ba8:	e010      	b.n	8000bcc <updateDemoValues+0x8c>
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <updateDemoValues+0x23c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fce2 	bl	8000578 <__aeabi_f2d>
 8000bb4:	a366      	add	r3, pc, #408	; (adr r3, 8000d50 <updateDemoValues+0x210>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fb7f 	bl	80002bc <__adddf3>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	f7ff fdb7 	bl	8000738 <__aeabi_d2f>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a6b      	ldr	r2, [pc, #428]	; (8000d7c <updateDemoValues+0x23c>)
 8000bce:	6013      	str	r3, [r2, #0]
	lambdaTarget = (lambdaTarget >= 1.4) ? 0.65: lambdaTarget + 0.06;
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <updateDemoValues+0x244>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fccf 	bl	8000578 <__aeabi_f2d>
 8000bda:	a35b      	add	r3, pc, #364	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fd96 	bl	8000710 <__aeabi_dcmpge>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <updateDemoValues+0xae>
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <updateDemoValues+0x248>)
 8000bec:	e010      	b.n	8000c10 <updateDemoValues+0xd0>
 8000bee:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <updateDemoValues+0x244>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fcc0 	bl	8000578 <__aeabi_f2d>
 8000bf8:	a357      	add	r3, pc, #348	; (adr r3, 8000d58 <updateDemoValues+0x218>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fb5d 	bl	80002bc <__adddf3>
 8000c02:	4603      	mov	r3, r0
 8000c04:	460c      	mov	r4, r1
 8000c06:	4618      	mov	r0, r3
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f7ff fd95 	bl	8000738 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a5c      	ldr	r2, [pc, #368]	; (8000d84 <updateDemoValues+0x244>)
 8000c12:	6013      	str	r3, [r2, #0]
	vehicleSpeed = (vehicleSpeed >= 400) ? 0: vehicleSpeed + 6;
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <updateDemoValues+0x24c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c1c:	da03      	bge.n	8000c26 <updateDemoValues+0xe6>
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <updateDemoValues+0x24c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3306      	adds	r3, #6
 8000c24:	e000      	b.n	8000c28 <updateDemoValues+0xe8>
 8000c26:	2300      	movs	r3, #0
 8000c28:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <updateDemoValues+0x24c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	oilTemp = (oilTemp >= 160) ? 1: oilTemp + 2;
 8000c2c:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <updateDemoValues+0x250>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b9f      	cmp	r3, #159	; 0x9f
 8000c32:	dc03      	bgt.n	8000c3c <updateDemoValues+0xfc>
 8000c34:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <updateDemoValues+0x250>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	e000      	b.n	8000c3e <updateDemoValues+0xfe>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <updateDemoValues+0x250>)
 8000c40:	6013      	str	r3, [r2, #0]
	oilPress = (oilPress >= 12.0) ? 0.1: oilPress + 0.1;
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <updateDemoValues+0x254>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c54:	db01      	blt.n	8000c5a <updateDemoValues+0x11a>
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <updateDemoValues+0x258>)
 8000c58:	e010      	b.n	8000c7c <updateDemoValues+0x13c>
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <updateDemoValues+0x254>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc8a 	bl	8000578 <__aeabi_f2d>
 8000c64:	a33e      	add	r3, pc, #248	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fb27 	bl	80002bc <__adddf3>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460c      	mov	r4, r1
 8000c72:	4618      	mov	r0, r3
 8000c74:	4621      	mov	r1, r4
 8000c76:	f7ff fd5f 	bl	8000738 <__aeabi_d2f>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a45      	ldr	r2, [pc, #276]	; (8000d94 <updateDemoValues+0x254>)
 8000c7e:	6013      	str	r3, [r2, #0]
	fuelPress = (fuelPress >= 7.0) ? 0.1: fuelPress + 0.1;
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <updateDemoValues+0x25c>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8000c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	db01      	blt.n	8000c98 <updateDemoValues+0x158>
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <updateDemoValues+0x258>)
 8000c96:	e010      	b.n	8000cba <updateDemoValues+0x17a>
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <updateDemoValues+0x25c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc6b 	bl	8000578 <__aeabi_f2d>
 8000ca2:	a32f      	add	r3, pc, #188	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb08 	bl	80002bc <__adddf3>
 8000cac:	4603      	mov	r3, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	f7ff fd40 	bl	8000738 <__aeabi_d2f>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <updateDemoValues+0x25c>)
 8000cbc:	6013      	str	r3, [r2, #0]
	iat = (iat >= 100) ? 1: iat + 2;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <updateDemoValues+0x260>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b63      	cmp	r3, #99	; 0x63
 8000cc4:	dc03      	bgt.n	8000cce <updateDemoValues+0x18e>
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <updateDemoValues+0x260>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	e000      	b.n	8000cd0 <updateDemoValues+0x190>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <updateDemoValues+0x260>)
 8000cd2:	6013      	str	r3, [r2, #0]
	egt = (egt >= 760) ? 500: egt +12;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <updateDemoValues+0x264>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cdc:	da03      	bge.n	8000ce6 <updateDemoValues+0x1a6>
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <updateDemoValues+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	330c      	adds	r3, #12
 8000ce4:	e001      	b.n	8000cea <updateDemoValues+0x1aa>
 8000ce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <updateDemoValues+0x264>)
 8000cec:	6013      	str	r3, [r2, #0]
	tps = (tps >= 100) ? 0: tps + 4;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <updateDemoValues+0x268>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b63      	cmp	r3, #99	; 0x63
 8000cf4:	dc03      	bgt.n	8000cfe <updateDemoValues+0x1be>
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <updateDemoValues+0x268>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	e000      	b.n	8000d00 <updateDemoValues+0x1c0>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <updateDemoValues+0x268>)
 8000d02:	6013      	str	r3, [r2, #0]
	battVoltage = (battVoltage >= 20.0) ? 10.0: battVoltage + 0.6;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <updateDemoValues+0x26c>)
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	db01      	blt.n	8000d1c <updateDemoValues+0x1dc>
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <updateDemoValues+0x270>)
 8000d1a:	e010      	b.n	8000d3e <updateDemoValues+0x1fe>
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <updateDemoValues+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc29 	bl	8000578 <__aeabi_f2d>
 8000d26:	a310      	add	r3, pc, #64	; (adr r3, 8000d68 <updateDemoValues+0x228>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fac6 	bl	80002bc <__adddf3>
 8000d30:	4603      	mov	r3, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4618      	mov	r0, r3
 8000d36:	4621      	mov	r1, r4
 8000d38:	f7ff fcfe 	bl	8000738 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <updateDemoValues+0x26c>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	bd98      	pop	{r3, r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	66666666 	.word	0x66666666
 8000d4c:	3ff66666 	.word	0x3ff66666
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fa99999 	.word	0x3fa99999
 8000d58:	eb851eb8 	.word	0xeb851eb8
 8000d5c:	3faeb851 	.word	0x3faeb851
 8000d60:	9999999a 	.word	0x9999999a
 8000d64:	3fb99999 	.word	0x3fb99999
 8000d68:	33333333 	.word	0x33333333
 8000d6c:	3fe33333 	.word	0x3fe33333
 8000d70:	20000004 	.word	0x20000004
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	3f19999a 	.word	0x3f19999a
 8000d84:	20000014 	.word	0x20000014
 8000d88:	3f266666 	.word	0x3f266666
 8000d8c:	2000039c 	.word	0x2000039c
 8000d90:	200003a0 	.word	0x200003a0
 8000d94:	200003a4 	.word	0x200003a4
 8000d98:	3dcccccd 	.word	0x3dcccccd
 8000d9c:	200003a8 	.word	0x200003a8
 8000da0:	20000394 	.word	0x20000394
 8000da4:	200003b0 	.word	0x200003b0
 8000da8:	20000398 	.word	0x20000398
 8000dac:	200003ac 	.word	0x200003ac
 8000db0:	41200000 	.word	0x41200000

08000db4 <SecondTask>:


void SecondTask(void const* argument)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <SecondTask+0xa8>)
 8000dbe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd0:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SecondTask+0xac>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	f00b fe9e 	bl	800cb20 <xQueueGenericSend>
	osDelay(150);
 8000de4:	2096      	movs	r0, #150	; 0x96
 8000de6:	f00b fbad 	bl	800c544 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <SecondTask+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SecondTask+0x42>
		{
			updateDemoValues();
 8000df2:	f7ff fea5 	bl	8000b40 <updateDemoValues>
		}

		display_values dispVals = {rpm, clt, map, lambda, lambdaTarget, vehicleSpeed, oilTemp, oilPress, fuelPress, iat, egt, tps, battVoltage};
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <SecondTask+0xb4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <SecondTask+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <SecondTask+0xbc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <SecondTask+0xc0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <SecondTask+0xc4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <SecondTask+0xc8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SecondTask+0xcc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <SecondTask+0xd0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <SecondTask+0xd4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SecondTask+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <SecondTask+0xdc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <SecondTask+0xe0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <SecondTask+0xe4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <SecondTask+0xe8>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f00b fe66 	bl	800cb20 <xQueueGenericSend>
		osDelay(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f00b fb75 	bl	800c544 <osDelay>
	{
 8000e5a:	e7c6      	b.n	8000dea <SecondTask+0x36>
 8000e5c:	080267e0 	.word	0x080267e0
 8000e60:	200086c8 	.word	0x200086c8
 8000e64:	08026f50 	.word	0x08026f50
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000014 	.word	0x20000014
 8000e7c:	2000039c 	.word	0x2000039c
 8000e80:	200003a0 	.word	0x200003a0
 8000e84:	200003a4 	.word	0x200003a4
 8000e88:	200003a8 	.word	0x200003a8
 8000e8c:	20000394 	.word	0x20000394
 8000e90:	200003b0 	.word	0x200003b0
 8000e94:	20000398 	.word	0x20000398
 8000e98:	200003ac 	.word	0x200003ac
 8000e9c:	200086c4 	.word	0x200086c4

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f002 fde8 	bl	8003a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f85f 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f001 fabb 	bl	8002428 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000eb2:	f000 f917 	bl	80010e4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000eb6:	f000 fbf3 	bl	80016a0 <MX_CRC_Init>
  MX_DCMI_Init();
 8000eba:	f000 fc13 	bl	80016e4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000ebe:	f000 fc45 	bl	800174c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ec2:	f001 fa05 	bl	80022d0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000ec6:	f000 fc73 	bl	80017b0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000eca:	f000 fcf3 	bl	80018b4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ece:	f000 fd1d 	bl	800190c <MX_RTC_Init>
  MX_SAI2_Init();
 8000ed2:	f000 fdc3 	bl	8001a5c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000ed6:	f000 fe69 	bl	8001bac <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eda:	f000 fe87 	bl	8001bec <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000ede:	f000 feb5 	bl	8001c4c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ee2:	f000 fef1 	bl	8001cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ee6:	f000 ff9b 	bl	8001e20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eea:	f001 f80f 	bl	8001f0c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000eee:	f001 f883 	bl	8001ff8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ef2:	f001 f8f7 	bl	80020e4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ef6:	f001 f947 	bl	8002188 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000efa:	f001 f989 	bl	8002210 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000efe:	f001 f9b7 	bl	8002270 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000f02:	f00a ffdb 	bl	800bebc <MX_FATFS_Init>
  MX_CAN1_Init();
 8000f06:	f000 f93f 	bl	8001188 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000f0a:	f00e f84b 	bl	800efa4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <main+0xbc>)
 8000f10:	f107 041c 	add.w	r4, r7, #28
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00b fabf 	bl	800c4ac <osThreadCreate>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <main+0xc0>)
 8000f32:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <main+0xc4>)
 8000f36:	463c      	mov	r4, r7
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f46:	463b      	mov	r3, r7
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00b faae 	bl	800c4ac <osThreadCreate>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <main+0xc8>)
 8000f54:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f56:	f00b fa86 	bl	800c466 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <main+0xba>
 8000f5c:	08026814 	.word	0x08026814
 8000f60:	2000bed8 	.word	0x2000bed8
 8000f64:	08026838 	.word	0x08026838
 8000f68:	2000bed4 	.word	0x2000bed4

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0b4      	sub	sp, #208	; 0xd0
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f024 fca7 	bl	80258ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2284      	movs	r2, #132	; 0x84
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f024 fc98 	bl	80258ce <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f9e:	f005 fa41 	bl	8006424 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <SystemClock_Config+0x16c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <SystemClock_Config+0x170>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <SystemClock_Config+0x170>)
 8000fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <SystemClock_Config+0x170>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fd2:	2309      	movs	r3, #9
 8000fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ff4:	2319      	movs	r3, #25
 8000ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ffa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001008:	2309      	movs	r3, #9
 800100a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fb28 	bl	8006668 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800101e:	f001 fc37 	bl	8002890 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001022:	f005 fa0f 	bl	8006444 <HAL_PWREx_EnableOverDrive>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800102c:	f001 fc30 	bl	8002890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001052:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001056:	2106      	movs	r1, #6
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fda9 	bl	8006bb0 <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001064:	f001 fc14 	bl	8002890 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <SystemClock_Config+0x174>)
 800106a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800107c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001080:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001082:	2305      	movs	r3, #5
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800108a:	2303      	movs	r3, #3
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80010ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 ff79 	bl	8006fb8 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010cc:	f001 fbe0 	bl	8002890 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	37d0      	adds	r7, #208	; 0xd0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000
 80010e0:	01b00868 	.word	0x01b00868

080010e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_ADC3_Init+0x98>)
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_ADC3_Init+0x9c>)
 80010fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_ADC3_Init+0x98>)
 80010fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001102:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_ADC3_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_ADC3_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_ADC3_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_ADC3_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_ADC3_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_ADC3_Init+0x98>)
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <MX_ADC3_Init+0xa0>)
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_ADC3_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_ADC3_Init+0x98>)
 8001132:	2201      	movs	r2, #1
 8001134:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_ADC3_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ADC3_Init+0x98>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_ADC3_Init+0x98>)
 8001146:	f002 fce7 	bl	8003b18 <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001150:	f001 fb9e 	bl	8002890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001154:	2304      	movs	r3, #4
 8001156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001158:	2301      	movs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_ADC3_Init+0x98>)
 8001166:	f002 fd1b 	bl	8003ba0 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001170:	f001 fb8e 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000c220 	.word	0x2000c220
 8001180:	40012200 	.word	0x40012200
 8001184:	0f000001 	.word	0x0f000001

08001188 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <MX_CAN1_Init+0xcc>)
 8001192:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001196:	2214      	movs	r2, #20
 8001198:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_CAN1_Init+0xc8>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <MX_CAN1_Init+0xc8>)
 80011da:	f002 ff25 	bl	8004028 <HAL_CAN_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011e4:	f001 fb54 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800120c:	230e      	movs	r3, #14
 800120e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001216:	f003 f803 	bl	8004220 <HAL_CAN_ConfigFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001220:	f001 fb36 	bl	8002890 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001226:	f003 f8db 	bl	80043e0 <HAL_CAN_Start>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001230:	f001 fb2e 	bl	8002890 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001234:	2102      	movs	r1, #2
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_CAN1_Init+0xc8>)
 8001238:	f003 fa28 	bl	800468c <HAL_CAN_ActivateNotification>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8001242:	f001 fb25 	bl	8002890 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000c4a0 	.word	0x2000c4a0
 8001254:	40006400 	.word	0x40006400

08001258 <getMapFromCanData>:

int getMapFromCanData(uint8_t* data, int startIndex)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	int map = (data[startIndex+1] << 8) | data[startIndex];
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	440a      	add	r2, r1
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
	return map;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <getRpmFromCanData>:

int getRpmFromCanData(uint8_t* data, int startIndex)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	int rpm = (data[startIndex+1] << 8) | data[startIndex];
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	440a      	add	r2, r1
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
	return rpm;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <getTpsFromCanData>:

int getTpsFromCanData(uint8_t* data, int startIndex)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	float tmpTps = (float)data[startIndex];
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d2:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpTps = tmpTps*0.5f;
 80012d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	edc7 7a03 	vstr	s15, [r7, #12]

	return (int)tmpTps;
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <getOilTempFromCanData>:
	int vehicleSpd = (data[startIndex+1] << 8) | data[startIndex];
	return vehicleSpd;
}

int getOilTempFromCanData(uint8_t* data, int startIndex)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	return data[startIndex];
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <getOilPressFromCanData>:

float getOilPressFromCanData(uint8_t* data, int startIndex)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	float tmpOilPress = (float)data[startIndex];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpOilPress = tmpOilPress * 0.0625f;
 800133a:	edd7 7a03 	vldr	s15, [r7, #12]
 800133e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001360 <getOilPressFromCanData+0x44>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpOilPress;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	3d800000 	.word	0x3d800000

08001364 <getFuelPressFromCanData>:

float getFuelPressFromCanData(uint8_t* data, int startIndex)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t tmpFuelPress = data[startIndex];
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	73fb      	strb	r3, [r7, #15]
	float fuelPress = tmpFuelPress * 0.03125f;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013a4 <getFuelPressFromCanData+0x40>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	edc7 7a02 	vstr	s15, [r7, #8]
	return fuelPress;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	ee07 3a90 	vmov	s15, r3
}
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	3d000000 	.word	0x3d000000

080013a8 <getCltFromCanData>:

int getCltFromCanData(uint8_t* data, int startIndex)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	int tmpClt = (data[6] << 0) | (data[7] << 8);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3306      	adds	r3, #6
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3307      	adds	r3, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
	return tmpClt;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <getBattVoltageFromCanData>:

float getBattVoltageFromCanData(uint8_t* data, int startIndex)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	 float tmpBattVoltage = (data[startIndex+1] << 8) | data[startIndex];
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	440a      	add	r2, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpBattVoltage = tmpBattVoltage*0.027f;
 8001400:	edd7 7a03 	vldr	s15, [r7, #12]
 8001404:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001424 <getBattVoltageFromCanData+0x50>
 8001408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140c:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpBattVoltage;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	ee07 3a90 	vmov	s15, r3
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	3cdd2f1b 	.word	0x3cdd2f1b

08001428 <getLambdaFromCanData>:

float getLambdaFromCanData(uint8_t* data, int startIndex)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	 float tmpLambda = (float)data[startIndex];
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001442:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpLambda = tmpLambda*0.0078125f;
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800146c <getLambdaFromCanData+0x44>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpLambda;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	ee07 3a90 	vmov	s15, r3
}
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	3c000000 	.word	0x3c000000

08001470 <getEgtFromCanData>:

float getEgtFromCanData(uint8_t* data, int startIndex)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	 float tmpEgt = (data[startIndex + 1] << 8) | data[startIndex];
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	440a      	add	r2, r1
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001498:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpEgt;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	ee07 3a90 	vmov	s15, r3
}
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <getLambdaTargetFromCanData>:

float getLambdaTargetFromCanData(uint8_t* data, int startIndex)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	float tmpLambdaTarget = (float)data[startIndex];
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ca:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpLambdaTarget = tmpLambdaTarget / 100.0f;
 80014ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80014f4 <getLambdaTargetFromCanData+0x44>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpLambdaTarget;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	ee07 3a90 	vmov	s15, r3
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	42c80000 	.word	0x42c80000

080014f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001502:	4a5a      	ldr	r2, [pc, #360]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001504:	2100      	movs	r1, #0
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f002 ffae 	bl	8004468 <HAL_CAN_GetRxMessage>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001512:	f001 f9bd 	bl	8002890 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001516:	4b55      	ldr	r3, [pc, #340]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800151e:	d121      	bne.n	8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11d      	bne.n	8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d119      	bne.n	8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
  {
	 rpm = getRpmFromCanData(RxData,0);
 8001530:	2100      	movs	r1, #0
 8001532:	484d      	ldr	r0, [pc, #308]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001534:	f7ff fea8 	bl	8001288 <getRpmFromCanData>
 8001538:	4602      	mov	r2, r0
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 800153c:	601a      	str	r2, [r3, #0]
	 tps = getTpsFromCanData(RxData,2);
 800153e:	2102      	movs	r1, #2
 8001540:	4849      	ldr	r0, [pc, #292]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001542:	f7ff feb9 	bl	80012b8 <getTpsFromCanData>
 8001546:	4602      	mov	r2, r0
 8001548:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800154a:	601a      	str	r2, [r3, #0]
	 iat = (int)RxData[3];
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	461a      	mov	r2, r3
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001554:	601a      	str	r2, [r3, #0]
	 map = getMapFromCanData(RxData,4);
 8001556:	2104      	movs	r1, #4
 8001558:	4843      	ldr	r0, [pc, #268]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800155a:	f7ff fe7d 	bl	8001258 <getMapFromCanData>
 800155e:	4602      	mov	r2, r0
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001562:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f240 6202 	movw	r2, #1538	; 0x602
 800156c:	4293      	cmp	r3, r2
 800156e:	d11e      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11a      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001578:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d116      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
  {
	 oilTemp = getOilTempFromCanData(RxData,3);
 8001580:	2103      	movs	r1, #3
 8001582:	4839      	ldr	r0, [pc, #228]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001584:	f7ff febb 	bl	80012fe <getOilTempFromCanData>
 8001588:	4602      	mov	r2, r0
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800158c:	601a      	str	r2, [r3, #0]
	 oilPress = getOilPressFromCanData(RxData,4);
 800158e:	2104      	movs	r1, #4
 8001590:	4835      	ldr	r0, [pc, #212]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001592:	f7ff fec3 	bl	800131c <getOilPressFromCanData>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800159c:	edc3 7a00 	vstr	s15, [r3]
	 clt = getCltFromCanData(RxData,6);
 80015a0:	2106      	movs	r1, #6
 80015a2:	4831      	ldr	r0, [pc, #196]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015a4:	f7ff ff00 	bl	80013a8 <getCltFromCanData>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f240 6203 	movw	r2, #1539	; 0x603
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d11c      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d114      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
  {
	 lambda = getLambdaFromCanData(RxData,2);
 80015ca:	2102      	movs	r1, #2
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015ce:	f7ff ff2b 	bl	8001428 <getLambdaFromCanData>
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]
	 egt = getEgtFromCanData(RxData, 4);
 80015dc:	2104      	movs	r1, #4
 80015de:	4822      	ldr	r0, [pc, #136]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015e0:	f7ff ff46 	bl	8001470 <getEgtFromCanData>
 80015e4:	eef0 7a40 	vmov.f32	s15, s0
 80015e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ec:	ee17 2a90 	vmov	r2, s15
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80015f2:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f240 6204 	movw	r2, #1540	; 0x604
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d110      	bne.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10c      	bne.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d108      	bne.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
  {
	 battVoltage = getBattVoltageFromCanData(RxData, 2);
 8001610:	2102      	movs	r1, #2
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001614:	f7ff fede 	bl	80013d4 <getBattVoltageFromCanData>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800162a:	d119      	bne.n	8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d115      	bne.n	8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d111      	bne.n	8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
  {
	  fuelPress = getFuelPressFromCanData(RxData,1);
 800163c:	2101      	movs	r1, #1
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001640:	f7ff fe90 	bl	8001364 <getFuelPressFromCanData>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800164a:	edc3 7a00 	vstr	s15, [r3]
	 lambdaTarget = getLambdaTargetFromCanData(RxData,7);
 800164e:	2107      	movs	r1, #7
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001652:	f7ff ff2d 	bl	80014b0 <getLambdaTargetFromCanData>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000c458 	.word	0x2000c458
 800166c:	2000c53c 	.word	0x2000c53c
 8001670:	20000004 	.word	0x20000004
 8001674:	20000398 	.word	0x20000398
 8001678:	20000394 	.word	0x20000394
 800167c:	20000008 	.word	0x20000008
 8001680:	200003a0 	.word	0x200003a0
 8001684:	200003a4 	.word	0x200003a4
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000010 	.word	0x20000010
 8001690:	200003b0 	.word	0x200003b0
 8001694:	200003ac 	.word	0x200003ac
 8001698:	200003a8 	.word	0x200003a8
 800169c:	20000014 	.word	0x20000014

080016a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_CRC_Init+0x3c>)
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <MX_CRC_Init+0x40>)
 80016a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_CRC_Init+0x3c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_CRC_Init+0x3c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_CRC_Init+0x3c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_CRC_Init+0x3c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_CRC_Init+0x3c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_CRC_Init+0x3c>)
 80016ca:	f003 fb41 	bl	8004d50 <HAL_CRC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016d4:	f001 f8dc 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000c050 	.word	0x2000c050
 80016e0:	40023000 	.word	0x40023000

080016e4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_DCMI_Init+0x60>)
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <MX_DCMI_Init+0x64>)
 80016ec:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_DCMI_Init+0x60>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_DCMI_Init+0x60>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_DCMI_Init+0x60>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_DCMI_Init+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_DCMI_Init+0x60>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <MX_DCMI_Init+0x60>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DCMI_Init+0x60>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_DCMI_Init+0x60>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_DCMI_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_DCMI_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_DCMI_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_DCMI_Init+0x60>)
 8001732:	f003 fbf7 	bl	8004f24 <HAL_DCMI_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800173c:	f001 f8a8 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000c268 	.word	0x2000c268
 8001748:	50050000 	.word	0x50050000

0800174c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <MX_DMA2D_Init+0x60>)
 8001754:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001776:	2200      	movs	r2, #0
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001782:	f003 fce3 	bl	800514c <HAL_DMA2D_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800178c:	f001 f880 	bl	8002890 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001790:	2101      	movs	r1, #1
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_DMA2D_Init+0x5c>)
 8001794:	f003 ffa4 	bl	80056e0 <HAL_DMA2D_ConfigLayer>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800179e:	f001 f877 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000c418 	.word	0x2000c418
 80017ac:	4002b000 	.word	0x4002b000

080017b0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2234      	movs	r2, #52	; 0x34
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f024 f886 	bl	80258ce <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <MX_LTDC_Init+0x100>)
 80017c6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017da:	4b34      	ldr	r3, [pc, #208]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017e8:	2209      	movs	r2, #9
 80017ea:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017ee:	2235      	movs	r2, #53	; 0x35
 80017f0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017f4:	220b      	movs	r2, #11
 80017f6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <MX_LTDC_Init+0xfc>)
 80017fa:	f240 2215 	movw	r2, #533	; 0x215
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_LTDC_Init+0xfc>)
 8001802:	f240 121b 	movw	r2, #283	; 0x11b
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_LTDC_Init+0xfc>)
 800180a:	f240 2235 	movw	r2, #565	; 0x235
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MX_LTDC_Init+0xfc>)
 8001812:	f240 121d 	movw	r2, #285	; 0x11d
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <MX_LTDC_Init+0xfc>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_LTDC_Init+0xfc>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_LTDC_Init+0xfc>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001830:	481e      	ldr	r0, [pc, #120]	; (80018ac <MX_LTDC_Init+0xfc>)
 8001832:	f004 fa5f 	bl	8005cf4 <HAL_LTDC_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800183c:	f001 f828 	bl	8002890 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001844:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001848:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800184e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001852:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001858:	23ff      	movs	r3, #255	; 0xff
 800185a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001866:	2305      	movs	r3, #5
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800186a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001870:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001876:	f44f 7388 	mov.w	r3, #272	; 0x110
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_LTDC_Init+0xfc>)
 8001896:	f004 fbb5 	bl	8006004 <HAL_LTDC_ConfigLayer>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80018a0:	f000 fff6 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000c178 	.word	0x2000c178
 80018b0:	40016800 	.word	0x40016800

080018b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <MX_QUADSPI_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_QUADSPI_Init+0x50>)
 80018f0:	f004 fdf8 	bl	80064e4 <HAL_QSPI_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018fa:	f000 ffc9 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000c558 	.word	0x2000c558
 8001908:	a0001000 	.word	0xa0001000

0800190c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b092      	sub	sp, #72	; 0x48
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001928:	463b      	mov	r3, r7
 800192a:	222c      	movs	r2, #44	; 0x2c
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f023 ffcd 	bl	80258ce <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <MX_RTC_Init+0x148>)
 8001936:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <MX_RTC_Init+0x14c>)
 8001938:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800193a:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <MX_RTC_Init+0x148>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <MX_RTC_Init+0x148>)
 8001942:	227f      	movs	r2, #127	; 0x7f
 8001944:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <MX_RTC_Init+0x148>)
 8001948:	22ff      	movs	r2, #255	; 0xff
 800194a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800194c:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <MX_RTC_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <MX_RTC_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <MX_RTC_Init+0x148>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195e:	483d      	ldr	r0, [pc, #244]	; (8001a54 <MX_RTC_Init+0x148>)
 8001960:	f006 f84c 	bl	80079fc <HAL_RTC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800196a:	f000 ff91 	bl	8002890 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	4830      	ldr	r0, [pc, #192]	; (8001a54 <MX_RTC_Init+0x148>)
 8001992:	f006 f8af 	bl	8007af4 <HAL_RTC_SetTime>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800199c:	f000 ff78 	bl	8002890 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019bc:	2201      	movs	r2, #1
 80019be:	4619      	mov	r1, r3
 80019c0:	4824      	ldr	r0, [pc, #144]	; (8001a54 <MX_RTC_Init+0x148>)
 80019c2:	f006 f955 	bl	8007c70 <HAL_RTC_SetDate>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019cc:	f000 ff60 	bl	8002890 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019d8:	2300      	movs	r3, #0
 80019da:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	2201      	movs	r2, #1
 8001a04:	4619      	mov	r1, r3
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <MX_RTC_Init+0x148>)
 8001a08:	f006 f9da 	bl	8007dc0 <HAL_RTC_SetAlarm>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a12:	f000 ff3d 	bl	8002890 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <MX_RTC_Init+0x148>)
 8001a2a:	f006 f9c9 	bl	8007dc0 <HAL_RTC_SetAlarm>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001a34:	f000 ff2c 	bl	8002890 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a38:	2202      	movs	r2, #2
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_RTC_Init+0x148>)
 8001a3e:	f006 fb49 	bl	80080d4 <HAL_RTCEx_SetTimeStamp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001a48:	f000 ff22 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3748      	adds	r7, #72	; 0x48
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000c338 	.word	0x2000c338
 8001a58:	40002800 	.word	0x40002800

08001a5c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a62:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <MX_SAI2_Init+0x140>)
 8001a64:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a66:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a72:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a78:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a8a:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a90:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <MX_SAI2_Init+0x144>)
 8001aa0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001abc:	2208      	movs	r2, #8
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001af0:	4829      	ldr	r0, [pc, #164]	; (8001b98 <MX_SAI2_Init+0x13c>)
 8001af2:	f006 fb45 	bl	8008180 <HAL_SAI_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001afc:	f000 fec8 	bl	8002890 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b02:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <MX_SAI2_Init+0x14c>)
 8001b04:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b0e:	2203      	movs	r2, #3
 8001b10:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b50:	2208      	movs	r2, #8
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b84:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <MX_SAI2_Init+0x148>)
 8001b86:	f006 fafb 	bl	8008180 <HAL_SAI_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001b90:	f000 fe7e 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000bfcc 	.word	0x2000bfcc
 8001b9c:	40015c04 	.word	0x40015c04
 8001ba0:	0002ee00 	.word	0x0002ee00
 8001ba4:	2000be50 	.word	0x2000be50
 8001ba8:	40015c24 	.word	0x40015c24

08001bac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <MX_SDMMC1_SD_Init+0x3c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <MX_SDMMC1_SD_Init+0x38>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	2000c074 	.word	0x2000c074
 8001be8:	40012c00 	.word	0x40012c00

08001bec <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001bf2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bf6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_SPDIFRX_Init+0x5c>)
 8001c36:	f007 fd37 	bl	80096a8 <HAL_SPDIFRX_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c40:	f000 fe26 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000bf80 	.word	0x2000bf80

08001c4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <MX_SPI2_Init+0x78>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_SPI2_Init+0x74>)
 8001cac:	f007 fd58 	bl	8009760 <HAL_SPI_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f000 fdeb 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000bedc 	.word	0x2000bedc
 8001cc4:	40003800 	.word	0x40003800

08001cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09a      	sub	sp, #104	; 0x68
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	222c      	movs	r2, #44	; 0x2c
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f023 fde3 	bl	80258ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d0a:	4a44      	ldr	r2, [pc, #272]	; (8001e1c <MX_TIM1_Init+0x154>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d0e:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d32:	4839      	ldr	r0, [pc, #228]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d34:	f007 fda6 	bl	8009884 <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d3e:	f000 fda7 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4832      	ldr	r0, [pc, #200]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d50:	f008 f850 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d5a:	f000 fd99 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d5e:	482e      	ldr	r0, [pc, #184]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d60:	f007 fde6 	bl	8009930 <HAL_TIM_PWM_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d6a:	f000 fd91 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4825      	ldr	r0, [pc, #148]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001d82:	f008 fcb1 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d8c:	f000 fd80 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d90:	2360      	movs	r3, #96	; 0x60
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db0:	2200      	movs	r2, #0
 8001db2:	4619      	mov	r1, r3
 8001db4:	4818      	ldr	r0, [pc, #96]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001db6:	f007 ff05 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dc0:	f000 fd66 	bl	8002890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ddc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001dfa:	f008 fd03 	bl	800a804 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e04:	f000 fd44 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM1_Init+0x150>)
 8001e0a:	f001 fa3b 	bl	8003284 <HAL_TIM_MspPostInit>

}
 8001e0e:	bf00      	nop
 8001e10:	3768      	adds	r7, #104	; 0x68
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000c358 	.word	0x2000c358
 8001e1c:	40010000 	.word	0x40010000

08001e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e78:	4823      	ldr	r0, [pc, #140]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e7a:	f007 fd03 	bl	8009884 <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e84:	f000 fd04 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e92:	4619      	mov	r1, r3
 8001e94:	481c      	ldr	r0, [pc, #112]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001e96:	f007 ffad 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ea0:	f000 fcf6 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea4:	4818      	ldr	r0, [pc, #96]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001ea6:	f007 fd43 	bl	8009930 <HAL_TIM_PWM_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001eb0:	f000 fcee 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4811      	ldr	r0, [pc, #68]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001ec4:	f008 fc10 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ece:	f000 fcdf 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed2:	2360      	movs	r3, #96	; 0x60
 8001ed4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001eea:	f007 fe6b 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ef4:	f000 fccc 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <MX_TIM2_Init+0xe8>)
 8001efa:	f001 f9c3 	bl	8003284 <HAL_TIM_MspPostInit>

}
 8001efe:	bf00      	nop
 8001f00:	3738      	adds	r7, #56	; 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000c460 	.word	0x2000c460

08001f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	; 0x38
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f40:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <MX_TIM3_Init+0xe8>)
 8001f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f62:	4823      	ldr	r0, [pc, #140]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f64:	f007 fc8e 	bl	8009884 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f6e:	f000 fc8f 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f80:	f007 ff38 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f8a:	f000 fc81 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001f90:	f007 fcce 	bl	8009930 <HAL_TIM_PWM_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f9a:	f000 fc79 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001fae:	f008 fb9b 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fb8:	f000 fc6a 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fbc:	2360      	movs	r3, #96	; 0x60
 8001fbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001fd4:	f007 fdf6 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001fde:	f000 fc57 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fe2:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM3_Init+0xe4>)
 8001fe4:	f001 f94e 	bl	8003284 <HAL_TIM_MspPostInit>

}
 8001fe8:	bf00      	nop
 8001fea:	3738      	adds	r7, #56	; 0x38
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000c138 	.word	0x2000c138
 8001ff4:	40000400 	.word	0x40000400

08001ff8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <MX_TIM5_Init+0xe4>)
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <MX_TIM5_Init+0xe8>)
 800202e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_TIM5_Init+0xe4>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <MX_TIM5_Init+0xe4>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <MX_TIM5_Init+0xe4>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <MX_TIM5_Init+0xe4>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MX_TIM5_Init+0xe4>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800204e:	4823      	ldr	r0, [pc, #140]	; (80020dc <MX_TIM5_Init+0xe4>)
 8002050:	f007 fc18 	bl	8009884 <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800205a:	f000 fc19 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002068:	4619      	mov	r1, r3
 800206a:	481c      	ldr	r0, [pc, #112]	; (80020dc <MX_TIM5_Init+0xe4>)
 800206c:	f007 fec2 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002076:	f000 fc0b 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800207a:	4818      	ldr	r0, [pc, #96]	; (80020dc <MX_TIM5_Init+0xe4>)
 800207c:	f007 fc58 	bl	8009930 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002086:	f000 fc03 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	4810      	ldr	r0, [pc, #64]	; (80020dc <MX_TIM5_Init+0xe4>)
 800209a:	f008 fb25 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020a4:	f000 fbf4 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a8:	2360      	movs	r3, #96	; 0x60
 80020aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	220c      	movs	r2, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM5_Init+0xe4>)
 80020c0:	f007 fd80 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020ca:	f000 fbe1 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM5_Init+0xe4>)
 80020d0:	f001 f8d8 	bl	8003284 <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000c0f8 	.word	0x2000c0f8
 80020e0:	40000c00 	.word	0x40000c00

080020e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <MX_TIM8_Init+0x9c>)
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_TIM8_Init+0xa0>)
 8002106:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM8_Init+0x9c>)
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM8_Init+0x9c>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM8_Init+0x9c>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_TIM8_Init+0x9c>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_TIM8_Init+0x9c>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM8_Init+0x9c>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800212c:	4814      	ldr	r0, [pc, #80]	; (8002180 <MX_TIM8_Init+0x9c>)
 800212e:	f007 fba9 	bl	8009884 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002138:	f000 fbaa 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_TIM8_Init+0x9c>)
 800214a:	f007 fe53 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002154:	f000 fb9c 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM8_Init+0x9c>)
 800216a:	f008 fabd 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002174:	f000 fb8c 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000bf40 	.word	0x2000bf40
 8002184:	40010400 	.word	0x40010400

08002188 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	615a      	str	r2, [r3, #20]
 800219e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_TIM12_Init+0x80>)
 80021a2:	4a1a      	ldr	r2, [pc, #104]	; (800220c <MX_TIM12_Init+0x84>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_TIM12_Init+0x80>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_TIM12_Init+0x80>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_TIM12_Init+0x80>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <MX_TIM12_Init+0x80>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_TIM12_Init+0x80>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80021c4:	4810      	ldr	r0, [pc, #64]	; (8002208 <MX_TIM12_Init+0x80>)
 80021c6:	f007 fbb3 	bl	8009930 <HAL_TIM_PWM_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80021d0:	f000 fb5e 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d4:	2360      	movs	r3, #96	; 0x60
 80021d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	4619      	mov	r1, r3
 80021ea:	4807      	ldr	r0, [pc, #28]	; (8002208 <MX_TIM12_Init+0x80>)
 80021ec:	f007 fcea 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80021f6:	f000 fb4b 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <MX_TIM12_Init+0x80>)
 80021fc:	f001 f842 	bl	8003284 <HAL_TIM_MspPostInit>

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000c4c8 	.word	0x2000c4c8
 800220c:	40001800 	.word	0x40001800

08002210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <MX_USART1_UART_Init+0x5c>)
 8002218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <MX_USART1_UART_Init+0x58>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <MX_USART1_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART1_UART_Init+0x58>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART1_UART_Init+0x58>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART1_UART_Init+0x58>)
 8002254:	f008 fb72 	bl	800a93c <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800225e:	f000 fb17 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000c2b8 	.word	0x2000c2b8
 800226c:	40011000 	.word	0x40011000

08002270 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <MX_USART6_UART_Init+0x5c>)
 8002278:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART6_UART_Init+0x58>)
 80022b4:	f008 fb42 	bl	800a93c <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80022be:	f000 fae7 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000c398 	.word	0x2000c398
 80022cc:	40011400 	.word	0x40011400

080022d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	615a      	str	r2, [r3, #20]
 80022e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <MX_FMC_Init+0x14c>)
 80022ea:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <MX_FMC_Init+0x150>)
 80022ec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <MX_FMC_Init+0x14c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022f4:	4b49      	ldr	r3, [pc, #292]	; (800241c <MX_FMC_Init+0x14c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <MX_FMC_Init+0x14c>)
 80022fc:	2204      	movs	r2, #4
 80022fe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <MX_FMC_Init+0x14c>)
 8002302:	2210      	movs	r2, #16
 8002304:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <MX_FMC_Init+0x14c>)
 8002308:	2240      	movs	r2, #64	; 0x40
 800230a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <MX_FMC_Init+0x14c>)
 800230e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002312:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <MX_FMC_Init+0x14c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <MX_FMC_Init+0x14c>)
 800231c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002320:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <MX_FMC_Init+0x14c>)
 8002324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800232a:	4b3c      	ldr	r3, [pc, #240]	; (800241c <MX_FMC_Init+0x14c>)
 800232c:	2200      	movs	r2, #0
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002330:	2302      	movs	r3, #2
 8002332:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002334:	2307      	movs	r3, #7
 8002336:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002338:	2304      	movs	r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800233c:	2307      	movs	r3, #7
 800233e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002340:	2303      	movs	r3, #3
 8002342:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002348:	2302      	movs	r3, #2
 800234a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4832      	ldr	r0, [pc, #200]	; (800241c <MX_FMC_Init+0x14c>)
 8002352:	f007 f929 	bl	80095a8 <HAL_SDRAM_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800235c:	f000 fa98 	bl	8002890 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <MX_FMC_Init+0x154>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <MX_FMC_Init+0x154>)
 800236c:	2210      	movs	r2, #16
 800236e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <MX_FMC_Init+0x154>)
 8002372:	2201      	movs	r2, #1
 8002374:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <MX_FMC_Init+0x154>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	4928      	ldr	r1, [pc, #160]	; (8002424 <MX_FMC_Init+0x154>)
 8002382:	4826      	ldr	r0, [pc, #152]	; (800241c <MX_FMC_Init+0x14c>)
 8002384:	f007 f944 	bl	8009610 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f001 fba3 	bl	8003ad4 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MX_FMC_Init+0x154>)
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <MX_FMC_Init+0x154>)
 8002396:	2210      	movs	r2, #16
 8002398:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <MX_FMC_Init+0x154>)
 800239c:	2201      	movs	r2, #1
 800239e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <MX_FMC_Init+0x154>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023aa:	491e      	ldr	r1, [pc, #120]	; (8002424 <MX_FMC_Init+0x154>)
 80023ac:	481b      	ldr	r0, [pc, #108]	; (800241c <MX_FMC_Init+0x14c>)
 80023ae:	f007 f92f 	bl	8009610 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_FMC_Init+0x154>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_FMC_Init+0x154>)
 80023ba:	2210      	movs	r2, #16
 80023bc:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <MX_FMC_Init+0x154>)
 80023c0:	2208      	movs	r2, #8
 80023c2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MX_FMC_Init+0x154>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ce:	4915      	ldr	r1, [pc, #84]	; (8002424 <MX_FMC_Init+0x154>)
 80023d0:	4812      	ldr	r0, [pc, #72]	; (800241c <MX_FMC_Init+0x14c>)
 80023d2:	f007 f91d 	bl	8009610 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80023d6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80023da:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_FMC_Init+0x154>)
 80023de:	2204      	movs	r2, #4
 80023e0:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_FMC_Init+0x154>)
 80023e4:	2210      	movs	r2, #16
 80023e6:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_FMC_Init+0x154>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <MX_FMC_Init+0x154>)
 80023f2:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f8:	490a      	ldr	r1, [pc, #40]	; (8002424 <MX_FMC_Init+0x154>)
 80023fa:	4808      	ldr	r0, [pc, #32]	; (800241c <MX_FMC_Init+0x14c>)
 80023fc:	f007 f908 	bl	8009610 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002400:	f240 712b 	movw	r1, #1835	; 0x72b
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_FMC_Init+0x14c>)
 8002406:	f007 f92e 	bl	8009666 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800240a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800240e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002412:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000c508 	.word	0x2000c508
 8002420:	a0000140 	.word	0xa0000140
 8002424:	20000384 	.word	0x20000384

08002428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b090      	sub	sp, #64	; 0x40
 800242c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243e:	4baf      	ldr	r3, [pc, #700]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4aae      	ldr	r2, [pc, #696]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4bac      	ldr	r3, [pc, #688]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002456:	4ba9      	ldr	r3, [pc, #676]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4aa8      	ldr	r2, [pc, #672]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800245c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4ba6      	ldr	r3, [pc, #664]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4aa2      	ldr	r2, [pc, #648]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002486:	4b9d      	ldr	r3, [pc, #628]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a9c      	ldr	r2, [pc, #624]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b9a      	ldr	r3, [pc, #616]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	4b97      	ldr	r3, [pc, #604]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a96      	ldr	r2, [pc, #600]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b94      	ldr	r3, [pc, #592]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a90      	ldr	r2, [pc, #576]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b8e      	ldr	r3, [pc, #568]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024ce:	4b8b      	ldr	r3, [pc, #556]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024e6:	4b85      	ldr	r3, [pc, #532]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a84      	ldr	r2, [pc, #528]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <MX_GPIO_Init+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	4b79      	ldr	r3, [pc, #484]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a78      	ldr	r2, [pc, #480]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <MX_GPIO_Init+0x2d4>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <MX_GPIO_Init+0x2d4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2120      	movs	r1, #32
 800254a:	486d      	ldr	r0, [pc, #436]	; (8002700 <MX_GPIO_Init+0x2d8>)
 800254c:	f003 fbb8 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	210c      	movs	r1, #12
 8002554:	486b      	ldr	r0, [pc, #428]	; (8002704 <MX_GPIO_Init+0x2dc>)
 8002556:	f003 fbb3 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800255a:	2201      	movs	r2, #1
 800255c:	2108      	movs	r1, #8
 800255e:	486a      	ldr	r0, [pc, #424]	; (8002708 <MX_GPIO_Init+0x2e0>)
 8002560:	f003 fbae 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256a:	4866      	ldr	r0, [pc, #408]	; (8002704 <MX_GPIO_Init+0x2dc>)
 800256c:	f003 fba8 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002576:	4865      	ldr	r0, [pc, #404]	; (800270c <MX_GPIO_Init+0x2e4>)
 8002578:	f003 fba2 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	21c8      	movs	r1, #200	; 0xc8
 8002580:	4863      	ldr	r0, [pc, #396]	; (8002710 <MX_GPIO_Init+0x2e8>)
 8002582:	f003 fb9d 	bl	8005cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002586:	2308      	movs	r3, #8
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002596:	4619      	mov	r1, r3
 8002598:	485e      	ldr	r0, [pc, #376]	; (8002714 <MX_GPIO_Init+0x2ec>)
 800259a:	f003 f9cf 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800259e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b0:	230b      	movs	r3, #11
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	4619      	mov	r1, r3
 80025ba:	4855      	ldr	r0, [pc, #340]	; (8002710 <MX_GPIO_Init+0x2e8>)
 80025bc:	f003 f9be 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80025c0:	f643 4323 	movw	r3, #15395	; 0x3c23
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025d2:	230a      	movs	r3, #10
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	484e      	ldr	r0, [pc, #312]	; (8002718 <MX_GPIO_Init+0x2f0>)
 80025de:	f003 f9ad 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f4:	4619      	mov	r1, r3
 80025f6:	4849      	ldr	r0, [pc, #292]	; (800271c <MX_GPIO_Init+0x2f4>)
 80025f8:	f003 f9a0 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <MX_GPIO_Init+0x2f8>)
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	483c      	ldr	r0, [pc, #240]	; (8002700 <MX_GPIO_Init+0x2d8>)
 8002610:	f003 f994 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002614:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002626:	230a      	movs	r3, #10
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262e:	4619      	mov	r1, r3
 8002630:	483c      	ldr	r0, [pc, #240]	; (8002724 <MX_GPIO_Init+0x2fc>)
 8002632:	f003 f983 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002636:	2320      	movs	r3, #32
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264a:	4619      	mov	r1, r3
 800264c:	482c      	ldr	r0, [pc, #176]	; (8002700 <MX_GPIO_Init+0x2d8>)
 800264e:	f003 f975 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002652:	f241 030c 	movw	r3, #4108	; 0x100c
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	4826      	ldr	r0, [pc, #152]	; (8002704 <MX_GPIO_Init+0x2dc>)
 800266c:	f003 f966 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002682:	4619      	mov	r1, r3
 8002684:	4828      	ldr	r0, [pc, #160]	; (8002728 <MX_GPIO_Init+0x300>)
 8002686:	f003 f959 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800268a:	2308      	movs	r3, #8
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269e:	4619      	mov	r1, r3
 80026a0:	4819      	ldr	r0, [pc, #100]	; (8002708 <MX_GPIO_Init+0x2e0>)
 80026a2:	f003 f94b 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80026a6:	2310      	movs	r3, #16
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	4811      	ldr	r0, [pc, #68]	; (8002700 <MX_GPIO_Init+0x2d8>)
 80026ba:	f003 f93f 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80026be:	f248 0304 	movw	r3, #32772	; 0x8004
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d0:	4619      	mov	r1, r3
 80026d2:	480e      	ldr	r0, [pc, #56]	; (800270c <MX_GPIO_Init+0x2e4>)
 80026d4:	f003 f932 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80026d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ee:	4619      	mov	r1, r3
 80026f0:	4806      	ldr	r0, [pc, #24]	; (800270c <MX_GPIO_Init+0x2e4>)
 80026f2:	f003 f923 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80026f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fa:	e017      	b.n	800272c <MX_GPIO_Init+0x304>
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40022000 	.word	0x40022000
 8002708:	40022800 	.word	0x40022800
 800270c:	40021c00 	.word	0x40021c00
 8002710:	40021800 	.word	0x40021800
 8002714:	40021000 	.word	0x40021000
 8002718:	40020400 	.word	0x40020400
 800271c:	40022400 	.word	0x40022400
 8002720:	10120000 	.word	0x10120000
 8002724:	40020000 	.word	0x40020000
 8002728:	40020800 	.word	0x40020800
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <MX_GPIO_Init+0x418>)
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273a:	4619      	mov	r1, r3
 800273c:	4841      	ldr	r0, [pc, #260]	; (8002844 <MX_GPIO_Init+0x41c>)
 800273e:	f003 f8fd 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002742:	2310      	movs	r3, #16
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002752:	230a      	movs	r3, #10
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275a:	4619      	mov	r1, r3
 800275c:	483a      	ldr	r0, [pc, #232]	; (8002848 <MX_GPIO_Init+0x420>)
 800275e:	f003 f8ed 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002762:	23c8      	movs	r3, #200	; 0xc8
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002776:	4619      	mov	r1, r3
 8002778:	4834      	ldr	r0, [pc, #208]	; (800284c <MX_GPIO_Init+0x424>)
 800277a:	f003 f8df 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800277e:	2305      	movs	r3, #5
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800278e:	230a      	movs	r3, #10
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002796:	4619      	mov	r1, r3
 8002798:	482d      	ldr	r0, [pc, #180]	; (8002850 <MX_GPIO_Init+0x428>)
 800279a:	f003 f8cf 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800279e:	2332      	movs	r3, #50	; 0x32
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027ae:	230b      	movs	r3, #11
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b6:	4619      	mov	r1, r3
 80027b8:	4825      	ldr	r0, [pc, #148]	; (8002850 <MX_GPIO_Init+0x428>)
 80027ba:	f003 f8bf 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80027be:	2304      	movs	r3, #4
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	481e      	ldr	r0, [pc, #120]	; (800284c <MX_GPIO_Init+0x424>)
 80027d2:	f003 f8b3 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027d6:	2386      	movs	r3, #134	; 0x86
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027e6:	230b      	movs	r3, #11
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ee:	4619      	mov	r1, r3
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <MX_GPIO_Init+0x42c>)
 80027f2:	f003 f8a3 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80027f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fc:	2312      	movs	r3, #18
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002800:	2301      	movs	r3, #1
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002808:	2304      	movs	r3, #4
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800280c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002810:	4619      	mov	r1, r3
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <MX_GPIO_Init+0x420>)
 8002814:	f003 f892 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002818:	2328      	movs	r3, #40	; 0x28
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002828:	230a      	movs	r3, #10
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	4808      	ldr	r0, [pc, #32]	; (8002854 <MX_GPIO_Init+0x42c>)
 8002834:	f003 f882 	bl	800593c <HAL_GPIO_Init>

}
 8002838:	bf00      	nop
 800283a:	3740      	adds	r7, #64	; 0x40
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	10120000 	.word	0x10120000
 8002844:	40022000 	.word	0x40022000
 8002848:	40021c00 	.word	0x40021c00
 800284c:	40021800 	.word	0x40021800
 8002850:	40020800 	.word	0x40020800
 8002854:	40020000 	.word	0x40020000

08002858 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002860:	f00c fba6 	bl	800efb0 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002864:	2001      	movs	r0, #1
 8002866:	f009 fe6d 	bl	800c544 <osDelay>
 800286a:	e7fb      	b.n	8002864 <StartDefaultTask+0xc>

0800286c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800287e:	f001 f909 	bl	8003a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40001000 	.word	0x40001000

08002890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_MspInit+0x4c>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_MspInit+0x4c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_MspInit+0x4c>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	210f      	movs	r1, #15
 80028da:	f06f 0001 	mvn.w	r0, #1
 80028de:	f002 f9ff 	bl	8004ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a21      	ldr	r2, [pc, #132]	; (8002994 <HAL_ADC_MspInit+0xa4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d13c      	bne.n	800298c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a14      	ldr	r2, [pc, #80]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_ADC_MspInit+0xa8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800295a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800295e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002960:	2303      	movs	r3, #3
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <HAL_ADC_MspInit+0xac>)
 8002970:	f002 ffe4 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002974:	2301      	movs	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002978:	2303      	movs	r3, #3
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	4806      	ldr	r0, [pc, #24]	; (80029a0 <HAL_ADC_MspInit+0xb0>)
 8002988:	f002 ffd8 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800298c:	bf00      	nop
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012200 	.word	0x40012200
 8002998:	40023800 	.word	0x40023800
 800299c:	40021400 	.word	0x40021400
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_CAN_MspInit+0x8c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d130      	bne.n	8002a28 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_CAN_MspInit+0x90>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a08:	2309      	movs	r3, #9
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <HAL_CAN_MspInit+0x94>)
 8002a14:	f002 ff92 	bl	800593c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	2014      	movs	r0, #20
 8002a1e:	f002 f95f 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a22:	2014      	movs	r0, #20
 8002a24:	f002 f978 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40006400 	.word	0x40006400
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_CRC_MspInit+0x38>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10b      	bne.n	8002a66 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_CRC_MspInit+0x3c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_CRC_MspInit+0x3c>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_CRC_MspInit+0x3c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023000 	.word	0x40023000
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_DCMI_MspInit+0x160>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f040 809a 	bne.w	8002bd4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	4a4e      	ldr	r2, [pc, #312]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6353      	str	r3, [r2, #52]	; 0x34
 8002aac:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab8:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad0:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_DCMI_MspInit+0x164>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b30:	2360      	movs	r3, #96	; 0x60
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b40:	230d      	movs	r3, #13
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4826      	ldr	r0, [pc, #152]	; (8002be4 <HAL_DCMI_MspInit+0x168>)
 8002b4c:	f002 fef6 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b50:	2308      	movs	r3, #8
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b60:	230d      	movs	r3, #13
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b68:	4619      	mov	r1, r3
 8002b6a:	481f      	ldr	r0, [pc, #124]	; (8002be8 <HAL_DCMI_MspInit+0x16c>)
 8002b6c:	f002 fee6 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b82:	230d      	movs	r3, #13
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4817      	ldr	r0, [pc, #92]	; (8002bec <HAL_DCMI_MspInit+0x170>)
 8002b8e:	f002 fed5 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002b92:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ba4:	230d      	movs	r3, #13
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <HAL_DCMI_MspInit+0x174>)
 8002bb0:	f002 fec4 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002bb4:	2350      	movs	r3, #80	; 0x50
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bc4:	230d      	movs	r3, #13
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <HAL_DCMI_MspInit+0x178>)
 8002bd0:	f002 feb4 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3738      	adds	r7, #56	; 0x38
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	50050000 	.word	0x50050000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021800 	.word	0x40021800
 8002bf0:	40021c00 	.word	0x40021c00
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <HAL_DMA2D_MspInit+0x44>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d113      	bne.n	8002c32 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_DMA2D_MspInit+0x48>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_DMA2D_MspInit+0x48>)
 8002c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_DMA2D_MspInit+0x48>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2105      	movs	r1, #5
 8002c26:	205a      	movs	r0, #90	; 0x5a
 8002c28:	f002 f85a 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c2c:	205a      	movs	r0, #90	; 0x5a
 8002c2e:	f002 f873 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	4002b000 	.word	0x4002b000
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_DMA2D_MspDeInit+0x2c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_DMA2D_MspDeInit+0x30>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <HAL_DMA2D_MspDeInit+0x30>)
 8002c5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002c62:	205a      	movs	r0, #90	; 0x5a
 8002c64:	f002 f866 	bl	8004d34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	4002b000 	.word	0x4002b000
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08e      	sub	sp, #56	; 0x38
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a55      	ldr	r2, [pc, #340]	; (8002dec <HAL_LTDC_MspInit+0x174>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f040 80a3 	bne.w	8002de2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca8:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb4:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ccc:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a47      	ldr	r2, [pc, #284]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d3c:	230e      	movs	r3, #14
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	482b      	ldr	r0, [pc, #172]	; (8002df4 <HAL_LTDC_MspInit+0x17c>)
 8002d48:	f002 fdf8 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002d4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d5e:	230e      	movs	r3, #14
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4823      	ldr	r0, [pc, #140]	; (8002df8 <HAL_LTDC_MspInit+0x180>)
 8002d6a:	f002 fde7 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002d6e:	23f7      	movs	r3, #247	; 0xf7
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d7e:	230e      	movs	r3, #14
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	4619      	mov	r1, r3
 8002d88:	481c      	ldr	r0, [pc, #112]	; (8002dfc <HAL_LTDC_MspInit+0x184>)
 8002d8a:	f002 fdd7 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002da0:	2309      	movs	r3, #9
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da8:	4619      	mov	r1, r3
 8002daa:	4815      	ldr	r0, [pc, #84]	; (8002e00 <HAL_LTDC_MspInit+0x188>)
 8002dac:	f002 fdc6 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002db0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dc2:	230e      	movs	r3, #14
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <HAL_LTDC_MspInit+0x18c>)
 8002dce:	f002 fdb5 	bl	800593c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2058      	movs	r0, #88	; 0x58
 8002dd8:	f001 ff82 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ddc:	2058      	movs	r0, #88	; 0x58
 8002dde:	f001 ff9b 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3738      	adds	r7, #56	; 0x38
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40016800 	.word	0x40016800
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40022800 	.word	0x40022800
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <HAL_QSPI_MspInit+0x10c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d170      	bne.n	8002f0c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6393      	str	r3, [r2, #56]	; 0x38
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	481d      	ldr	r0, [pc, #116]	; (8002f1c <HAL_QSPI_MspInit+0x114>)
 8002ea6:	f002 fd49 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002eba:	230a      	movs	r3, #10
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4816      	ldr	r0, [pc, #88]	; (8002f20 <HAL_QSPI_MspInit+0x118>)
 8002ec6:	f002 fd39 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002eda:	2309      	movs	r3, #9
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 031c 	add.w	r3, r7, #28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480e      	ldr	r0, [pc, #56]	; (8002f20 <HAL_QSPI_MspInit+0x118>)
 8002ee6:	f002 fd29 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002eea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002efc:	2309      	movs	r3, #9
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <HAL_QSPI_MspInit+0x11c>)
 8002f08:	f002 fd18 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	a0001000 	.word	0xa0001000
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020c00 	.word	0x40020c00

08002f28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_RTC_MspInit+0x2c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d105      	bne.n	8002f46 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RTC_MspInit+0x30>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_RTC_MspInit+0x30>)
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40002800 	.word	0x40002800
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_SD_MspInit+0xb4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d144      	bne.n	8003008 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_SD_MspInit+0xb8>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002fc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002fca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fd8:	230c      	movs	r3, #12
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <HAL_SD_MspInit+0xbc>)
 8002fe4:	f002 fcaa 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002fe8:	2304      	movs	r3, #4
 8002fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <HAL_SD_MspInit+0xc0>)
 8003004:	f002 fc9a 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40023800 	.word	0x40023800
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00

08003020 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003040:	d127      	bne.n	8003092 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_SPDIFRX_MspInit+0x7c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003082:	2308      	movs	r3, #8
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <HAL_SPDIFRX_MspInit+0x80>)
 800308e:	f002 fc55 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	; 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020c00 	.word	0x40020c00

080030a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <HAL_SPI_MspInit+0xb4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d144      	bne.n	8003150 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a24      	ldr	r2, [pc, #144]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_SPI_MspInit+0xb8>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_SPI_MspInit+0xb8>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800310e:	2302      	movs	r3, #2
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800311e:	2305      	movs	r3, #5
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <HAL_SPI_MspInit+0xbc>)
 800312a:	f002 fc07 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800312e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003140:	2305      	movs	r3, #5
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	4806      	ldr	r0, [pc, #24]	; (8003164 <HAL_SPI_MspInit+0xc0>)
 800314c:	f002 fbf6 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40003800 	.word	0x40003800
 800315c:	40023800 	.word	0x40023800
 8003160:	40022000 	.word	0x40022000
 8003164:	40020400 	.word	0x40020400

08003168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	; (8003230 <HAL_TIM_Base_MspInit+0xc8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10c      	bne.n	8003194 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800317a:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003192:	e046      	b.n	8003222 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d10c      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
}
 80031b6:	e034      	b.n	8003222 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_TIM_Base_MspInit+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
}
 80031da:	e022      	b.n	8003222 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_TIM_Base_MspInit+0xd4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10c      	bne.n	8003200 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
}
 80031fe:	e010      	b.n	8003222 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <HAL_TIM_Base_MspInit+0xd8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10b      	bne.n	8003222 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_TIM_Base_MspInit+0xcc>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
}
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40023800 	.word	0x40023800
 8003238:	40000400 	.word	0x40000400
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_TIM_PWM_MspInit+0x38>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10b      	bne.n	800326e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_TIM_PWM_MspInit+0x3c>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_TIM_PWM_MspInit+0x3c>)
 800325c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_TIM_PWM_MspInit+0x3c>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40001800 	.word	0x40001800
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a56      	ldr	r2, [pc, #344]	; (80033fc <HAL_TIM_MspPostInit+0x178>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d11d      	bne.n	80032e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80032be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	4619      	mov	r1, r3
 80032da:	484a      	ldr	r0, [pc, #296]	; (8003404 <HAL_TIM_MspPostInit+0x180>)
 80032dc:	f002 fb2e 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80032e0:	e087      	b.n	80033f2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d11d      	bne.n	8003328 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ec:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4a43      	ldr	r2, [pc, #268]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6313      	str	r3, [r2, #48]	; 0x30
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003316:	2301      	movs	r3, #1
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800331a:	f107 031c 	add.w	r3, r7, #28
 800331e:	4619      	mov	r1, r3
 8003320:	4838      	ldr	r0, [pc, #224]	; (8003404 <HAL_TIM_MspPostInit+0x180>)
 8003322:	f002 fb0b 	bl	800593c <HAL_GPIO_Init>
}
 8003326:	e064      	b.n	80033f2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a36      	ldr	r2, [pc, #216]	; (8003408 <HAL_TIM_MspPostInit+0x184>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d11c      	bne.n	800336c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a32      	ldr	r2, [pc, #200]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800334a:	2310      	movs	r3, #16
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800335a:	2302      	movs	r3, #2
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	4829      	ldr	r0, [pc, #164]	; (800340c <HAL_TIM_MspPostInit+0x188>)
 8003366:	f002 fae9 	bl	800593c <HAL_GPIO_Init>
}
 800336a:	e042      	b.n	80033f2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a27      	ldr	r2, [pc, #156]	; (8003410 <HAL_TIM_MspPostInit+0x18c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11c      	bne.n	80033b0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800338e:	2301      	movs	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800339e:	2302      	movs	r3, #2
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <HAL_TIM_MspPostInit+0x190>)
 80033aa:	f002 fac7 	bl	800593c <HAL_GPIO_Init>
}
 80033ae:	e020      	b.n	80033f2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIM_MspPostInit+0x194>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11b      	bne.n	80033f2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_TIM_MspPostInit+0x17c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80033d2:	2340      	movs	r3, #64	; 0x40
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80033e2:	2309      	movs	r3, #9
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <HAL_TIM_MspPostInit+0x198>)
 80033ee:	f002 faa5 	bl	800593c <HAL_GPIO_Init>
}
 80033f2:	bf00      	nop
 80033f4:	3730      	adds	r7, #48	; 0x30
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000
 8003408:	40000400 	.word	0x40000400
 800340c:	40020400 	.word	0x40020400
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40022000 	.word	0x40022000
 8003418:	40001800 	.word	0x40001800
 800341c:	40021c00 	.word	0x40021c00

08003420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <HAL_UART_MspInit+0x110>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d145      	bne.n	80034ce <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003442:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a3b      	ldr	r2, [pc, #236]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_UART_MspInit+0x114>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a35      	ldr	r2, [pc, #212]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b33      	ldr	r3, [pc, #204]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800349a:	2307      	movs	r3, #7
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4824      	ldr	r0, [pc, #144]	; (8003538 <HAL_UART_MspInit+0x118>)
 80034a6:	f002 fa49 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034bc:	2307      	movs	r3, #7
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4619      	mov	r1, r3
 80034c6:	481d      	ldr	r0, [pc, #116]	; (800353c <HAL_UART_MspInit+0x11c>)
 80034c8:	f002 fa38 	bl	800593c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034cc:	e02c      	b.n	8003528 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_UART_MspInit+0x120>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d127      	bne.n	8003528 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034de:	f043 0320 	orr.w	r3, r3, #32
 80034e2:	6453      	str	r3, [r2, #68]	; 0x44
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6313      	str	r3, [r2, #48]	; 0x30
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003518:	2308      	movs	r3, #8
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	4619      	mov	r1, r3
 8003522:	4808      	ldr	r0, [pc, #32]	; (8003544 <HAL_UART_MspInit+0x124>)
 8003524:	f002 fa0a 	bl	800593c <HAL_GPIO_Init>
}
 8003528:	bf00      	nop
 800352a:	3730      	adds	r7, #48	; 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40011000 	.word	0x40011000
 8003534:	40023800 	.word	0x40023800
 8003538:	40020400 	.word	0x40020400
 800353c:	40020000 	.word	0x40020000
 8003540:	40011400 	.word	0x40011400
 8003544:	40020800 	.word	0x40020800

08003548 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800355c:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_FMC_MspInit+0x100>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d16d      	bne.n	8003640 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_FMC_MspInit+0x100>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_FMC_MspInit+0x104>)
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <HAL_FMC_MspInit+0x104>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6393      	str	r3, [r2, #56]	; 0x38
 8003576:	4b35      	ldr	r3, [pc, #212]	; (800364c <HAL_FMC_MspInit+0x104>)
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003582:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003586:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003594:	230c      	movs	r3, #12
 8003596:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	4619      	mov	r1, r3
 800359c:	482c      	ldr	r0, [pc, #176]	; (8003650 <HAL_FMC_MspInit+0x108>)
 800359e:	f002 f9cd 	bl	800593c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80035a2:	f248 1333 	movw	r3, #33075	; 0x8133
 80035a6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	2303      	movs	r3, #3
 80035b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035b4:	230c      	movs	r3, #12
 80035b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4825      	ldr	r0, [pc, #148]	; (8003654 <HAL_FMC_MspInit+0x10c>)
 80035be:	f002 f9bd 	bl	800593c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80035c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035c6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d0:	2303      	movs	r3, #3
 80035d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035d4:	230c      	movs	r3, #12
 80035d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	481e      	ldr	r0, [pc, #120]	; (8003658 <HAL_FMC_MspInit+0x110>)
 80035de:	f002 f9ad 	bl	800593c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80035e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035e6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f0:	2303      	movs	r3, #3
 80035f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035f4:	230c      	movs	r3, #12
 80035f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4817      	ldr	r0, [pc, #92]	; (800365c <HAL_FMC_MspInit+0x114>)
 80035fe:	f002 f99d 	bl	800593c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003602:	2328      	movs	r3, #40	; 0x28
 8003604:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003612:	230c      	movs	r3, #12
 8003614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <HAL_FMC_MspInit+0x118>)
 800361c:	f002 f98e 	bl	800593c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003620:	2308      	movs	r3, #8
 8003622:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003630:	230c      	movs	r3, #12
 8003632:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	4619      	mov	r1, r3
 8003638:	480a      	ldr	r0, [pc, #40]	; (8003664 <HAL_FMC_MspInit+0x11c>)
 800363a:	f002 f97f 	bl	800593c <HAL_GPIO_Init>
 800363e:	e000      	b.n	8003642 <HAL_FMC_MspInit+0xfa>
    return;
 8003640:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200003b4 	.word	0x200003b4
 800364c:	40023800 	.word	0x40023800
 8003650:	40021000 	.word	0x40021000
 8003654:	40021800 	.word	0x40021800
 8003658:	40020c00 	.word	0x40020c00
 800365c:	40021400 	.word	0x40021400
 8003660:	40021c00 	.word	0x40021c00
 8003664:	40020800 	.word	0x40020800

08003668 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003670:	f7ff ff6a 	bl	8003548 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_SAI_MspInit+0xbc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d124      	bne.n	80036d8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_SAI_MspInit+0xc0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 800369c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_SAI_MspInit+0xc0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_SAI_MspInit+0xc0>)
 80036b6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036b8:	23f0      	movs	r3, #240	; 0xf0
 80036ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2302      	movs	r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036c8:	230a      	movs	r3, #10
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4619      	mov	r1, r3
 80036d2:	481c      	ldr	r0, [pc, #112]	; (8003744 <HAL_SAI_MspInit+0xc8>)
 80036d4:	f002 f932 	bl	800593c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_SAI_MspInit+0xcc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d125      	bne.n	800372e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_SAI_MspInit+0xc0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 80036f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_SAI_MspInit+0xc4>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_SAI_MspInit+0xc0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_SAI_MspInit+0xc0>)
 800370a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800370c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800371e:	230a      	movs	r3, #10
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <HAL_SAI_MspInit+0xd0>)
 800372a:	f002 f907 	bl	800593c <HAL_GPIO_Init>

    }
}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40015c04 	.word	0x40015c04
 800373c:	200003b8 	.word	0x200003b8
 8003740:	40023800 	.word	0x40023800
 8003744:	40022000 	.word	0x40022000
 8003748:	40015c24 	.word	0x40015c24
 800374c:	40021800 	.word	0x40021800

08003750 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	2036      	movs	r0, #54	; 0x36
 8003766:	f001 fabb 	bl	8004ce0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800376a:	2036      	movs	r0, #54	; 0x36
 800376c:	f001 fad4 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_InitTick+0xa0>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_InitTick+0xa0>)
 8003776:	f043 0310 	orr.w	r3, r3, #16
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_InitTick+0xa0>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003788:	f107 0210 	add.w	r2, r7, #16
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fbde 	bl	8006f54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003798:	f003 fbb4 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800379c:	4603      	mov	r3, r0
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <HAL_InitTick+0xa4>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0c9b      	lsrs	r3, r3, #18
 80037ac:	3b01      	subs	r3, #1
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_InitTick+0xa8>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_InitTick+0xac>)
 80037b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_InitTick+0xa8>)
 80037b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_InitTick+0xa8>)
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_InitTick+0xa8>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_InitTick+0xa8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037d0:	4809      	ldr	r0, [pc, #36]	; (80037f8 <HAL_InitTick+0xa8>)
 80037d2:	f006 f857 	bl	8009884 <HAL_TIM_Base_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037dc:	4806      	ldr	r0, [pc, #24]	; (80037f8 <HAL_InitTick+0xa8>)
 80037de:	f006 f87d 	bl	80098dc <HAL_TIM_Base_Start_IT>
 80037e2:	4603      	mov	r3, r0
 80037e4:	e000      	b.n	80037e8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3730      	adds	r7, #48	; 0x30
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	431bde83 	.word	0x431bde83
 80037f8:	2000c5a4 	.word	0x2000c5a4
 80037fc:	40001000 	.word	0x40001000

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <MemManage_Handler+0x4>

0800381a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <UsageFault_Handler+0x4>

08003826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <CAN1_RX0_IRQHandler+0x10>)
 800383a:	f000 ff4d 	bl	80046d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	2000c4a0 	.word	0x2000c4a0

08003848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <TIM6_DAC_IRQHandler+0x10>)
 800384e:	f006 f89a 	bl	8009986 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000c5a4 	.word	0x2000c5a4

0800385c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <LTDC_IRQHandler+0x10>)
 8003862:	f002 fb17 	bl	8005e94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000c178 	.word	0x2000c178

08003870 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <DMA2D_IRQHandler+0x10>)
 8003876:	f001 fe22 	bl	80054be <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000c418 	.word	0x2000c418

08003884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
	return 1;
 8003888:	2301      	movs	r3, #1
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_kill>:

int _kill(int pid, int sig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800389e:	f021 ffbf 	bl	8025820 <__errno>
 80038a2:	4602      	mov	r2, r0
 80038a4:	2316      	movs	r3, #22
 80038a6:	6013      	str	r3, [r2, #0]
	return -1;
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_exit>:

void _exit (int status)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ffe7 	bl	8003894 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038c6:	e7fe      	b.n	80038c6 <_exit+0x12>

080038c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e00a      	b.n	80038f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038da:	f3af 8000 	nop.w
 80038de:	4601      	mov	r1, r0
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	60ba      	str	r2, [r7, #8]
 80038e6:	b2ca      	uxtb	r2, r1
 80038e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dbf0      	blt.n	80038da <_read+0x12>
	}

return len;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e009      	b.n	8003928 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	60ba      	str	r2, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	dbf1      	blt.n	8003914 <_write+0x12>
	}
	return len;
 8003930:	687b      	ldr	r3, [r7, #4]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_close>:

int _close(int file)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	return -1;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003962:	605a      	str	r2, [r3, #4]
	return 0;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <_isatty>:

int _isatty(int file)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
	return 1;
 800397a:	2301      	movs	r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
	return 0;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <_sbrk+0x50>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <_sbrk+0x16>
		heap_end = &end;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <_sbrk+0x50>)
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <_sbrk+0x54>)
 80039b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <_sbrk+0x50>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <_sbrk+0x50>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	466a      	mov	r2, sp
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d907      	bls.n	80039de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80039ce:	f021 ff27 	bl	8025820 <__errno>
 80039d2:	4602      	mov	r2, r0
 80039d4:	230c      	movs	r3, #12
 80039d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e006      	b.n	80039ec <_sbrk+0x48>
	}

	heap_end += incr;
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <_sbrk+0x50>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	4a03      	ldr	r2, [pc, #12]	; (80039f4 <_sbrk+0x50>)
 80039e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200003bc 	.word	0x200003bc
 80039f8:	2000ca58 	.word	0x2000ca58

080039fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <SystemInit+0x28>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <SystemInit+0x28>)
 8003a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <SystemInit+0x28>)
 8003a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a16:	609a      	str	r2, [r3, #8]
#endif
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a2e:	e003      	b.n	8003a38 <LoopCopyDataInit>

08003a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a36:	3104      	adds	r1, #4

08003a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a40:	d3f6      	bcc.n	8003a30 <CopyDataInit>
  ldr  r2, =_sbss
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a44:	e002      	b.n	8003a4c <LoopFillZerobss>

08003a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a48:	f842 3b04 	str.w	r3, [r2], #4

08003a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a50:	d3f9      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a52:	f7ff ffd3 	bl	80039fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a56:	f021 fefb 	bl	8025850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7fd fa21 	bl	8000ea0 <main>
  bx  lr    
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a60:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003a64:	08062cd0 	.word	0x08062cd0
  ldr  r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a6c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8003a70:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8003a74:	2000ca58 	.word	0x2000ca58

08003a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC_IRQHandler>

08003a7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7e:	2003      	movs	r0, #3
 8003a80:	f001 f923 	bl	8004cca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7ff fe63 	bl	8003750 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a8a:	f7fe ff09 	bl	80028a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000020 	.word	0x20000020
 8003ab8:	2000c5e4 	.word	0x2000c5e4

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	2000c5e4 	.word	0x2000c5e4

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_Delay+0x40>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000020 	.word	0x20000020

08003b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e031      	b.n	8003b92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe feda 	bl	80028f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_ADC_Init+0x84>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	f043 0202 	orr.w	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f964 	bl	8003e34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
 8003b82:	e001      	b.n	8003b88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	ffffeefd 	.word	0xffffeefd

08003ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e12a      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x272>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d93a      	bls.n	8003c42 <HAL_ADC_ConfigChannel+0xa2>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd4:	d035      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	3b1e      	subs	r3, #30
 8003bec:	2207      	movs	r2, #7
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a87      	ldr	r2, [pc, #540]	; (8003e20 <HAL_ADC_ConfigChannel+0x280>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68d9      	ldr	r1, [r3, #12]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	061a      	lsls	r2, r3, #24
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c1a:	e035      	b.n	8003c88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68d9      	ldr	r1, [r3, #12]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4403      	add	r3, r0
 8003c34:	3b1e      	subs	r3, #30
 8003c36:	409a      	lsls	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c40:	e022      	b.n	8003c88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6919      	ldr	r1, [r3, #16]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	2207      	movs	r2, #7
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	400a      	ands	r2, r1
 8003c64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6919      	ldr	r1, [r3, #16]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4403      	add	r3, r0
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d824      	bhi.n	8003cda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b05      	subs	r3, #5
 8003ca2:	221f      	movs	r2, #31
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	400a      	ands	r2, r1
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	3b05      	subs	r3, #5
 8003ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd8:	e04c      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d824      	bhi.n	8003d2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b23      	subs	r3, #35	; 0x23
 8003cf4:	221f      	movs	r2, #31
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	400a      	ands	r2, r1
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3b23      	subs	r3, #35	; 0x23
 8003d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2a:	e023      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b41      	subs	r3, #65	; 0x41
 8003d3e:	221f      	movs	r2, #31
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43da      	mvns	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	3b41      	subs	r3, #65	; 0x41
 8003d68:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_ADC_ConfigChannel+0x284>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10a      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x1f4>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d86:	d105      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003d8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_ADC_ConfigChannel+0x284>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d109      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x212>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b12      	cmp	r3, #18
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003db0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_ADC_ConfigChannel+0x284>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d125      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x268>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_ADC_ConfigChannel+0x280>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <HAL_ADC_ConfigChannel+0x22e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b11      	cmp	r3, #17
 8003dcc:	d11c      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <HAL_ADC_ConfigChannel+0x288>)
 8003dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dd8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_ADC_ConfigChannel+0x280>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_ADC_ConfigChannel+0x28c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <HAL_ADC_ConfigChannel+0x290>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0c9a      	lsrs	r2, r3, #18
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003dfa:	e002      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f9      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	10000012 	.word	0x10000012
 8003e24:	40012000 	.word	0x40012000
 8003e28:	40012300 	.word	0x40012300
 8003e2c:	20000018 	.word	0x20000018
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003e3c:	4b78      	ldr	r3, [pc, #480]	; (8004020 <ADC_Init+0x1ec>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a77      	ldr	r2, [pc, #476]	; (8004020 <ADC_Init+0x1ec>)
 8003e42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003e48:	4b75      	ldr	r3, [pc, #468]	; (8004020 <ADC_Init+0x1ec>)
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4973      	ldr	r1, [pc, #460]	; (8004020 <ADC_Init+0x1ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	021a      	lsls	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	4a58      	ldr	r2, [pc, #352]	; (8004024 <ADC_Init+0x1f0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d022      	beq.n	8003f0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	e00f      	b.n	8003f2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0202 	bic.w	r2, r2, #2
 8003f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	005a      	lsls	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	3b01      	subs	r3, #1
 8003f88:	035a      	lsls	r2, r3, #13
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e007      	b.n	8003fa4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	051a      	lsls	r2, r3, #20
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fe6:	025a      	lsls	r2, r3, #9
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	029a      	lsls	r2, r3, #10
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40012300 	.word	0x40012300
 8004024:	0f000001 	.word	0x0f000001

08004028 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0ed      	b.n	8004216 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe fcac 	bl	80029a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0202 	bic.w	r2, r2, #2
 800405a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800405c:	f7ff fd2e 	bl	8003abc <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004062:	e012      	b.n	800408a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004064:	f7ff fd2a 	bl	8003abc <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b0a      	cmp	r3, #10
 8004070:	d90b      	bls.n	800408a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2205      	movs	r2, #5
 8004082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0c5      	b.n	8004216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a8:	f7ff fd08 	bl	8003abc <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040ae:	e012      	b.n	80040d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040b0:	f7ff fd04 	bl	8003abc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b0a      	cmp	r3, #10
 80040bc:	d90b      	bls.n	80040d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2205      	movs	r2, #5
 80040ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e09f      	b.n	8004216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0e5      	beq.n	80040b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d108      	bne.n	80040fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e007      	b.n	800410e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7e5b      	ldrb	r3, [r3, #25]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d108      	bne.n	8004128 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e007      	b.n	8004138 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7e9b      	ldrb	r3, [r3, #26]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d108      	bne.n	8004152 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0220 	orr.w	r2, r2, #32
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e007      	b.n	8004162 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0220 	bic.w	r2, r2, #32
 8004160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7edb      	ldrb	r3, [r3, #27]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0210 	bic.w	r2, r2, #16
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0210 	orr.w	r2, r2, #16
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7f1b      	ldrb	r3, [r3, #28]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d108      	bne.n	80041a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0208 	orr.w	r2, r2, #8
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e007      	b.n	80041b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0208 	bic.w	r2, r2, #8
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7f5b      	ldrb	r3, [r3, #29]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0204 	orr.w	r2, r2, #4
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e007      	b.n	80041e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	ea42 0103 	orr.w	r1, r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	1e5a      	subs	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004236:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d003      	beq.n	8004246 <HAL_CAN_ConfigFilter+0x26>
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 80be 	bne.w	80043c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004246:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_CAN_ConfigFilter+0x1bc>)
 8004248:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004260:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	431a      	orrs	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	43db      	mvns	r3, r3
 8004298:	401a      	ands	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d123      	bne.n	80042f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3248      	adds	r2, #72	; 0x48
 80042d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042e6:	6979      	ldr	r1, [r7, #20]
 80042e8:	3348      	adds	r3, #72	; 0x48
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d122      	bne.n	800433e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	431a      	orrs	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004318:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3248      	adds	r2, #72	; 0x48
 800431e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004332:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	3348      	adds	r3, #72	; 0x48
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	401a      	ands	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004358:	e007      	b.n	800436a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43db      	mvns	r3, r3
 800437c:	401a      	ands	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004384:	e007      	b.n	8004396 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	431a      	orrs	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043b4:	f023 0201 	bic.w	r2, r3, #1
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e006      	b.n	80043d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40006400 	.word	0x40006400

080043e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d12e      	bne.n	8004452 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800440c:	f7ff fb56 	bl	8003abc <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004412:	e012      	b.n	800443a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004414:	f7ff fb52 	bl	8003abc <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b0a      	cmp	r3, #10
 8004420:	d90b      	bls.n	800443a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2205      	movs	r2, #5
 8004432:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e012      	b.n	8004460 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e006      	b.n	8004460 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d003      	beq.n	800448c <HAL_CAN_GetRxMessage+0x24>
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	2b02      	cmp	r3, #2
 8004488:	f040 80f3 	bne.w	8004672 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10e      	bne.n	80044b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0e7      	b.n	8004680 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d107      	bne.n	80044ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0d8      	b.n	8004680 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	331b      	adds	r3, #27
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	4413      	add	r3, r2
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0204 	and.w	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10c      	bne.n	8004506 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	331b      	adds	r3, #27
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4413      	add	r3, r2
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0d5b      	lsrs	r3, r3, #21
 80044fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e00b      	b.n	800451e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	331b      	adds	r3, #27
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	331b      	adds	r3, #27
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4413      	add	r3, r2
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0202 	and.w	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	331b      	adds	r3, #27
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	4413      	add	r3, r2
 8004540:	3304      	adds	r3, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	331b      	adds	r3, #27
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	b2da      	uxtb	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	331b      	adds	r3, #27
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4413      	add	r3, r2
 8004570:	3304      	adds	r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	4413      	add	r3, r2
 8004586:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	4413      	add	r3, r2
 800459c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0a1a      	lsrs	r2, r3, #8
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0c1a      	lsrs	r2, r3, #16
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3302      	adds	r3, #2
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0e1a      	lsrs	r2, r3, #24
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3303      	adds	r3, #3
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	3304      	adds	r3, #4
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4413      	add	r3, r2
 8004602:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0a1a      	lsrs	r2, r3, #8
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	3305      	adds	r3, #5
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0c1a      	lsrs	r2, r3, #16
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	3306      	adds	r3, #6
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e1a      	lsrs	r2, r3, #24
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3307      	adds	r3, #7
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d108      	bne.n	800465e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e007      	b.n	800466e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e006      	b.n	8004680 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800469c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d002      	beq.n	80046aa <HAL_CAN_ActivateNotification+0x1e>
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d109      	bne.n	80046be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6959      	ldr	r1, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e006      	b.n	80046cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d07c      	beq.n	8004818 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d023      	beq.n	8004770 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2201      	movs	r2, #1
 800472e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f97d 	bl	8004a3a <HAL_CAN_TxMailbox0CompleteCallback>
 8004740:	e016      	b.n	8004770 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	e00c      	b.n	8004770 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	e002      	b.n	8004770 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f983 	bl	8004a76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d024      	beq.n	80047c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f95d 	bl	8004a4e <HAL_CAN_TxMailbox1CompleteCallback>
 8004794:	e016      	b.n	80047c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e00c      	b.n	80047c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	e002      	b.n	80047c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f963 	bl	8004a8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d024      	beq.n	8004818 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f93d 	bl	8004a62 <HAL_CAN_TxMailbox2CompleteCallback>
 80047e8:	e016      	b.n	8004818 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e00c      	b.n	8004818 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	e002      	b.n	8004818 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f943 	bl	8004a9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004832:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f92a 	bl	8004ab2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fe3e 	bl	80014f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004896:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2210      	movs	r2, #16
 800489e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d006      	beq.n	80048c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f90c 	bl	8004ada <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8f3 	bl	8004ac6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2210      	movs	r2, #16
 80048fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8f6 	bl	8004aee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d006      	beq.n	8004924 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2208      	movs	r2, #8
 800491c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8ef 	bl	8004b02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d075      	beq.n	8004a1a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d06c      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004992:	2b00      	cmp	r3, #0
 8004994:	d03d      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800499c:	2b00      	cmp	r3, #0
 800499e:	d038      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d017      	beq.n	80049da <HAL_CAN_IRQHandler+0x302>
 80049aa:	2b30      	cmp	r3, #48	; 0x30
 80049ac:	d804      	bhi.n	80049b8 <HAL_CAN_IRQHandler+0x2e0>
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d009      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x2ee>
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d00c      	beq.n	80049d0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049b6:	e024      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80049b8:	2b50      	cmp	r3, #80	; 0x50
 80049ba:	d018      	beq.n	80049ee <HAL_CAN_IRQHandler+0x316>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d01b      	beq.n	80049f8 <HAL_CAN_IRQHandler+0x320>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d00f      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x30c>
            break;
 80049c4:	e01d      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f043 0308 	orr.w	r3, r3, #8
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ce:	e018      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f043 0310 	orr.w	r3, r3, #16
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049d8:	e013      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049e2:	e00e      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ec:	e009      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f6:	e004      	b.n	8004a02 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f872 	bl	8004b16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a32:	bf00      	nop
 8004a34:	3728      	adds	r7, #40	; 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00
 8004b70:	05fa0000 	.word	0x05fa0000

08004b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <__NVIC_GetPriorityGrouping+0x18>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	f003 0307 	and.w	r3, r3, #7
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db0b      	blt.n	8004bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <__NVIC_EnableIRQ+0x38>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	e000e100 	.word	0xe000e100

08004bcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db10      	blt.n	8004c00 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4909      	ldr	r1, [pc, #36]	; (8004c0c <__NVIC_DisableIRQ+0x40>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	3320      	adds	r3, #32
 8004bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004bfc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000e100 	.word	0xe000e100

08004c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db0a      	blt.n	8004c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	490c      	ldr	r1, [pc, #48]	; (8004c5c <__NVIC_SetPriority+0x4c>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c38:	e00a      	b.n	8004c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4908      	ldr	r1, [pc, #32]	; (8004c60 <__NVIC_SetPriority+0x50>)
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	3b04      	subs	r3, #4
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	761a      	strb	r2, [r3, #24]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000e100 	.word	0xe000e100
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	bf28      	it	cs
 8004c82:	2304      	movcs	r3, #4
 8004c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d902      	bls.n	8004c94 <NVIC_EncodePriority+0x30>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3b03      	subs	r3, #3
 8004c92:	e000      	b.n	8004c96 <NVIC_EncodePriority+0x32>
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cac:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	4313      	orrs	r3, r2
         );
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	; 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff2a 	bl	8004b2c <__NVIC_SetPriorityGrouping>
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf2:	f7ff ff3f 	bl	8004b74 <__NVIC_GetPriorityGrouping>
 8004cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6978      	ldr	r0, [r7, #20]
 8004cfe:	f7ff ffb1 	bl	8004c64 <NVIC_EncodePriority>
 8004d02:	4602      	mov	r2, r0
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff80 	bl	8004c10 <__NVIC_SetPriority>
}
 8004d10:	bf00      	nop
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff32 	bl	8004b90 <__NVIC_EnableIRQ>
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff42 	bl	8004bcc <__NVIC_DisableIRQ>
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e054      	b.n	8004e0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7f5b      	ldrb	r3, [r3, #29]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fe62 	bl	8002a3c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	791b      	ldrb	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <HAL_CRC_Init+0xc4>)
 8004d8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0218 	bic.w	r2, r2, #24
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	e00c      	b.n	8004dba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f834 	bl	8004e18 <HAL_CRCEx_Polynomial_Set>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e028      	b.n	8004e0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	795b      	ldrb	r3, [r3, #5]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	611a      	str	r2, [r3, #16]
 8004dcc:	e004      	b.n	8004dd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6912      	ldr	r2, [r2, #16]
 8004dd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	04c11db7 	.word	0x04c11db7

08004e18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e28:	231f      	movs	r3, #31
 8004e2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e2c:	bf00      	nop
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	613a      	str	r2, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <HAL_CRCEx_Polynomial_Set+0x34>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b18      	cmp	r3, #24
 8004e50:	d846      	bhi.n	8004ee0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004ee7 	.word	0x08004ee7
 8004e5c:	08004ee1 	.word	0x08004ee1
 8004e60:	08004ee1 	.word	0x08004ee1
 8004e64:	08004ee1 	.word	0x08004ee1
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004ed5 	.word	0x08004ed5
 8004e7c:	08004ee1 	.word	0x08004ee1
 8004e80:	08004ee1 	.word	0x08004ee1
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ee1 	.word	0x08004ee1
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ebd 	.word	0x08004ebd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d913      	bls.n	8004eea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ec6:	e010      	b.n	8004eea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b07      	cmp	r3, #7
 8004ecc:	d90f      	bls.n	8004eee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ed2:	e00c      	b.n	8004eee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d90b      	bls.n	8004ef2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ede:	e008      	b.n	8004ef2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee4:	e006      	b.n	8004ef4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ef2:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 0118 	bic.w	r1, r3, #24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e069      	b.n	800500a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fd fd9a 	bl	8002a7c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_DCMI_Init+0xf0>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f82:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fa6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fb2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d112      	bne.n	8004fea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7f1b      	ldrb	r3, [r3, #28]
 8004fc8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7f5b      	ldrb	r3, [r3, #29]
 8004fce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fd0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7f9b      	ldrb	r3, [r3, #30]
 8004fd6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004fd8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7fdb      	ldrb	r3, [r3, #31]
 8004fe0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004fe6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fe8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 021e 	orr.w	r2, r2, #30
 8004ff8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	ffe0f007 	.word	0xffe0f007

08005018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_DMA_Start_IT+0x26>
 800503a:	2302      	movs	r3, #2
 800503c:	e048      	b.n	80050d0 <HAL_DMA_Start_IT+0xb8>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d137      	bne.n	80050c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f842 	bl	80050f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	223f      	movs	r2, #63	; 0x3f
 8005072:	409a      	lsls	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0216 	orr.w	r2, r2, #22
 8005086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005096:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0208 	orr.w	r2, r2, #8
 80050ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e005      	b.n	80050ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
 80050cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800510c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d108      	bne.n	8005130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800512e:	e007      	b.n	8005140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e039      	b.n	80051d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fd fd40 	bl	8002bf8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f023 0107 	bic.w	r1, r3, #7
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_DMA2D_Init+0x90>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68d1      	ldr	r1, [r2, #12]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	430b      	orrs	r3, r1
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	ffffc000 	.word	0xffffc000

080051e0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e05f      	b.n	80052b2 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80051f2:	4b32      	ldr	r3, [pc, #200]	; (80052bc <HAL_DMA2D_DeInit+0xdc>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d02e      	beq.n	800525c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8c1 	bl	8005394 <HAL_DMA2D_Abort>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d021      	beq.n	800525c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04a      	b.n	80052b2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d108      	bne.n	800523c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800522a:	2100      	movs	r1, #0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8f7 	bl	8005420 <HAL_DMA2D_CLUTLoading_Abort>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d011      	beq.n	800525c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e03a      	b.n	80052b2 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b20      	cmp	r3, #32
 8005248:	d108      	bne.n	800525c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800524a:	2101      	movs	r1, #1
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8e7 	bl	8005420 <HAL_DMA2D_CLUTLoading_Abort>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e02a      	b.n	80052b2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	223f      	movs	r2, #63	; 0x3f
 800526a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fd fcd5 	bl	8002c44 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800

080052c0 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_DMA2D_Start_IT+0x1c>
 80052d8:	2302      	movs	r3, #2
 80052da:	e020      	b.n	800531e <HAL_DMA2D_Start_IT+0x5e>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fa84 	bl	8005804 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800530a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b086      	sub	sp, #24
 800532a:	af02      	add	r7, sp, #8
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800533e:	2302      	movs	r3, #2
 8005340:	e024      	b.n	800538c <HAL_DMA2D_BlendingStart_IT+0x66>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fa4d 	bl	8005804 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005378:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0205 	bic.w	r2, r3, #5
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0204 	orr.w	r2, r2, #4
 80053ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053b0:	f7fe fb84 	bl	8003abc <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053b6:	e017      	b.n	80053e8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80053b8:	f7fe fb80 	bl	8003abc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c6:	d90f      	bls.n	80053e8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2203      	movs	r2, #3
 80053d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e017      	b.n	8005418 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e0      	bne.n	80053b8 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005404:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0204 	orr.w	r2, r2, #4
 8005440:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d103      	bne.n	8005450 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	331c      	adds	r3, #28
 800544e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005450:	f7fe fb34 	bl	8003abc <HAL_GetTick>
 8005454:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005456:	e017      	b.n	8005488 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005458:	f7fe fb30 	bl	8003abc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005466:	d90f      	bls.n	8005488 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2203      	movs	r2, #3
 8005478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e016      	b.n	80054b6 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e1      	bne.n	8005458 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80054a2:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d026      	beq.n	800552e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d021      	beq.n	800552e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2201      	movs	r2, #1
 800550c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d026      	beq.n	8005586 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d021      	beq.n	8005586 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005550:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2220      	movs	r2, #32
 8005558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d026      	beq.n	80055de <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	2b00      	cmp	r3, #0
 8005598:	d021      	beq.n	80055de <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2208      	movs	r2, #8
 80055b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00e      	beq.n	8005610 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f853 	bl	80056b6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d024      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01f      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2202      	movs	r2, #2
 800563a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01a      	beq.n	80056ae <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005686:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2210      	movs	r2, #16
 800568e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f80e 	bl	80056ca <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_DMA2D_ConfigLayer+0x20>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e079      	b.n	80057f4 <HAL_DMA2D_ConfigLayer+0x114>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	3318      	adds	r3, #24
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800572a:	4b35      	ldr	r3, [pc, #212]	; (8005800 <HAL_DMA2D_ConfigLayer+0x120>)
 800572c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b0a      	cmp	r3, #10
 8005734:	d003      	beq.n	800573e <HAL_DMA2D_ConfigLayer+0x5e>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b09      	cmp	r3, #9
 800573c:	d107      	bne.n	800574e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	e005      	b.n	800575a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d120      	bne.n	80057a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	43db      	mvns	r3, r3
 800576a:	ea02 0103 	and.w	r1, r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	430a      	orrs	r2, r1
 8005776:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b0a      	cmp	r3, #10
 8005788:	d003      	beq.n	8005792 <HAL_DMA2D_ConfigLayer+0xb2>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b09      	cmp	r3, #9
 8005790:	d127      	bne.n	80057e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800579e:	629a      	str	r2, [r3, #40]	; 0x28
 80057a0:	e01f      	b.n	80057e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	ea02 0103 	and.w	r1, r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b0a      	cmp	r3, #10
 80057ca:	d003      	beq.n	80057d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b09      	cmp	r3, #9
 80057d2:	d106      	bne.n	80057e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80057e0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	ff03000f 	.word	0xff03000f

08005804 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005804:	b480      	push	{r7}
 8005806:	b08b      	sub	sp, #44	; 0x2c
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	041a      	lsls	r2, r3, #16
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800583c:	d174      	bne.n	8005928 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005844:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800584c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005854:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	431a      	orrs	r2, r3
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	4313      	orrs	r3, r2
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	e053      	b.n	800591e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d106      	bne.n	800588c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e048      	b.n	800591e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d111      	bne.n	80058b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	0cdb      	lsrs	r3, r3, #19
 8005898:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	0a9b      	lsrs	r3, r3, #10
 800589e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	08db      	lsrs	r3, r3, #3
 80058a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	02db      	lsls	r3, r3, #11
 80058ae:	4313      	orrs	r3, r2
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	e032      	b.n	800591e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d117      	bne.n	80058f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	0fdb      	lsrs	r3, r3, #31
 80058c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	0cdb      	lsrs	r3, r3, #19
 80058ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	0adb      	lsrs	r3, r3, #11
 80058d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	029b      	lsls	r3, r3, #10
 80058e0:	431a      	orrs	r2, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	03db      	lsls	r3, r3, #15
 80058e6:	4313      	orrs	r3, r2
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	e016      	b.n	800591e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	0f1b      	lsrs	r3, r3, #28
 80058f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	0d1b      	lsrs	r3, r3, #20
 80058fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	0b1b      	lsrs	r3, r3, #12
 8005900:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	431a      	orrs	r2, r3
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	4313      	orrs	r3, r2
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005926:	e003      	b.n	8005930 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	60da      	str	r2, [r3, #12]
}
 8005930:	bf00      	nop
 8005932:	372c      	adds	r7, #44	; 0x2c
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e175      	b.n	8005c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 8164 	bne.w	8005c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d00b      	beq.n	800599a <HAL_GPIO_Init+0x5e>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d007      	beq.n	800599a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800598e:	2b11      	cmp	r3, #17
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b12      	cmp	r3, #18
 8005998:	d130      	bne.n	80059fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	2203      	movs	r2, #3
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059d0:	2201      	movs	r2, #1
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 0201 	and.w	r2, r3, #1
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	2203      	movs	r2, #3
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x100>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b12      	cmp	r3, #18
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80be 	beq.w	8005c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	4b65      	ldr	r3, [pc, #404]	; (8005c5c <HAL_GPIO_Init+0x320>)
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	4a64      	ldr	r2, [pc, #400]	; (8005c5c <HAL_GPIO_Init+0x320>)
 8005acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad2:	4b62      	ldr	r3, [pc, #392]	; (8005c5c <HAL_GPIO_Init+0x320>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ade:	4a60      	ldr	r2, [pc, #384]	; (8005c60 <HAL_GPIO_Init+0x324>)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	220f      	movs	r2, #15
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a57      	ldr	r2, [pc, #348]	; (8005c64 <HAL_GPIO_Init+0x328>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d037      	beq.n	8005b7a <HAL_GPIO_Init+0x23e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a56      	ldr	r2, [pc, #344]	; (8005c68 <HAL_GPIO_Init+0x32c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_GPIO_Init+0x23a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_GPIO_Init+0x330>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02b      	beq.n	8005b72 <HAL_GPIO_Init+0x236>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a54      	ldr	r2, [pc, #336]	; (8005c70 <HAL_GPIO_Init+0x334>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d025      	beq.n	8005b6e <HAL_GPIO_Init+0x232>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a53      	ldr	r2, [pc, #332]	; (8005c74 <HAL_GPIO_Init+0x338>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01f      	beq.n	8005b6a <HAL_GPIO_Init+0x22e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	; (8005c78 <HAL_GPIO_Init+0x33c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d019      	beq.n	8005b66 <HAL_GPIO_Init+0x22a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a51      	ldr	r2, [pc, #324]	; (8005c7c <HAL_GPIO_Init+0x340>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_GPIO_Init+0x226>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a50      	ldr	r2, [pc, #320]	; (8005c80 <HAL_GPIO_Init+0x344>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00d      	beq.n	8005b5e <HAL_GPIO_Init+0x222>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a4f      	ldr	r2, [pc, #316]	; (8005c84 <HAL_GPIO_Init+0x348>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <HAL_GPIO_Init+0x21e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <HAL_GPIO_Init+0x34c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_GPIO_Init+0x21a>
 8005b52:	2309      	movs	r3, #9
 8005b54:	e012      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b56:	230a      	movs	r3, #10
 8005b58:	e010      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	e00e      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b5e:	2307      	movs	r3, #7
 8005b60:	e00c      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b62:	2306      	movs	r3, #6
 8005b64:	e00a      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b66:	2305      	movs	r3, #5
 8005b68:	e008      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b8c:	4934      	ldr	r1, [pc, #208]	; (8005c60 <HAL_GPIO_Init+0x324>)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b9a:	4b3c      	ldr	r3, [pc, #240]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bbe:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bc4:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005be8:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bee:	4b27      	ldr	r3, [pc, #156]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c3c:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <HAL_GPIO_Init+0x350>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	f67f ae86 	bls.w	800595c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	3724      	adds	r7, #36	; 0x24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40020000 	.word	0x40020000
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40020800 	.word	0x40020800
 8005c70:	40020c00 	.word	0x40020c00
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40021400 	.word	0x40021400
 8005c7c:	40021800 	.word	0x40021800
 8005c80:	40021c00 	.word	0x40021c00
 8005c84:	40022000 	.word	0x40022000
 8005c88:	40022400 	.word	0x40022400
 8005c8c:	40013c00 	.word	0x40013c00

08005c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	e001      	b.n	8005cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cd0:	787b      	ldrb	r3, [r7, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd6:	887a      	ldrh	r2, [r7, #2]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cdc:	e003      	b.n	8005ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cde:	887b      	ldrh	r3, [r7, #2]
 8005ce0:	041a      	lsls	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	619a      	str	r2, [r3, #24]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0bf      	b.n	8005e86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc ffac 	bl	8002c78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6899      	ldr	r1, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b4a      	ldr	r3, [pc, #296]	; (8005e90 <HAL_LTDC_Init+0x19c>)
 8005d68:	400b      	ands	r3, r1
 8005d6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68d9      	ldr	r1, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <HAL_LTDC_Init+0x19c>)
 8005d96:	400b      	ands	r3, r1
 8005d98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68d9      	ldr	r1, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6919      	ldr	r1, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <HAL_LTDC_Init+0x19c>)
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6919      	ldr	r1, [r3, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6959      	ldr	r1, [r3, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <HAL_LTDC_Init+0x19c>)
 8005df2:	400b      	ands	r3, r1
 8005df4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6959      	ldr	r1, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0206 	orr.w	r2, r2, #6
 8005e62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	f000f800 	.word	0xf000f800

08005e94 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d023      	beq.n	8005efe <HAL_LTDC_IRQHandler+0x6a>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f86f 	bl	8005fdc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d023      	beq.n	8005f50 <HAL_LTDC_IRQHandler+0xbc>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01e      	beq.n	8005f50 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0202 	bic.w	r2, r2, #2
 8005f20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2202      	movs	r2, #2
 8005f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f30:	f043 0202 	orr.w	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f846 	bl	8005fdc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <HAL_LTDC_IRQHandler+0xfe>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d016      	beq.n	8005f92 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f00e fe79 	bl	8014c84 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_LTDC_IRQHandler+0x140>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0208 	bic.w	r2, r2, #8
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2208      	movs	r2, #8
 8005fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f80e 	bl	8005ff0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006004:	b5b0      	push	{r4, r5, r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_LTDC_ConfigLayer+0x1a>
 800601a:	2302      	movs	r3, #2
 800601c:	e02c      	b.n	8006078 <HAL_LTDC_ConfigLayer+0x74>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2134      	movs	r1, #52	; 0x34
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	4413      	add	r3, r2
 800603a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4614      	mov	r4, r2
 8006042:	461d      	mov	r5, r3
 8006044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800604a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800604e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f849 	bl	80060f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2201      	movs	r2, #1
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bdb0      	pop	{r4, r5, r7, pc}

08006080 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_LTDC_ProgramLineEvent+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e023      	b.n	80060e0 <HAL_LTDC_ProgramLineEvent+0x60>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80060b8:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <HAL_LTDC_ProgramLineEvent+0x6c>)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0201 	orr.w	r2, r2, #1
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40016800 	.word	0x40016800

080060f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610c:	4413      	add	r3, r2
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	4413      	add	r3, r2
 800611e:	3384      	adds	r3, #132	; 0x84
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	4611      	mov	r1, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	01d2      	lsls	r2, r2, #7
 800612c:	440a      	add	r2, r1
 800612e:	3284      	adds	r2, #132	; 0x84
 8006130:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006134:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006146:	4413      	add	r3, r2
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4619      	mov	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	01db      	lsls	r3, r3, #7
 8006154:	440b      	add	r3, r1
 8006156:	3384      	adds	r3, #132	; 0x84
 8006158:	4619      	mov	r1, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800616e:	4413      	add	r3, r2
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	01db      	lsls	r3, r3, #7
 800617e:	4413      	add	r3, r2
 8006180:	3384      	adds	r3, #132	; 0x84
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	4611      	mov	r1, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	01d2      	lsls	r2, r2, #7
 800618e:	440a      	add	r2, r1
 8006190:	3284      	adds	r2, #132	; 0x84
 8006192:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006196:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a6:	4413      	add	r3, r2
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	01db      	lsls	r3, r3, #7
 80061b4:	440b      	add	r3, r1
 80061b6:	3384      	adds	r3, #132	; 0x84
 80061b8:	4619      	mov	r1, r3
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	01db      	lsls	r3, r3, #7
 80061ca:	4413      	add	r3, r2
 80061cc:	3384      	adds	r3, #132	; 0x84
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4611      	mov	r1, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	01d2      	lsls	r2, r2, #7
 80061da:	440a      	add	r2, r1
 80061dc:	3284      	adds	r2, #132	; 0x84
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	01db      	lsls	r3, r3, #7
 80061ee:	4413      	add	r3, r2
 80061f0:	3384      	adds	r3, #132	; 0x84
 80061f2:	461a      	mov	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	01db      	lsls	r3, r3, #7
 8006220:	4413      	add	r3, r2
 8006222:	3384      	adds	r3, #132	; 0x84
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	01db      	lsls	r3, r3, #7
 8006230:	4413      	add	r3, r2
 8006232:	3384      	adds	r3, #132	; 0x84
 8006234:	461a      	mov	r2, r3
 8006236:	2300      	movs	r3, #0
 8006238:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006240:	461a      	mov	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	431a      	orrs	r2, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	440b      	add	r3, r1
 8006256:	3384      	adds	r3, #132	; 0x84
 8006258:	4619      	mov	r1, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	01db      	lsls	r3, r3, #7
 800626a:	4413      	add	r3, r2
 800626c:	3384      	adds	r3, #132	; 0x84
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	4611      	mov	r1, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	01d2      	lsls	r2, r2, #7
 800627a:	440a      	add	r2, r1
 800627c:	3284      	adds	r2, #132	; 0x84
 800627e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006282:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	01db      	lsls	r3, r3, #7
 800628e:	4413      	add	r3, r2
 8006290:	3384      	adds	r3, #132	; 0x84
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	01db      	lsls	r3, r3, #7
 80062a4:	4413      	add	r3, r2
 80062a6:	3384      	adds	r3, #132	; 0x84
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	01db      	lsls	r3, r3, #7
 80062b4:	440b      	add	r3, r1
 80062b6:	3384      	adds	r3, #132	; 0x84
 80062b8:	4619      	mov	r1, r3
 80062ba:	4b58      	ldr	r3, [pc, #352]	; (800641c <LTDC_SetConfig+0x32c>)
 80062bc:	4013      	ands	r3, r2
 80062be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	68f9      	ldr	r1, [r7, #12]
 80062ca:	6809      	ldr	r1, [r1, #0]
 80062cc:	4608      	mov	r0, r1
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	01c9      	lsls	r1, r1, #7
 80062d2:	4401      	add	r1, r0
 80062d4:	3184      	adds	r1, #132	; 0x84
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	4413      	add	r3, r2
 80062f6:	3384      	adds	r3, #132	; 0x84
 80062f8:	461a      	mov	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	01db      	lsls	r3, r3, #7
 8006308:	4413      	add	r3, r2
 800630a:	3384      	adds	r3, #132	; 0x84
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800631c:	2304      	movs	r3, #4
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e01b      	b.n	800635a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d102      	bne.n	8006330 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800632a:	2303      	movs	r3, #3
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	e014      	b.n	800635a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d00b      	beq.n	8006350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800633c:	2b02      	cmp	r3, #2
 800633e:	d007      	beq.n	8006350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006344:	2b03      	cmp	r3, #3
 8006346:	d003      	beq.n	8006350 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800634c:	2b07      	cmp	r3, #7
 800634e:	d102      	bne.n	8006356 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006350:	2302      	movs	r3, #2
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e001      	b.n	800635a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006356:	2301      	movs	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	01db      	lsls	r3, r3, #7
 8006364:	4413      	add	r3, r2
 8006366:	3384      	adds	r3, #132	; 0x84
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4611      	mov	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	01d2      	lsls	r2, r2, #7
 8006374:	440a      	add	r2, r1
 8006376:	3284      	adds	r2, #132	; 0x84
 8006378:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800637c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	041a      	lsls	r2, r3, #16
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1acb      	subs	r3, r1, r3
 8006394:	69f9      	ldr	r1, [r7, #28]
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	3303      	adds	r3, #3
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	6809      	ldr	r1, [r1, #0]
 80063a0:	4608      	mov	r0, r1
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	01c9      	lsls	r1, r1, #7
 80063a6:	4401      	add	r1, r0
 80063a8:	3184      	adds	r1, #132	; 0x84
 80063aa:	4313      	orrs	r3, r2
 80063ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	01db      	lsls	r3, r3, #7
 80063b8:	4413      	add	r3, r2
 80063ba:	3384      	adds	r3, #132	; 0x84
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4619      	mov	r1, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	01db      	lsls	r3, r3, #7
 80063c8:	440b      	add	r3, r1
 80063ca:	3384      	adds	r3, #132	; 0x84
 80063cc:	4619      	mov	r1, r3
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <LTDC_SetConfig+0x330>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	01db      	lsls	r3, r3, #7
 80063de:	4413      	add	r3, r2
 80063e0:	3384      	adds	r3, #132	; 0x84
 80063e2:	461a      	mov	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	4611      	mov	r1, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	01d2      	lsls	r2, r2, #7
 8006404:	440a      	add	r2, r1
 8006406:	3284      	adds	r2, #132	; 0x84
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	6013      	str	r3, [r2, #0]
}
 800640e:	bf00      	nop
 8006410:	3724      	adds	r7, #36	; 0x24
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	fffff8f8 	.word	0xfffff8f8
 8006420:	fffff800 	.word	0xfffff800

08006424 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a04      	ldr	r2, [pc, #16]	; (8006440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800642e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006432:	6013      	str	r3, [r2, #0]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40007000 	.word	0x40007000

08006444 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	4b23      	ldr	r3, [pc, #140]	; (80064dc <HAL_PWREx_EnableOverDrive+0x98>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4a22      	ldr	r2, [pc, #136]	; (80064dc <HAL_PWREx_EnableOverDrive+0x98>)
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6413      	str	r3, [r2, #64]	; 0x40
 800645a:	4b20      	ldr	r3, [pc, #128]	; (80064dc <HAL_PWREx_EnableOverDrive+0x98>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006472:	f7fd fb23 	bl	8003abc <HAL_GetTick>
 8006476:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006478:	e009      	b.n	800648e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800647a:	f7fd fb1f 	bl	8003abc <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006488:	d901      	bls.n	800648e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e022      	b.n	80064d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800648e:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649a:	d1ee      	bne.n	800647a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064a8:	f7fd fb08 	bl	8003abc <HAL_GetTick>
 80064ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064ae:	e009      	b.n	80064c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064b0:	f7fd fb04 	bl	8003abc <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064be:	d901      	bls.n	80064c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e007      	b.n	80064d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064c4:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d0:	d1ee      	bne.n	80064b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40023800 	.word	0x40023800
 80064e0:	40007000 	.word	0x40007000

080064e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064ec:	f7fd fae6 	bl	8003abc <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e067      	b.n	80065cc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fc fc79 	bl	8002e08 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006516:	f241 3188 	movw	r1, #5000	; 0x1388
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f85e 	bl	80065dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	3b01      	subs	r3, #1
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	2120      	movs	r1, #32
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f856 	bl	80065f8 <QSPI_WaitFlagStateUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d135      	bne.n	80065c2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <HAL_QSPI_Init+0xf0>)
 800655e:	4013      	ands	r3, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6852      	ldr	r2, [r2, #4]
 8006564:	0611      	lsls	r1, r2, #24
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68d2      	ldr	r2, [r2, #12]
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	69d2      	ldr	r2, [r2, #28]
 8006570:	4311      	orrs	r1, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6a12      	ldr	r2, [r2, #32]
 8006576:	4311      	orrs	r1, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <HAL_QSPI_Init+0xf4>)
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6912      	ldr	r2, [r2, #16]
 800658e:	0411      	lsls	r1, r2, #16
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6952      	ldr	r2, [r2, #20]
 8006594:	4311      	orrs	r1, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6992      	ldr	r2, [r2, #24]
 800659a:	4311      	orrs	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	00ffff2f 	.word	0x00ffff2f
 80065d8:	ffe0f8fe 	.word	0xffe0f8fe

080065dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006608:	e01a      	b.n	8006640 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d016      	beq.n	8006640 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fd fa53 	bl	8003abc <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2204      	movs	r2, #4
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	f043 0201 	orr.w	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e00e      	b.n	800665e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	bf14      	ite	ne
 800664e:	2301      	movne	r3, #1
 8006650:	2300      	moveq	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	429a      	cmp	r2, r3
 800665a:	d1d6      	bne.n	800660a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e291      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8087 	beq.w	800679a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800668c:	4b96      	ldr	r3, [pc, #600]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	2b04      	cmp	r3, #4
 8006696:	d00c      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006698:	4b93      	ldr	r3, [pc, #588]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d112      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
 80066a4:	4b90      	ldr	r3, [pc, #576]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b0:	d10b      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b2:	4b8d      	ldr	r3, [pc, #564]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d06c      	beq.n	8006798 <HAL_RCC_OscConfig+0x130>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d168      	bne.n	8006798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e26b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCC_OscConfig+0x7a>
 80066d4:	4b84      	ldr	r3, [pc, #528]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a83      	ldr	r2, [pc, #524]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e02e      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x9c>
 80066ea:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7e      	ldr	r2, [pc, #504]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b7c      	ldr	r3, [pc, #496]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7b      	ldr	r2, [pc, #492]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e01d      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0xc0>
 800670e:	4b76      	ldr	r3, [pc, #472]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a75      	ldr	r2, [pc, #468]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b73      	ldr	r3, [pc, #460]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a72      	ldr	r2, [pc, #456]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e00b      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006728:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4b6c      	ldr	r3, [pc, #432]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6b      	ldr	r2, [pc, #428]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800673a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d013      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fd f9b8 	bl	8003abc <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd f9b4 	bl	8003abc <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e21f      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fd f9a4 	bl	8003abc <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fd f9a0 	bl	8003abc <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e20b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	4b57      	ldr	r3, [pc, #348]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x110>
 8006796:	e000      	b.n	800679a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d069      	beq.n	800687a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067a6:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b2:	4b4d      	ldr	r3, [pc, #308]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 030c 	and.w	r3, r3, #12
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d11c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
 80067be:	4b4a      	ldr	r3, [pc, #296]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e1df      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e2:	4b41      	ldr	r3, [pc, #260]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	493d      	ldr	r1, [pc, #244]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	e040      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d023      	beq.n	8006848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006800:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a38      	ldr	r2, [pc, #224]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fd f956 	bl	8003abc <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006814:	f7fd f952 	bl	8003abc <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1bd      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4929      	ldr	r1, [pc, #164]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
 8006846:	e018      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fd f932 	bl	8003abc <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685c:	f7fd f92e 	bl	8003abc <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e199      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800686e:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d038      	beq.n	80068f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d019      	beq.n	80068c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689a:	f7fd f90f 	bl	8003abc <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a2:	f7fd f90b 	bl	8003abc <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e176      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x23a>
 80068c0:	e01a      	b.n	80068f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c6:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fd f8f5 	bl	8003abc <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fd f8f1 	bl	8003abc <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d903      	bls.n	80068ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e15c      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
 80068e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ec:	4b91      	ldr	r3, [pc, #580]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80a4 	beq.w	8006a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006906:	4b8b      	ldr	r3, [pc, #556]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	4b88      	ldr	r3, [pc, #544]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	4a87      	ldr	r2, [pc, #540]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691c:	6413      	str	r3, [r2, #64]	; 0x40
 800691e:	4b85      	ldr	r3, [pc, #532]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692e:	4b82      	ldr	r3, [pc, #520]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d118      	bne.n	800696c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800693a:	4b7f      	ldr	r3, [pc, #508]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7e      	ldr	r2, [pc, #504]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006946:	f7fd f8b9 	bl	8003abc <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694e:	f7fd f8b5 	bl	8003abc <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b64      	cmp	r3, #100	; 0x64
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e120      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006960:	4b75      	ldr	r3, [pc, #468]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x31a>
 8006974:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a6e      	ldr	r2, [pc, #440]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	e02d      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x33c>
 800698a:	4b6a      	ldr	r3, [pc, #424]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a69      	ldr	r2, [pc, #420]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b67      	ldr	r3, [pc, #412]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a66      	ldr	r2, [pc, #408]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	e01c      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	d10c      	bne.n	80069c6 <HAL_RCC_OscConfig+0x35e>
 80069ac:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	4b5e      	ldr	r3, [pc, #376]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	4a5d      	ldr	r2, [pc, #372]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	; 0x70
 80069c4:	e00b      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069c6:	4b5b      	ldr	r3, [pc, #364]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a5a      	ldr	r2, [pc, #360]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	4b58      	ldr	r3, [pc, #352]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a57      	ldr	r2, [pc, #348]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d015      	beq.n	8006a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e6:	f7fd f869 	bl	8003abc <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ec:	e00a      	b.n	8006a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fd f865 	bl	8003abc <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e0ce      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a04:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0ee      	beq.n	80069ee <HAL_RCC_OscConfig+0x386>
 8006a10:	e014      	b.n	8006a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a12:	f7fd f853 	bl	8003abc <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a18:	e00a      	b.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1a:	f7fd f84f 	bl	8003abc <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a30:	4b40      	ldr	r3, [pc, #256]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ee      	bne.n	8006a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d105      	bne.n	8006a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a42:	4b3c      	ldr	r3, [pc, #240]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a4 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a58:	4b36      	ldr	r3, [pc, #216]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d06b      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d149      	bne.n	8006b00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6c:	4b31      	ldr	r3, [pc, #196]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd f820 	bl	8003abc <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fd f81c 	bl	8003abc <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e087      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fc fff0 	bl	8003abc <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fc ffec 	bl	8003abc <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e057      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x478>
 8006afe:	e04f      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fc ffd6 	bl	8003abc <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fc ffd2 	bl	8003abc <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03d      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4ac>
 8006b32:	e035      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
 8006b34:	40023800 	.word	0x40023800
 8006b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <HAL_RCC_OscConfig+0x544>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d028      	beq.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d121      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d11a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	3b01      	subs	r3, #1
 8006b86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0d0      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d910      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 020f 	bic.w	r2, r3, #15
 8006bde:	4965      	ldr	r1, [pc, #404]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0b8      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d020      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c10:	4b59      	ldr	r3, [pc, #356]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4a58      	ldr	r2, [pc, #352]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c28:	4b53      	ldr	r3, [pc, #332]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a52      	ldr	r2, [pc, #328]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	494d      	ldr	r1, [pc, #308]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d040      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5a:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d115      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e07f      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e073      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c82:	4b3d      	ldr	r3, [pc, #244]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06b      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f023 0203 	bic.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4936      	ldr	r1, [pc, #216]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca4:	f7fc ff0a 	bl	8003abc <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cac:	f7fc ff06 	bl	8003abc <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e053      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 020c 	and.w	r2, r3, #12
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d1eb      	bne.n	8006cac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d210      	bcs.n	8006d04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 020f 	bic.w	r2, r3, #15
 8006cea:	4922      	ldr	r1, [pc, #136]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e032      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4916      	ldr	r1, [pc, #88]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	490e      	ldr	r1, [pc, #56]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d42:	f000 f821 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8006d46:	4601      	mov	r1, r0
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	091b      	lsrs	r3, r3, #4
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <HAL_RCC_ClockConfig+0x1cc>)
 8006d54:	5cd3      	ldrb	r3, [r2, r3]
 8006d56:	fa21 f303 	lsr.w	r3, r1, r3
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <HAL_RCC_ClockConfig+0x1d0>)
 8006d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_ClockConfig+0x1d4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fc fcf4 	bl	8003750 <HAL_InitTick>

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023c00 	.word	0x40023c00
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	08026f54 	.word	0x08026f54
 8006d80:	20000018 	.word	0x20000018
 8006d84:	2000001c 	.word	0x2000001c

08006d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	2300      	movs	r3, #0
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9e:	4b50      	ldr	r3, [pc, #320]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d007      	beq.n	8006dba <HAL_RCC_GetSysClockFreq+0x32>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d008      	beq.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 808d 	bne.w	8006ece <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db4:	4b4b      	ldr	r3, [pc, #300]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006db6:	60bb      	str	r3, [r7, #8]
      break;
 8006db8:	e08c      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dba:	4b4b      	ldr	r3, [pc, #300]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dbc:	60bb      	str	r3, [r7, #8]
      break;
 8006dbe:	e089      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc0:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006dca:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d023      	beq.n	8006e1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd6:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	099b      	lsrs	r3, r3, #6
 8006ddc:	f04f 0400 	mov.w	r4, #0
 8006de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	ea03 0501 	and.w	r5, r3, r1
 8006dec:	ea04 0602 	and.w	r6, r4, r2
 8006df0:	4a3d      	ldr	r2, [pc, #244]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006df2:	fb02 f106 	mul.w	r1, r2, r6
 8006df6:	2200      	movs	r2, #0
 8006df8:	fb02 f205 	mul.w	r2, r2, r5
 8006dfc:	440a      	add	r2, r1
 8006dfe:	493a      	ldr	r1, [pc, #232]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e00:	fba5 0101 	umull	r0, r1, r5, r1
 8006e04:	1853      	adds	r3, r2, r1
 8006e06:	4619      	mov	r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f04f 0400 	mov.w	r4, #0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4623      	mov	r3, r4
 8006e12:	f7f9 fce1 	bl	80007d8 <__aeabi_uldivmod>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	e049      	b.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1e:	4b30      	ldr	r3, [pc, #192]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	ea03 0501 	and.w	r5, r3, r1
 8006e34:	ea04 0602 	and.w	r6, r4, r2
 8006e38:	4629      	mov	r1, r5
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	f04f 0400 	mov.w	r4, #0
 8006e44:	0154      	lsls	r4, r2, #5
 8006e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e4a:	014b      	lsls	r3, r1, #5
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4622      	mov	r2, r4
 8006e50:	1b49      	subs	r1, r1, r5
 8006e52:	eb62 0206 	sbc.w	r2, r2, r6
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	f04f 0400 	mov.w	r4, #0
 8006e5e:	0194      	lsls	r4, r2, #6
 8006e60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e64:	018b      	lsls	r3, r1, #6
 8006e66:	1a5b      	subs	r3, r3, r1
 8006e68:	eb64 0402 	sbc.w	r4, r4, r2
 8006e6c:	f04f 0100 	mov.w	r1, #0
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	00e2      	lsls	r2, r4, #3
 8006e76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e7a:	00d9      	lsls	r1, r3, #3
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4614      	mov	r4, r2
 8006e80:	195b      	adds	r3, r3, r5
 8006e82:	eb44 0406 	adc.w	r4, r4, r6
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	02a2      	lsls	r2, r4, #10
 8006e90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e94:	0299      	lsls	r1, r3, #10
 8006e96:	460b      	mov	r3, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f04f 0400 	mov.w	r4, #0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4623      	mov	r3, r4
 8006ea8:	f7f9 fc96 	bl	80007d8 <__aeabi_uldivmod>
 8006eac:	4603      	mov	r3, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	0c1b      	lsrs	r3, r3, #16
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	60bb      	str	r3, [r7, #8]
      break;
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ed0:	60bb      	str	r3, [r7, #8]
      break;
 8006ed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	017d7840 	.word	0x017d7840

08006eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000018 	.word	0x20000018

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	08026f64 	.word	0x08026f64

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffdc 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0b5b      	lsrs	r3, r3, #13
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4a03      	ldr	r2, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08026f64 	.word	0x08026f64

08006f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220f      	movs	r2, #15
 8006f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f64:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0203 	and.w	r2, r3, #3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <HAL_RCC_GetClockConfig+0x60>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40023c00 	.word	0x40023c00

08006fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fe0:	4b69      	ldr	r3, [pc, #420]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4a68      	ldr	r2, [pc, #416]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006fea:	6093      	str	r3, [r2, #8]
 8006fec:	4b66      	ldr	r3, [pc, #408]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff4:	4964      	ldr	r1, [pc, #400]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007012:	4b5d      	ldr	r3, [pc, #372]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	4959      	ldr	r1, [pc, #356]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800703e:	2301      	movs	r3, #1
 8007040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800704e:	4b4e      	ldr	r3, [pc, #312]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	494a      	ldr	r1, [pc, #296]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800706c:	d101      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800707a:	2301      	movs	r3, #1
 800707c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800708a:	2301      	movs	r3, #1
 800708c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 808b 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800709c:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	4a39      	ldr	r2, [pc, #228]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a6:	6413      	str	r3, [r2, #64]	; 0x40
 80070a8:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070b4:	4b35      	ldr	r3, [pc, #212]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a34      	ldr	r2, [pc, #208]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c0:	f7fc fcfc 	bl	8003abc <HAL_GetTick>
 80070c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c8:	f7fc fcf8 	bl	8003abc <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	; 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e355      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070da:	4b2c      	ldr	r3, [pc, #176]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0f0      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d035      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	429a      	cmp	r2, r3
 8007102:	d02e      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007104:	4b20      	ldr	r3, [pc, #128]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	4a1a      	ldr	r2, [pc, #104]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800712c:	4b16      	ldr	r3, [pc, #88]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d114      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fc fcc0 	bl	8003abc <HAL_GetTick>
 800713c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713e:	e00a      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007140:	f7fc fcbc 	bl	8003abc <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f241 3288 	movw	r2, #5000	; 0x1388
 800714e:	4293      	cmp	r3, r2
 8007150:	d901      	bls.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e317      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007156:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0ee      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800716e:	d111      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800717e:	400b      	ands	r3, r1
 8007180:	4901      	ldr	r1, [pc, #4]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
 8007186:	e00b      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000
 8007190:	0ffffcff 	.word	0x0ffffcff
 8007194:	4bb0      	ldr	r3, [pc, #704]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4aaf      	ldr	r2, [pc, #700]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800719e:	6093      	str	r3, [r2, #8]
 80071a0:	4bad      	ldr	r3, [pc, #692]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	49aa      	ldr	r1, [pc, #680]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d010      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071be:	4ba6      	ldr	r3, [pc, #664]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c4:	4aa4      	ldr	r2, [pc, #656]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80071ce:	4ba2      	ldr	r3, [pc, #648]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	499f      	ldr	r1, [pc, #636]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071ec:	4b9a      	ldr	r3, [pc, #616]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071fa:	4997      	ldr	r1, [pc, #604]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800720e:	4b92      	ldr	r3, [pc, #584]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721c:	498e      	ldr	r1, [pc, #568]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007230:	4b89      	ldr	r3, [pc, #548]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723e:	4986      	ldr	r1, [pc, #536]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007252:	4b81      	ldr	r3, [pc, #516]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	497d      	ldr	r1, [pc, #500]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007274:	4b78      	ldr	r3, [pc, #480]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f023 0203 	bic.w	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	4975      	ldr	r1, [pc, #468]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007296:	4b70      	ldr	r3, [pc, #448]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f023 020c 	bic.w	r2, r3, #12
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	496c      	ldr	r1, [pc, #432]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072b8:	4b67      	ldr	r3, [pc, #412]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c6:	4964      	ldr	r1, [pc, #400]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072da:	4b5f      	ldr	r3, [pc, #380]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	495b      	ldr	r1, [pc, #364]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072fc:	4b56      	ldr	r3, [pc, #344]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	4953      	ldr	r1, [pc, #332]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800731e:	4b4e      	ldr	r3, [pc, #312]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732c:	494a      	ldr	r1, [pc, #296]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007340:	4b45      	ldr	r3, [pc, #276]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734e:	4942      	ldr	r1, [pc, #264]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007362:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	4939      	ldr	r1, [pc, #228]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007384:	4b34      	ldr	r3, [pc, #208]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007392:	4931      	ldr	r1, [pc, #196]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d011      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80073a6:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b4:	4928      	ldr	r1, [pc, #160]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c4:	d101      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80073c6:	2301      	movs	r3, #1
 80073c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f4:	4918      	ldr	r1, [pc, #96]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007408:	4b13      	ldr	r3, [pc, #76]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007418:	490f      	ldr	r1, [pc, #60]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d005      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800742e:	f040 80d8 	bne.w	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a08      	ldr	r2, [pc, #32]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007438:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800743c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743e:	f7fc fb3d 	bl	8003abc <HAL_GetTick>
 8007442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007444:	e00a      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007446:	f7fc fb39 	bl	8003abc <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b64      	cmp	r3, #100	; 0x64
 8007452:	d903      	bls.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e196      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007458:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800745c:	4b6c      	ldr	r3, [pc, #432]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ee      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d021      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	2b00      	cmp	r3, #0
 800747a:	d11d      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800747c:	4b64      	ldr	r3, [pc, #400]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800747e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800748a:	4b61      	ldr	r3, [pc, #388]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	019a      	lsls	r2, r3, #6
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	431a      	orrs	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	061b      	lsls	r3, r3, #24
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	071b      	lsls	r3, r3, #28
 80074b0:	4957      	ldr	r1, [pc, #348]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x516>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074cc:	d00a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02e      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e2:	d129      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074e4:	4b4a      	ldr	r3, [pc, #296]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074f2:	4b47      	ldr	r3, [pc, #284]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f8:	0f1b      	lsrs	r3, r3, #28
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	019a      	lsls	r2, r3, #6
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	061b      	lsls	r3, r3, #24
 8007512:	431a      	orrs	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	071b      	lsls	r3, r3, #28
 8007518:	493d      	ldr	r1, [pc, #244]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007520:	4b3b      	ldr	r3, [pc, #236]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007526:	f023 021f 	bic.w	r2, r3, #31
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	3b01      	subs	r3, #1
 8007530:	4937      	ldr	r1, [pc, #220]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01d      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007544:	4b32      	ldr	r3, [pc, #200]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754a:	0e1b      	lsrs	r3, r3, #24
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007552:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007558:	0f1b      	lsrs	r3, r3, #28
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	019a      	lsls	r2, r3, #6
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	041b      	lsls	r3, r3, #16
 800756c:	431a      	orrs	r2, r3
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	061b      	lsls	r3, r3, #24
 8007572:	431a      	orrs	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	071b      	lsls	r3, r3, #28
 8007578:	4925      	ldr	r1, [pc, #148]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	019a      	lsls	r2, r3, #6
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	041b      	lsls	r3, r3, #16
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	061b      	lsls	r3, r3, #24
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	071b      	lsls	r3, r3, #28
 80075a8:	4919      	ldr	r1, [pc, #100]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075b0:	4b17      	ldr	r3, [pc, #92]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075bc:	f7fc fa7e 	bl	8003abc <HAL_GetTick>
 80075c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075c4:	f7fc fa7a 	bl	8003abc <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b64      	cmp	r3, #100	; 0x64
 80075d0:	d901      	bls.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e0d7      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075d6:	4b0e      	ldr	r3, [pc, #56]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f0      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 80cd 	bne.w	8007784 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a08      	ldr	r2, [pc, #32]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f6:	f7fc fa61 	bl	8003abc <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075fc:	e00a      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075fe:	f7fc fa5d 	bl	8003abc <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b64      	cmp	r3, #100	; 0x64
 800760a:	d903      	bls.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e0ba      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007610:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007614:	4b5e      	ldr	r3, [pc, #376]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007620:	d0ed      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02e      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	d12a      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800764a:	4b51      	ldr	r3, [pc, #324]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007658:	4b4d      	ldr	r3, [pc, #308]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765e:	0f1b      	lsrs	r3, r3, #28
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	019a      	lsls	r2, r3, #6
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	431a      	orrs	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	071b      	lsls	r3, r3, #28
 800767e:	4944      	ldr	r1, [pc, #272]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007686:	4b42      	ldr	r3, [pc, #264]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	3b01      	subs	r3, #1
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	493d      	ldr	r1, [pc, #244]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d022      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b4:	d11d      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076b6:	4b36      	ldr	r3, [pc, #216]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076bc:	0e1b      	lsrs	r3, r3, #24
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076c4:	4b32      	ldr	r3, [pc, #200]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	0f1b      	lsrs	r3, r3, #28
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	019a      	lsls	r2, r3, #6
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	431a      	orrs	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	071b      	lsls	r3, r3, #28
 80076ea:	4929      	ldr	r1, [pc, #164]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d028      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800770c:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	019a      	lsls	r2, r3, #6
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	041b      	lsls	r3, r3, #16
 8007724:	431a      	orrs	r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	061b      	lsls	r3, r3, #24
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	071b      	lsls	r3, r3, #28
 8007732:	4917      	ldr	r1, [pc, #92]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007734:	4313      	orrs	r3, r2
 8007736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4911      	ldr	r1, [pc, #68]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a0e      	ldr	r2, [pc, #56]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775c:	f7fc f9ae 	bl	8003abc <HAL_GetTick>
 8007760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007764:	f7fc f9aa 	bl	8003abc <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e007      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800777e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007782:	d1ef      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40023800 	.word	0x40023800

08007794 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077b2:	f040 8086 	bne.w	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80077b6:	4b8d      	ldr	r3, [pc, #564]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077cc:	d03e      	beq.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80077ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077d2:	d073      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d000      	beq.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80077d8:	e074      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80077da:	4b84      	ldr	r3, [pc, #528]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077e6:	4b81      	ldr	r3, [pc, #516]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ee:	4a80      	ldr	r2, [pc, #512]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80077f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	e007      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80077f8:	4b7c      	ldr	r3, [pc, #496]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007800:	4a7c      	ldr	r2, [pc, #496]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007808:	4b78      	ldr	r3, [pc, #480]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780e:	0e1b      	lsrs	r3, r3, #24
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007816:	4b75      	ldr	r3, [pc, #468]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781c:	099b      	lsrs	r3, r3, #6
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	fb02 f203 	mul.w	r2, r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007830:	4b6e      	ldr	r3, [pc, #440]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]
        break;
 800784a:	e03b      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800784c:	4b67      	ldr	r3, [pc, #412]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d108      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007858:	4b64      	ldr	r3, [pc, #400]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007860:	4a63      	ldr	r2, [pc, #396]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	e007      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800786a:	4b60      	ldr	r3, [pc, #384]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007872:	4a60      	ldr	r2, [pc, #384]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007874:	fbb2 f3f3 	udiv	r3, r2, r3
 8007878:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800787a:	4b5c      	ldr	r3, [pc, #368]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800787c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007880:	0e1b      	lsrs	r3, r3, #24
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007888:	4b58      	ldr	r3, [pc, #352]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788e:	099b      	lsrs	r3, r3, #6
 8007890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	fb02 f203 	mul.w	r2, r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80078a2:	4b52      	ldr	r3, [pc, #328]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	3301      	adds	r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]
        break;
 80078ba:	e003      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80078bc:	4b4e      	ldr	r3, [pc, #312]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80078be:	617b      	str	r3, [r7, #20]
        break;
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80078c2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ca:	f040 8086 	bne.w	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80078ce:	4b47      	ldr	r3, [pc, #284]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80078dc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e4:	d03e      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80078e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078ea:	d073      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d000      	beq.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80078f0:	e074      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80078f2:	4b3e      	ldr	r3, [pc, #248]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d108      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078fe:	4b3b      	ldr	r3, [pc, #236]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007906:	4a3a      	ldr	r2, [pc, #232]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	e007      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007910:	4b36      	ldr	r3, [pc, #216]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007918:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800791a:	fbb2 f3f3 	udiv	r3, r2, r3
 800791e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007920:	4b32      	ldr	r3, [pc, #200]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007926:	0e1b      	lsrs	r3, r3, #24
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800792e:	4b2f      	ldr	r3, [pc, #188]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007934:	099b      	lsrs	r3, r3, #6
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	fb02 f203 	mul.w	r2, r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007948:	4b28      	ldr	r3, [pc, #160]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800794a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	617b      	str	r3, [r7, #20]
        break;
 8007962:	e03b      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007964:	4b21      	ldr	r3, [pc, #132]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007970:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007978:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	e007      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007982:	4b1a      	ldr	r3, [pc, #104]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800798a:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007992:	4b16      	ldr	r3, [pc, #88]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	0e1b      	lsrs	r3, r3, #24
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	fb02 f203 	mul.w	r2, r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
        break;
 80079d2:	e003      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80079d4:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80079d6:	617b      	str	r3, [r7, #20]
        break;
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80079da:	bf00      	nop

  return frequency;
 80079dc:	697b      	ldr	r3, [r7, #20]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800
 80079f0:	00f42400 	.word	0x00f42400
 80079f4:	017d7840 	.word	0x017d7840
 80079f8:	00bb8000 	.word	0x00bb8000

080079fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e06b      	b.n	8007ae6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7f5b      	ldrb	r3, [r3, #29]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fb fa82 	bl	8002f28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	22ca      	movs	r2, #202	; 0xca
 8007a30:	625a      	str	r2, [r3, #36]	; 0x24
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2253      	movs	r2, #83	; 0x53
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb00 	bl	8008040 <RTC_EnterInitMode>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	22ff      	movs	r2, #255	; 0xff
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e046      	b.n	8007ae6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6899      	ldr	r1, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <HAL_RTC_Init+0xf4>)
 8007a64:	400b      	ands	r3, r1
 8007a66:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6899      	ldr	r1, [r3, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68d2      	ldr	r2, [r2, #12]
 8007a8e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6919      	ldr	r1, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	041a      	lsls	r2, r3, #16
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ab2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	22ff      	movs	r2, #255	; 0xff
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	ff8fffbf 	.word	0xff8fffbf

08007af4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	7f1b      	ldrb	r3, [r3, #28]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_RTC_SetTime+0x1c>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e0a8      	b.n	8007c62 <HAL_RTC_SetTime+0x16e>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2201      	movs	r2, #1
 8007b14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d126      	bne.n	8007b70 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 faac 	bl	8008098 <RTC_ByteToBcd2>
 8007b40:	4603      	mov	r3, r0
 8007b42:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 faa5 	bl	8008098 <RTC_ByteToBcd2>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b52:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	789b      	ldrb	r3, [r3, #2]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fa9d 	bl	8008098 <RTC_ByteToBcd2>
 8007b5e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	7b1b      	ldrb	r3, [r3, #12]
 8007b68:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e018      	b.n	8007ba2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b90:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7b1b      	ldrb	r3, [r3, #12]
 8007b9c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	22ca      	movs	r2, #202	; 0xca
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2253      	movs	r2, #83	; 0x53
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa44 	bl	8008040 <RTC_EnterInitMode>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	22ff      	movs	r2, #255	; 0xff
 8007bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e045      	b.n	8007c62 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <HAL_RTC_SetTime+0x178>)
 8007bde:	400b      	ands	r3, r1
 8007be0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bf0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6899      	ldr	r1, [r3, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c18:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d111      	bne.n	8007c4c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f9e1 	bl	8007ff0 <HAL_RTC_WaitForSynchro>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	22ff      	movs	r2, #255	; 0xff
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e00a      	b.n	8007c62 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c60:	2300      	movs	r3, #0
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd90      	pop	{r4, r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	007f7f7f 	.word	0x007f7f7f

08007c70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7f1b      	ldrb	r3, [r3, #28]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_RTC_SetDate+0x1c>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e092      	b.n	8007db2 <HAL_RTC_SetDate+0x142>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10e      	bne.n	8007cbc <HAL_RTC_SetDate+0x4c>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	f023 0310 	bic.w	r3, r3, #16
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	330a      	adds	r3, #10
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11c      	bne.n	8007cfc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	78db      	ldrb	r3, [r3, #3]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f9e6 	bl	8008098 <RTC_ByteToBcd2>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f9df 	bl	8008098 <RTC_ByteToBcd2>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	789b      	ldrb	r3, [r3, #2]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f9d7 	bl	8008098 <RTC_ByteToBcd2>
 8007cea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007cec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e00e      	b.n	8007d1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	78db      	ldrb	r3, [r3, #3]
 8007d00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d08:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007d0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	22ca      	movs	r2, #202	; 0xca
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2253      	movs	r2, #83	; 0x53
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f988 	bl	8008040 <RTC_EnterInitMode>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	22ff      	movs	r2, #255	; 0xff
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2204      	movs	r2, #4
 8007d42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e031      	b.n	8007db2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	6979      	ldr	r1, [r7, #20]
 8007d54:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <HAL_RTC_SetDate+0x14c>)
 8007d56:	400b      	ands	r3, r1
 8007d58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d68:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d111      	bne.n	8007d9c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f939 	bl	8007ff0 <HAL_RTC_WaitForSynchro>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	22ff      	movs	r2, #255	; 0xff
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e00a      	b.n	8007db2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	22ff      	movs	r2, #255	; 0xff
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007db0:	2300      	movs	r3, #0
  }
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd90      	pop	{r4, r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	00ffff3f 	.word	0x00ffff3f

08007dc0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007dc0:	b590      	push	{r4, r7, lr}
 8007dc2:	b089      	sub	sp, #36	; 0x24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	7f1b      	ldrb	r3, [r3, #28]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_RTC_SetAlarm+0x24>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e101      	b.n	8007fe8 <HAL_RTC_SetAlarm+0x228>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2202      	movs	r2, #2
 8007dee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d137      	bne.n	8007e66 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f942 	bl	8008098 <RTC_ByteToBcd2>
 8007e14:	4603      	mov	r3, r0
 8007e16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 f93b 	bl	8008098 <RTC_ByteToBcd2>
 8007e22:	4603      	mov	r3, r0
 8007e24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f933 	bl	8008098 <RTC_ByteToBcd2>
 8007e32:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e34:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7b1b      	ldrb	r3, [r3, #12]
 8007e3c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e3e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f925 	bl	8008098 <RTC_ByteToBcd2>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e52:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61fb      	str	r3, [r7, #28]
 8007e64:	e023      	b.n	8007eae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007e86:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e8c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	7b1b      	ldrb	r3, [r3, #12]
 8007e92:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007e94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ea4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	22ca      	movs	r2, #202	; 0xca
 8007ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2253      	movs	r2, #83	; 0x53
 8007ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d13f      	bne.n	8007f54 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ee2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ef2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ef4:	f7fb fde2 	bl	8003abc <HAL_GetTick>
 8007ef8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007efa:	e013      	b.n	8007f24 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007efc:	f7fb fdde 	bl	8003abc <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f0a:	d90b      	bls.n	8007f24 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	22ff      	movs	r2, #255	; 0xff
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2203      	movs	r2, #3
 8007f18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e061      	b.n	8007fe8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0e4      	beq.n	8007efc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f50:	609a      	str	r2, [r3, #8]
 8007f52:	e03e      	b.n	8007fd2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f62:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f72:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f74:	f7fb fda2 	bl	8003abc <HAL_GetTick>
 8007f78:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007f7a:	e013      	b.n	8007fa4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f7c:	f7fb fd9e 	bl	8003abc <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f8a:	d90b      	bls.n	8007fa4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2203      	movs	r2, #3
 8007f98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e021      	b.n	8007fe8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0e4      	beq.n	8007f7c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	22ff      	movs	r2, #255	; 0xff
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3724      	adds	r7, #36	; 0x24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}

08007ff0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800800a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800800c:	f7fb fd56 	bl	8003abc <HAL_GetTick>
 8008010:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008012:	e009      	b.n	8008028 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008014:	f7fb fd52 	bl	8003abc <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008022:	d901      	bls.n	8008028 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e007      	b.n	8008038 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0ee      	beq.n	8008014 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d119      	bne.n	800808e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008064:	f7fb fd2a 	bl	8003abc <HAL_GetTick>
 8008068:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800806a:	e009      	b.n	8008080 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800806c:	f7fb fd26 	bl	8003abc <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800807a:	d901      	bls.n	8008080 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e007      	b.n	8008090 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0ee      	beq.n	800806c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80080a6:	e005      	b.n	80080b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3301      	adds	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	3b0a      	subs	r3, #10
 80080b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b09      	cmp	r3, #9
 80080b8:	d8f6      	bhi.n	80080a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	7f1b      	ldrb	r3, [r3, #28]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e03e      	b.n	800816e <HAL_RTCEx_SetTimeStamp+0x9a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2202      	movs	r2, #2
 80080fa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	4b1e      	ldr	r3, [pc, #120]	; (800817c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008104:	4013      	ands	r3, r2
 8008106:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	22ca      	movs	r2, #202	; 0xca
 8008116:	625a      	str	r2, [r3, #36]	; 0x24
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2253      	movs	r2, #83	; 0x53
 800811e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0206 	bic.w	r2, r2, #6
 800812e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	430a      	orrs	r2, r1
 800813e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008156:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	22ff      	movs	r2, #255	; 0xff
 800815e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	fffff7f7 	.word	0xfffff7f7

08008180 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e149      	b.n	8008432 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fb fa62 	bl	800367c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f94f 	bl	8008464 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d007      	beq.n	80081de <HAL_SAI_Init+0x5e>
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d302      	bcc.n	80081d8 <HAL_SAI_Init+0x58>
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d006      	beq.n	80081e4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80081d6:	e008      	b.n	80081ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	61fb      	str	r3, [r7, #28]
      break;
 80081dc:	e005      	b.n	80081ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80081de:	2310      	movs	r3, #16
 80081e0:	61fb      	str	r3, [r7, #28]
      break;
 80081e2:	e002      	b.n	80081ea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80081e4:	2320      	movs	r3, #32
 80081e6:	61fb      	str	r3, [r7, #28]
      break;
 80081e8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d81d      	bhi.n	800822e <HAL_SAI_Init+0xae>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <HAL_SAI_Init+0x78>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	08008209 	.word	0x08008209
 80081fc:	0800820f 	.word	0x0800820f
 8008200:	08008217 	.word	0x08008217
 8008204:	0800821f 	.word	0x0800821f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]
      }
      break;
 800820c:	e010      	b.n	8008230 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800820e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008212:	617b      	str	r3, [r7, #20]
      }
      break;
 8008214:	e00c      	b.n	8008230 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800821a:	617b      	str	r3, [r7, #20]
      }
      break;
 800821c:	e008      	b.n	8008230 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800821e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008222:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800822c:	e000      	b.n	8008230 <HAL_SAI_Init+0xb0>
  default:
    break;
 800822e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a81      	ldr	r2, [pc, #516]	; (800843c <HAL_SAI_Init+0x2bc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <HAL_SAI_Init+0xc4>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a80      	ldr	r2, [pc, #512]	; (8008440 <HAL_SAI_Init+0x2c0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d103      	bne.n	800824c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008244:	4a7f      	ldr	r2, [pc, #508]	; (8008444 <HAL_SAI_Init+0x2c4>)
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	e002      	b.n	8008252 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800824c:	4a7e      	ldr	r2, [pc, #504]	; (8008448 <HAL_SAI_Init+0x2c8>)
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d043      	beq.n	80082e2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a76      	ldr	r2, [pc, #472]	; (800843c <HAL_SAI_Init+0x2bc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d004      	beq.n	8008272 <HAL_SAI_Init+0xf2>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a74      	ldr	r2, [pc, #464]	; (8008440 <HAL_SAI_Init+0x2c0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d104      	bne.n	800827c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008272:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008276:	f7ff fa8d 	bl	8007794 <HAL_RCCEx_GetPeriphCLKFreq>
 800827a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a72      	ldr	r2, [pc, #456]	; (800844c <HAL_SAI_Init+0x2cc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <HAL_SAI_Init+0x110>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_SAI_Init+0x2d0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d104      	bne.n	800829a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008290:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008294:	f7ff fa7e 	bl	8007794 <HAL_RCCEx_GetPeriphCLKFreq>
 8008298:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	461a      	mov	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	025b      	lsls	r3, r3, #9
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a67      	ldr	r2, [pc, #412]	; (8008454 <HAL_SAI_Init+0x2d4>)
 80082b6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ba:	08da      	lsrs	r2, r3, #3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80082c0:	68f9      	ldr	r1, [r7, #12]
 80082c2:	4b64      	ldr	r3, [pc, #400]	; (8008454 <HAL_SAI_Init+0x2d4>)
 80082c4:	fba3 2301 	umull	r2, r3, r3, r1
 80082c8:	08da      	lsrs	r2, r3, #3
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	1aca      	subs	r2, r1, r3
 80082d4:	2a08      	cmp	r2, #8
 80082d6:	d904      	bls.n	80082e2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_SAI_Init+0x172>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d109      	bne.n	8008306 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d101      	bne.n	80082fe <HAL_SAI_Init+0x17e>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e001      	b.n	8008302 <HAL_SAI_Init+0x182>
 80082fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	e008      	b.n	8008318 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	2b01      	cmp	r3, #1
 800830c:	d102      	bne.n	8008314 <HAL_SAI_Init+0x194>
 800830e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008312:	e000      	b.n	8008316 <HAL_SAI_Init+0x196>
 8008314:	2300      	movs	r3, #0
 8008316:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4b4d      	ldr	r3, [pc, #308]	; (8008458 <HAL_SAI_Init+0x2d8>)
 8008324:	400b      	ands	r3, r1
 8008326:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6819      	ldr	r1, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800833c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	431a      	orrs	r2, r3
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008350:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800835c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	051b      	lsls	r3, r3, #20
 8008364:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b38      	ldr	r3, [pc, #224]	; (800845c <HAL_SAI_Init+0x2dc>)
 800837a:	400b      	ands	r3, r1
 800837c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6859      	ldr	r1, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6899      	ldr	r1, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b2e      	ldr	r3, [pc, #184]	; (8008460 <HAL_SAI_Init+0x2e0>)
 80083a8:	400b      	ands	r3, r1
 80083aa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6899      	ldr	r1, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083bc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80083c2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80083c8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	3b01      	subs	r3, #1
 80083d0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80083d2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68d9      	ldr	r1, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80083ea:	400b      	ands	r3, r1
 80083ec:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68d9      	ldr	r1, [r3, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840a:	3b01      	subs	r3, #1
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40015804 	.word	0x40015804
 8008440:	40015824 	.word	0x40015824
 8008444:	40015800 	.word	0x40015800
 8008448:	40015c00 	.word	0x40015c00
 800844c:	40015c04 	.word	0x40015c04
 8008450:	40015c24 	.word	0x40015c24
 8008454:	cccccccd 	.word	0xcccccccd
 8008458:	ff05c010 	.word	0xff05c010
 800845c:	ffff1ff0 	.word	0xffff1ff0
 8008460:	fff88000 	.word	0xfff88000

08008464 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008464:	b490      	push	{r4, r7}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800846c:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <SAI_Disable+0x64>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <SAI_Disable+0x68>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	0b1b      	lsrs	r3, r3, #12
 8008478:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800848c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800848e:	4623      	mov	r3, r4
 8008490:	1e5c      	subs	r4, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	73fb      	strb	r3, [r7, #15]
      break;
 80084aa:	e006      	b.n	80084ba <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e9      	bne.n	800848e <SAI_Disable+0x2a>

  return status;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc90      	pop	{r4, r7}
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000018 	.word	0x20000018
 80084cc:	95cbec1b 	.word	0x95cbec1b

080084d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e022      	b.n	8008528 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fa fd31 	bl	8002f5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2203      	movs	r2, #3
 80084fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f814 	bl	8008530 <HAL_SD_InitCard>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e00a      	b.n	8008528 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008530:	b5b0      	push	{r4, r5, r7, lr}
 8008532:	b08e      	sub	sp, #56	; 0x38
 8008534:	af04      	add	r7, sp, #16
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800854c:	2376      	movs	r3, #118	; 0x76
 800854e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681d      	ldr	r5, [r3, #0]
 8008554:	466c      	mov	r4, sp
 8008556:	f107 0314 	add.w	r3, r7, #20
 800855a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800855e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008568:	4628      	mov	r0, r5
 800856a:	f002 ff51 	bl	800b410 <SDMMC_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e03b      	b.n	80085f8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800858e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f002 ff74 	bl	800b482 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fde6 	bl	800917c <SD_PowerON>
 80085b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e013      	b.n	80085f8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fd05 	bl	8008fe0 <SD_InitCard>
 80085d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bdb0      	pop	{r4, r5, r7, pc}

08008600 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	; 0x30
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d107      	bne.n	8008628 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0cc      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	f040 80c5 	bne.w	80087c0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800863c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008646:	429a      	cmp	r2, r3
 8008648:	d907      	bls.n	800865a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e0b3      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2203      	movs	r2, #3
 800865e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	4a53      	ldr	r2, [pc, #332]	; (80087cc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	4a52      	ldr	r2, [pc, #328]	; (80087d0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008688:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	2200      	movs	r2, #0
 8008690:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3380      	adds	r3, #128	; 0x80
 800869c:	4619      	mov	r1, r3
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	025b      	lsls	r3, r3, #9
 80086a4:	089b      	lsrs	r3, r3, #2
 80086a6:	f7fc fcb7 	bl	8005018 <HAL_DMA_Start_IT>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d017      	beq.n	80086e0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80086be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a43      	ldr	r2, [pc, #268]	; (80087d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e070      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0208 	orr.w	r2, r2, #8
 80086ee:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d002      	beq.n	80086fe <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	025b      	lsls	r3, r3, #9
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008706:	4618      	mov	r0, r3
 8008708:	f002 ff4e 	bl	800b5a8 <SDMMC_CmdBlockLength>
 800870c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00f      	beq.n	8008734 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2e      	ldr	r2, [pc, #184]	; (80087d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	431a      	orrs	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e046      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008734:	f04f 33ff 	mov.w	r3, #4294967295
 8008738:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	025b      	lsls	r3, r3, #9
 800873e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008740:	2390      	movs	r3, #144	; 0x90
 8008742:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008744:	2302      	movs	r3, #2
 8008746:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008748:	2300      	movs	r3, #0
 800874a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800874c:	2301      	movs	r3, #1
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f107 0210 	add.w	r2, r7, #16
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f002 fef8 	bl	800b550 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d90a      	bls.n	800877c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2282      	movs	r2, #130	; 0x82
 800876a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008772:	4618      	mov	r0, r3
 8008774:	f002 ff5c 	bl	800b630 <SDMMC_CmdReadMultiBlock>
 8008778:	62f8      	str	r0, [r7, #44]	; 0x2c
 800877a:	e009      	b.n	8008790 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2281      	movs	r2, #129	; 0x81
 8008780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008788:	4618      	mov	r0, r3
 800878a:	f002 ff2f 	bl	800b5ec <SDMMC_CmdReadSingleBlock>
 800878e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d012      	beq.n	80087bc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a0e      	ldr	r2, [pc, #56]	; (80087d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e002      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	e000      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3730      	adds	r7, #48	; 0x30
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	08008ecb 	.word	0x08008ecb
 80087d0:	08008f3d 	.word	0x08008f3d
 80087d4:	004005ff 	.word	0x004005ff

080087d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08c      	sub	sp, #48	; 0x30
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d107      	bne.n	8008800 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e0cf      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	f040 80c8 	bne.w	800899e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	441a      	add	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	429a      	cmp	r2, r3
 8008820:	d907      	bls.n	8008832 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e0b6      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2203      	movs	r2, #3
 8008836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2200      	movs	r2, #0
 8008840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 021a 	orr.w	r2, r2, #26
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008856:	4a54      	ldr	r2, [pc, #336]	; (80089a8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	4a53      	ldr	r2, [pc, #332]	; (80089ac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008860:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	2200      	movs	r2, #0
 8008868:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	2b01      	cmp	r3, #1
 8008870:	d002      	beq.n	8008878 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	025b      	lsls	r3, r3, #9
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008880:	4618      	mov	r0, r3
 8008882:	f002 fe91 	bl	800b5a8 <SDMMC_CmdBlockLength>
 8008886:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00f      	beq.n	80088ae <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a47      	ldr	r2, [pc, #284]	; (80089b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	431a      	orrs	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e078      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d90a      	bls.n	80088ca <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	22a0      	movs	r2, #160	; 0xa0
 80088b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c0:	4618      	mov	r0, r3
 80088c2:	f002 fef9 	bl	800b6b8 <SDMMC_CmdWriteMultiBlock>
 80088c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088c8:	e009      	b.n	80088de <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2290      	movs	r2, #144	; 0x90
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 fecc 	bl	800b674 <SDMMC_CmdWriteSingleBlock>
 80088dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d012      	beq.n	800890a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a31      	ldr	r2, [pc, #196]	; (80089b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	431a      	orrs	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e04a      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0208 	orr.w	r2, r2, #8
 8008918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3380      	adds	r3, #128	; 0x80
 8008926:	461a      	mov	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	025b      	lsls	r3, r3, #9
 800892c:	089b      	lsrs	r3, r3, #2
 800892e:	f7fc fb73 	bl	8005018 <HAL_DMA_Start_IT>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01a      	beq.n	800896e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 021a 	bic.w	r2, r2, #26
 8008946:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e018      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	025b      	lsls	r3, r3, #9
 8008978:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800897a:	2390      	movs	r3, #144	; 0x90
 800897c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008982:	2300      	movs	r3, #0
 8008984:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008986:	2301      	movs	r3, #1
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f107 0210 	add.w	r2, r7, #16
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f002 fddb 	bl	800b550 <SDMMC_ConfigData>

      return HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	e000      	b.n	80089a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800899e:	2302      	movs	r3, #2
  }
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3730      	adds	r7, #48	; 0x30
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	08008ea1 	.word	0x08008ea1
 80089ac:	08008f3d 	.word	0x08008f3d
 80089b0:	004005ff 	.word	0x004005ff

080089b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d6:	0f9b      	lsrs	r3, r3, #30
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e2:	0e9b      	lsrs	r3, r3, #26
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 030f 	and.w	r3, r3, #15
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089f4:	0e1b      	lsrs	r3, r3, #24
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a06:	0c1b      	lsrs	r3, r3, #16
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a28:	0d1b      	lsrs	r3, r3, #20
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 030f 	and.w	r3, r3, #15
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a46:	0bdb      	lsrs	r3, r3, #15
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a58:	0b9b      	lsrs	r3, r3, #14
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6a:	0b5b      	lsrs	r3, r3, #13
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7c:	0b1b      	lsrs	r3, r3, #12
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d163      	bne.n	8008b60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9c:	009a      	lsls	r2, r3, #2
 8008a9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008aa8:	0f92      	lsrs	r2, r2, #30
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	0edb      	lsrs	r3, r3, #27
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac6:	0e1b      	lsrs	r3, r3, #24
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad8:	0d5b      	lsrs	r3, r3, #21
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aea:	0c9b      	lsrs	r3, r3, #18
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afc:	0bdb      	lsrs	r3, r3, #15
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	7e1b      	ldrb	r3, [r3, #24]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	3302      	adds	r3, #2
 8008b20:	2201      	movs	r2, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b2a:	fb02 f203 	mul.w	r2, r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	7a1b      	ldrb	r3, [r3, #8]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b4c:	0a52      	lsrs	r2, r2, #9
 8008b4e:	fb02 f203 	mul.w	r2, r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	661a      	str	r2, [r3, #96]	; 0x60
 8008b5e:	e031      	b.n	8008bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d11d      	bne.n	8008ba4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	3301      	adds	r3, #1
 8008b84:	029a      	lsls	r2, r3, #10
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ba2:	e00f      	b.n	8008bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a58      	ldr	r2, [pc, #352]	; (8008d0c <HAL_SD_GetCardCSD+0x344>)
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e09d      	b.n	8008d00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc8:	0b9b      	lsrs	r3, r3, #14
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bda:	09db      	lsrs	r3, r3, #7
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	0fdb      	lsrs	r3, r3, #31
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	0f5b      	lsrs	r3, r3, #29
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1a:	0e9b      	lsrs	r3, r3, #26
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2c:	0d9b      	lsrs	r3, r3, #22
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3e:	0d5b      	lsrs	r3, r3, #21
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	0bdb      	lsrs	r3, r3, #15
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	0b9b      	lsrs	r3, r3, #14
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	0b5b      	lsrs	r3, r3, #13
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	0b1b      	lsrs	r3, r3, #12
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	0a9b      	lsrs	r3, r3, #10
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	004005ff 	.word	0x004005ff

08008d10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d68:	b5b0      	push	{r4, r5, r7, lr}
 8008d6a:	b08e      	sub	sp, #56	; 0x38
 8008d6c:	af04      	add	r7, sp, #16
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2203      	movs	r2, #3
 8008d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d02e      	beq.n	8008de0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d88:	d106      	bne.n	8008d98 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	639a      	str	r2, [r3, #56]	; 0x38
 8008d96:	e029      	b.n	8008dec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9e:	d10a      	bne.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 faa1 	bl	80092e8 <SD_WideBus_Enable>
 8008da6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
 8008db4:	e01a      	b.n	8008dec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fade 	bl	800937e <SD_WideBus_Disable>
 8008dc2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
 8008dd0:	e00c      	b.n	8008dec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8008dde:	e005      	b.n	8008dec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e024      	b.n	8008e52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	466c      	mov	r4, sp
 8008e30:	f107 0318 	add.w	r3, r7, #24
 8008e34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e3c:	f107 030c 	add.w	r3, r7, #12
 8008e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e42:	4628      	mov	r0, r5
 8008e44:	f002 fae4 	bl	800b410 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bdb0      	pop	{r4, r5, r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	004005ff 	.word	0x004005ff

08008e60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa10 	bl	8009298 <SD_SendStatus>
 8008e78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0a5b      	lsrs	r3, r3, #9
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e96:	693b      	ldr	r3, [r7, #16]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ebc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	2b82      	cmp	r3, #130	; 0x82
 8008ede:	d111      	bne.n	8008f04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f002 fc09 	bl	800b6fc <SDMMC_CmdStopTransfer>
 8008eea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d008      	beq.n	8008f04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fd58 	bl	80089b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0208 	bic.w	r2, r2, #8
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f003 f84f 	bl	800bfd0 <HAL_SD_RxCpltCallback>
#endif
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fc f8c4 	bl	80050d8 <HAL_DMA_GetError>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d03e      	beq.n	8008fd4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d002      	beq.n	8008f72 <SD_DMAError+0x36>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d12d      	bne.n	8008fce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <SD_DMAError+0xa0>)
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7ff ff62 	bl	8008e60 <HAL_SD_GetCardState>
 8008f9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d002      	beq.n	8008faa <SD_DMAError+0x6e>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d10a      	bne.n	8008fc0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 fba4 	bl	800b6fc <SDMMC_CmdStopTransfer>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff fcf0 	bl	80089b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	004005ff 	.word	0x004005ff

08008fe0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fe0:	b5b0      	push	{r4, r5, r7, lr}
 8008fe2:	b094      	sub	sp, #80	; 0x50
 8008fe4:	af04      	add	r7, sp, #16
 8008fe6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 fa55 	bl	800b4a0 <SDMMC_GetPowerState>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ffc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009000:	e0b7      	b.n	8009172 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009006:	2b03      	cmp	r3, #3
 8009008:	d02f      	beq.n	800906a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f002 fc7f 	bl	800b912 <SDMMC_CmdSendCID>
 8009014:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <SD_InitCard+0x40>
    {
      return errorstate;
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	e0a8      	b.n	8009172 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fa7f 	bl	800b52a <SDMMC_GetResponse>
 800902c:	4602      	mov	r2, r0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2104      	movs	r1, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f002 fa76 	bl	800b52a <SDMMC_GetResponse>
 800903e:	4602      	mov	r2, r0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2108      	movs	r1, #8
 800904a:	4618      	mov	r0, r3
 800904c:	f002 fa6d 	bl	800b52a <SDMMC_GetResponse>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	210c      	movs	r1, #12
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fa64 	bl	800b52a <SDMMC_GetResponse>
 8009062:	4602      	mov	r2, r0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	2b03      	cmp	r3, #3
 8009070:	d00d      	beq.n	800908e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f107 020e 	add.w	r2, r7, #14
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f002 fc85 	bl	800b98c <SDMMC_CmdSetRelAdd>
 8009082:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <SD_InitCard+0xae>
    {
      return errorstate;
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908c:	e071      	b.n	8009172 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	2b03      	cmp	r3, #3
 8009094:	d036      	beq.n	8009104 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009096:	89fb      	ldrh	r3, [r7, #14]
 8009098:	461a      	mov	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	041b      	lsls	r3, r3, #16
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f002 fc4f 	bl	800b94e <SDMMC_CmdSendCSD>
 80090b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	e05a      	b.n	8009172 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f002 fa31 	bl	800b52a <SDMMC_GetResponse>
 80090c8:	4602      	mov	r2, r0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2104      	movs	r1, #4
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 fa28 	bl	800b52a <SDMMC_GetResponse>
 80090da:	4602      	mov	r2, r0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2108      	movs	r1, #8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f002 fa1f 	bl	800b52a <SDMMC_GetResponse>
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	210c      	movs	r1, #12
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 fa16 	bl	800b52a <SDMMC_GetResponse>
 80090fe:	4602      	mov	r2, r0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2104      	movs	r1, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f002 fa0d 	bl	800b52a <SDMMC_GetResponse>
 8009110:	4603      	mov	r3, r0
 8009112:	0d1a      	lsrs	r2, r3, #20
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009118:	f107 0310 	add.w	r3, r7, #16
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff fc52 	bl	80089c8 <HAL_SD_GetCardCSD>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800912a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800912e:	e020      	b.n	8009172 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	f04f 0400 	mov.w	r4, #0
 800913e:	461a      	mov	r2, r3
 8009140:	4623      	mov	r3, r4
 8009142:	4608      	mov	r0, r1
 8009144:	f002 fafc 	bl	800b740 <SDMMC_CmdSelDesel>
 8009148:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800914a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <SD_InitCard+0x174>
  {
    return errorstate;
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	e00e      	b.n	8009172 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681d      	ldr	r5, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	466c      	mov	r4, sp
 800915c:	f103 0210 	add.w	r2, r3, #16
 8009160:	ca07      	ldmia	r2, {r0, r1, r2}
 8009162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009166:	3304      	adds	r3, #4
 8009168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800916a:	4628      	mov	r0, r5
 800916c:	f002 f950 	bl	800b410 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3740      	adds	r7, #64	; 0x40
 8009176:	46bd      	mov	sp, r7
 8009178:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800917c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	2300      	movs	r3, #0
 800918e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f002 faf6 	bl	800b786 <SDMMC_CmdGoIdleState>
 800919a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	e072      	b.n	800928c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f002 fb09 	bl	800b7c2 <SDMMC_CmdOperCond>
 80091b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00d      	beq.n	80091d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 fadf 	bl	800b786 <SDMMC_CmdGoIdleState>
 80091c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <SD_PowerON+0x5e>
    {
      return errorstate;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	e05b      	b.n	800928c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d137      	bne.n	8009252 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fb09 	bl	800b800 <SDMMC_CmdAppCommand>
 80091ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d02d      	beq.n	8009252 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091fa:	e047      	b.n	800928c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f002 fafc 	bl	800b800 <SDMMC_CmdAppCommand>
 8009208:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <SD_PowerON+0x98>
    {
      return errorstate;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e03b      	b.n	800928c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	491e      	ldr	r1, [pc, #120]	; (8009294 <SD_PowerON+0x118>)
 800921a:	4618      	mov	r0, r3
 800921c:	f002 fb12 	bl	800b844 <SDMMC_CmdAppOperCommand>
 8009220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009228:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800922c:	e02e      	b.n	800928c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2100      	movs	r1, #0
 8009234:	4618      	mov	r0, r3
 8009236:	f002 f978 	bl	800b52a <SDMMC_GetResponse>
 800923a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	0fdb      	lsrs	r3, r3, #31
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <SD_PowerON+0xcc>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <SD_PowerON+0xce>
 8009248:	2300      	movs	r3, #0
 800924a:	613b      	str	r3, [r7, #16]

    count++;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3301      	adds	r3, #1
 8009250:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009258:	4293      	cmp	r3, r2
 800925a:	d802      	bhi.n	8009262 <SD_PowerON+0xe6>
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0cc      	beq.n	80091fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009268:	4293      	cmp	r3, r2
 800926a:	d902      	bls.n	8009272 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800926c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009270:	e00c      	b.n	800928c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	645a      	str	r2, [r3, #68]	; 0x44
 8009282:	e002      	b.n	800928a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	c1100000 	.word	0xc1100000

08009298 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092ac:	e018      	b.n	80092e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f002 fb87 	bl	800b9ce <SDMMC_CmdSendStatus>
 80092c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <SD_SendStatus+0x34>
  {
    return errorstate;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	e009      	b.n	80092e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f002 f929 	bl	800b52a <SDMMC_GetResponse>
 80092d8:	4602      	mov	r2, r0
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	2300      	movs	r3, #0
 80092f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f002 f913 	bl	800b52a <SDMMC_GetResponse>
 8009304:	4603      	mov	r3, r0
 8009306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800930a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800930e:	d102      	bne.n	8009316 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009314:	e02f      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f879 	bl	8009414 <SD_FindSCR>
 8009322:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	e023      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01c      	beq.n	8009372 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f002 fa5b 	bl	800b800 <SDMMC_CmdAppCommand>
 800934a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	e00f      	b.n	8009376 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2102      	movs	r1, #2
 800935c:	4618      	mov	r0, r3
 800935e:	f002 fa95 	bl	800b88c <SDMMC_CmdBusWidth>
 8009362:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	e003      	b.n	8009376 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	e001      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	2300      	movs	r3, #0
 800938c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f002 f8c8 	bl	800b52a <SDMMC_GetResponse>
 800939a:	4603      	mov	r3, r0
 800939c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093a4:	d102      	bne.n	80093ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093aa:	e02f      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f82e 	bl	8009414 <SD_FindSCR>
 80093b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	e023      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01c      	beq.n	8009408 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f002 fa10 	bl	800b800 <SDMMC_CmdAppCommand>
 80093e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e00f      	b.n	800940c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f002 fa4a 	bl	800b88c <SDMMC_CmdBusWidth>
 80093f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e003      	b.n	800940c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009404:	2300      	movs	r3, #0
 8009406:	e001      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009408:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009414:	b590      	push	{r4, r7, lr}
 8009416:	b08f      	sub	sp, #60	; 0x3c
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800941e:	f7fa fb4d 	bl	8003abc <HAL_GetTick>
 8009422:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009428:	2300      	movs	r3, #0
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2108      	movs	r1, #8
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f8b4 	bl	800b5a8 <SDMMC_CmdBlockLength>
 8009440:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	e0a9      	b.n	80095a0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f002 f9d1 	bl	800b800 <SDMMC_CmdAppCommand>
 800945e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	e09a      	b.n	80095a0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800946a:	f04f 33ff 	mov.w	r3, #4294967295
 800946e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009470:	2308      	movs	r3, #8
 8009472:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009474:	2330      	movs	r3, #48	; 0x30
 8009476:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009478:	2302      	movs	r3, #2
 800947a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800947c:	2300      	movs	r3, #0
 800947e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009480:	2301      	movs	r3, #1
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f107 0210 	add.w	r2, r7, #16
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f002 f85e 	bl	800b550 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f002 fa19 	bl	800b8d0 <SDMMC_CmdSendSCR>
 800949e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d022      	beq.n	80094ec <SD_FindSCR+0xd8>
  {
    return errorstate;
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	e07a      	b.n	80095a0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	f107 0208 	add.w	r2, r7, #8
 80094c4:	18d4      	adds	r4, r2, r3
 80094c6:	4608      	mov	r0, r1
 80094c8:	f001 ffce 	bl	800b468 <SDMMC_ReadFIFO>
 80094cc:	4603      	mov	r3, r0
 80094ce:	6023      	str	r3, [r4, #0]
      index++;
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	3301      	adds	r3, #1
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094d6:	f7fa faf1 	bl	8003abc <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d102      	bne.n	80094ec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ea:	e059      	b.n	80095a0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f2:	f240 432a 	movw	r3, #1066	; 0x42a
 80094f6:	4013      	ands	r3, r2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0d6      	beq.n	80094aa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2208      	movs	r2, #8
 8009510:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009512:	2308      	movs	r3, #8
 8009514:	e044      	b.n	80095a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2202      	movs	r2, #2
 800952a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800952c:	2302      	movs	r3, #2
 800952e:	e037      	b.n	80095a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2220      	movs	r2, #32
 8009544:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009546:	2320      	movs	r3, #32
 8009548:	e02a      	b.n	80095a0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009552:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	061a      	lsls	r2, r3, #24
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800956a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	0e1b      	lsrs	r3, r3, #24
 8009570:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	601a      	str	r2, [r3, #0]
    scr++;
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	3304      	adds	r3, #4
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	061a      	lsls	r2, r3, #24
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	0a1b      	lsrs	r3, r3, #8
 800958e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009592:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	373c      	adds	r7, #60	; 0x3c
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd90      	pop	{r4, r7, pc}

080095a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e025      	b.n	8009608 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7fa f849 	bl	8003668 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2202      	movs	r2, #2
 80095da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f001 fdeb 	bl	800b1c4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	f001 fe55 	bl	800b2a8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d101      	bne.n	800962c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
 800962a:	e018      	b.n	800965e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	4618      	mov	r0, r3
 800963e:	f001 feb3 	bl	800b3a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d104      	bne.n	8009654 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2205      	movs	r2, #5
 800964e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009652:	e003      	b.n	800965c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d101      	bne.n	8009680 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800967c:	2302      	movs	r3, #2
 800967e:	e00e      	b.n	800969e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f001 feab 	bl	800b3ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e04c      	b.n	8009754 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f9 fca6 	bl	8003020 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0203 	bic.w	r2, r2, #3
 80096ea:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4b19      	ldr	r3, [pc, #100]	; (800975c <HAL_SPDIFRX_Init+0xb4>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009704:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800970a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009710:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009716:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800971c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009722:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009728:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800972e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009734:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	fff88407 	.word	0xfff88407

08009760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e084      	b.n	800987c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7f9 fc89 	bl	80030a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097b2:	d902      	bls.n	80097ba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e002      	b.n	80097c0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097c8:	d007      	beq.n	80097da <HAL_SPI_Init+0x7a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097d2:	d002      	beq.n	80097da <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10b      	bne.n	80097fa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ea:	d903      	bls.n	80097f4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
 80097f2:	e002      	b.n	80097fa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	ea42 0103 	orr.w	r1, r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	f003 0204 	and.w	r2, r3, #4
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	ea42 0103 	orr.w	r1, r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69da      	ldr	r2, [r3, #28]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800986a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e01d      	b.n	80098d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d106      	bne.n	80098b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7f9 fc5c 	bl	8003168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f000 fb78 	bl	8009fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	4b0c      	ldr	r3, [pc, #48]	; (800992c <HAL_TIM_Base_Start_IT+0x50>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b06      	cmp	r3, #6
 8009904:	d00b      	beq.n	800991e <HAL_TIM_Base_Start_IT+0x42>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800990c:	d007      	beq.n	800991e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	00010007 	.word	0x00010007

08009930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e01d      	b.n	800997e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f9 fc74 	bl	8003244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fb22 	bl	8009fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b02      	cmp	r3, #2
 800999a:	d122      	bne.n	80099e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d11b      	bne.n	80099e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f06f 0202 	mvn.w	r2, #2
 80099b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fad7 	bl	8009f7c <HAL_TIM_IC_CaptureCallback>
 80099ce:	e005      	b.n	80099dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fac9 	bl	8009f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fada 	bl	8009f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d122      	bne.n	8009a36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f003 0304 	and.w	r3, r3, #4
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d11b      	bne.n	8009a36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f06f 0204 	mvn.w	r2, #4
 8009a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 faad 	bl	8009f7c <HAL_TIM_IC_CaptureCallback>
 8009a22:	e005      	b.n	8009a30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fa9f 	bl	8009f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fab0 	bl	8009f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0308 	and.w	r3, r3, #8
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d122      	bne.n	8009a8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0308 	and.w	r3, r3, #8
 8009a4e:	2b08      	cmp	r3, #8
 8009a50:	d11b      	bne.n	8009a8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0208 	mvn.w	r2, #8
 8009a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2204      	movs	r2, #4
 8009a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	f003 0303 	and.w	r3, r3, #3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa83 	bl	8009f7c <HAL_TIM_IC_CaptureCallback>
 8009a76:	e005      	b.n	8009a84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa75 	bl	8009f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa86 	bl	8009f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b10      	cmp	r3, #16
 8009a96:	d122      	bne.n	8009ade <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f003 0310 	and.w	r3, r3, #16
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d11b      	bne.n	8009ade <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f06f 0210 	mvn.w	r2, #16
 8009aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa59 	bl	8009f7c <HAL_TIM_IC_CaptureCallback>
 8009aca:	e005      	b.n	8009ad8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa4b 	bl	8009f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa5c 	bl	8009f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d10e      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d107      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f06f 0201 	mvn.w	r2, #1
 8009b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7f8 feb1 	bl	800286c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b14:	2b80      	cmp	r3, #128	; 0x80
 8009b16:	d10e      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b22:	2b80      	cmp	r3, #128	; 0x80
 8009b24:	d107      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 feef 	bl	800a914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b44:	d10e      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b50:	2b80      	cmp	r3, #128	; 0x80
 8009b52:	d107      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fee2 	bl	800a928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6e:	2b40      	cmp	r3, #64	; 0x40
 8009b70:	d10e      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	2b40      	cmp	r3, #64	; 0x40
 8009b7e:	d107      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa0a 	bl	8009fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0320 	and.w	r3, r3, #32
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d10e      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d107      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0220 	mvn.w	r2, #32
 8009bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fea2 	bl	800a900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e105      	b.n	8009dea <HAL_TIM_PWM_ConfigChannel+0x226>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b14      	cmp	r3, #20
 8009bf2:	f200 80f0 	bhi.w	8009dd6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009dd7 	.word	0x08009dd7
 8009c04:	08009dd7 	.word	0x08009dd7
 8009c08:	08009dd7 	.word	0x08009dd7
 8009c0c:	08009c91 	.word	0x08009c91
 8009c10:	08009dd7 	.word	0x08009dd7
 8009c14:	08009dd7 	.word	0x08009dd7
 8009c18:	08009dd7 	.word	0x08009dd7
 8009c1c:	08009cd3 	.word	0x08009cd3
 8009c20:	08009dd7 	.word	0x08009dd7
 8009c24:	08009dd7 	.word	0x08009dd7
 8009c28:	08009dd7 	.word	0x08009dd7
 8009c2c:	08009d13 	.word	0x08009d13
 8009c30:	08009dd7 	.word	0x08009dd7
 8009c34:	08009dd7 	.word	0x08009dd7
 8009c38:	08009dd7 	.word	0x08009dd7
 8009c3c:	08009d55 	.word	0x08009d55
 8009c40:	08009dd7 	.word	0x08009dd7
 8009c44:	08009dd7 	.word	0x08009dd7
 8009c48:	08009dd7 	.word	0x08009dd7
 8009c4c:	08009d95 	.word	0x08009d95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fa4e 	bl	800a0f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0208 	orr.w	r2, r2, #8
 8009c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0204 	bic.w	r2, r2, #4
 8009c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6999      	ldr	r1, [r3, #24]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	691a      	ldr	r2, [r3, #16]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	619a      	str	r2, [r3, #24]
      break;
 8009c8e:	e0a3      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68b9      	ldr	r1, [r7, #8]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 faa0 	bl	800a1dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699a      	ldr	r2, [r3, #24]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6999      	ldr	r1, [r3, #24]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	021a      	lsls	r2, r3, #8
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	619a      	str	r2, [r3, #24]
      break;
 8009cd0:	e082      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 faf7 	bl	800a2cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0208 	orr.w	r2, r2, #8
 8009cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69da      	ldr	r2, [r3, #28]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0204 	bic.w	r2, r2, #4
 8009cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69d9      	ldr	r1, [r3, #28]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	61da      	str	r2, [r3, #28]
      break;
 8009d10:	e062      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fb4d 	bl	800a3b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69da      	ldr	r2, [r3, #28]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69da      	ldr	r2, [r3, #28]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69d9      	ldr	r1, [r3, #28]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	021a      	lsls	r2, r3, #8
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	61da      	str	r2, [r3, #28]
      break;
 8009d52:	e041      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68b9      	ldr	r1, [r7, #8]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fb84 	bl	800a468 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0208 	orr.w	r2, r2, #8
 8009d6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0204 	bic.w	r2, r2, #4
 8009d7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	691a      	ldr	r2, [r3, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d92:	e021      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fbb6 	bl	800a50c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	021a      	lsls	r2, r3, #8
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dd4:	e000      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009dd6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop

08009df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_TIM_ConfigClockSource+0x18>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e0a6      	b.n	8009f5a <HAL_TIM_ConfigClockSource+0x166>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4b4f      	ldr	r3, [pc, #316]	; (8009f64 <HAL_TIM_ConfigClockSource+0x170>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b40      	cmp	r3, #64	; 0x40
 8009e42:	d067      	beq.n	8009f14 <HAL_TIM_ConfigClockSource+0x120>
 8009e44:	2b40      	cmp	r3, #64	; 0x40
 8009e46:	d80b      	bhi.n	8009e60 <HAL_TIM_ConfigClockSource+0x6c>
 8009e48:	2b10      	cmp	r3, #16
 8009e4a:	d073      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0x140>
 8009e4c:	2b10      	cmp	r3, #16
 8009e4e:	d802      	bhi.n	8009e56 <HAL_TIM_ConfigClockSource+0x62>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d06f      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e54:	e078      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d06c      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0x140>
 8009e5a:	2b30      	cmp	r3, #48	; 0x30
 8009e5c:	d06a      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009e5e:	e073      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e60:	2b70      	cmp	r3, #112	; 0x70
 8009e62:	d00d      	beq.n	8009e80 <HAL_TIM_ConfigClockSource+0x8c>
 8009e64:	2b70      	cmp	r3, #112	; 0x70
 8009e66:	d804      	bhi.n	8009e72 <HAL_TIM_ConfigClockSource+0x7e>
 8009e68:	2b50      	cmp	r3, #80	; 0x50
 8009e6a:	d033      	beq.n	8009ed4 <HAL_TIM_ConfigClockSource+0xe0>
 8009e6c:	2b60      	cmp	r3, #96	; 0x60
 8009e6e:	d041      	beq.n	8009ef4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e70:	e06a      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e76:	d066      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x152>
 8009e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7c:	d017      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009e7e:	e063      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6899      	ldr	r1, [r3, #8]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f000 fc0a 	bl	800a6a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ea2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	609a      	str	r2, [r3, #8]
      break;
 8009eac:	e04c      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	6899      	ldr	r1, [r3, #8]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f000 fbf3 	bl	800a6a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ed0:	609a      	str	r2, [r3, #8]
      break;
 8009ed2:	e039      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6859      	ldr	r1, [r3, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f000 fb67 	bl	800a5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2150      	movs	r1, #80	; 0x50
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fbc0 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 8009ef2:	e029      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	6859      	ldr	r1, [r3, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	461a      	mov	r2, r3
 8009f02:	f000 fb86 	bl	800a612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2160      	movs	r1, #96	; 0x60
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 fbb0 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 8009f12:	e019      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	6859      	ldr	r1, [r3, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	461a      	mov	r2, r3
 8009f22:	f000 fb47 	bl	800a5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2140      	movs	r1, #64	; 0x40
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fba0 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 8009f32:	e009      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f000 fb97 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 8009f44:	e000      	b.n	8009f48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	fffeff88 	.word	0xfffeff88

08009f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a40      	ldr	r2, [pc, #256]	; (800a0cc <TIM_Base_SetConfig+0x114>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d013      	beq.n	8009ff8 <TIM_Base_SetConfig+0x40>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd6:	d00f      	beq.n	8009ff8 <TIM_Base_SetConfig+0x40>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a3d      	ldr	r2, [pc, #244]	; (800a0d0 <TIM_Base_SetConfig+0x118>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00b      	beq.n	8009ff8 <TIM_Base_SetConfig+0x40>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a3c      	ldr	r2, [pc, #240]	; (800a0d4 <TIM_Base_SetConfig+0x11c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d007      	beq.n	8009ff8 <TIM_Base_SetConfig+0x40>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a3b      	ldr	r2, [pc, #236]	; (800a0d8 <TIM_Base_SetConfig+0x120>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_Base_SetConfig+0x40>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a3a      	ldr	r2, [pc, #232]	; (800a0dc <TIM_Base_SetConfig+0x124>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d108      	bne.n	800a00a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a2f      	ldr	r2, [pc, #188]	; (800a0cc <TIM_Base_SetConfig+0x114>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d02b      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a018:	d027      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a2c      	ldr	r2, [pc, #176]	; (800a0d0 <TIM_Base_SetConfig+0x118>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d023      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a2b      	ldr	r2, [pc, #172]	; (800a0d4 <TIM_Base_SetConfig+0x11c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d01f      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <TIM_Base_SetConfig+0x120>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d01b      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a29      	ldr	r2, [pc, #164]	; (800a0dc <TIM_Base_SetConfig+0x124>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d017      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a28      	ldr	r2, [pc, #160]	; (800a0e0 <TIM_Base_SetConfig+0x128>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d013      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a27      	ldr	r2, [pc, #156]	; (800a0e4 <TIM_Base_SetConfig+0x12c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00f      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a26      	ldr	r2, [pc, #152]	; (800a0e8 <TIM_Base_SetConfig+0x130>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00b      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a25      	ldr	r2, [pc, #148]	; (800a0ec <TIM_Base_SetConfig+0x134>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a24      	ldr	r2, [pc, #144]	; (800a0f0 <TIM_Base_SetConfig+0x138>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d003      	beq.n	800a06a <TIM_Base_SetConfig+0xb2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a23      	ldr	r2, [pc, #140]	; (800a0f4 <TIM_Base_SetConfig+0x13c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d108      	bne.n	800a07c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <TIM_Base_SetConfig+0x114>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d003      	beq.n	800a0b0 <TIM_Base_SetConfig+0xf8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <TIM_Base_SetConfig+0x124>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d103      	bne.n	800a0b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	691a      	ldr	r2, [r3, #16]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	615a      	str	r2, [r3, #20]
}
 800a0be:	bf00      	nop
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40014000 	.word	0x40014000
 800a0e4:	40014400 	.word	0x40014400
 800a0e8:	40014800 	.word	0x40014800
 800a0ec:	40001800 	.word	0x40001800
 800a0f0:	40001c00 	.word	0x40001c00
 800a0f4:	40002000 	.word	0x40002000

0800a0f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	f023 0201 	bic.w	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4b2b      	ldr	r3, [pc, #172]	; (800a1d0 <TIM_OC1_SetConfig+0xd8>)
 800a124:	4013      	ands	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 0303 	bic.w	r3, r3, #3
 800a12e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 0302 	bic.w	r3, r3, #2
 800a140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a21      	ldr	r2, [pc, #132]	; (800a1d4 <TIM_OC1_SetConfig+0xdc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC1_SetConfig+0x64>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a20      	ldr	r2, [pc, #128]	; (800a1d8 <TIM_OC1_SetConfig+0xe0>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d10c      	bne.n	800a176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0308 	bic.w	r3, r3, #8
 800a162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 0304 	bic.w	r3, r3, #4
 800a174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <TIM_OC1_SetConfig+0xdc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d003      	beq.n	800a186 <TIM_OC1_SetConfig+0x8e>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <TIM_OC1_SetConfig+0xe0>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d111      	bne.n	800a1aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a18c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	621a      	str	r2, [r3, #32]
}
 800a1c4:	bf00      	nop
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	fffeff8f 	.word	0xfffeff8f
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40010400 	.word	0x40010400

0800a1dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f023 0210 	bic.w	r2, r3, #16
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4b2e      	ldr	r3, [pc, #184]	; (800a2c0 <TIM_OC2_SetConfig+0xe4>)
 800a208:	4013      	ands	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0320 	bic.w	r3, r3, #32
 800a226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a23      	ldr	r2, [pc, #140]	; (800a2c4 <TIM_OC2_SetConfig+0xe8>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC2_SetConfig+0x68>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a22      	ldr	r2, [pc, #136]	; (800a2c8 <TIM_OC2_SetConfig+0xec>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10d      	bne.n	800a260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a25e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a18      	ldr	r2, [pc, #96]	; (800a2c4 <TIM_OC2_SetConfig+0xe8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d003      	beq.n	800a270 <TIM_OC2_SetConfig+0x94>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a17      	ldr	r2, [pc, #92]	; (800a2c8 <TIM_OC2_SetConfig+0xec>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d113      	bne.n	800a298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a27e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	feff8fff 	.word	0xfeff8fff
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40010400 	.word	0x40010400

0800a2cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4b2d      	ldr	r3, [pc, #180]	; (800a3ac <TIM_OC3_SetConfig+0xe0>)
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f023 0303 	bic.w	r3, r3, #3
 800a302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a22      	ldr	r2, [pc, #136]	; (800a3b0 <TIM_OC3_SetConfig+0xe4>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d003      	beq.n	800a332 <TIM_OC3_SetConfig+0x66>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a21      	ldr	r2, [pc, #132]	; (800a3b4 <TIM_OC3_SetConfig+0xe8>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10d      	bne.n	800a34e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	021b      	lsls	r3, r3, #8
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a34c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a17      	ldr	r2, [pc, #92]	; (800a3b0 <TIM_OC3_SetConfig+0xe4>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d003      	beq.n	800a35e <TIM_OC3_SetConfig+0x92>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a16      	ldr	r2, [pc, #88]	; (800a3b4 <TIM_OC3_SetConfig+0xe8>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d113      	bne.n	800a386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a36c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	621a      	str	r2, [r3, #32]
}
 800a3a0:	bf00      	nop
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	fffeff8f 	.word	0xfffeff8f
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400

0800a3b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <TIM_OC4_SetConfig+0xa4>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a13      	ldr	r2, [pc, #76]	; (800a460 <TIM_OC4_SetConfig+0xa8>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d003      	beq.n	800a420 <TIM_OC4_SetConfig+0x68>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a12      	ldr	r2, [pc, #72]	; (800a464 <TIM_OC4_SetConfig+0xac>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d109      	bne.n	800a434 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	019b      	lsls	r3, r3, #6
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	621a      	str	r2, [r3, #32]
}
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	feff8fff 	.word	0xfeff8fff
 800a460:	40010000 	.word	0x40010000
 800a464:	40010400 	.word	0x40010400

0800a468 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <TIM_OC5_SetConfig+0x98>)
 800a494:	4013      	ands	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a12      	ldr	r2, [pc, #72]	; (800a504 <TIM_OC5_SetConfig+0x9c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d003      	beq.n	800a4c6 <TIM_OC5_SetConfig+0x5e>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a11      	ldr	r2, [pc, #68]	; (800a508 <TIM_OC5_SetConfig+0xa0>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d109      	bne.n	800a4da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	621a      	str	r2, [r3, #32]
}
 800a4f4:	bf00      	nop
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	fffeff8f 	.word	0xfffeff8f
 800a504:	40010000 	.word	0x40010000
 800a508:	40010400 	.word	0x40010400

0800a50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <TIM_OC6_SetConfig+0x9c>)
 800a538:	4013      	ands	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	021b      	lsls	r3, r3, #8
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a54e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	051b      	lsls	r3, r3, #20
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a13      	ldr	r2, [pc, #76]	; (800a5ac <TIM_OC6_SetConfig+0xa0>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d003      	beq.n	800a56c <TIM_OC6_SetConfig+0x60>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a12      	ldr	r2, [pc, #72]	; (800a5b0 <TIM_OC6_SetConfig+0xa4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d109      	bne.n	800a580 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	029b      	lsls	r3, r3, #10
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	621a      	str	r2, [r3, #32]
}
 800a59a:	bf00      	nop
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	feff8fff 	.word	0xfeff8fff
 800a5ac:	40010000 	.word	0x40010000
 800a5b0:	40010400 	.word	0x40010400

0800a5b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	f023 0201 	bic.w	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	011b      	lsls	r3, r3, #4
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f023 030a 	bic.w	r3, r3, #10
 800a5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	621a      	str	r2, [r3, #32]
}
 800a606:	bf00      	nop
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a612:	b480      	push	{r7}
 800a614:	b087      	sub	sp, #28
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f023 0210 	bic.w	r2, r3, #16
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a63c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	031b      	lsls	r3, r3, #12
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a64e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4313      	orrs	r3, r2
 800a658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4313      	orrs	r3, r2
 800a690:	f043 0307 	orr.w	r3, r3, #7
 800a694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	609a      	str	r2, [r3, #8]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	021a      	lsls	r2, r3, #8
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d101      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e06d      	b.n	800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a30      	ldr	r2, [pc, #192]	; (800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d004      	beq.n	800a734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a2f      	ldr	r2, [pc, #188]	; (800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d108      	bne.n	800a746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a73a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a20      	ldr	r2, [pc, #128]	; (800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d022      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a772:	d01d      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a1d      	ldr	r2, [pc, #116]	; (800a7f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d018      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a1c      	ldr	r2, [pc, #112]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1a      	ldr	r2, [pc, #104]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00e      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d009      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a16      	ldr	r2, [pc, #88]	; (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a15      	ldr	r2, [pc, #84]	; (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d10c      	bne.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	40010000 	.word	0x40010000
 800a7ec:	40010400 	.word	0x40010400
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40014000 	.word	0x40014000
 800a800:	40001800 	.word	0x40001800

0800a804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e065      	b.n	800a8ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	4313      	orrs	r3, r2
 800a87a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	041b      	lsls	r3, r3, #16
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a16      	ldr	r2, [pc, #88]	; (800a8f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d004      	beq.n	800a8ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a14      	ldr	r2, [pc, #80]	; (800a8fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d115      	bne.n	800a8da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	051b      	lsls	r3, r3, #20
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400

0800a900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e040      	b.n	800a9d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7f8 fd5e 	bl	8003420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2224      	movs	r2, #36	; 0x24
 800a968:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0201 	bic.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f82c 	bl	800a9d8 <UART_SetConfig>
 800a980:	4603      	mov	r3, r0
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e022      	b.n	800a9d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 faca 	bl	800af2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689a      	ldr	r2, [r3, #8]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fb51 	bl	800b070 <UART_CheckIdleState>
 800a9ce:	4603      	mov	r3, r0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689a      	ldr	r2, [r3, #8]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	4bb1      	ldr	r3, [pc, #708]	; (800accc <UART_SetConfig+0x2f4>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	6939      	ldr	r1, [r7, #16]
 800aa10:	430b      	orrs	r3, r1
 800aa12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a9f      	ldr	r2, [pc, #636]	; (800acd0 <UART_SetConfig+0x2f8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d121      	bne.n	800aa9c <UART_SetConfig+0xc4>
 800aa58:	4b9e      	ldr	r3, [pc, #632]	; (800acd4 <UART_SetConfig+0x2fc>)
 800aa5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d816      	bhi.n	800aa94 <UART_SetConfig+0xbc>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0x94>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa89 	.word	0x0800aa89
 800aa74:	0800aa83 	.word	0x0800aa83
 800aa78:	0800aa8f 	.word	0x0800aa8f
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	77fb      	strb	r3, [r7, #31]
 800aa80:	e151      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aa82:	2302      	movs	r3, #2
 800aa84:	77fb      	strb	r3, [r7, #31]
 800aa86:	e14e      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e14b      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aa8e:	2308      	movs	r3, #8
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e148      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aa94:	2310      	movs	r3, #16
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	bf00      	nop
 800aa9a:	e144      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a8d      	ldr	r2, [pc, #564]	; (800acd8 <UART_SetConfig+0x300>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d134      	bne.n	800ab10 <UART_SetConfig+0x138>
 800aaa6:	4b8b      	ldr	r3, [pc, #556]	; (800acd4 <UART_SetConfig+0x2fc>)
 800aaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaac:	f003 030c 	and.w	r3, r3, #12
 800aab0:	2b0c      	cmp	r3, #12
 800aab2:	d829      	bhi.n	800ab08 <UART_SetConfig+0x130>
 800aab4:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <UART_SetConfig+0xe4>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800ab09 	.word	0x0800ab09
 800aac4:	0800ab09 	.word	0x0800ab09
 800aac8:	0800ab09 	.word	0x0800ab09
 800aacc:	0800aafd 	.word	0x0800aafd
 800aad0:	0800ab09 	.word	0x0800ab09
 800aad4:	0800ab09 	.word	0x0800ab09
 800aad8:	0800ab09 	.word	0x0800ab09
 800aadc:	0800aaf7 	.word	0x0800aaf7
 800aae0:	0800ab09 	.word	0x0800ab09
 800aae4:	0800ab09 	.word	0x0800ab09
 800aae8:	0800ab09 	.word	0x0800ab09
 800aaec:	0800ab03 	.word	0x0800ab03
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	77fb      	strb	r3, [r7, #31]
 800aaf4:	e117      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e114      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aafc:	2304      	movs	r3, #4
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e111      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab02:	2308      	movs	r3, #8
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e10e      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	bf00      	nop
 800ab0e:	e10a      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a71      	ldr	r2, [pc, #452]	; (800acdc <UART_SetConfig+0x304>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d120      	bne.n	800ab5c <UART_SetConfig+0x184>
 800ab1a:	4b6e      	ldr	r3, [pc, #440]	; (800acd4 <UART_SetConfig+0x2fc>)
 800ab1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab24:	2b10      	cmp	r3, #16
 800ab26:	d00f      	beq.n	800ab48 <UART_SetConfig+0x170>
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	d802      	bhi.n	800ab32 <UART_SetConfig+0x15a>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <UART_SetConfig+0x164>
 800ab30:	e010      	b.n	800ab54 <UART_SetConfig+0x17c>
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	d005      	beq.n	800ab42 <UART_SetConfig+0x16a>
 800ab36:	2b30      	cmp	r3, #48	; 0x30
 800ab38:	d009      	beq.n	800ab4e <UART_SetConfig+0x176>
 800ab3a:	e00b      	b.n	800ab54 <UART_SetConfig+0x17c>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	e0f1      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab42:	2302      	movs	r3, #2
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e0ee      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e0eb      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab4e:	2308      	movs	r3, #8
 800ab50:	77fb      	strb	r3, [r7, #31]
 800ab52:	e0e8      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab54:	2310      	movs	r3, #16
 800ab56:	77fb      	strb	r3, [r7, #31]
 800ab58:	bf00      	nop
 800ab5a:	e0e4      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a5f      	ldr	r2, [pc, #380]	; (800ace0 <UART_SetConfig+0x308>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d120      	bne.n	800aba8 <UART_SetConfig+0x1d0>
 800ab66:	4b5b      	ldr	r3, [pc, #364]	; (800acd4 <UART_SetConfig+0x2fc>)
 800ab68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab70:	2b40      	cmp	r3, #64	; 0x40
 800ab72:	d00f      	beq.n	800ab94 <UART_SetConfig+0x1bc>
 800ab74:	2b40      	cmp	r3, #64	; 0x40
 800ab76:	d802      	bhi.n	800ab7e <UART_SetConfig+0x1a6>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <UART_SetConfig+0x1b0>
 800ab7c:	e010      	b.n	800aba0 <UART_SetConfig+0x1c8>
 800ab7e:	2b80      	cmp	r3, #128	; 0x80
 800ab80:	d005      	beq.n	800ab8e <UART_SetConfig+0x1b6>
 800ab82:	2bc0      	cmp	r3, #192	; 0xc0
 800ab84:	d009      	beq.n	800ab9a <UART_SetConfig+0x1c2>
 800ab86:	e00b      	b.n	800aba0 <UART_SetConfig+0x1c8>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	77fb      	strb	r3, [r7, #31]
 800ab8c:	e0cb      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	77fb      	strb	r3, [r7, #31]
 800ab92:	e0c8      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab94:	2304      	movs	r3, #4
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e0c5      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e0c2      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aba0:	2310      	movs	r3, #16
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	bf00      	nop
 800aba6:	e0be      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a4d      	ldr	r2, [pc, #308]	; (800ace4 <UART_SetConfig+0x30c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d124      	bne.n	800abfc <UART_SetConfig+0x224>
 800abb2:	4b48      	ldr	r3, [pc, #288]	; (800acd4 <UART_SetConfig+0x2fc>)
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc0:	d012      	beq.n	800abe8 <UART_SetConfig+0x210>
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc6:	d802      	bhi.n	800abce <UART_SetConfig+0x1f6>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <UART_SetConfig+0x204>
 800abcc:	e012      	b.n	800abf4 <UART_SetConfig+0x21c>
 800abce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd2:	d006      	beq.n	800abe2 <UART_SetConfig+0x20a>
 800abd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd8:	d009      	beq.n	800abee <UART_SetConfig+0x216>
 800abda:	e00b      	b.n	800abf4 <UART_SetConfig+0x21c>
 800abdc:	2300      	movs	r3, #0
 800abde:	77fb      	strb	r3, [r7, #31]
 800abe0:	e0a1      	b.n	800ad26 <UART_SetConfig+0x34e>
 800abe2:	2302      	movs	r3, #2
 800abe4:	77fb      	strb	r3, [r7, #31]
 800abe6:	e09e      	b.n	800ad26 <UART_SetConfig+0x34e>
 800abe8:	2304      	movs	r3, #4
 800abea:	77fb      	strb	r3, [r7, #31]
 800abec:	e09b      	b.n	800ad26 <UART_SetConfig+0x34e>
 800abee:	2308      	movs	r3, #8
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e098      	b.n	800ad26 <UART_SetConfig+0x34e>
 800abf4:	2310      	movs	r3, #16
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	bf00      	nop
 800abfa:	e094      	b.n	800ad26 <UART_SetConfig+0x34e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a39      	ldr	r2, [pc, #228]	; (800ace8 <UART_SetConfig+0x310>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d124      	bne.n	800ac50 <UART_SetConfig+0x278>
 800ac06:	4b33      	ldr	r3, [pc, #204]	; (800acd4 <UART_SetConfig+0x2fc>)
 800ac08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac14:	d012      	beq.n	800ac3c <UART_SetConfig+0x264>
 800ac16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac1a:	d802      	bhi.n	800ac22 <UART_SetConfig+0x24a>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d007      	beq.n	800ac30 <UART_SetConfig+0x258>
 800ac20:	e012      	b.n	800ac48 <UART_SetConfig+0x270>
 800ac22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac26:	d006      	beq.n	800ac36 <UART_SetConfig+0x25e>
 800ac28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac2c:	d009      	beq.n	800ac42 <UART_SetConfig+0x26a>
 800ac2e:	e00b      	b.n	800ac48 <UART_SetConfig+0x270>
 800ac30:	2301      	movs	r3, #1
 800ac32:	77fb      	strb	r3, [r7, #31]
 800ac34:	e077      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac36:	2302      	movs	r3, #2
 800ac38:	77fb      	strb	r3, [r7, #31]
 800ac3a:	e074      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac3c:	2304      	movs	r3, #4
 800ac3e:	77fb      	strb	r3, [r7, #31]
 800ac40:	e071      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac42:	2308      	movs	r3, #8
 800ac44:	77fb      	strb	r3, [r7, #31]
 800ac46:	e06e      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac48:	2310      	movs	r3, #16
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	bf00      	nop
 800ac4e:	e06a      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a25      	ldr	r2, [pc, #148]	; (800acec <UART_SetConfig+0x314>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d124      	bne.n	800aca4 <UART_SetConfig+0x2cc>
 800ac5a:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <UART_SetConfig+0x2fc>)
 800ac5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac68:	d012      	beq.n	800ac90 <UART_SetConfig+0x2b8>
 800ac6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6e:	d802      	bhi.n	800ac76 <UART_SetConfig+0x29e>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d007      	beq.n	800ac84 <UART_SetConfig+0x2ac>
 800ac74:	e012      	b.n	800ac9c <UART_SetConfig+0x2c4>
 800ac76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac7a:	d006      	beq.n	800ac8a <UART_SetConfig+0x2b2>
 800ac7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac80:	d009      	beq.n	800ac96 <UART_SetConfig+0x2be>
 800ac82:	e00b      	b.n	800ac9c <UART_SetConfig+0x2c4>
 800ac84:	2300      	movs	r3, #0
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	e04d      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	77fb      	strb	r3, [r7, #31]
 800ac8e:	e04a      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac90:	2304      	movs	r3, #4
 800ac92:	77fb      	strb	r3, [r7, #31]
 800ac94:	e047      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac96:	2308      	movs	r3, #8
 800ac98:	77fb      	strb	r3, [r7, #31]
 800ac9a:	e044      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ac9c:	2310      	movs	r3, #16
 800ac9e:	77fb      	strb	r3, [r7, #31]
 800aca0:	bf00      	nop
 800aca2:	e040      	b.n	800ad26 <UART_SetConfig+0x34e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a11      	ldr	r2, [pc, #68]	; (800acf0 <UART_SetConfig+0x318>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d139      	bne.n	800ad22 <UART_SetConfig+0x34a>
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <UART_SetConfig+0x2fc>)
 800acb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acbc:	d027      	beq.n	800ad0e <UART_SetConfig+0x336>
 800acbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acc2:	d817      	bhi.n	800acf4 <UART_SetConfig+0x31c>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d01c      	beq.n	800ad02 <UART_SetConfig+0x32a>
 800acc8:	e027      	b.n	800ad1a <UART_SetConfig+0x342>
 800acca:	bf00      	nop
 800accc:	efff69f3 	.word	0xefff69f3
 800acd0:	40011000 	.word	0x40011000
 800acd4:	40023800 	.word	0x40023800
 800acd8:	40004400 	.word	0x40004400
 800acdc:	40004800 	.word	0x40004800
 800ace0:	40004c00 	.word	0x40004c00
 800ace4:	40005000 	.word	0x40005000
 800ace8:	40011400 	.word	0x40011400
 800acec:	40007800 	.word	0x40007800
 800acf0:	40007c00 	.word	0x40007c00
 800acf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acf8:	d006      	beq.n	800ad08 <UART_SetConfig+0x330>
 800acfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800acfe:	d009      	beq.n	800ad14 <UART_SetConfig+0x33c>
 800ad00:	e00b      	b.n	800ad1a <UART_SetConfig+0x342>
 800ad02:	2300      	movs	r3, #0
 800ad04:	77fb      	strb	r3, [r7, #31]
 800ad06:	e00e      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e00b      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ad0e:	2304      	movs	r3, #4
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e008      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ad14:	2308      	movs	r3, #8
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e005      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ad1a:	2310      	movs	r3, #16
 800ad1c:	77fb      	strb	r3, [r7, #31]
 800ad1e:	bf00      	nop
 800ad20:	e001      	b.n	800ad26 <UART_SetConfig+0x34e>
 800ad22:	2310      	movs	r3, #16
 800ad24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad2e:	d17f      	bne.n	800ae30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ad30:	7ffb      	ldrb	r3, [r7, #31]
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d85c      	bhi.n	800adf0 <UART_SetConfig+0x418>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <UART_SetConfig+0x364>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad61 	.word	0x0800ad61
 800ad40:	0800ad81 	.word	0x0800ad81
 800ad44:	0800ada1 	.word	0x0800ada1
 800ad48:	0800adf1 	.word	0x0800adf1
 800ad4c:	0800adb9 	.word	0x0800adb9
 800ad50:	0800adf1 	.word	0x0800adf1
 800ad54:	0800adf1 	.word	0x0800adf1
 800ad58:	0800adf1 	.word	0x0800adf1
 800ad5c:	0800add9 	.word	0x0800add9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad60:	f7fc f8d0 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800ad64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	005a      	lsls	r2, r3, #1
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	085b      	lsrs	r3, r3, #1
 800ad70:	441a      	add	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	61bb      	str	r3, [r7, #24]
        break;
 800ad7e:	e03a      	b.n	800adf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad80:	f7fc f8d4 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 800ad84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	005a      	lsls	r2, r3, #1
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	085b      	lsrs	r3, r3, #1
 800ad90:	441a      	add	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	61bb      	str	r3, [r7, #24]
        break;
 800ad9e:	e02a      	b.n	800adf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	085a      	lsrs	r2, r3, #1
 800ada6:	4b5f      	ldr	r3, [pc, #380]	; (800af24 <UART_SetConfig+0x54c>)
 800ada8:	4413      	add	r3, r2
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	6852      	ldr	r2, [r2, #4]
 800adae:	fbb3 f3f2 	udiv	r3, r3, r2
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	61bb      	str	r3, [r7, #24]
        break;
 800adb6:	e01e      	b.n	800adf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adb8:	f7fb ffe6 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 800adbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	005a      	lsls	r2, r3, #1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	085b      	lsrs	r3, r3, #1
 800adc8:	441a      	add	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	fbb2 f3f3 	udiv	r3, r2, r3
 800add2:	b29b      	uxth	r3, r3
 800add4:	61bb      	str	r3, [r7, #24]
        break;
 800add6:	e00e      	b.n	800adf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	085b      	lsrs	r3, r3, #1
 800adde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	b29b      	uxth	r3, r3
 800adec:	61bb      	str	r3, [r7, #24]
        break;
 800adee:	e002      	b.n	800adf6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	75fb      	strb	r3, [r7, #23]
        break;
 800adf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	2b0f      	cmp	r3, #15
 800adfa:	d916      	bls.n	800ae2a <UART_SetConfig+0x452>
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae02:	d212      	bcs.n	800ae2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f023 030f 	bic.w	r3, r3, #15
 800ae0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	085b      	lsrs	r3, r3, #1
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f003 0307 	and.w	r3, r3, #7
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	897b      	ldrh	r3, [r7, #10]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	897a      	ldrh	r2, [r7, #10]
 800ae26:	60da      	str	r2, [r3, #12]
 800ae28:	e070      	b.n	800af0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	75fb      	strb	r3, [r7, #23]
 800ae2e:	e06d      	b.n	800af0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ae30:	7ffb      	ldrb	r3, [r7, #31]
 800ae32:	2b08      	cmp	r3, #8
 800ae34:	d859      	bhi.n	800aeea <UART_SetConfig+0x512>
 800ae36:	a201      	add	r2, pc, #4	; (adr r2, 800ae3c <UART_SetConfig+0x464>)
 800ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3c:	0800ae61 	.word	0x0800ae61
 800ae40:	0800ae7f 	.word	0x0800ae7f
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800aeeb 	.word	0x0800aeeb
 800ae4c:	0800aeb5 	.word	0x0800aeb5
 800ae50:	0800aeeb 	.word	0x0800aeeb
 800ae54:	0800aeeb 	.word	0x0800aeeb
 800ae58:	0800aeeb 	.word	0x0800aeeb
 800ae5c:	0800aed3 	.word	0x0800aed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae60:	f7fc f850 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800ae64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	085a      	lsrs	r2, r3, #1
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	441a      	add	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	61bb      	str	r3, [r7, #24]
        break;
 800ae7c:	e038      	b.n	800aef0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae7e:	f7fc f855 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 800ae82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	085a      	lsrs	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	441a      	add	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	61bb      	str	r3, [r7, #24]
        break;
 800ae9a:	e029      	b.n	800aef0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	085a      	lsrs	r2, r3, #1
 800aea2:	4b21      	ldr	r3, [pc, #132]	; (800af28 <UART_SetConfig+0x550>)
 800aea4:	4413      	add	r3, r2
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	6852      	ldr	r2, [r2, #4]
 800aeaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	61bb      	str	r3, [r7, #24]
        break;
 800aeb2:	e01d      	b.n	800aef0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeb4:	f7fb ff68 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 800aeb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	085a      	lsrs	r2, r3, #1
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	441a      	add	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aecc:	b29b      	uxth	r3, r3
 800aece:	61bb      	str	r3, [r7, #24]
        break;
 800aed0:	e00e      	b.n	800aef0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	61bb      	str	r3, [r7, #24]
        break;
 800aee8:	e002      	b.n	800aef0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
        break;
 800aeee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	2b0f      	cmp	r3, #15
 800aef4:	d908      	bls.n	800af08 <UART_SetConfig+0x530>
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aefc:	d204      	bcs.n	800af08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	60da      	str	r2, [r3, #12]
 800af06:	e001      	b.n	800af0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af18:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	01e84800 	.word	0x01e84800
 800af28:	00f42400 	.word	0x00f42400

0800af2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00a      	beq.n	800af56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00a      	beq.n	800af9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	f003 0308 	and.w	r3, r3, #8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	f003 0310 	and.w	r3, r3, #16
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01a      	beq.n	800b042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b02a:	d10a      	bne.n	800b042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	605a      	str	r2, [r3, #4]
  }
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b07e:	f7f8 fd1d 	bl	8003abc <HAL_GetTick>
 800b082:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0308 	and.w	r3, r3, #8
 800b08e:	2b08      	cmp	r3, #8
 800b090:	d10e      	bne.n	800b0b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f814 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e00a      	b.n	800b0c6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0de:	e05d      	b.n	800b19c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d059      	beq.n	800b19c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e8:	f7f8 fce8 	bl	8003abc <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <UART_WaitOnFlagUntilTimeout+0x30>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d11b      	bne.n	800b136 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b10c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 0201 	bic.w	r2, r2, #1
 800b11c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2220      	movs	r2, #32
 800b122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e042      	b.n	800b1bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d02b      	beq.n	800b19c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b152:	d123      	bne.n	800b19c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b15c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b16c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 0201 	bic.w	r2, r2, #1
 800b17c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2220      	movs	r2, #32
 800b182:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2220      	movs	r2, #32
 800b188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2220      	movs	r2, #32
 800b18e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e00f      	b.n	800b1bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	69da      	ldr	r2, [r3, #28]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	bf0c      	ite	eq
 800b1ac:	2301      	moveq	r3, #1
 800b1ae:	2300      	movne	r3, #0
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d092      	beq.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d027      	beq.n	800b22e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4b2f      	ldr	r3, [pc, #188]	; (800b2a4 <FMC_SDRAM_Init+0xe0>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1f4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b1fa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b200:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b206:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b20c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b212:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b218:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b21e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	e032      	b.n	800b294 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b23a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b244:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b24a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <FMC_SDRAM_Init+0xe0>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b268:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b26e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b274:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b27a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b280:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4313      	orrs	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	ffff8000 	.word	0xffff8000

0800b2a8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d02e      	beq.n	800b320 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2ce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2e8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2f2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2fc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	3b01      	subs	r3, #1
 800b304:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b306:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b310:	4313      	orrs	r3, r2
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	609a      	str	r2, [r3, #8]
 800b31e:	e039      	b.n	800b394 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4b1e      	ldr	r3, [pc, #120]	; (800b3a4 <FMC_SDRAM_Timing_Init+0xfc>)
 800b32a:	4013      	ands	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	3b01      	subs	r3, #1
 800b334:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b33e:	4313      	orrs	r3, r2
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	4313      	orrs	r3, r2
 800b344:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b352:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	3b01      	subs	r3, #1
 800b360:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b362:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	3b01      	subs	r3, #1
 800b36a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b36c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	3b01      	subs	r3, #1
 800b374:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b376:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b380:	4313      	orrs	r3, r2
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4313      	orrs	r3, r2
 800b386:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	693a      	ldr	r2, [r7, #16]
 800b392:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	ff0f0fff 	.word	0xff0f0fff

0800b3a8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b3ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	695a      	ldr	r2, [r3, #20]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b410:	b084      	sub	sp, #16
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	f107 001c 	add.w	r0, r7, #28
 800b41e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b426:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b428:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b42a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b42e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b432:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b436:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b43a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	4b07      	ldr	r3, [pc, #28]	; (800b464 <SDMMC_Init+0x54>)
 800b448:	4013      	ands	r3, r2
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	b004      	add	sp, #16
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	ffff8100 	.word	0xffff8100

0800b468 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2203      	movs	r2, #3
 800b48e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b490:	2002      	movs	r0, #2
 800b492:	f7f8 fb1f 	bl	8003ad4 <HAL_Delay>
  
  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0303 	and.w	r3, r3, #3
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b4da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b4e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b4e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68da      	ldr	r2, [r3, #12]
 800b4f2:	4b06      	ldr	r3, [pc, #24]	; (800b50c <SDMMC_SendCommand+0x50>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	fffff000 	.word	0xfffff000

0800b510 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	b2db      	uxtb	r3, r3
}
 800b51e:	4618      	mov	r0, r3
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b085      	sub	sp, #20
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3314      	adds	r3, #20
 800b538:	461a      	mov	r2, r3
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	4413      	add	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
}  
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b576:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b57c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b582:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	431a      	orrs	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0

}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5b6:	2310      	movs	r3, #16
 800b5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ba:	2340      	movs	r3, #64	; 0x40
 800b5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c8:	f107 0308 	add.w	r3, r7, #8
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff ff74 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d8:	2110      	movs	r1, #16
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa42 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b5fa:	2311      	movs	r3, #17
 800b5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5fe:	2340      	movs	r3, #64	; 0x40
 800b600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b60a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b60c:	f107 0308 	add.w	r3, r7, #8
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff ff52 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b618:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61c:	2111      	movs	r1, #17
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa20 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b626:	69fb      	ldr	r3, [r7, #28]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3720      	adds	r7, #32
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b63e:	2312      	movs	r3, #18
 800b640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b642:	2340      	movs	r3, #64	; 0x40
 800b644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b64e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b650:	f107 0308 	add.w	r3, r7, #8
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff ff30 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b660:	2112      	movs	r1, #18
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f9fe 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b66a:	69fb      	ldr	r3, [r7, #28]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b682:	2318      	movs	r3, #24
 800b684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b686:	2340      	movs	r3, #64	; 0x40
 800b688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b68a:	2300      	movs	r3, #0
 800b68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b694:	f107 0308 	add.w	r3, r7, #8
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff ff0e 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a4:	2118      	movs	r1, #24
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f9dc 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6c6:	2319      	movs	r3, #25
 800b6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ca:	2340      	movs	r3, #64	; 0x40
 800b6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d8:	f107 0308 	add.w	r3, r7, #8
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff feec 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e8:	2119      	movs	r1, #25
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9ba 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f2:	69fb      	ldr	r3, [r7, #28]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3720      	adds	r7, #32
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b708:	230c      	movs	r3, #12
 800b70a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71a:	f107 0308 	add.w	r3, r7, #8
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff fecb 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b726:	4a05      	ldr	r2, [pc, #20]	; (800b73c <SDMMC_CmdStopTransfer+0x40>)
 800b728:	210c      	movs	r1, #12
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f99a 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b732:	69fb      	ldr	r3, [r7, #28]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3720      	adds	r7, #32
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	05f5e100 	.word	0x05f5e100

0800b740 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b750:	2307      	movs	r3, #7
 800b752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b758:	2300      	movs	r3, #0
 800b75a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b760:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b762:	f107 0310 	add.w	r3, r7, #16
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff fea7 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b76e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b772:	2107      	movs	r1, #7
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 f975 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3728      	adds	r7, #40	; 0x28
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b088      	sub	sp, #32
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b792:	2300      	movs	r3, #0
 800b794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b79a:	2300      	movs	r3, #0
 800b79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7a4:	f107 0308 	add.w	r3, r7, #8
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff fe86 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f92f 	bl	800ba14 <SDMMC_GetCmdError>
 800b7b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b088      	sub	sp, #32
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b7ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e2:	f107 0308 	add.w	r3, r7, #8
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff fe67 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fb18 	bl	800be24 <SDMMC_GetCmdResp7>
 800b7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f6:	69fb      	ldr	r3, [r7, #28]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b80e:	2337      	movs	r3, #55	; 0x37
 800b810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b812:	2340      	movs	r3, #64	; 0x40
 800b814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b820:	f107 0308 	add.w	r3, r7, #8
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff fe48 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b830:	2137      	movs	r1, #55	; 0x37
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f916 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83a:	69fb      	ldr	r3, [r7, #28]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3720      	adds	r7, #32
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <SDMMC_CmdAppOperCommand+0x44>)
 800b852:	4313      	orrs	r3, r2
 800b854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b856:	2329      	movs	r3, #41	; 0x29
 800b858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fe24 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fa27 	bl	800bcc8 <SDMMC_GetCmdResp3>
 800b87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b87c:	69fb      	ldr	r3, [r7, #28]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	80100000 	.word	0x80100000

0800b88c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b89a:	2306      	movs	r3, #6
 800b89c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b89e:	2340      	movs	r3, #64	; 0x40
 800b8a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ac:	f107 0308 	add.w	r3, r7, #8
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff fe02 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8bc:	2106      	movs	r1, #6
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f8d0 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3720      	adds	r7, #32
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b8dc:	2333      	movs	r3, #51	; 0x33
 800b8de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ee:	f107 0308 	add.w	r3, r7, #8
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fde1 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b8fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fe:	2133      	movs	r1, #51	; 0x33
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f8af 	bl	800ba64 <SDMMC_GetCmdResp1>
 800b906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b908:	69fb      	ldr	r3, [r7, #28]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3720      	adds	r7, #32
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b088      	sub	sp, #32
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b91e:	2302      	movs	r3, #2
 800b920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b922:	23c0      	movs	r3, #192	; 0xc0
 800b924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fdc0 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f97d 	bl	800bc3c <SDMMC_GetCmdResp2>
 800b942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b944:	69fb      	ldr	r3, [r7, #28]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b088      	sub	sp, #32
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b95c:	2309      	movs	r3, #9
 800b95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b960:	23c0      	movs	r3, #192	; 0xc0
 800b962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b96c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b96e:	f107 0308 	add.w	r3, r7, #8
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fda1 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f95e 	bl	800bc3c <SDMMC_GetCmdResp2>
 800b980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b982:	69fb      	ldr	r3, [r7, #28]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3720      	adds	r7, #32
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b99a:	2303      	movs	r3, #3
 800b99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b99e:	2340      	movs	r3, #64	; 0x40
 800b9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff fd82 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	2103      	movs	r1, #3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f9bd 	bl	800bd3c <SDMMC_GetCmdResp6>
 800b9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b088      	sub	sp, #32
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b9dc:	230d      	movs	r3, #13
 800b9de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9e0:	2340      	movs	r3, #64	; 0x40
 800b9e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ee:	f107 0308 	add.w	r3, r7, #8
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff fd61 	bl	800b4bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b9fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9fe:	210d      	movs	r1, #13
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f82f 	bl	800ba64 <SDMMC_GetCmdResp1>
 800ba06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba08:	69fb      	ldr	r3, [r7, #28]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba14:	b490      	push	{r4, r7}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <SDMMC_GetCmdError+0x48>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a0f      	ldr	r2, [pc, #60]	; (800ba60 <SDMMC_GetCmdError+0x4c>)
 800ba22:	fba2 2303 	umull	r2, r3, r2, r3
 800ba26:	0a5b      	lsrs	r3, r3, #9
 800ba28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba30:	4623      	mov	r3, r4
 800ba32:	1e5c      	subs	r4, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba3c:	e009      	b.n	800ba52 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0f2      	beq.n	800ba30 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	22c5      	movs	r2, #197	; 0xc5
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc90      	pop	{r4, r7}
 800ba5a:	4770      	bx	lr
 800ba5c:	20000018 	.word	0x20000018
 800ba60:	10624dd3 	.word	0x10624dd3

0800ba64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba64:	b590      	push	{r4, r7, lr}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba72:	4b6f      	ldr	r3, [pc, #444]	; (800bc30 <SDMMC_GetCmdResp1+0x1cc>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a6f      	ldr	r2, [pc, #444]	; (800bc34 <SDMMC_GetCmdResp1+0x1d0>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	0a5b      	lsrs	r3, r3, #9
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba84:	4623      	mov	r3, r4
 800ba86:	1e5c      	subs	r4, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba90:	e0c9      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba96:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d0f0      	beq.n	800ba84 <SDMMC_GetCmdResp1+0x20>
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1eb      	bne.n	800ba84 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2204      	movs	r2, #4
 800babc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800babe:	2304      	movs	r3, #4
 800bac0:	e0b1      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2201      	movs	r2, #1
 800bad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e0a6      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	22c5      	movs	r2, #197	; 0xc5
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff fd16 	bl	800b510 <SDMMC_GetCommandResponse>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	7afb      	ldrb	r3, [r7, #11]
 800baea:	4293      	cmp	r3, r2
 800baec:	d001      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baee:	2301      	movs	r3, #1
 800baf0:	e099      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baf2:	2100      	movs	r1, #0
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff fd18 	bl	800b52a <SDMMC_GetResponse>
 800bafa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	4b4e      	ldr	r3, [pc, #312]	; (800bc38 <SDMMC_GetCmdResp1+0x1d4>)
 800bb00:	4013      	ands	r3, r2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e08d      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	da02      	bge.n	800bb16 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb14:	e087      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb20:	2340      	movs	r3, #64	; 0x40
 800bb22:	e080      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb2e:	2380      	movs	r3, #128	; 0x80
 800bb30:	e079      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb40:	e071      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb50:	e069      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb60:	e061      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb70:	e059      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb80:	e051      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb90:	e049      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bba0:	e041      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbb0:	e039      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbc0:	e031      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbd0:	e029      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbe0:	e021      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bbec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bbf0:	e019      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc00:	e011      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc10:	e009      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f003 0308 	and.w	r3, r3, #8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc20:	e001      	b.n	800bc26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd90      	pop	{r4, r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000018 	.word	0x20000018
 800bc34:	10624dd3 	.word	0x10624dd3
 800bc38:	fdffe008 	.word	0xfdffe008

0800bc3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc3c:	b490      	push	{r4, r7}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc44:	4b1e      	ldr	r3, [pc, #120]	; (800bcc0 <SDMMC_GetCmdResp2+0x84>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a1e      	ldr	r2, [pc, #120]	; (800bcc4 <SDMMC_GetCmdResp2+0x88>)
 800bc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc4e:	0a5b      	lsrs	r3, r3, #9
 800bc50:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc58:	4623      	mov	r3, r4
 800bc5a:	1e5c      	subs	r4, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc64:	e026      	b.n	800bcb4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0f0      	beq.n	800bc58 <SDMMC_GetCmdResp2+0x1c>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1eb      	bne.n	800bc58 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2204      	movs	r2, #4
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc92:	2304      	movs	r3, #4
 800bc94:	e00e      	b.n	800bcb4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d004      	beq.n	800bcac <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e003      	b.n	800bcb4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	22c5      	movs	r2, #197	; 0xc5
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc90      	pop	{r4, r7}
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	20000018 	.word	0x20000018
 800bcc4:	10624dd3 	.word	0x10624dd3

0800bcc8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcc8:	b490      	push	{r4, r7}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcd0:	4b18      	ldr	r3, [pc, #96]	; (800bd34 <SDMMC_GetCmdResp3+0x6c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a18      	ldr	r2, [pc, #96]	; (800bd38 <SDMMC_GetCmdResp3+0x70>)
 800bcd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcda:	0a5b      	lsrs	r3, r3, #9
 800bcdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bce4:	4623      	mov	r3, r4
 800bce6:	1e5c      	subs	r4, r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcf0:	e01b      	b.n	800bd2a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0f0      	beq.n	800bce4 <SDMMC_GetCmdResp3+0x1c>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1eb      	bne.n	800bce4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d004      	beq.n	800bd22 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2204      	movs	r2, #4
 800bd1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd1e:	2304      	movs	r3, #4
 800bd20:	e003      	b.n	800bd2a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	22c5      	movs	r2, #197	; 0xc5
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bc90      	pop	{r4, r7}
 800bd32:	4770      	bx	lr
 800bd34:	20000018 	.word	0x20000018
 800bd38:	10624dd3 	.word	0x10624dd3

0800bd3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	460b      	mov	r3, r1
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd4a:	4b34      	ldr	r3, [pc, #208]	; (800be1c <SDMMC_GetCmdResp6+0xe0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a34      	ldr	r2, [pc, #208]	; (800be20 <SDMMC_GetCmdResp6+0xe4>)
 800bd50:	fba2 2303 	umull	r2, r3, r2, r3
 800bd54:	0a5b      	lsrs	r3, r3, #9
 800bd56:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd5a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd5e:	4623      	mov	r3, r4
 800bd60:	1e5c      	subs	r4, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd6a:	e052      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd70:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0f0      	beq.n	800bd5e <SDMMC_GetCmdResp6+0x22>
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1eb      	bne.n	800bd5e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2204      	movs	r2, #4
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd98:	2304      	movs	r3, #4
 800bd9a:	e03a      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d004      	beq.n	800bdb2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e02f      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff fbac 	bl	800b510 <SDMMC_GetCommandResponse>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d001      	beq.n	800bdc6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e025      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	22c5      	movs	r2, #197	; 0xc5
 800bdca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bdcc:	2100      	movs	r1, #0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7ff fbab 	bl	800b52a <SDMMC_GetResponse>
 800bdd4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	0c1b      	lsrs	r3, r3, #16
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	e011      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdfc:	e009      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be0c:	e001      	b.n	800be12 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd90      	pop	{r4, r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000018 	.word	0x20000018
 800be20:	10624dd3 	.word	0x10624dd3

0800be24 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be24:	b490      	push	{r4, r7}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be2c:	4b21      	ldr	r3, [pc, #132]	; (800beb4 <SDMMC_GetCmdResp7+0x90>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a21      	ldr	r2, [pc, #132]	; (800beb8 <SDMMC_GetCmdResp7+0x94>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	0a5b      	lsrs	r3, r3, #9
 800be38:	f241 3288 	movw	r2, #5000	; 0x1388
 800be3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be40:	4623      	mov	r3, r4
 800be42:	1e5c      	subs	r4, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d102      	bne.n	800be4e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be4c:	e02c      	b.n	800bea8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0f0      	beq.n	800be40 <SDMMC_GetCmdResp7+0x1c>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1eb      	bne.n	800be40 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d004      	beq.n	800be7e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2204      	movs	r2, #4
 800be78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be7a:	2304      	movs	r3, #4
 800be7c:	e014      	b.n	800bea8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be90:	2301      	movs	r3, #1
 800be92:	e009      	b.n	800bea8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2240      	movs	r2, #64	; 0x40
 800bea4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bea6:	2300      	movs	r3, #0
  
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bc90      	pop	{r4, r7}
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20000018 	.word	0x20000018
 800beb8:	10624dd3 	.word	0x10624dd3

0800bebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bec0:	4904      	ldr	r1, [pc, #16]	; (800bed4 <MX_FATFS_Init+0x18>)
 800bec2:	4805      	ldr	r0, [pc, #20]	; (800bed8 <MX_FATFS_Init+0x1c>)
 800bec4:	f000 fa96 	bl	800c3f4 <FATFS_LinkDriver>
 800bec8:	4603      	mov	r3, r0
 800beca:	461a      	mov	r2, r3
 800becc:	4b03      	ldr	r3, [pc, #12]	; (800bedc <MX_FATFS_Init+0x20>)
 800bece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bed0:	bf00      	nop
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	2000c5ec 	.word	0x2000c5ec
 800bed8:	08026f6c 	.word	0x08026f6c
 800bedc:	2000c5e8 	.word	0x2000c5e8

0800bee0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800beea:	f000 f87b 	bl	800bfe4 <BSP_SD_IsDetected>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d001      	beq.n	800bef8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bef4:	2302      	movs	r3, #2
 800bef6:	e012      	b.n	800bf1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bef8:	480b      	ldr	r0, [pc, #44]	; (800bf28 <BSP_SD_Init+0x48>)
 800befa:	f7fc fae9 	bl	80084d0 <HAL_SD_Init>
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d109      	bne.n	800bf1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bf08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bf0c:	4806      	ldr	r0, [pc, #24]	; (800bf28 <BSP_SD_Init+0x48>)
 800bf0e:	f7fc ff2b 	bl	8008d68 <HAL_SD_ConfigWideBusOperation>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	2000c074 	.word	0x2000c074

0800bf2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	68f9      	ldr	r1, [r7, #12]
 800bf42:	4806      	ldr	r0, [pc, #24]	; (800bf5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800bf44:	f7fc fb5c 	bl	8008600 <HAL_SD_ReadBlocks_DMA>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	2000c074 	.word	0x2000c074

0800bf60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	68f9      	ldr	r1, [r7, #12]
 800bf76:	4806      	ldr	r0, [pc, #24]	; (800bf90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bf78:	f7fc fc2e 	bl	80087d8 <HAL_SD_WriteBlocks_DMA>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	2000c074 	.word	0x2000c074

0800bf94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bf98:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <BSP_SD_GetCardState+0x1c>)
 800bf9a:	f7fc ff61 	bl	8008e60 <HAL_SD_GetCardState>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	bf14      	ite	ne
 800bfa4:	2301      	movne	r3, #1
 800bfa6:	2300      	moveq	r3, #0
 800bfa8:	b2db      	uxtb	r3, r3
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	2000c074 	.word	0x2000c074

0800bfb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	4803      	ldr	r0, [pc, #12]	; (800bfcc <BSP_SD_GetCardInfo+0x18>)
 800bfc0:	f7fc fea6 	bl	8008d10 <HAL_SD_GetCardInfo>
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2000c074 	.word	0x2000c074

0800bfd0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bfd8:	f000 f9b2 	bl	800c340 <BSP_SD_ReadCpltCallback>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bfea:	2301      	movs	r3, #1
 800bfec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bfee:	f000 f80b 	bl	800c008 <BSP_PlatformIsDetected>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bff8:	2300      	movs	r3, #0
 800bffa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	b2db      	uxtb	r3, r3
}
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c00e:	2301      	movs	r3, #1
 800c010:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c016:	4806      	ldr	r0, [pc, #24]	; (800c030 <BSP_PlatformIsDetected+0x28>)
 800c018:	f7f9 fe3a 	bl	8005c90 <HAL_GPIO_ReadPin>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c022:	2300      	movs	r3, #0
 800c024:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c026:	79fb      	ldrb	r3, [r7, #7]
}  
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	40020800 	.word	0x40020800

0800c034 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c03c:	f000 fa26 	bl	800c48c <osKernelSysTick>
 800c040:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c042:	e006      	b.n	800c052 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c044:	f7ff ffa6 	bl	800bf94 <BSP_SD_GetCardState>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	e009      	b.n	800c066 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c052:	f000 fa1b 	bl	800c48c <osKernelSysTick>
 800c056:	4602      	mov	r2, r0
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d8f0      	bhi.n	800c044 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c062:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <SD_CheckStatus+0x38>)
 800c07c:	2201      	movs	r2, #1
 800c07e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c080:	f7ff ff88 	bl	800bf94 <BSP_SD_GetCardState>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d107      	bne.n	800c09a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c08a:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <SD_CheckStatus+0x38>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	f023 0301 	bic.w	r3, r3, #1
 800c094:	b2da      	uxtb	r2, r3
 800c096:	4b04      	ldr	r3, [pc, #16]	; (800c0a8 <SD_CheckStatus+0x38>)
 800c098:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c09a:	4b03      	ldr	r3, [pc, #12]	; (800c0a8 <SD_CheckStatus+0x38>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b2db      	uxtb	r3, r3
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20000021 	.word	0x20000021

0800c0ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c0b6:	4b20      	ldr	r3, [pc, #128]	; (800c138 <SD_initialize+0x8c>)
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c0bc:	f000 f9da 	bl	800c474 <osKernelRunning>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d030      	beq.n	800c128 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c0c6:	f7ff ff0b 	bl	800bee0 <BSP_SD_Init>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d107      	bne.n	800c0e0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff ffcc 	bl	800c070 <SD_CheckStatus>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4b16      	ldr	r3, [pc, #88]	; (800c138 <SD_initialize+0x8c>)
 800c0de:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c0e0:	4b15      	ldr	r3, [pc, #84]	; (800c138 <SD_initialize+0x8c>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d01e      	beq.n	800c128 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c0ea:	4b14      	ldr	r3, [pc, #80]	; (800c13c <SD_initialize+0x90>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10e      	bne.n	800c110 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c0f2:	4b13      	ldr	r3, [pc, #76]	; (800c140 <SD_initialize+0x94>)
 800c0f4:	f107 0408 	add.w	r4, r7, #8
 800c0f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c0fe:	f107 0308 	add.w	r3, r7, #8
 800c102:	2100      	movs	r1, #0
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fa31 	bl	800c56c <osMessageCreate>
 800c10a:	4602      	mov	r2, r0
 800c10c:	4b0b      	ldr	r3, [pc, #44]	; (800c13c <SD_initialize+0x90>)
 800c10e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c110:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <SD_initialize+0x90>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d107      	bne.n	800c128 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c118:	4b07      	ldr	r3, [pc, #28]	; (800c138 <SD_initialize+0x8c>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	b2da      	uxtb	r2, r3
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <SD_initialize+0x8c>)
 800c126:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c128:	4b03      	ldr	r3, [pc, #12]	; (800c138 <SD_initialize+0x8c>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	b2db      	uxtb	r3, r3
}
 800c12e:	4618      	mov	r0, r3
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	bd90      	pop	{r4, r7, pc}
 800c136:	bf00      	nop
 800c138:	20000021 	.word	0x20000021
 800c13c:	200003c0 	.word	0x200003c0
 800c140:	08026854 	.word	0x08026854

0800c144 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff ff8d 	bl	800c070 <SD_CheckStatus>
 800c156:	4603      	mov	r3, r0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08a      	sub	sp, #40	; 0x28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	603b      	str	r3, [r7, #0]
 800c16c:	4603      	mov	r3, r0
 800c16e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c176:	f247 5030 	movw	r0, #30000	; 0x7530
 800c17a:	f7ff ff5b 	bl	800c034 <SD_CheckStatusWithTimeout>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	da02      	bge.n	800c18a <SD_read+0x2a>
  {
    return res;
 800c184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c188:	e032      	b.n	800c1f0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	68b8      	ldr	r0, [r7, #8]
 800c190:	f7ff fecc 	bl	800bf2c <BSP_SD_ReadBlocks_DMA>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c19a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d124      	bne.n	800c1ec <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c1a2:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <SD_read+0x98>)
 800c1a4:	6819      	ldr	r1, [r3, #0]
 800c1a6:	f107 0314 	add.w	r3, r7, #20
 800c1aa:	f247 5230 	movw	r2, #30000	; 0x7530
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fa46 	bl	800c640 <osMessageGet>

    if (event.status == osEventMessage)
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2b10      	cmp	r3, #16
 800c1b8:	d118      	bne.n	800c1ec <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d115      	bne.n	800c1ec <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c1c0:	f000 f964 	bl	800c48c <osKernelSysTick>
 800c1c4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c1c6:	e008      	b.n	800c1da <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c1c8:	f7ff fee4 	bl	800bf94 <BSP_SD_GetCardState>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d103      	bne.n	800c1da <SD_read+0x7a>
              {
                res = RES_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c1d8:	e008      	b.n	800c1ec <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c1da:	f000 f957 	bl	800c48c <osKernelSysTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d9ed      	bls.n	800c1c8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3728      	adds	r7, #40	; 0x28
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	200003c0 	.word	0x200003c0

0800c1fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08a      	sub	sp, #40	; 0x28
 800c200:	af00      	add	r7, sp, #0
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c212:	f247 5030 	movw	r0, #30000	; 0x7530
 800c216:	f7ff ff0d 	bl	800c034 <SD_CheckStatusWithTimeout>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da02      	bge.n	800c226 <SD_write+0x2a>
  {
    return res;
 800c220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c224:	e02e      	b.n	800c284 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	68b8      	ldr	r0, [r7, #8]
 800c22c:	f7ff fe98 	bl	800bf60 <BSP_SD_WriteBlocks_DMA>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d124      	bne.n	800c280 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c236:	4b15      	ldr	r3, [pc, #84]	; (800c28c <SD_write+0x90>)
 800c238:	6819      	ldr	r1, [r3, #0]
 800c23a:	f107 0314 	add.w	r3, r7, #20
 800c23e:	f247 5230 	movw	r2, #30000	; 0x7530
 800c242:	4618      	mov	r0, r3
 800c244:	f000 f9fc 	bl	800c640 <osMessageGet>

    if (event.status == osEventMessage)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b10      	cmp	r3, #16
 800c24c:	d118      	bne.n	800c280 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	2b02      	cmp	r3, #2
 800c252:	d115      	bne.n	800c280 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c254:	f000 f91a 	bl	800c48c <osKernelSysTick>
 800c258:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c25a:	e008      	b.n	800c26e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c25c:	f7ff fe9a 	bl	800bf94 <BSP_SD_GetCardState>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <SD_write+0x72>
          {
            res = RES_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c26c:	e008      	b.n	800c280 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c26e:	f000 f90d 	bl	800c48c <osKernelSysTick>
 800c272:	4602      	mov	r2, r0
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	f247 522f 	movw	r2, #29999	; 0x752f
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d9ed      	bls.n	800c25c <SD_write+0x60>
    }

  }
#endif

  return res;
 800c280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c284:	4618      	mov	r0, r3
 800c286:	3728      	adds	r7, #40	; 0x28
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200003c0 	.word	0x200003c0

0800c290 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08c      	sub	sp, #48	; 0x30
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	603a      	str	r2, [r7, #0]
 800c29a:	71fb      	strb	r3, [r7, #7]
 800c29c:	460b      	mov	r3, r1
 800c29e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c2a6:	4b25      	ldr	r3, [pc, #148]	; (800c33c <SD_ioctl+0xac>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d001      	beq.n	800c2b8 <SD_ioctl+0x28>
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e03c      	b.n	800c332 <SD_ioctl+0xa2>

  switch (cmd)
 800c2b8:	79bb      	ldrb	r3, [r7, #6]
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d834      	bhi.n	800c328 <SD_ioctl+0x98>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <SD_ioctl+0x34>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c2d5 	.word	0x0800c2d5
 800c2c8:	0800c2dd 	.word	0x0800c2dd
 800c2cc:	0800c2f5 	.word	0x0800c2f5
 800c2d0:	0800c30f 	.word	0x0800c30f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2da:	e028      	b.n	800c32e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2dc:	f107 030c 	add.w	r3, r7, #12
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fe67 	bl	800bfb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2f2:	e01c      	b.n	800c32e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fe5b 	bl	800bfb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	b29a      	uxth	r2, r3
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c30c:	e00f      	b.n	800c32e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c30e:	f107 030c 	add.w	r3, r7, #12
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fe4e 	bl	800bfb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	0a5a      	lsrs	r2, r3, #9
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c326:	e002      	b.n	800c32e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c332:	4618      	mov	r0, r3
 800c334:	3730      	adds	r7, #48	; 0x30
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000021 	.word	0x20000021

0800c340 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c344:	4b04      	ldr	r3, [pc, #16]	; (800c358 <BSP_SD_ReadCpltCallback+0x18>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2200      	movs	r2, #0
 800c34a:	2101      	movs	r1, #1
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 f937 	bl	800c5c0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c352:	bf00      	nop
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	200003c0 	.word	0x200003c0

0800c35c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c36a:	2301      	movs	r3, #1
 800c36c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c372:	4b1f      	ldr	r3, [pc, #124]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c374:	7a5b      	ldrb	r3, [r3, #9]
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d131      	bne.n	800c3e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c37c:	4b1c      	ldr	r3, [pc, #112]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c37e:	7a5b      	ldrb	r3, [r3, #9]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	461a      	mov	r2, r3
 800c384:	4b1a      	ldr	r3, [pc, #104]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c386:	2100      	movs	r1, #0
 800c388:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c38a:	4b19      	ldr	r3, [pc, #100]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c38c:	7a5b      	ldrb	r3, [r3, #9]
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	4a17      	ldr	r2, [pc, #92]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c39a:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c39c:	7a5b      	ldrb	r3, [r3, #9]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4b13      	ldr	r3, [pc, #76]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c3a4:	4413      	add	r3, r2
 800c3a6:	79fa      	ldrb	r2, [r7, #7]
 800c3a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3aa:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c3ac:	7a5b      	ldrb	r3, [r3, #9]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	b2d1      	uxtb	r1, r2
 800c3b4:	4a0e      	ldr	r2, [pc, #56]	; (800c3f0 <FATFS_LinkDriverEx+0x94>)
 800c3b6:	7251      	strb	r1, [r2, #9]
 800c3b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3ba:	7dbb      	ldrb	r3, [r7, #22]
 800c3bc:	3330      	adds	r3, #48	; 0x30
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	223a      	movs	r2, #58	; 0x3a
 800c3ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	222f      	movs	r2, #47	; 0x2f
 800c3d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3303      	adds	r3, #3
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	200003c4 	.word	0x200003c4

0800c3f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c3fe:	2200      	movs	r2, #0
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff ffaa 	bl	800c35c <FATFS_LinkDriverEx>
 800c408:	4603      	mov	r3, r0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c412:	b480      	push	{r7}
 800c414:	b085      	sub	sp, #20
 800c416:	af00      	add	r7, sp, #0
 800c418:	4603      	mov	r3, r0
 800c41a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c41c:	2300      	movs	r3, #0
 800c41e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c424:	2b84      	cmp	r3, #132	; 0x84
 800c426:	d005      	beq.n	800c434 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c428:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	3303      	adds	r3, #3
 800c432:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c434:	68fb      	ldr	r3, [r7, #12]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c448:	f3ef 8305 	mrs	r3, IPSR
 800c44c:	607b      	str	r3, [r7, #4]
  return(result);
 800c44e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c450:	2b00      	cmp	r3, #0
 800c452:	bf14      	ite	ne
 800c454:	2301      	movne	r3, #1
 800c456:	2300      	moveq	r3, #0
 800c458:	b2db      	uxtb	r3, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c46a:	f001 faff 	bl	800da6c <vTaskStartScheduler>
  
  return osOK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	bd80      	pop	{r7, pc}

0800c474 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c478:	f001 ff4a 	bl	800e310 <xTaskGetSchedulerState>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <osKernelRunning+0x12>
    return 0;
 800c482:	2300      	movs	r3, #0
 800c484:	e000      	b.n	800c488 <osKernelRunning+0x14>
  else
    return 1;
 800c486:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c488:	4618      	mov	r0, r3
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c490:	f7ff ffd7 	bl	800c442 <inHandlerMode>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c49a:	f001 fc05 	bl	800dca8 <xTaskGetTickCountFromISR>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	e002      	b.n	800c4a8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c4a2:	f001 fbf1 	bl	800dc88 <xTaskGetTickCount>
 800c4a6:	4603      	mov	r3, r0
  }
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ae:	b089      	sub	sp, #36	; 0x24
 800c4b0:	af04      	add	r7, sp, #16
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d020      	beq.n	800c500 <osThreadCreate+0x54>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d01c      	beq.n	800c500 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685c      	ldr	r4, [r3, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681d      	ldr	r5, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	691e      	ldr	r6, [r3, #16]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7ff ff9a 	bl	800c412 <makeFreeRtosPriority>
 800c4de:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4e8:	9202      	str	r2, [sp, #8]
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	9100      	str	r1, [sp, #0]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f001 f8e0 	bl	800d6ba <xTaskCreateStatic>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e01c      	b.n	800c53a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685c      	ldr	r4, [r3, #4]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c50c:	b29e      	uxth	r6, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff ff7c 	bl	800c412 <makeFreeRtosPriority>
 800c51a:	4602      	mov	r2, r0
 800c51c:	f107 030c 	add.w	r3, r7, #12
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	9200      	str	r2, [sp, #0]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	4632      	mov	r2, r6
 800c528:	4629      	mov	r1, r5
 800c52a:	4620      	mov	r0, r4
 800c52c:	f001 f925 	bl	800d77a <xTaskCreate>
 800c530:	4603      	mov	r3, r0
 800c532:	2b01      	cmp	r3, #1
 800c534:	d001      	beq.n	800c53a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c536:	2300      	movs	r3, #0
 800c538:	e000      	b.n	800c53c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c53a:	68fb      	ldr	r3, [r7, #12]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c544 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <osDelay+0x16>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	e000      	b.n	800c55c <osDelay+0x18>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4618      	mov	r0, r3
 800c55e:	f001 fa4f 	bl	800da00 <vTaskDelay>
  
  return osOK;
 800c562:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b085      	sub	sp, #20
 800c570:	af02      	add	r7, sp, #8
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d012      	beq.n	800c5a4 <osMessageCreate+0x38>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6859      	ldr	r1, [r3, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68dc      	ldr	r4, [r3, #12]
 800c596:	2300      	movs	r3, #0
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	4623      	mov	r3, r4
 800c59c:	f000 f9e2 	bl	800c964 <xQueueGenericCreateStatic>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	e008      	b.n	800c5b6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6818      	ldr	r0, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	f000 fa55 	bl	800ca5e <xQueueGenericCreate>
 800c5b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd90      	pop	{r4, r7, pc}
	...

0800c5c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <osMessagePut+0x1e>
    ticks = 1;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c5de:	f7ff ff30 	bl	800c442 <inHandlerMode>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d018      	beq.n	800c61a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c5e8:	f107 0210 	add.w	r2, r7, #16
 800c5ec:	f107 0108 	add.w	r1, r7, #8
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f000 fb96 	bl	800cd24 <xQueueGenericSendFromISR>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d001      	beq.n	800c602 <osMessagePut+0x42>
      return osErrorOS;
 800c5fe:	23ff      	movs	r3, #255	; 0xff
 800c600:	e018      	b.n	800c634 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d014      	beq.n	800c632 <osMessagePut+0x72>
 800c608:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <osMessagePut+0x7c>)
 800c60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	e00b      	b.n	800c632 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c61a:	f107 0108 	add.w	r1, r7, #8
 800c61e:	2300      	movs	r3, #0
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fa7c 	bl	800cb20 <xQueueGenericSend>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d001      	beq.n	800c632 <osMessagePut+0x72>
      return osErrorOS;
 800c62e:	23ff      	movs	r3, #255	; 0xff
 800c630:	e000      	b.n	800c634 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b08b      	sub	sp, #44	; 0x2c
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10a      	bne.n	800c670 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c65a:	2380      	movs	r3, #128	; 0x80
 800c65c:	617b      	str	r3, [r7, #20]
    return event;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	461c      	mov	r4, r3
 800c662:	f107 0314 	add.w	r3, r7, #20
 800c666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c66a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c66e:	e054      	b.n	800c71a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c670:	2300      	movs	r3, #0
 800c672:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67e:	d103      	bne.n	800c688 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	627b      	str	r3, [r7, #36]	; 0x24
 800c686:	e009      	b.n	800c69c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <osMessageGet+0x5c>
      ticks = 1;
 800c698:	2301      	movs	r3, #1
 800c69a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c69c:	f7ff fed1 	bl	800c442 <inHandlerMode>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01c      	beq.n	800c6e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c6a6:	f107 0220 	add.w	r2, r7, #32
 800c6aa:	f107 0314 	add.w	r3, r7, #20
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	68b8      	ldr	r0, [r7, #8]
 800c6b4:	f000 fe56 	bl	800d364 <xQueueReceiveFromISR>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d102      	bne.n	800c6c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c6be:	2310      	movs	r3, #16
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	e001      	b.n	800c6c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01d      	beq.n	800c70a <osMessageGet+0xca>
 800c6ce:	4b15      	ldr	r3, [pc, #84]	; (800c724 <osMessageGet+0xe4>)
 800c6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	e014      	b.n	800c70a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c6e0:	f107 0314 	add.w	r3, r7, #20
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	68b8      	ldr	r0, [r7, #8]
 800c6ec:	f000 fc48 	bl	800cf80 <xQueueReceive>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d102      	bne.n	800c6fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c6f6:	2310      	movs	r3, #16
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	e006      	b.n	800c70a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <osMessageGet+0xc6>
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <osMessageGet+0xc8>
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	461c      	mov	r4, r3
 800c70e:	f107 0314 	add.w	r3, r7, #20
 800c712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	372c      	adds	r7, #44	; 0x2c
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd90      	pop	{r4, r7, pc}
 800c722:	bf00      	nop
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 0208 	add.w	r2, r3, #8
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f103 0208 	add.w	r2, r3, #8
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f103 0208 	add.w	r2, r3, #8
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	689a      	ldr	r2, [r3, #8]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	601a      	str	r2, [r3, #0]
}
 800c7be:	bf00      	nop
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e0:	d103      	bne.n	800c7ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	e00c      	b.n	800c804 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	e002      	b.n	800c7f8 <vListInsert+0x2e>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	429a      	cmp	r2, r3
 800c802:	d2f6      	bcs.n	800c7f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	601a      	str	r2, [r3, #0]
}
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	6892      	ldr	r2, [r2, #8]
 800c852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	6852      	ldr	r2, [r2, #4]
 800c85c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d103      	bne.n	800c870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	1e5a      	subs	r2, r3, #1
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10b      	bne.n	800c8bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	b672      	cpsid	i
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	b662      	cpsie	i
 800c8b8:	60bb      	str	r3, [r7, #8]
 800c8ba:	e7fe      	b.n	800c8ba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c8bc:	f002 f86c 	bl	800e998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	68f9      	ldr	r1, [r7, #12]
 800c8ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	68f9      	ldr	r1, [r7, #12]
 800c8f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8f2:	fb01 f303 	mul.w	r3, r1, r3
 800c8f6:	441a      	add	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	22ff      	movs	r2, #255	; 0xff
 800c900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	22ff      	movs	r2, #255	; 0xff
 800c908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d114      	bne.n	800c93c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d01a      	beq.n	800c950 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3310      	adds	r3, #16
 800c91e:	4618      	mov	r0, r3
 800c920:	f001 fb36 	bl	800df90 <xTaskRemoveFromEventList>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d012      	beq.n	800c950 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c92a:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <xQueueGenericReset+0xd0>)
 800c92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	e009      	b.n	800c950 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3310      	adds	r3, #16
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff fef1 	bl	800c728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3324      	adds	r3, #36	; 0x24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff feec 	bl	800c728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c950:	f002 f854 	bl	800e9fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c954:	2301      	movs	r3, #1
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	e000ed04 	.word	0xe000ed04

0800c964 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	; 0x38
 800c968:	af02      	add	r7, sp, #8
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10b      	bne.n	800c990 <xQueueGenericCreateStatic+0x2c>
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	b672      	cpsid	i
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	b662      	cpsie	i
 800c98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c98e:	e7fe      	b.n	800c98e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10b      	bne.n	800c9ae <xQueueGenericCreateStatic+0x4a>
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	b672      	cpsid	i
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	b662      	cpsie	i
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <xQueueGenericCreateStatic+0x56>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <xQueueGenericCreateStatic+0x5a>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueGenericCreateStatic+0x5c>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <xQueueGenericCreateStatic+0x78>
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	b672      	cpsid	i
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	b662      	cpsie	i
 800c9d8:	623b      	str	r3, [r7, #32]
 800c9da:	e7fe      	b.n	800c9da <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <xQueueGenericCreateStatic+0x84>
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d101      	bne.n	800c9ec <xQueueGenericCreateStatic+0x88>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e000      	b.n	800c9ee <xQueueGenericCreateStatic+0x8a>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10b      	bne.n	800ca0a <xQueueGenericCreateStatic+0xa6>
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	b672      	cpsid	i
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	b662      	cpsie	i
 800ca06:	61fb      	str	r3, [r7, #28]
 800ca08:	e7fe      	b.n	800ca08 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca0a:	2348      	movs	r3, #72	; 0x48
 800ca0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b48      	cmp	r3, #72	; 0x48
 800ca12:	d00b      	beq.n	800ca2c <xQueueGenericCreateStatic+0xc8>
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	61bb      	str	r3, [r7, #24]
 800ca2a:	e7fe      	b.n	800ca2a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00d      	beq.n	800ca54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	68b9      	ldr	r1, [r7, #8]
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 f846 	bl	800cae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3730      	adds	r7, #48	; 0x30
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b08a      	sub	sp, #40	; 0x28
 800ca62:	af02      	add	r7, sp, #8
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10b      	bne.n	800ca8a <xQueueGenericCreate+0x2c>
 800ca72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca76:	b672      	cpsid	i
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	b662      	cpsie	i
 800ca86:	613b      	str	r3, [r7, #16]
 800ca88:	e7fe      	b.n	800ca88 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d102      	bne.n	800ca96 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	61fb      	str	r3, [r7, #28]
 800ca94:	e004      	b.n	800caa0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	fb02 f303 	mul.w	r3, r2, r3
 800ca9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	3348      	adds	r3, #72	; 0x48
 800caa4:	4618      	mov	r0, r3
 800caa6:	f002 f899 	bl	800ebdc <pvPortMalloc>
 800caaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d011      	beq.n	800cad6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	3348      	adds	r3, #72	; 0x48
 800caba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cac4:	79fa      	ldrb	r2, [r7, #7]
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	4613      	mov	r3, r2
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	68b9      	ldr	r1, [r7, #8]
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 f805 	bl	800cae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cad6:	69bb      	ldr	r3, [r7, #24]
	}
 800cad8:	4618      	mov	r0, r3
 800cada:	3720      	adds	r7, #32
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d103      	bne.n	800cafc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	e002      	b.n	800cb02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb0e:	2101      	movs	r1, #1
 800cb10:	69b8      	ldr	r0, [r7, #24]
 800cb12:	f7ff febd 	bl	800c890 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08e      	sub	sp, #56	; 0x38
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <xQueueGenericSend+0x34>
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	b672      	cpsid	i
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	b662      	cpsie	i
 800cb50:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb52:	e7fe      	b.n	800cb52 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <xQueueGenericSend+0x42>
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <xQueueGenericSend+0x46>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <xQueueGenericSend+0x48>
 800cb66:	2300      	movs	r3, #0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10b      	bne.n	800cb84 <xQueueGenericSend+0x64>
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	b672      	cpsid	i
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	b662      	cpsie	i
 800cb80:	627b      	str	r3, [r7, #36]	; 0x24
 800cb82:	e7fe      	b.n	800cb82 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d103      	bne.n	800cb92 <xQueueGenericSend+0x72>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d101      	bne.n	800cb96 <xQueueGenericSend+0x76>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e000      	b.n	800cb98 <xQueueGenericSend+0x78>
 800cb96:	2300      	movs	r3, #0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10b      	bne.n	800cbb4 <xQueueGenericSend+0x94>
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	b672      	cpsid	i
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	b662      	cpsie	i
 800cbb0:	623b      	str	r3, [r7, #32]
 800cbb2:	e7fe      	b.n	800cbb2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbb4:	f001 fbac 	bl	800e310 <xTaskGetSchedulerState>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d102      	bne.n	800cbc4 <xQueueGenericSend+0xa4>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <xQueueGenericSend+0xa8>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <xQueueGenericSend+0xaa>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10b      	bne.n	800cbe6 <xQueueGenericSend+0xc6>
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	b672      	cpsid	i
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	b662      	cpsie	i
 800cbe2:	61fb      	str	r3, [r7, #28]
 800cbe4:	e7fe      	b.n	800cbe4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbe6:	f001 fed7 	bl	800e998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d302      	bcc.n	800cbfc <xQueueGenericSend+0xdc>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d129      	bne.n	800cc50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc02:	f000 fc4a 	bl	800d49a <prvCopyDataToQueue>
 800cc06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d010      	beq.n	800cc32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	3324      	adds	r3, #36	; 0x24
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 f9bb 	bl	800df90 <xTaskRemoveFromEventList>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc20:	4b3f      	ldr	r3, [pc, #252]	; (800cd20 <xQueueGenericSend+0x200>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	e00a      	b.n	800cc48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc38:	4b39      	ldr	r3, [pc, #228]	; (800cd20 <xQueueGenericSend+0x200>)
 800cc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc48:	f001 fed8 	bl	800e9fc <vPortExitCritical>
				return pdPASS;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e063      	b.n	800cd18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc56:	f001 fed1 	bl	800e9fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e05c      	b.n	800cd18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc64:	f107 0314 	add.w	r3, r7, #20
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 f9f5 	bl	800e058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc72:	f001 fec3 	bl	800e9fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc76:	f000 ff5b 	bl	800db30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc7a:	f001 fe8d 	bl	800e998 <vPortEnterCritical>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d103      	bne.n	800cc94 <xQueueGenericSend+0x174>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc9a:	b25b      	sxtb	r3, r3
 800cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca0:	d103      	bne.n	800ccaa <xQueueGenericSend+0x18a>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccaa:	f001 fea7 	bl	800e9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccae:	1d3a      	adds	r2, r7, #4
 800ccb0:	f107 0314 	add.w	r3, r7, #20
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f001 f9e4 	bl	800e084 <xTaskCheckForTimeOut>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d124      	bne.n	800cd0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccc4:	f000 fce1 	bl	800d68a <prvIsQueueFull>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d018      	beq.n	800cd00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f001 f934 	bl	800df44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccde:	f000 fc6c 	bl	800d5ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cce2:	f000 ff33 	bl	800db4c <xTaskResumeAll>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f47f af7c 	bne.w	800cbe6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <xQueueGenericSend+0x200>)
 800ccf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	e772      	b.n	800cbe6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd02:	f000 fc5a 	bl	800d5ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd06:	f000 ff21 	bl	800db4c <xTaskResumeAll>
 800cd0a:	e76c      	b.n	800cbe6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0e:	f000 fc54 	bl	800d5ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd12:	f000 ff1b 	bl	800db4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3738      	adds	r7, #56	; 0x38
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	e000ed04 	.word	0xe000ed04

0800cd24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	; 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10b      	bne.n	800cd54 <xQueueGenericSendFromISR+0x30>
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	b672      	cpsid	i
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	b662      	cpsie	i
 800cd50:	627b      	str	r3, [r7, #36]	; 0x24
 800cd52:	e7fe      	b.n	800cd52 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d103      	bne.n	800cd62 <xQueueGenericSendFromISR+0x3e>
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <xQueueGenericSendFromISR+0x42>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <xQueueGenericSendFromISR+0x44>
 800cd66:	2300      	movs	r3, #0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10b      	bne.n	800cd84 <xQueueGenericSendFromISR+0x60>
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	b672      	cpsid	i
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	b662      	cpsie	i
 800cd80:	623b      	str	r3, [r7, #32]
 800cd82:	e7fe      	b.n	800cd82 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	d103      	bne.n	800cd92 <xQueueGenericSendFromISR+0x6e>
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d101      	bne.n	800cd96 <xQueueGenericSendFromISR+0x72>
 800cd92:	2301      	movs	r3, #1
 800cd94:	e000      	b.n	800cd98 <xQueueGenericSendFromISR+0x74>
 800cd96:	2300      	movs	r3, #0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <xQueueGenericSendFromISR+0x90>
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	b672      	cpsid	i
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	b662      	cpsie	i
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	e7fe      	b.n	800cdb2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdb4:	f001 fed0 	bl	800eb58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdb8:	f3ef 8211 	mrs	r2, BASEPRI
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	b672      	cpsid	i
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	b662      	cpsie	i
 800cdd0:	61ba      	str	r2, [r7, #24]
 800cdd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d302      	bcc.n	800cdea <xQueueGenericSendFromISR+0xc6>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d12c      	bne.n	800ce44 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdf4:	683a      	ldr	r2, [r7, #0]
 800cdf6:	68b9      	ldr	r1, [r7, #8]
 800cdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdfa:	f000 fb4e 	bl	800d49a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d112      	bne.n	800ce2e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d016      	beq.n	800ce3e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	3324      	adds	r3, #36	; 0x24
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 f8bb 	bl	800df90 <xTaskRemoveFromEventList>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00e      	beq.n	800ce3e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00b      	beq.n	800ce3e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	e007      	b.n	800ce3e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce32:	3301      	adds	r3, #1
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	b25a      	sxtb	r2, r3
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ce42:	e001      	b.n	800ce48 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	637b      	str	r3, [r7, #52]	; 0x34
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3738      	adds	r7, #56	; 0x38
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08e      	sub	sp, #56	; 0x38
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10b      	bne.n	800ce88 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	623b      	str	r3, [r7, #32]
 800ce86:	e7fe      	b.n	800ce86 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <xQueueGiveFromISR+0x4c>
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	b672      	cpsid	i
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	b662      	cpsie	i
 800cea4:	61fb      	str	r3, [r7, #28]
 800cea6:	e7fe      	b.n	800cea6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d103      	bne.n	800ceb8 <xQueueGiveFromISR+0x5c>
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <xQueueGiveFromISR+0x60>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e000      	b.n	800cebe <xQueueGiveFromISR+0x62>
 800cebc:	2300      	movs	r3, #0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10b      	bne.n	800ceda <xQueueGiveFromISR+0x7e>
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	b672      	cpsid	i
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	b662      	cpsie	i
 800ced6:	61bb      	str	r3, [r7, #24]
 800ced8:	e7fe      	b.n	800ced8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceda:	f001 fe3d 	bl	800eb58 <vPortValidateInterruptPriority>
	__asm volatile
 800cede:	f3ef 8211 	mrs	r2, BASEPRI
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	b672      	cpsid	i
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	b662      	cpsie	i
 800cef6:	617a      	str	r2, [r7, #20]
 800cef8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cefa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d22b      	bcs.n	800cf66 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf28:	d112      	bne.n	800cf50 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d016      	beq.n	800cf60 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	3324      	adds	r3, #36	; 0x24
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f82a 	bl	800df90 <xTaskRemoveFromEventList>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00e      	beq.n	800cf60 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	e007      	b.n	800cf60 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf54:	3301      	adds	r3, #1
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	b25a      	sxtb	r2, r3
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf60:	2301      	movs	r3, #1
 800cf62:	637b      	str	r3, [r7, #52]	; 0x34
 800cf64:	e001      	b.n	800cf6a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	637b      	str	r3, [r7, #52]	; 0x34
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3738      	adds	r7, #56	; 0x38
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08c      	sub	sp, #48	; 0x30
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10b      	bne.n	800cfb2 <xQueueReceive+0x32>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	b672      	cpsid	i
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	b662      	cpsie	i
 800cfae:	623b      	str	r3, [r7, #32]
 800cfb0:	e7fe      	b.n	800cfb0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <xQueueReceive+0x40>
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <xQueueReceive+0x44>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e000      	b.n	800cfc6 <xQueueReceive+0x46>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10b      	bne.n	800cfe2 <xQueueReceive+0x62>
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	b672      	cpsid	i
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	b662      	cpsie	i
 800cfde:	61fb      	str	r3, [r7, #28]
 800cfe0:	e7fe      	b.n	800cfe0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe2:	f001 f995 	bl	800e310 <xTaskGetSchedulerState>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <xQueueReceive+0x72>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <xQueueReceive+0x76>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <xQueueReceive+0x78>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10b      	bne.n	800d014 <xQueueReceive+0x94>
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	b672      	cpsid	i
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	b662      	cpsie	i
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	e7fe      	b.n	800d012 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d014:	f001 fcc0 	bl	800e998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01f      	beq.n	800d064 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d024:	68b9      	ldr	r1, [r7, #8]
 800d026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d028:	f000 faa1 	bl	800d56e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	1e5a      	subs	r2, r3, #1
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00f      	beq.n	800d05c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03e:	3310      	adds	r3, #16
 800d040:	4618      	mov	r0, r3
 800d042:	f000 ffa5 	bl	800df90 <xTaskRemoveFromEventList>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d007      	beq.n	800d05c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d04c:	4b3c      	ldr	r3, [pc, #240]	; (800d140 <xQueueReceive+0x1c0>)
 800d04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d05c:	f001 fcce 	bl	800e9fc <vPortExitCritical>
				return pdPASS;
 800d060:	2301      	movs	r3, #1
 800d062:	e069      	b.n	800d138 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d103      	bne.n	800d072 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d06a:	f001 fcc7 	bl	800e9fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d06e:	2300      	movs	r3, #0
 800d070:	e062      	b.n	800d138 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d078:	f107 0310 	add.w	r3, r7, #16
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 ffeb 	bl	800e058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d082:	2301      	movs	r3, #1
 800d084:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d086:	f001 fcb9 	bl	800e9fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d08a:	f000 fd51 	bl	800db30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d08e:	f001 fc83 	bl	800e998 <vPortEnterCritical>
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d098:	b25b      	sxtb	r3, r3
 800d09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09e:	d103      	bne.n	800d0a8 <xQueueReceive+0x128>
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0ae:	b25b      	sxtb	r3, r3
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d103      	bne.n	800d0be <xQueueReceive+0x13e>
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0be:	f001 fc9d 	bl	800e9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0c2:	1d3a      	adds	r2, r7, #4
 800d0c4:	f107 0310 	add.w	r3, r7, #16
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 ffda 	bl	800e084 <xTaskCheckForTimeOut>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d123      	bne.n	800d11e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0d8:	f000 fac1 	bl	800d65e <prvIsQueueEmpty>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d017      	beq.n	800d112 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	3324      	adds	r3, #36	; 0x24
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 ff2a 	bl	800df44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f2:	f000 fa62 	bl	800d5ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0f6:	f000 fd29 	bl	800db4c <xTaskResumeAll>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d189      	bne.n	800d014 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d100:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <xQueueReceive+0x1c0>)
 800d102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	e780      	b.n	800d014 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d114:	f000 fa51 	bl	800d5ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d118:	f000 fd18 	bl	800db4c <xTaskResumeAll>
 800d11c:	e77a      	b.n	800d014 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d120:	f000 fa4b 	bl	800d5ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d124:	f000 fd12 	bl	800db4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12a:	f000 fa98 	bl	800d65e <prvIsQueueEmpty>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	f43f af6f 	beq.w	800d014 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3730      	adds	r7, #48	; 0x30
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	e000ed04 	.word	0xe000ed04

0800d144 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08e      	sub	sp, #56	; 0x38
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d14e:	2300      	movs	r3, #0
 800d150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d156:	2300      	movs	r3, #0
 800d158:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10b      	bne.n	800d178 <xQueueSemaphoreTake+0x34>
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	b672      	cpsid	i
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	b662      	cpsie	i
 800d174:	623b      	str	r3, [r7, #32]
 800d176:	e7fe      	b.n	800d176 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <xQueueSemaphoreTake+0x54>
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	b672      	cpsid	i
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	b662      	cpsie	i
 800d194:	61fb      	str	r3, [r7, #28]
 800d196:	e7fe      	b.n	800d196 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d198:	f001 f8ba 	bl	800e310 <xTaskGetSchedulerState>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <xQueueSemaphoreTake+0x64>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueSemaphoreTake+0x68>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueSemaphoreTake+0x6a>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10b      	bne.n	800d1ca <xQueueSemaphoreTake+0x86>
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	b672      	cpsid	i
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	b662      	cpsie	i
 800d1c6:	61bb      	str	r3, [r7, #24]
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ca:	f001 fbe5 	bl	800e998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d024      	beq.n	800d224 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	1e5a      	subs	r2, r3, #1
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d104      	bne.n	800d1f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d1ea:	f001 fa53 	bl	800e694 <pvTaskIncrementMutexHeldCount>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00f      	beq.n	800d21c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fec5 	bl	800df90 <xTaskRemoveFromEventList>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d20c:	4b54      	ldr	r3, [pc, #336]	; (800d360 <xQueueSemaphoreTake+0x21c>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d21c:	f001 fbee 	bl	800e9fc <vPortExitCritical>
				return pdPASS;
 800d220:	2301      	movs	r3, #1
 800d222:	e098      	b.n	800d356 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d112      	bne.n	800d250 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <xQueueSemaphoreTake+0x104>
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	b672      	cpsid	i
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	b662      	cpsie	i
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	e7fe      	b.n	800d246 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d248:	f001 fbd8 	bl	800e9fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e082      	b.n	800d356 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d256:	f107 030c 	add.w	r3, r7, #12
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 fefc 	bl	800e058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d264:	f001 fbca 	bl	800e9fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d268:	f000 fc62 	bl	800db30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d26c:	f001 fb94 	bl	800e998 <vPortEnterCritical>
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d276:	b25b      	sxtb	r3, r3
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d103      	bne.n	800d286 <xQueueSemaphoreTake+0x142>
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d28c:	b25b      	sxtb	r3, r3
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d103      	bne.n	800d29c <xQueueSemaphoreTake+0x158>
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d29c:	f001 fbae 	bl	800e9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2a0:	463a      	mov	r2, r7
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 feeb 	bl	800e084 <xTaskCheckForTimeOut>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d132      	bne.n	800d31a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b6:	f000 f9d2 	bl	800d65e <prvIsQueueEmpty>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d026      	beq.n	800d30e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d109      	bne.n	800d2dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d2c8:	f001 fb66 	bl	800e998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 f83b 	bl	800e34c <xTaskPriorityInherit>
 800d2d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d2d8:	f001 fb90 	bl	800e9fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	3324      	adds	r3, #36	; 0x24
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fe2d 	bl	800df44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2ec:	f000 f965 	bl	800d5ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2f0:	f000 fc2c 	bl	800db4c <xTaskResumeAll>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f47f af67 	bne.w	800d1ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d2fc:	4b18      	ldr	r3, [pc, #96]	; (800d360 <xQueueSemaphoreTake+0x21c>)
 800d2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	e75d      	b.n	800d1ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d310:	f000 f953 	bl	800d5ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d314:	f000 fc1a 	bl	800db4c <xTaskResumeAll>
 800d318:	e757      	b.n	800d1ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d31c:	f000 f94d 	bl	800d5ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d320:	f000 fc14 	bl	800db4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d326:	f000 f99a 	bl	800d65e <prvIsQueueEmpty>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f43f af4c 	beq.w	800d1ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00d      	beq.n	800d354 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d338:	f001 fb2e 	bl	800e998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d33e:	f000 f894 	bl	800d46a <prvGetDisinheritPriorityAfterTimeout>
 800d342:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d34a:	4618      	mov	r0, r3
 800d34c:	f001 f906 	bl	800e55c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d350:	f001 fb54 	bl	800e9fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d354:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d356:	4618      	mov	r0, r3
 800d358:	3738      	adds	r7, #56	; 0x38
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08e      	sub	sp, #56	; 0x38
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <xQueueReceiveFromISR+0x2e>
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	b672      	cpsid	i
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	b662      	cpsie	i
 800d38e:	623b      	str	r3, [r7, #32]
 800d390:	e7fe      	b.n	800d390 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d103      	bne.n	800d3a0 <xQueueReceiveFromISR+0x3c>
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <xQueueReceiveFromISR+0x40>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e000      	b.n	800d3a6 <xQueueReceiveFromISR+0x42>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <xQueueReceiveFromISR+0x5e>
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	b672      	cpsid	i
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	b662      	cpsie	i
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e7fe      	b.n	800d3c0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c2:	f001 fbc9 	bl	800eb58 <vPortValidateInterruptPriority>
	__asm volatile
 800d3c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	b672      	cpsid	i
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	b662      	cpsie	i
 800d3de:	61ba      	str	r2, [r7, #24]
 800d3e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d02f      	beq.n	800d452 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3fc:	68b9      	ldr	r1, [r7, #8]
 800d3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d400:	f000 f8b5 	bl	800d56e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	1e5a      	subs	r2, r3, #1
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d414:	d112      	bne.n	800d43c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d016      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	3310      	adds	r3, #16
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fdb4 	bl	800df90 <xTaskRemoveFromEventList>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00e      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	e007      	b.n	800d44c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d440:	3301      	adds	r3, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	b25a      	sxtb	r2, r3
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d44c:	2301      	movs	r3, #1
 800d44e:	637b      	str	r3, [r7, #52]	; 0x34
 800d450:	e001      	b.n	800d456 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d452:	2300      	movs	r3, #0
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d462:	4618      	mov	r0, r3
 800d464:	3738      	adds	r7, #56	; 0x38
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d46a:	b480      	push	{r7}
 800d46c:	b085      	sub	sp, #20
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	2b00      	cmp	r3, #0
 800d478:	d006      	beq.n	800d488 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f1c3 0307 	rsb	r3, r3, #7
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e001      	b.n	800d48c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d48c:	68fb      	ldr	r3, [r7, #12]
	}
 800d48e:	4618      	mov	r0, r3
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10d      	bne.n	800d4d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d14d      	bne.n	800d55c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 ffc1 	bl	800e44c <xTaskPriorityDisinherit>
 800d4ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	609a      	str	r2, [r3, #8]
 800d4d2:	e043      	b.n	800d55c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d119      	bne.n	800d50e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6858      	ldr	r0, [r3, #4]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	f018 f9e7 	bl	80258b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	685a      	ldr	r2, [r3, #4]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f2:	441a      	add	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	429a      	cmp	r2, r3
 800d502:	d32b      	bcc.n	800d55c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	605a      	str	r2, [r3, #4]
 800d50c:	e026      	b.n	800d55c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68d8      	ldr	r0, [r3, #12]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	461a      	mov	r2, r3
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	f018 f9cd 	bl	80258b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68da      	ldr	r2, [r3, #12]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d526:	425b      	negs	r3, r3
 800d528:	441a      	add	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	68da      	ldr	r2, [r3, #12]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	429a      	cmp	r2, r3
 800d538:	d207      	bcs.n	800d54a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	689a      	ldr	r2, [r3, #8]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d542:	425b      	negs	r3, r3
 800d544:	441a      	add	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d105      	bne.n	800d55c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	3b01      	subs	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d564:	697b      	ldr	r3, [r7, #20]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d018      	beq.n	800d5b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68da      	ldr	r2, [r3, #12]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d588:	441a      	add	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	429a      	cmp	r2, r3
 800d598:	d303      	bcc.n	800d5a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68d9      	ldr	r1, [r3, #12]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	6838      	ldr	r0, [r7, #0]
 800d5ae:	f018 f983 	bl	80258b8 <memcpy>
	}
}
 800d5b2:	bf00      	nop
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5c2:	f001 f9e9 	bl	800e998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ce:	e011      	b.n	800d5f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d012      	beq.n	800d5fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3324      	adds	r3, #36	; 0x24
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 fcd7 	bl	800df90 <xTaskRemoveFromEventList>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5e8:	f000 fdb0 	bl	800e14c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dce9      	bgt.n	800d5d0 <prvUnlockQueue+0x16>
 800d5fc:	e000      	b.n	800d600 <prvUnlockQueue+0x46>
					break;
 800d5fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	22ff      	movs	r2, #255	; 0xff
 800d604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d608:	f001 f9f8 	bl	800e9fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d60c:	f001 f9c4 	bl	800e998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d616:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d618:	e011      	b.n	800d63e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d012      	beq.n	800d648 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3310      	adds	r3, #16
 800d626:	4618      	mov	r0, r3
 800d628:	f000 fcb2 	bl	800df90 <xTaskRemoveFromEventList>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d632:	f000 fd8b 	bl	800e14c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d636:	7bbb      	ldrb	r3, [r7, #14]
 800d638:	3b01      	subs	r3, #1
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d63e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d642:	2b00      	cmp	r3, #0
 800d644:	dce9      	bgt.n	800d61a <prvUnlockQueue+0x60>
 800d646:	e000      	b.n	800d64a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d648:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d652:	f001 f9d3 	bl	800e9fc <vPortExitCritical>
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d666:	f001 f997 	bl	800e998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d102      	bne.n	800d678 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d672:	2301      	movs	r3, #1
 800d674:	60fb      	str	r3, [r7, #12]
 800d676:	e001      	b.n	800d67c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d67c:	f001 f9be 	bl	800e9fc <vPortExitCritical>

	return xReturn;
 800d680:	68fb      	ldr	r3, [r7, #12]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d692:	f001 f981 	bl	800e998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d102      	bne.n	800d6a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e001      	b.n	800d6ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6ac:	f001 f9a6 	bl	800e9fc <vPortExitCritical>

	return xReturn;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b08e      	sub	sp, #56	; 0x38
 800d6be:	af04      	add	r7, sp, #16
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	60b9      	str	r1, [r7, #8]
 800d6c4:	607a      	str	r2, [r7, #4]
 800d6c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	623b      	str	r3, [r7, #32]
 800d6e4:	e7fe      	b.n	800d6e4 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10b      	bne.n	800d704 <xTaskCreateStatic+0x4a>
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	b672      	cpsid	i
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	b662      	cpsie	i
 800d700:	61fb      	str	r3, [r7, #28]
 800d702:	e7fe      	b.n	800d702 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d704:	2358      	movs	r3, #88	; 0x58
 800d706:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2b58      	cmp	r3, #88	; 0x58
 800d70c:	d00b      	beq.n	800d726 <xTaskCreateStatic+0x6c>
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	b672      	cpsid	i
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	b662      	cpsie	i
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	e7fe      	b.n	800d724 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d726:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d01e      	beq.n	800d76c <xTaskCreateStatic+0xb2>
 800d72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01b      	beq.n	800d76c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d73c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	2202      	movs	r2, #2
 800d742:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d746:	2300      	movs	r3, #0
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	f107 0314 	add.w	r3, r7, #20
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	68b9      	ldr	r1, [r7, #8]
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 f850 	bl	800d804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d766:	f000 f8e1 	bl	800d92c <prvAddNewTaskToReadyList>
 800d76a:	e001      	b.n	800d770 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d770:	697b      	ldr	r3, [r7, #20]
	}
 800d772:	4618      	mov	r0, r3
 800d774:	3728      	adds	r7, #40	; 0x28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b08c      	sub	sp, #48	; 0x30
 800d77e:	af04      	add	r7, sp, #16
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	603b      	str	r3, [r7, #0]
 800d786:	4613      	mov	r3, r2
 800d788:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d78a:	88fb      	ldrh	r3, [r7, #6]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	4618      	mov	r0, r3
 800d790:	f001 fa24 	bl	800ebdc <pvPortMalloc>
 800d794:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00e      	beq.n	800d7ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d79c:	2058      	movs	r0, #88	; 0x58
 800d79e:	f001 fa1d 	bl	800ebdc <pvPortMalloc>
 800d7a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	631a      	str	r2, [r3, #48]	; 0x30
 800d7b0:	e005      	b.n	800d7be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7b2:	6978      	ldr	r0, [r7, #20]
 800d7b4:	f001 fade 	bl	800ed74 <vPortFree>
 800d7b8:	e001      	b.n	800d7be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d017      	beq.n	800d7f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7cc:	88fa      	ldrh	r2, [r7, #6]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9303      	str	r3, [sp, #12]
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	9302      	str	r3, [sp, #8]
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	68b9      	ldr	r1, [r7, #8]
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 f80e 	bl	800d804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7e8:	69f8      	ldr	r0, [r7, #28]
 800d7ea:	f000 f89f 	bl	800d92c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e002      	b.n	800d7fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7fa:	69bb      	ldr	r3, [r7, #24]
	}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3720      	adds	r7, #32
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	461a      	mov	r2, r3
 800d81c:	21a5      	movs	r1, #165	; 0xa5
 800d81e:	f018 f856 	bl	80258ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d82c:	440b      	add	r3, r1
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	f023 0307 	bic.w	r3, r3, #7
 800d83a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00b      	beq.n	800d85e <prvInitialiseNewTask+0x5a>
 800d846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84a:	b672      	cpsid	i
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	b662      	cpsie	i
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	e7fe      	b.n	800d85c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d01f      	beq.n	800d8a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d864:	2300      	movs	r3, #0
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	e012      	b.n	800d890 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	4413      	add	r3, r2
 800d870:	7819      	ldrb	r1, [r3, #0]
 800d872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	4413      	add	r3, r2
 800d878:	3334      	adds	r3, #52	; 0x34
 800d87a:	460a      	mov	r2, r1
 800d87c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	4413      	add	r3, r2
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d006      	beq.n	800d898 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	3301      	adds	r3, #1
 800d88e:	61fb      	str	r3, [r7, #28]
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b0f      	cmp	r3, #15
 800d894:	d9e9      	bls.n	800d86a <prvInitialiseNewTask+0x66>
 800d896:	e000      	b.n	800d89a <prvInitialiseNewTask+0x96>
			{
				break;
 800d898:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8a2:	e003      	b.n	800d8ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ae:	2b06      	cmp	r3, #6
 800d8b0:	d901      	bls.n	800d8b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8b2:	2306      	movs	r3, #6
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fe ff4b 	bl	800c768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d4:	3318      	adds	r3, #24
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe ff46 	bl	800c768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e4:	f1c3 0207 	rsb	r2, r3, #7
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	68f9      	ldr	r1, [r7, #12]
 800d90a:	69b8      	ldr	r0, [r7, #24]
 800d90c:	f000 ff3c 	bl	800e788 <pxPortInitialiseStack>
 800d910:	4602      	mov	r2, r0
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d922:	bf00      	nop
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d934:	f001 f830 	bl	800e998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d938:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	4a29      	ldr	r2, [pc, #164]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d942:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d109      	bne.n	800d95e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d94a:	4a27      	ldr	r2, [pc, #156]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d950:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d110      	bne.n	800d97a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d958:	f000 fc1e 	bl	800e198 <prvInitialiseTaskLists>
 800d95c:	e00d      	b.n	800d97a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d95e:	4b23      	ldr	r3, [pc, #140]	; (800d9ec <prvAddNewTaskToReadyList+0xc0>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d109      	bne.n	800d97a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d966:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	429a      	cmp	r2, r3
 800d972:	d802      	bhi.n	800d97a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d974:	4a1c      	ldr	r2, [pc, #112]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d97a:	4b1d      	ldr	r3, [pc, #116]	; (800d9f0 <prvAddNewTaskToReadyList+0xc4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	4a1b      	ldr	r2, [pc, #108]	; (800d9f0 <prvAddNewTaskToReadyList+0xc4>)
 800d982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	2201      	movs	r2, #1
 800d98a:	409a      	lsls	r2, r3
 800d98c:	4b19      	ldr	r3, [pc, #100]	; (800d9f4 <prvAddNewTaskToReadyList+0xc8>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4313      	orrs	r3, r2
 800d992:	4a18      	ldr	r2, [pc, #96]	; (800d9f4 <prvAddNewTaskToReadyList+0xc8>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4a15      	ldr	r2, [pc, #84]	; (800d9f8 <prvAddNewTaskToReadyList+0xcc>)
 800d9a4:	441a      	add	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7fe fee8 	bl	800c782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9b2:	f001 f823 	bl	800e9fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <prvAddNewTaskToReadyList+0xc0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00e      	beq.n	800d9dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9be:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d207      	bcs.n	800d9dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9cc:	4b0b      	ldr	r3, [pc, #44]	; (800d9fc <prvAddNewTaskToReadyList+0xd0>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	200004d0 	.word	0x200004d0
 800d9e8:	200003d0 	.word	0x200003d0
 800d9ec:	200004dc 	.word	0x200004dc
 800d9f0:	200004ec 	.word	0x200004ec
 800d9f4:	200004d8 	.word	0x200004d8
 800d9f8:	200003d4 	.word	0x200003d4
 800d9fc:	e000ed04 	.word	0xe000ed04

0800da00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da08:	2300      	movs	r3, #0
 800da0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d018      	beq.n	800da44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da12:	4b14      	ldr	r3, [pc, #80]	; (800da64 <vTaskDelay+0x64>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00b      	beq.n	800da32 <vTaskDelay+0x32>
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	b672      	cpsid	i
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	b662      	cpsie	i
 800da2e:	60bb      	str	r3, [r7, #8]
 800da30:	e7fe      	b.n	800da30 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800da32:	f000 f87d 	bl	800db30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da36:	2100      	movs	r1, #0
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fe3f 	bl	800e6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da3e:	f000 f885 	bl	800db4c <xTaskResumeAll>
 800da42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d107      	bne.n	800da5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da4a:	4b07      	ldr	r3, [pc, #28]	; (800da68 <vTaskDelay+0x68>)
 800da4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da5a:	bf00      	nop
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	200004f8 	.word	0x200004f8
 800da68:	e000ed04 	.word	0xe000ed04

0800da6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	; 0x28
 800da70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da72:	2300      	movs	r3, #0
 800da74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da7a:	463a      	mov	r2, r7
 800da7c:	1d39      	adds	r1, r7, #4
 800da7e:	f107 0308 	add.w	r3, r7, #8
 800da82:	4618      	mov	r0, r3
 800da84:	f7f3 f842 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	9202      	str	r2, [sp, #8]
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	2300      	movs	r3, #0
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	2300      	movs	r3, #0
 800da98:	460a      	mov	r2, r1
 800da9a:	491f      	ldr	r1, [pc, #124]	; (800db18 <vTaskStartScheduler+0xac>)
 800da9c:	481f      	ldr	r0, [pc, #124]	; (800db1c <vTaskStartScheduler+0xb0>)
 800da9e:	f7ff fe0c 	bl	800d6ba <xTaskCreateStatic>
 800daa2:	4602      	mov	r2, r0
 800daa4:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <vTaskStartScheduler+0xb4>)
 800daa6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800daa8:	4b1d      	ldr	r3, [pc, #116]	; (800db20 <vTaskStartScheduler+0xb4>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dab0:	2301      	movs	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	e001      	b.n	800daba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d117      	bne.n	800daf0 <vTaskStartScheduler+0x84>
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	b672      	cpsid	i
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	b662      	cpsie	i
 800dad4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dad6:	4b13      	ldr	r3, [pc, #76]	; (800db24 <vTaskStartScheduler+0xb8>)
 800dad8:	f04f 32ff 	mov.w	r2, #4294967295
 800dadc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dade:	4b12      	ldr	r3, [pc, #72]	; (800db28 <vTaskStartScheduler+0xbc>)
 800dae0:	2201      	movs	r2, #1
 800dae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dae4:	4b11      	ldr	r3, [pc, #68]	; (800db2c <vTaskStartScheduler+0xc0>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800daea:	f000 fed9 	bl	800e8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800daee:	e00f      	b.n	800db10 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf6:	d10b      	bne.n	800db10 <vTaskStartScheduler+0xa4>
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	b672      	cpsid	i
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	b662      	cpsie	i
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	e7fe      	b.n	800db0e <vTaskStartScheduler+0xa2>
}
 800db10:	bf00      	nop
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08026864 	.word	0x08026864
 800db1c:	0800e165 	.word	0x0800e165
 800db20:	200004f4 	.word	0x200004f4
 800db24:	200004f0 	.word	0x200004f0
 800db28:	200004dc 	.word	0x200004dc
 800db2c:	200004d4 	.word	0x200004d4

0800db30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <vTaskSuspendAll+0x18>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3301      	adds	r3, #1
 800db3a:	4a03      	ldr	r2, [pc, #12]	; (800db48 <vTaskSuspendAll+0x18>)
 800db3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800db3e:	bf00      	nop
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	200004f8 	.word	0x200004f8

0800db4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db56:	2300      	movs	r3, #0
 800db58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db5a:	4b42      	ldr	r3, [pc, #264]	; (800dc64 <xTaskResumeAll+0x118>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10b      	bne.n	800db7a <xTaskResumeAll+0x2e>
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	b672      	cpsid	i
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	b662      	cpsie	i
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	e7fe      	b.n	800db78 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db7a:	f000 ff0d 	bl	800e998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db7e:	4b39      	ldr	r3, [pc, #228]	; (800dc64 <xTaskResumeAll+0x118>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3b01      	subs	r3, #1
 800db84:	4a37      	ldr	r2, [pc, #220]	; (800dc64 <xTaskResumeAll+0x118>)
 800db86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db88:	4b36      	ldr	r3, [pc, #216]	; (800dc64 <xTaskResumeAll+0x118>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d161      	bne.n	800dc54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db90:	4b35      	ldr	r3, [pc, #212]	; (800dc68 <xTaskResumeAll+0x11c>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d05d      	beq.n	800dc54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db98:	e02e      	b.n	800dbf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9a:	4b34      	ldr	r3, [pc, #208]	; (800dc6c <xTaskResumeAll+0x120>)
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3318      	adds	r3, #24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fe48 	bl	800c83c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fe fe43 	bl	800c83c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	2201      	movs	r2, #1
 800dbbc:	409a      	lsls	r2, r3
 800dbbe:	4b2c      	ldr	r3, [pc, #176]	; (800dc70 <xTaskResumeAll+0x124>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	4a2a      	ldr	r2, [pc, #168]	; (800dc70 <xTaskResumeAll+0x124>)
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4a27      	ldr	r2, [pc, #156]	; (800dc74 <xTaskResumeAll+0x128>)
 800dbd6:	441a      	add	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4610      	mov	r0, r2
 800dbe0:	f7fe fdcf 	bl	800c782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe8:	4b23      	ldr	r3, [pc, #140]	; (800dc78 <xTaskResumeAll+0x12c>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d302      	bcc.n	800dbf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbf2:	4b22      	ldr	r3, [pc, #136]	; (800dc7c <xTaskResumeAll+0x130>)
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbf8:	4b1c      	ldr	r3, [pc, #112]	; (800dc6c <xTaskResumeAll+0x120>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1cc      	bne.n	800db9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc06:	f000 fb63 	bl	800e2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dc0a:	4b1d      	ldr	r3, [pc, #116]	; (800dc80 <xTaskResumeAll+0x134>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d010      	beq.n	800dc38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc16:	f000 f859 	bl	800dccc <xTaskIncrementTick>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc20:	4b16      	ldr	r3, [pc, #88]	; (800dc7c <xTaskResumeAll+0x130>)
 800dc22:	2201      	movs	r2, #1
 800dc24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1f1      	bne.n	800dc16 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dc32:	4b13      	ldr	r3, [pc, #76]	; (800dc80 <xTaskResumeAll+0x134>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc38:	4b10      	ldr	r3, [pc, #64]	; (800dc7c <xTaskResumeAll+0x130>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d009      	beq.n	800dc54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc44:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <xTaskResumeAll+0x138>)
 800dc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc54:	f000 fed2 	bl	800e9fc <vPortExitCritical>

	return xAlreadyYielded;
 800dc58:	68bb      	ldr	r3, [r7, #8]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	200004f8 	.word	0x200004f8
 800dc68:	200004d0 	.word	0x200004d0
 800dc6c:	20000490 	.word	0x20000490
 800dc70:	200004d8 	.word	0x200004d8
 800dc74:	200003d4 	.word	0x200003d4
 800dc78:	200003d0 	.word	0x200003d0
 800dc7c:	200004e4 	.word	0x200004e4
 800dc80:	200004e0 	.word	0x200004e0
 800dc84:	e000ed04 	.word	0xe000ed04

0800dc88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc8e:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <xTaskGetTickCount+0x1c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc94:	687b      	ldr	r3, [r7, #4]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	200004d4 	.word	0x200004d4

0800dca8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcae:	f000 ff53 	bl	800eb58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dcb6:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <xTaskGetTickCountFromISR+0x20>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcbc:	683b      	ldr	r3, [r7, #0]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	200004d4 	.word	0x200004d4

0800dccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcd6:	4b4f      	ldr	r3, [pc, #316]	; (800de14 <xTaskIncrementTick+0x148>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f040 8089 	bne.w	800ddf2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dce0:	4b4d      	ldr	r3, [pc, #308]	; (800de18 <xTaskIncrementTick+0x14c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	3301      	adds	r3, #1
 800dce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dce8:	4a4b      	ldr	r2, [pc, #300]	; (800de18 <xTaskIncrementTick+0x14c>)
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d121      	bne.n	800dd38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcf4:	4b49      	ldr	r3, [pc, #292]	; (800de1c <xTaskIncrementTick+0x150>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <xTaskIncrementTick+0x4a>
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	b672      	cpsid	i
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	b662      	cpsie	i
 800dd12:	603b      	str	r3, [r7, #0]
 800dd14:	e7fe      	b.n	800dd14 <xTaskIncrementTick+0x48>
 800dd16:	4b41      	ldr	r3, [pc, #260]	; (800de1c <xTaskIncrementTick+0x150>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	4b40      	ldr	r3, [pc, #256]	; (800de20 <xTaskIncrementTick+0x154>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a3e      	ldr	r2, [pc, #248]	; (800de1c <xTaskIncrementTick+0x150>)
 800dd22:	6013      	str	r3, [r2, #0]
 800dd24:	4a3e      	ldr	r2, [pc, #248]	; (800de20 <xTaskIncrementTick+0x154>)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6013      	str	r3, [r2, #0]
 800dd2a:	4b3e      	ldr	r3, [pc, #248]	; (800de24 <xTaskIncrementTick+0x158>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	4a3c      	ldr	r2, [pc, #240]	; (800de24 <xTaskIncrementTick+0x158>)
 800dd32:	6013      	str	r3, [r2, #0]
 800dd34:	f000 facc 	bl	800e2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd38:	4b3b      	ldr	r3, [pc, #236]	; (800de28 <xTaskIncrementTick+0x15c>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	693a      	ldr	r2, [r7, #16]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d348      	bcc.n	800ddd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd42:	4b36      	ldr	r3, [pc, #216]	; (800de1c <xTaskIncrementTick+0x150>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d104      	bne.n	800dd56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd4c:	4b36      	ldr	r3, [pc, #216]	; (800de28 <xTaskIncrementTick+0x15c>)
 800dd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd52:	601a      	str	r2, [r3, #0]
					break;
 800dd54:	e03e      	b.n	800ddd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd56:	4b31      	ldr	r3, [pc, #196]	; (800de1c <xTaskIncrementTick+0x150>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d203      	bcs.n	800dd76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd6e:	4a2e      	ldr	r2, [pc, #184]	; (800de28 <xTaskIncrementTick+0x15c>)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd74:	e02e      	b.n	800ddd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	3304      	adds	r3, #4
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fe fd5e 	bl	800c83c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fe fd55 	bl	800c83c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd96:	2201      	movs	r2, #1
 800dd98:	409a      	lsls	r2, r3
 800dd9a:	4b24      	ldr	r3, [pc, #144]	; (800de2c <xTaskIncrementTick+0x160>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	4a22      	ldr	r2, [pc, #136]	; (800de2c <xTaskIncrementTick+0x160>)
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4a1f      	ldr	r2, [pc, #124]	; (800de30 <xTaskIncrementTick+0x164>)
 800ddb2:	441a      	add	r2, r3
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	4619      	mov	r1, r3
 800ddba:	4610      	mov	r0, r2
 800ddbc:	f7fe fce1 	bl	800c782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc4:	4b1b      	ldr	r3, [pc, #108]	; (800de34 <xTaskIncrementTick+0x168>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d3b9      	bcc.n	800dd42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddd2:	e7b6      	b.n	800dd42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddd4:	4b17      	ldr	r3, [pc, #92]	; (800de34 <xTaskIncrementTick+0x168>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddda:	4915      	ldr	r1, [pc, #84]	; (800de30 <xTaskIncrementTick+0x164>)
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	440b      	add	r3, r1
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d907      	bls.n	800ddfc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800ddec:	2301      	movs	r3, #1
 800ddee:	617b      	str	r3, [r7, #20]
 800ddf0:	e004      	b.n	800ddfc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ddf2:	4b11      	ldr	r3, [pc, #68]	; (800de38 <xTaskIncrementTick+0x16c>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	4a0f      	ldr	r2, [pc, #60]	; (800de38 <xTaskIncrementTick+0x16c>)
 800ddfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ddfc:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <xTaskIncrementTick+0x170>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800de04:	2301      	movs	r3, #1
 800de06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800de08:	697b      	ldr	r3, [r7, #20]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	200004f8 	.word	0x200004f8
 800de18:	200004d4 	.word	0x200004d4
 800de1c:	20000488 	.word	0x20000488
 800de20:	2000048c 	.word	0x2000048c
 800de24:	200004e8 	.word	0x200004e8
 800de28:	200004f0 	.word	0x200004f0
 800de2c:	200004d8 	.word	0x200004d8
 800de30:	200003d4 	.word	0x200003d4
 800de34:	200003d0 	.word	0x200003d0
 800de38:	200004e0 	.word	0x200004e0
 800de3c:	200004e4 	.word	0x200004e4

0800de40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b088      	sub	sp, #32
 800de44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de46:	4b3a      	ldr	r3, [pc, #232]	; (800df30 <vTaskSwitchContext+0xf0>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de4e:	4b39      	ldr	r3, [pc, #228]	; (800df34 <vTaskSwitchContext+0xf4>)
 800de50:	2201      	movs	r2, #1
 800de52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de54:	e067      	b.n	800df26 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800de56:	4b37      	ldr	r3, [pc, #220]	; (800df34 <vTaskSwitchContext+0xf4>)
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800de5c:	4b36      	ldr	r3, [pc, #216]	; (800df38 <vTaskSwitchContext+0xf8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800de68:	61bb      	str	r3, [r7, #24]
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	429a      	cmp	r2, r3
 800de72:	d111      	bne.n	800de98 <vTaskSwitchContext+0x58>
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	3304      	adds	r3, #4
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d10b      	bne.n	800de98 <vTaskSwitchContext+0x58>
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	3308      	adds	r3, #8
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	69ba      	ldr	r2, [r7, #24]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d105      	bne.n	800de98 <vTaskSwitchContext+0x58>
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	330c      	adds	r3, #12
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	429a      	cmp	r2, r3
 800de96:	d008      	beq.n	800deaa <vTaskSwitchContext+0x6a>
 800de98:	4b27      	ldr	r3, [pc, #156]	; (800df38 <vTaskSwitchContext+0xf8>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	4b26      	ldr	r3, [pc, #152]	; (800df38 <vTaskSwitchContext+0xf8>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3334      	adds	r3, #52	; 0x34
 800dea2:	4619      	mov	r1, r3
 800dea4:	4610      	mov	r0, r2
 800dea6:	f7f2 fe1e 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deaa:	4b24      	ldr	r3, [pc, #144]	; (800df3c <vTaskSwitchContext+0xfc>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	fab3 f383 	clz	r3, r3
 800deb6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800deb8:	7afb      	ldrb	r3, [r7, #11]
 800deba:	f1c3 031f 	rsb	r3, r3, #31
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	491f      	ldr	r1, [pc, #124]	; (800df40 <vTaskSwitchContext+0x100>)
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	4613      	mov	r3, r2
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	4413      	add	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10b      	bne.n	800deec <vTaskSwitchContext+0xac>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded8:	b672      	cpsid	i
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	b662      	cpsie	i
 800dee8:	607b      	str	r3, [r7, #4]
 800deea:	e7fe      	b.n	800deea <vTaskSwitchContext+0xaa>
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	4613      	mov	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	4a12      	ldr	r2, [pc, #72]	; (800df40 <vTaskSwitchContext+0x100>)
 800def8:	4413      	add	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	605a      	str	r2, [r3, #4]
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	685a      	ldr	r2, [r3, #4]
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	3308      	adds	r3, #8
 800df0e:	429a      	cmp	r2, r3
 800df10:	d104      	bne.n	800df1c <vTaskSwitchContext+0xdc>
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	605a      	str	r2, [r3, #4]
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	4a05      	ldr	r2, [pc, #20]	; (800df38 <vTaskSwitchContext+0xf8>)
 800df24:	6013      	str	r3, [r2, #0]
}
 800df26:	bf00      	nop
 800df28:	3720      	adds	r7, #32
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	200004f8 	.word	0x200004f8
 800df34:	200004e4 	.word	0x200004e4
 800df38:	200003d0 	.word	0x200003d0
 800df3c:	200004d8 	.word	0x200004d8
 800df40:	200003d4 	.word	0x200003d4

0800df44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10b      	bne.n	800df6c <vTaskPlaceOnEventList+0x28>
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	b672      	cpsid	i
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	b662      	cpsie	i
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	e7fe      	b.n	800df6a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df6c:	4b07      	ldr	r3, [pc, #28]	; (800df8c <vTaskPlaceOnEventList+0x48>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3318      	adds	r3, #24
 800df72:	4619      	mov	r1, r3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7fe fc28 	bl	800c7ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df7a:	2101      	movs	r1, #1
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f000 fb9d 	bl	800e6bc <prvAddCurrentTaskToDelayedList>
}
 800df82:	bf00      	nop
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200003d0 	.word	0x200003d0

0800df90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10b      	bne.n	800dfbe <xTaskRemoveFromEventList+0x2e>
 800dfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfaa:	b672      	cpsid	i
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	b662      	cpsie	i
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	e7fe      	b.n	800dfbc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	3318      	adds	r3, #24
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fc3a 	bl	800c83c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc8:	4b1d      	ldr	r3, [pc, #116]	; (800e040 <xTaskRemoveFromEventList+0xb0>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d11c      	bne.n	800e00a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fc31 	bl	800c83c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfde:	2201      	movs	r2, #1
 800dfe0:	409a      	lsls	r2, r3
 800dfe2:	4b18      	ldr	r3, [pc, #96]	; (800e044 <xTaskRemoveFromEventList+0xb4>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	4a16      	ldr	r2, [pc, #88]	; (800e044 <xTaskRemoveFromEventList+0xb4>)
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff0:	4613      	mov	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4a13      	ldr	r2, [pc, #76]	; (800e048 <xTaskRemoveFromEventList+0xb8>)
 800dffa:	441a      	add	r2, r3
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	3304      	adds	r3, #4
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f7fe fbbd 	bl	800c782 <vListInsertEnd>
 800e008:	e005      	b.n	800e016 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	3318      	adds	r3, #24
 800e00e:	4619      	mov	r1, r3
 800e010:	480e      	ldr	r0, [pc, #56]	; (800e04c <xTaskRemoveFromEventList+0xbc>)
 800e012:	f7fe fbb6 	bl	800c782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	4b0d      	ldr	r3, [pc, #52]	; (800e050 <xTaskRemoveFromEventList+0xc0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	429a      	cmp	r2, r3
 800e022:	d905      	bls.n	800e030 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e024:	2301      	movs	r3, #1
 800e026:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e028:	4b0a      	ldr	r3, [pc, #40]	; (800e054 <xTaskRemoveFromEventList+0xc4>)
 800e02a:	2201      	movs	r2, #1
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	e001      	b.n	800e034 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e034:	697b      	ldr	r3, [r7, #20]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	200004f8 	.word	0x200004f8
 800e044:	200004d8 	.word	0x200004d8
 800e048:	200003d4 	.word	0x200003d4
 800e04c:	20000490 	.word	0x20000490
 800e050:	200003d0 	.word	0x200003d0
 800e054:	200004e4 	.word	0x200004e4

0800e058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e060:	4b06      	ldr	r3, [pc, #24]	; (800e07c <vTaskInternalSetTimeOutState+0x24>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e068:	4b05      	ldr	r3, [pc, #20]	; (800e080 <vTaskInternalSetTimeOutState+0x28>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	605a      	str	r2, [r3, #4]
}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	200004e8 	.word	0x200004e8
 800e080:	200004d4 	.word	0x200004d4

0800e084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10b      	bne.n	800e0ac <xTaskCheckForTimeOut+0x28>
 800e094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e098:	b672      	cpsid	i
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	b662      	cpsie	i
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	e7fe      	b.n	800e0aa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10b      	bne.n	800e0ca <xTaskCheckForTimeOut+0x46>
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	b672      	cpsid	i
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	b662      	cpsie	i
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	e7fe      	b.n	800e0c8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e0ca:	f000 fc65 	bl	800e998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0ce:	4b1d      	ldr	r3, [pc, #116]	; (800e144 <xTaskCheckForTimeOut+0xc0>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e6:	d102      	bne.n	800e0ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	e023      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	4b15      	ldr	r3, [pc, #84]	; (800e148 <xTaskCheckForTimeOut+0xc4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d007      	beq.n	800e10a <xTaskCheckForTimeOut+0x86>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	429a      	cmp	r2, r3
 800e102:	d302      	bcc.n	800e10a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e104:	2301      	movs	r3, #1
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	e015      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	429a      	cmp	r2, r3
 800e112:	d20b      	bcs.n	800e12c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	1ad2      	subs	r2, r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff ff99 	bl	800e058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e126:	2300      	movs	r3, #0
 800e128:	61fb      	str	r3, [r7, #28]
 800e12a:	e004      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e132:	2301      	movs	r3, #1
 800e134:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e136:	f000 fc61 	bl	800e9fc <vPortExitCritical>

	return xReturn;
 800e13a:	69fb      	ldr	r3, [r7, #28]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	200004d4 	.word	0x200004d4
 800e148:	200004e8 	.word	0x200004e8

0800e14c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e150:	4b03      	ldr	r3, [pc, #12]	; (800e160 <vTaskMissedYield+0x14>)
 800e152:	2201      	movs	r2, #1
 800e154:	601a      	str	r2, [r3, #0]
}
 800e156:	bf00      	nop
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	200004e4 	.word	0x200004e4

0800e164 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e16c:	f000 f854 	bl	800e218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <prvIdleTask+0x2c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d907      	bls.n	800e188 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e178:	4b06      	ldr	r3, [pc, #24]	; (800e194 <prvIdleTask+0x30>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e188:	f7f2 fca6 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e18c:	e7ee      	b.n	800e16c <prvIdleTask+0x8>
 800e18e:	bf00      	nop
 800e190:	200003d4 	.word	0x200003d4
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e19e:	2300      	movs	r3, #0
 800e1a0:	607b      	str	r3, [r7, #4]
 800e1a2:	e00c      	b.n	800e1be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4a12      	ldr	r2, [pc, #72]	; (800e1f8 <prvInitialiseTaskLists+0x60>)
 800e1b0:	4413      	add	r3, r2
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe fab8 	bl	800c728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	607b      	str	r3, [r7, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b06      	cmp	r3, #6
 800e1c2:	d9ef      	bls.n	800e1a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1c4:	480d      	ldr	r0, [pc, #52]	; (800e1fc <prvInitialiseTaskLists+0x64>)
 800e1c6:	f7fe faaf 	bl	800c728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1ca:	480d      	ldr	r0, [pc, #52]	; (800e200 <prvInitialiseTaskLists+0x68>)
 800e1cc:	f7fe faac 	bl	800c728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1d0:	480c      	ldr	r0, [pc, #48]	; (800e204 <prvInitialiseTaskLists+0x6c>)
 800e1d2:	f7fe faa9 	bl	800c728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1d6:	480c      	ldr	r0, [pc, #48]	; (800e208 <prvInitialiseTaskLists+0x70>)
 800e1d8:	f7fe faa6 	bl	800c728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1dc:	480b      	ldr	r0, [pc, #44]	; (800e20c <prvInitialiseTaskLists+0x74>)
 800e1de:	f7fe faa3 	bl	800c728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1e2:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <prvInitialiseTaskLists+0x78>)
 800e1e4:	4a05      	ldr	r2, [pc, #20]	; (800e1fc <prvInitialiseTaskLists+0x64>)
 800e1e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1e8:	4b0a      	ldr	r3, [pc, #40]	; (800e214 <prvInitialiseTaskLists+0x7c>)
 800e1ea:	4a05      	ldr	r2, [pc, #20]	; (800e200 <prvInitialiseTaskLists+0x68>)
 800e1ec:	601a      	str	r2, [r3, #0]
}
 800e1ee:	bf00      	nop
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	200003d4 	.word	0x200003d4
 800e1fc:	20000460 	.word	0x20000460
 800e200:	20000474 	.word	0x20000474
 800e204:	20000490 	.word	0x20000490
 800e208:	200004a4 	.word	0x200004a4
 800e20c:	200004bc 	.word	0x200004bc
 800e210:	20000488 	.word	0x20000488
 800e214:	2000048c 	.word	0x2000048c

0800e218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e21e:	e019      	b.n	800e254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e220:	f000 fbba 	bl	800e998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e224:	4b0f      	ldr	r3, [pc, #60]	; (800e264 <prvCheckTasksWaitingTermination+0x4c>)
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3304      	adds	r3, #4
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe fb03 	bl	800c83c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e236:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <prvCheckTasksWaitingTermination+0x50>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	4a0a      	ldr	r2, [pc, #40]	; (800e268 <prvCheckTasksWaitingTermination+0x50>)
 800e23e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <prvCheckTasksWaitingTermination+0x54>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3b01      	subs	r3, #1
 800e246:	4a09      	ldr	r2, [pc, #36]	; (800e26c <prvCheckTasksWaitingTermination+0x54>)
 800e248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e24a:	f000 fbd7 	bl	800e9fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f80e 	bl	800e270 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e254:	4b05      	ldr	r3, [pc, #20]	; (800e26c <prvCheckTasksWaitingTermination+0x54>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e1      	bne.n	800e220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e25c:	bf00      	nop
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	200004a4 	.word	0x200004a4
 800e268:	200004d0 	.word	0x200004d0
 800e26c:	200004b8 	.word	0x200004b8

0800e270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d108      	bne.n	800e294 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e286:	4618      	mov	r0, r3
 800e288:	f000 fd74 	bl	800ed74 <vPortFree>
				vPortFree( pxTCB );
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 fd71 	bl	800ed74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e292:	e019      	b.n	800e2c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d103      	bne.n	800e2a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fd68 	bl	800ed74 <vPortFree>
	}
 800e2a4:	e010      	b.n	800e2c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d00b      	beq.n	800e2c8 <prvDeleteTCB+0x58>
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	b672      	cpsid	i
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	b662      	cpsie	i
 800e2c4:	60fb      	str	r3, [r7, #12]
 800e2c6:	e7fe      	b.n	800e2c6 <prvDeleteTCB+0x56>
	}
 800e2c8:	bf00      	nop
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2d6:	4b0c      	ldr	r3, [pc, #48]	; (800e308 <prvResetNextTaskUnblockTime+0x38>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d104      	bne.n	800e2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2e0:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <prvResetNextTaskUnblockTime+0x3c>)
 800e2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2e8:	e008      	b.n	800e2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ea:	4b07      	ldr	r3, [pc, #28]	; (800e308 <prvResetNextTaskUnblockTime+0x38>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	4a04      	ldr	r2, [pc, #16]	; (800e30c <prvResetNextTaskUnblockTime+0x3c>)
 800e2fa:	6013      	str	r3, [r2, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	20000488 	.word	0x20000488
 800e30c:	200004f0 	.word	0x200004f0

0800e310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e316:	4b0b      	ldr	r3, [pc, #44]	; (800e344 <xTaskGetSchedulerState+0x34>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d102      	bne.n	800e324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e31e:	2301      	movs	r3, #1
 800e320:	607b      	str	r3, [r7, #4]
 800e322:	e008      	b.n	800e336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e324:	4b08      	ldr	r3, [pc, #32]	; (800e348 <xTaskGetSchedulerState+0x38>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d102      	bne.n	800e332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e32c:	2302      	movs	r3, #2
 800e32e:	607b      	str	r3, [r7, #4]
 800e330:	e001      	b.n	800e336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e332:	2300      	movs	r3, #0
 800e334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e336:	687b      	ldr	r3, [r7, #4]
	}
 800e338:	4618      	mov	r0, r3
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	200004dc 	.word	0x200004dc
 800e348:	200004f8 	.word	0x200004f8

0800e34c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e358:	2300      	movs	r3, #0
 800e35a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d069      	beq.n	800e436 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e366:	4b36      	ldr	r3, [pc, #216]	; (800e440 <xTaskPriorityInherit+0xf4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d259      	bcs.n	800e424 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	2b00      	cmp	r3, #0
 800e376:	db06      	blt.n	800e386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e378:	4b31      	ldr	r3, [pc, #196]	; (800e440 <xTaskPriorityInherit+0xf4>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	f1c3 0207 	rsb	r2, r3, #7
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	6959      	ldr	r1, [r3, #20]
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38e:	4613      	mov	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4413      	add	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4a2b      	ldr	r2, [pc, #172]	; (800e444 <xTaskPriorityInherit+0xf8>)
 800e398:	4413      	add	r3, r2
 800e39a:	4299      	cmp	r1, r3
 800e39c:	d13a      	bne.n	800e414 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe fa4a 	bl	800c83c <uxListRemove>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d115      	bne.n	800e3da <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b2:	4924      	ldr	r1, [pc, #144]	; (800e444 <xTaskPriorityInherit+0xf8>)
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	440b      	add	r3, r1
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10a      	bne.n	800e3da <xTaskPriorityInherit+0x8e>
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ce:	43da      	mvns	r2, r3
 800e3d0:	4b1d      	ldr	r3, [pc, #116]	; (800e448 <xTaskPriorityInherit+0xfc>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	4a1c      	ldr	r2, [pc, #112]	; (800e448 <xTaskPriorityInherit+0xfc>)
 800e3d8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3da:	4b19      	ldr	r3, [pc, #100]	; (800e440 <xTaskPriorityInherit+0xf4>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	409a      	lsls	r2, r3
 800e3ec:	4b16      	ldr	r3, [pc, #88]	; (800e448 <xTaskPriorityInherit+0xfc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	4a15      	ldr	r2, [pc, #84]	; (800e448 <xTaskPriorityInherit+0xfc>)
 800e3f4:	6013      	str	r3, [r2, #0]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4a10      	ldr	r2, [pc, #64]	; (800e444 <xTaskPriorityInherit+0xf8>)
 800e404:	441a      	add	r2, r3
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	3304      	adds	r3, #4
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7fe f9b8 	bl	800c782 <vListInsertEnd>
 800e412:	e004      	b.n	800e41e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e414:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <xTaskPriorityInherit+0xf4>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e41e:	2301      	movs	r3, #1
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	e008      	b.n	800e436 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e428:	4b05      	ldr	r3, [pc, #20]	; (800e440 <xTaskPriorityInherit+0xf4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42e:	429a      	cmp	r2, r3
 800e430:	d201      	bcs.n	800e436 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e432:	2301      	movs	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e436:	68fb      	ldr	r3, [r7, #12]
	}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	200003d0 	.word	0x200003d0
 800e444:	200003d4 	.word	0x200003d4
 800e448:	200004d8 	.word	0x200004d8

0800e44c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b086      	sub	sp, #24
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e458:	2300      	movs	r3, #0
 800e45a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d070      	beq.n	800e544 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e462:	4b3b      	ldr	r3, [pc, #236]	; (800e550 <xTaskPriorityDisinherit+0x104>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d00b      	beq.n	800e484 <xTaskPriorityDisinherit+0x38>
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	b672      	cpsid	i
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	b662      	cpsie	i
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	e7fe      	b.n	800e482 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10b      	bne.n	800e4a4 <xTaskPriorityDisinherit+0x58>
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	b672      	cpsid	i
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	b662      	cpsie	i
 800e4a0:	60bb      	str	r3, [r7, #8]
 800e4a2:	e7fe      	b.n	800e4a2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a8:	1e5a      	subs	r2, r3, #1
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d044      	beq.n	800e544 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d140      	bne.n	800e544 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe f9b8 	bl	800c83c <uxListRemove>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d115      	bne.n	800e4fe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d6:	491f      	ldr	r1, [pc, #124]	; (800e554 <xTaskPriorityDisinherit+0x108>)
 800e4d8:	4613      	mov	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	440b      	add	r3, r1
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10a      	bne.n	800e4fe <xTaskPriorityDisinherit+0xb2>
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f2:	43da      	mvns	r2, r3
 800e4f4:	4b18      	ldr	r3, [pc, #96]	; (800e558 <xTaskPriorityDisinherit+0x10c>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	4a17      	ldr	r2, [pc, #92]	; (800e558 <xTaskPriorityDisinherit+0x10c>)
 800e4fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50a:	f1c3 0207 	rsb	r2, r3, #7
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e516:	2201      	movs	r2, #1
 800e518:	409a      	lsls	r2, r3
 800e51a:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <xTaskPriorityDisinherit+0x10c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4313      	orrs	r3, r2
 800e520:	4a0d      	ldr	r2, [pc, #52]	; (800e558 <xTaskPriorityDisinherit+0x10c>)
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e528:	4613      	mov	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4a08      	ldr	r2, [pc, #32]	; (800e554 <xTaskPriorityDisinherit+0x108>)
 800e532:	441a      	add	r2, r3
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7fe f921 	bl	800c782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e540:	2301      	movs	r3, #1
 800e542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e544:	697b      	ldr	r3, [r7, #20]
	}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	200003d0 	.word	0x200003d0
 800e554:	200003d4 	.word	0x200003d4
 800e558:	200004d8 	.word	0x200004d8

0800e55c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b088      	sub	sp, #32
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e56a:	2301      	movs	r3, #1
 800e56c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 8085 	beq.w	800e680 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10b      	bne.n	800e596 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	b672      	cpsid	i
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	b662      	cpsie	i
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	e7fe      	b.n	800e594 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d902      	bls.n	800e5a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	61fb      	str	r3, [r7, #28]
 800e5a4:	e002      	b.n	800e5ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	69fa      	ldr	r2, [r7, #28]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d064      	beq.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ba:	697a      	ldr	r2, [r7, #20]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d15f      	bne.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5c0:	4b31      	ldr	r3, [pc, #196]	; (800e688 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d10b      	bne.n	800e5e2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	b672      	cpsid	i
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	b662      	cpsie	i
 800e5de:	60bb      	str	r3, [r7, #8]
 800e5e0:	e7fe      	b.n	800e5e0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	69fa      	ldr	r2, [r7, #28]
 800e5ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	db04      	blt.n	800e600 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	f1c3 0207 	rsb	r2, r3, #7
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	6959      	ldr	r1, [r3, #20]
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	4613      	mov	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a1f      	ldr	r2, [pc, #124]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e610:	4413      	add	r3, r2
 800e612:	4299      	cmp	r1, r3
 800e614:	d134      	bne.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	3304      	adds	r3, #4
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe f90e 	bl	800c83c <uxListRemove>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d115      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	4918      	ldr	r1, [pc, #96]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e62c:	4613      	mov	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	440b      	add	r3, r1
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e640:	2201      	movs	r2, #1
 800e642:	fa02 f303 	lsl.w	r3, r2, r3
 800e646:	43da      	mvns	r2, r3
 800e648:	4b11      	ldr	r3, [pc, #68]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4013      	ands	r3, r2
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e650:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e656:	2201      	movs	r2, #1
 800e658:	409a      	lsls	r2, r3
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4313      	orrs	r3, r2
 800e660:	4a0b      	ldr	r2, [pc, #44]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e662:	6013      	str	r3, [r2, #0]
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e668:	4613      	mov	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4a06      	ldr	r2, [pc, #24]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e672:	441a      	add	r2, r3
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	3304      	adds	r3, #4
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f7fe f881 	bl	800c782 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e680:	bf00      	nop
 800e682:	3720      	adds	r7, #32
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200003d0 	.word	0x200003d0
 800e68c:	200003d4 	.word	0x200003d4
 800e690:	200004d8 	.word	0x200004d8

0800e694 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e694:	b480      	push	{r7}
 800e696:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e698:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6a0:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6a6:	3201      	adds	r2, #1
 800e6a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6aa:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
	}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	200003d0 	.word	0x200003d0

0800e6bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6c6:	4b29      	ldr	r3, [pc, #164]	; (800e76c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6cc:	4b28      	ldr	r3, [pc, #160]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe f8b2 	bl	800c83c <uxListRemove>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d10b      	bne.n	800e6f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e6de:	4b24      	ldr	r3, [pc, #144]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ea:	43da      	mvns	r2, r3
 800e6ec:	4b21      	ldr	r3, [pc, #132]	; (800e774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	4a20      	ldr	r2, [pc, #128]	; (800e774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fc:	d10a      	bne.n	800e714 <prvAddCurrentTaskToDelayedList+0x58>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d007      	beq.n	800e714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e704:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3304      	adds	r3, #4
 800e70a:	4619      	mov	r1, r3
 800e70c:	481a      	ldr	r0, [pc, #104]	; (800e778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e70e:	f7fe f838 	bl	800c782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e712:	e026      	b.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4413      	add	r3, r2
 800e71a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e71c:	4b14      	ldr	r3, [pc, #80]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d209      	bcs.n	800e740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72c:	4b13      	ldr	r3, [pc, #76]	; (800e77c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	4b0f      	ldr	r3, [pc, #60]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f7fe f846 	bl	800c7ca <vListInsert>
}
 800e73e:	e010      	b.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	4b0a      	ldr	r3, [pc, #40]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3304      	adds	r3, #4
 800e74a:	4619      	mov	r1, r3
 800e74c:	4610      	mov	r0, r2
 800e74e:	f7fe f83c 	bl	800c7ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e752:	4b0c      	ldr	r3, [pc, #48]	; (800e784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d202      	bcs.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e75c:	4a09      	ldr	r2, [pc, #36]	; (800e784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6013      	str	r3, [r2, #0]
}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	200004d4 	.word	0x200004d4
 800e770:	200003d0 	.word	0x200003d0
 800e774:	200004d8 	.word	0x200004d8
 800e778:	200004bc 	.word	0x200004bc
 800e77c:	2000048c 	.word	0x2000048c
 800e780:	20000488 	.word	0x20000488
 800e784:	200004f0 	.word	0x200004f0

0800e788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3b04      	subs	r3, #4
 800e798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3b04      	subs	r3, #4
 800e7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f023 0201 	bic.w	r2, r3, #1
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	3b04      	subs	r3, #4
 800e7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7b8:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <pxPortInitialiseStack+0x64>)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3b14      	subs	r3, #20
 800e7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3b04      	subs	r3, #4
 800e7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f06f 0202 	mvn.w	r2, #2
 800e7d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3b20      	subs	r3, #32
 800e7dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7de:	68fb      	ldr	r3, [r7, #12]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3714      	adds	r7, #20
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	0800e7f1 	.word	0x0800e7f1

0800e7f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7fa:	4b13      	ldr	r3, [pc, #76]	; (800e848 <prvTaskExitError+0x58>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d00b      	beq.n	800e81c <prvTaskExitError+0x2c>
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	b672      	cpsid	i
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	b662      	cpsie	i
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	e7fe      	b.n	800e81a <prvTaskExitError+0x2a>
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	b672      	cpsid	i
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	b662      	cpsie	i
 800e830:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e832:	bf00      	nop
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0fc      	beq.n	800e834 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e83a:	bf00      	nop
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	20000024 	.word	0x20000024
 800e84c:	00000000 	.word	0x00000000

0800e850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <pxCurrentTCBConst2>)
 800e852:	6819      	ldr	r1, [r3, #0]
 800e854:	6808      	ldr	r0, [r1, #0]
 800e856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85a:	f380 8809 	msr	PSP, r0
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f04f 0000 	mov.w	r0, #0
 800e866:	f380 8811 	msr	BASEPRI, r0
 800e86a:	4770      	bx	lr
 800e86c:	f3af 8000 	nop.w

0800e870 <pxCurrentTCBConst2>:
 800e870:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop

0800e878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e878:	4808      	ldr	r0, [pc, #32]	; (800e89c <prvPortStartFirstTask+0x24>)
 800e87a:	6800      	ldr	r0, [r0, #0]
 800e87c:	6800      	ldr	r0, [r0, #0]
 800e87e:	f380 8808 	msr	MSP, r0
 800e882:	f04f 0000 	mov.w	r0, #0
 800e886:	f380 8814 	msr	CONTROL, r0
 800e88a:	b662      	cpsie	i
 800e88c:	b661      	cpsie	f
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	df00      	svc	0
 800e898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e89a:	bf00      	nop
 800e89c:	e000ed08 	.word	0xe000ed08

0800e8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8a6:	4b36      	ldr	r3, [pc, #216]	; (800e980 <xPortStartScheduler+0xe0>)
 800e8a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	22ff      	movs	r2, #255	; 0xff
 800e8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	4b2e      	ldr	r3, [pc, #184]	; (800e984 <xPortStartScheduler+0xe4>)
 800e8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8ce:	4b2e      	ldr	r3, [pc, #184]	; (800e988 <xPortStartScheduler+0xe8>)
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8d4:	e009      	b.n	800e8ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e8d6:	4b2c      	ldr	r3, [pc, #176]	; (800e988 <xPortStartScheduler+0xe8>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	4a2a      	ldr	r2, [pc, #168]	; (800e988 <xPortStartScheduler+0xe8>)
 800e8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8ea:	78fb      	ldrb	r3, [r7, #3]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8f2:	2b80      	cmp	r3, #128	; 0x80
 800e8f4:	d0ef      	beq.n	800e8d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8f6:	4b24      	ldr	r3, [pc, #144]	; (800e988 <xPortStartScheduler+0xe8>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f1c3 0307 	rsb	r3, r3, #7
 800e8fe:	2b04      	cmp	r3, #4
 800e900:	d00b      	beq.n	800e91a <xPortStartScheduler+0x7a>
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	b672      	cpsid	i
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	b662      	cpsie	i
 800e916:	60bb      	str	r3, [r7, #8]
 800e918:	e7fe      	b.n	800e918 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e91a:	4b1b      	ldr	r3, [pc, #108]	; (800e988 <xPortStartScheduler+0xe8>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	021b      	lsls	r3, r3, #8
 800e920:	4a19      	ldr	r2, [pc, #100]	; (800e988 <xPortStartScheduler+0xe8>)
 800e922:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e924:	4b18      	ldr	r3, [pc, #96]	; (800e988 <xPortStartScheduler+0xe8>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e92c:	4a16      	ldr	r2, [pc, #88]	; (800e988 <xPortStartScheduler+0xe8>)
 800e92e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	b2da      	uxtb	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e938:	4b14      	ldr	r3, [pc, #80]	; (800e98c <xPortStartScheduler+0xec>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a13      	ldr	r2, [pc, #76]	; (800e98c <xPortStartScheduler+0xec>)
 800e93e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e942:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e944:	4b11      	ldr	r3, [pc, #68]	; (800e98c <xPortStartScheduler+0xec>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a10      	ldr	r2, [pc, #64]	; (800e98c <xPortStartScheduler+0xec>)
 800e94a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e94e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e950:	f000 f8d4 	bl	800eafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e954:	4b0e      	ldr	r3, [pc, #56]	; (800e990 <xPortStartScheduler+0xf0>)
 800e956:	2200      	movs	r2, #0
 800e958:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e95a:	f000 f8f3 	bl	800eb44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e95e:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <xPortStartScheduler+0xf4>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a0c      	ldr	r2, [pc, #48]	; (800e994 <xPortStartScheduler+0xf4>)
 800e964:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e968:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e96a:	f7ff ff85 	bl	800e878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e96e:	f7ff fa67 	bl	800de40 <vTaskSwitchContext>
	prvTaskExitError();
 800e972:	f7ff ff3d 	bl	800e7f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	e000e400 	.word	0xe000e400
 800e984:	200004fc 	.word	0x200004fc
 800e988:	20000500 	.word	0x20000500
 800e98c:	e000ed20 	.word	0xe000ed20
 800e990:	20000024 	.word	0x20000024
 800e994:	e000ef34 	.word	0xe000ef34

0800e998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	b672      	cpsid	i
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	b662      	cpsie	i
 800e9b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <vPortEnterCritical+0x5c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	4a0e      	ldr	r2, [pc, #56]	; (800e9f4 <vPortEnterCritical+0x5c>)
 800e9bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9be:	4b0d      	ldr	r3, [pc, #52]	; (800e9f4 <vPortEnterCritical+0x5c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d110      	bne.n	800e9e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9c6:	4b0c      	ldr	r3, [pc, #48]	; (800e9f8 <vPortEnterCritical+0x60>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <vPortEnterCritical+0x50>
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	b672      	cpsid	i
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	b662      	cpsie	i
 800e9e4:	603b      	str	r3, [r7, #0]
 800e9e6:	e7fe      	b.n	800e9e6 <vPortEnterCritical+0x4e>
	}
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	20000024 	.word	0x20000024
 800e9f8:	e000ed04 	.word	0xe000ed04

0800e9fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <vPortExitCritical+0x50>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10b      	bne.n	800ea22 <vPortExitCritical+0x26>
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	b672      	cpsid	i
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	b662      	cpsie	i
 800ea1e:	607b      	str	r3, [r7, #4]
 800ea20:	e7fe      	b.n	800ea20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ea22:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <vPortExitCritical+0x50>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	4a08      	ldr	r2, [pc, #32]	; (800ea4c <vPortExitCritical+0x50>)
 800ea2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea2c:	4b07      	ldr	r3, [pc, #28]	; (800ea4c <vPortExitCritical+0x50>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d104      	bne.n	800ea3e <vPortExitCritical+0x42>
 800ea34:	2300      	movs	r3, #0
 800ea36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	20000024 	.word	0x20000024

0800ea50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea50:	f3ef 8009 	mrs	r0, PSP
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	4b15      	ldr	r3, [pc, #84]	; (800eab0 <pxCurrentTCBConst>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	f01e 0f10 	tst.w	lr, #16
 800ea60:	bf08      	it	eq
 800ea62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6a:	6010      	str	r0, [r2, #0]
 800ea6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea74:	b672      	cpsid	i
 800ea76:	f380 8811 	msr	BASEPRI, r0
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	b662      	cpsie	i
 800ea84:	f7ff f9dc 	bl	800de40 <vTaskSwitchContext>
 800ea88:	f04f 0000 	mov.w	r0, #0
 800ea8c:	f380 8811 	msr	BASEPRI, r0
 800ea90:	bc09      	pop	{r0, r3}
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	6808      	ldr	r0, [r1, #0]
 800ea96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	f01e 0f10 	tst.w	lr, #16
 800ea9e:	bf08      	it	eq
 800eaa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eaa4:	f380 8809 	msr	PSP, r0
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop

0800eab0 <pxCurrentTCBConst>:
 800eab0:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	b672      	cpsid	i
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	b662      	cpsie	i
 800ead2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ead4:	f7ff f8fa 	bl	800dccc <xTaskIncrementTick>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d003      	beq.n	800eae6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eade:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <SysTick_Handler+0x40>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	2300      	movs	r3, #0
 800eae8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eaf0:	bf00      	nop
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	e000ed04 	.word	0xe000ed04

0800eafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eafc:	b480      	push	{r7}
 800eafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb00:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <vPortSetupTimerInterrupt+0x34>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb06:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <vPortSetupTimerInterrupt+0x38>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <vPortSetupTimerInterrupt+0x3c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a0a      	ldr	r2, [pc, #40]	; (800eb3c <vPortSetupTimerInterrupt+0x40>)
 800eb12:	fba2 2303 	umull	r2, r3, r2, r3
 800eb16:	099b      	lsrs	r3, r3, #6
 800eb18:	4a09      	ldr	r2, [pc, #36]	; (800eb40 <vPortSetupTimerInterrupt+0x44>)
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb1e:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <vPortSetupTimerInterrupt+0x34>)
 800eb20:	2207      	movs	r2, #7
 800eb22:	601a      	str	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	e000e010 	.word	0xe000e010
 800eb34:	e000e018 	.word	0xe000e018
 800eb38:	20000018 	.word	0x20000018
 800eb3c:	10624dd3 	.word	0x10624dd3
 800eb40:	e000e014 	.word	0xe000e014

0800eb44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb54 <vPortEnableVFP+0x10>
 800eb48:	6801      	ldr	r1, [r0, #0]
 800eb4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb4e:	6001      	str	r1, [r0, #0]
 800eb50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb52:	bf00      	nop
 800eb54:	e000ed88 	.word	0xe000ed88

0800eb58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb5e:	f3ef 8305 	mrs	r3, IPSR
 800eb62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b0f      	cmp	r3, #15
 800eb68:	d915      	bls.n	800eb96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb6a:	4a18      	ldr	r2, [pc, #96]	; (800ebcc <vPortValidateInterruptPriority+0x74>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4413      	add	r3, r2
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb74:	4b16      	ldr	r3, [pc, #88]	; (800ebd0 <vPortValidateInterruptPriority+0x78>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	7afa      	ldrb	r2, [r7, #11]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d20b      	bcs.n	800eb96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800eb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb82:	b672      	cpsid	i
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	b662      	cpsie	i
 800eb92:	607b      	str	r3, [r7, #4]
 800eb94:	e7fe      	b.n	800eb94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb96:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <vPortValidateInterruptPriority+0x7c>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb9e:	4b0e      	ldr	r3, [pc, #56]	; (800ebd8 <vPortValidateInterruptPriority+0x80>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d90b      	bls.n	800ebbe <vPortValidateInterruptPriority+0x66>
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	b672      	cpsid	i
 800ebac:	f383 8811 	msr	BASEPRI, r3
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	b662      	cpsie	i
 800ebba:	603b      	str	r3, [r7, #0]
 800ebbc:	e7fe      	b.n	800ebbc <vPortValidateInterruptPriority+0x64>
	}
 800ebbe:	bf00      	nop
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	e000e3f0 	.word	0xe000e3f0
 800ebd0:	200004fc 	.word	0x200004fc
 800ebd4:	e000ed0c 	.word	0xe000ed0c
 800ebd8:	20000500 	.word	0x20000500

0800ebdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08a      	sub	sp, #40	; 0x28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebe8:	f7fe ffa2 	bl	800db30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebec:	4b5c      	ldr	r3, [pc, #368]	; (800ed60 <pvPortMalloc+0x184>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebf4:	f000 f91a 	bl	800ee2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebf8:	4b5a      	ldr	r3, [pc, #360]	; (800ed64 <pvPortMalloc+0x188>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4013      	ands	r3, r2
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f040 8090 	bne.w	800ed26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01e      	beq.n	800ec4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ec0c:	2208      	movs	r2, #8
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4413      	add	r3, r2
 800ec12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f003 0307 	and.w	r3, r3, #7
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d015      	beq.n	800ec4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f023 0307 	bic.w	r3, r3, #7
 800ec24:	3308      	adds	r3, #8
 800ec26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f003 0307 	and.w	r3, r3, #7
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <pvPortMalloc+0x6e>
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	b672      	cpsid	i
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	b662      	cpsie	i
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e7fe      	b.n	800ec48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d06a      	beq.n	800ed26 <pvPortMalloc+0x14a>
 800ec50:	4b45      	ldr	r3, [pc, #276]	; (800ed68 <pvPortMalloc+0x18c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d865      	bhi.n	800ed26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec5a:	4b44      	ldr	r3, [pc, #272]	; (800ed6c <pvPortMalloc+0x190>)
 800ec5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec5e:	4b43      	ldr	r3, [pc, #268]	; (800ed6c <pvPortMalloc+0x190>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec64:	e004      	b.n	800ec70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d903      	bls.n	800ec82 <pvPortMalloc+0xa6>
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f1      	bne.n	800ec66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec82:	4b37      	ldr	r3, [pc, #220]	; (800ed60 <pvPortMalloc+0x184>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d04c      	beq.n	800ed26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2208      	movs	r2, #8
 800ec92:	4413      	add	r3, r2
 800ec94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	685a      	ldr	r2, [r3, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	1ad2      	subs	r2, r2, r3
 800eca6:	2308      	movs	r3, #8
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d920      	bls.n	800ecf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ecae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	f003 0307 	and.w	r3, r3, #7
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00b      	beq.n	800ecd8 <pvPortMalloc+0xfc>
 800ecc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc4:	b672      	cpsid	i
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	b662      	cpsie	i
 800ecd4:	613b      	str	r3, [r7, #16]
 800ecd6:	e7fe      	b.n	800ecd6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	1ad2      	subs	r2, r2, r3
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecea:	69b8      	ldr	r0, [r7, #24]
 800ecec:	f000 f900 	bl	800eef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecf0:	4b1d      	ldr	r3, [pc, #116]	; (800ed68 <pvPortMalloc+0x18c>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	4a1b      	ldr	r2, [pc, #108]	; (800ed68 <pvPortMalloc+0x18c>)
 800ecfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecfe:	4b1a      	ldr	r3, [pc, #104]	; (800ed68 <pvPortMalloc+0x18c>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	4b1b      	ldr	r3, [pc, #108]	; (800ed70 <pvPortMalloc+0x194>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d203      	bcs.n	800ed12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed0a:	4b17      	ldr	r3, [pc, #92]	; (800ed68 <pvPortMalloc+0x18c>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a18      	ldr	r2, [pc, #96]	; (800ed70 <pvPortMalloc+0x194>)
 800ed10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed14:	685a      	ldr	r2, [r3, #4]
 800ed16:	4b13      	ldr	r3, [pc, #76]	; (800ed64 <pvPortMalloc+0x188>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	431a      	orrs	r2, r3
 800ed1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	2200      	movs	r2, #0
 800ed24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed26:	f7fe ff11 	bl	800db4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ed30:	f7f1 fee4 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	f003 0307 	and.w	r3, r3, #7
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00b      	beq.n	800ed56 <pvPortMalloc+0x17a>
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	b672      	cpsid	i
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	b662      	cpsie	i
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	e7fe      	b.n	800ed54 <pvPortMalloc+0x178>
	return pvReturn;
 800ed56:	69fb      	ldr	r3, [r7, #28]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3728      	adds	r7, #40	; 0x28
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	2000850c 	.word	0x2000850c
 800ed64:	20008518 	.word	0x20008518
 800ed68:	20008510 	.word	0x20008510
 800ed6c:	20008504 	.word	0x20008504
 800ed70:	20008514 	.word	0x20008514

0800ed74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b086      	sub	sp, #24
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d04a      	beq.n	800ee1c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed86:	2308      	movs	r3, #8
 800ed88:	425b      	negs	r3, r3
 800ed8a:	697a      	ldr	r2, [r7, #20]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	4b22      	ldr	r3, [pc, #136]	; (800ee24 <vPortFree+0xb0>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10b      	bne.n	800edba <vPortFree+0x46>
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	b672      	cpsid	i
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	b662      	cpsie	i
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e7fe      	b.n	800edb8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00b      	beq.n	800edda <vPortFree+0x66>
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	60bb      	str	r3, [r7, #8]
 800edd8:	e7fe      	b.n	800edd8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	685a      	ldr	r2, [r3, #4]
 800edde:	4b11      	ldr	r3, [pc, #68]	; (800ee24 <vPortFree+0xb0>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4013      	ands	r3, r2
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d019      	beq.n	800ee1c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d115      	bne.n	800ee1c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	685a      	ldr	r2, [r3, #4]
 800edf4:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <vPortFree+0xb0>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	43db      	mvns	r3, r3
 800edfa:	401a      	ands	r2, r3
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee00:	f7fe fe96 	bl	800db30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	4b07      	ldr	r3, [pc, #28]	; (800ee28 <vPortFree+0xb4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	4a06      	ldr	r2, [pc, #24]	; (800ee28 <vPortFree+0xb4>)
 800ee10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee12:	6938      	ldr	r0, [r7, #16]
 800ee14:	f000 f86c 	bl	800eef0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ee18:	f7fe fe98 	bl	800db4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee1c:	bf00      	nop
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	20008518 	.word	0x20008518
 800ee28:	20008510 	.word	0x20008510

0800ee2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee38:	4b27      	ldr	r3, [pc, #156]	; (800eed8 <prvHeapInit+0xac>)
 800ee3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00c      	beq.n	800ee60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3307      	adds	r3, #7
 800ee4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f023 0307 	bic.w	r3, r3, #7
 800ee52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	4a1f      	ldr	r2, [pc, #124]	; (800eed8 <prvHeapInit+0xac>)
 800ee5c:	4413      	add	r3, r2
 800ee5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee64:	4a1d      	ldr	r2, [pc, #116]	; (800eedc <prvHeapInit+0xb0>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee6a:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <prvHeapInit+0xb0>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	4413      	add	r3, r2
 800ee76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee78:	2208      	movs	r2, #8
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	1a9b      	subs	r3, r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f023 0307 	bic.w	r3, r3, #7
 800ee86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	4a15      	ldr	r2, [pc, #84]	; (800eee0 <prvHeapInit+0xb4>)
 800ee8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee8e:	4b14      	ldr	r3, [pc, #80]	; (800eee0 <prvHeapInit+0xb4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2200      	movs	r2, #0
 800ee94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee96:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <prvHeapInit+0xb4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	1ad2      	subs	r2, r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eeac:	4b0c      	ldr	r3, [pc, #48]	; (800eee0 <prvHeapInit+0xb4>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	4a0a      	ldr	r2, [pc, #40]	; (800eee4 <prvHeapInit+0xb8>)
 800eeba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	4a09      	ldr	r2, [pc, #36]	; (800eee8 <prvHeapInit+0xbc>)
 800eec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eec4:	4b09      	ldr	r3, [pc, #36]	; (800eeec <prvHeapInit+0xc0>)
 800eec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eeca:	601a      	str	r2, [r3, #0]
}
 800eecc:	bf00      	nop
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr
 800eed8:	20000504 	.word	0x20000504
 800eedc:	20008504 	.word	0x20008504
 800eee0:	2000850c 	.word	0x2000850c
 800eee4:	20008514 	.word	0x20008514
 800eee8:	20008510 	.word	0x20008510
 800eeec:	20008518 	.word	0x20008518

0800eef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eef8:	4b28      	ldr	r3, [pc, #160]	; (800ef9c <prvInsertBlockIntoFreeList+0xac>)
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	e002      	b.n	800ef04 <prvInsertBlockIntoFreeList+0x14>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d8f7      	bhi.n	800eefe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	4413      	add	r3, r2
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d108      	bne.n	800ef32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	441a      	add	r2, r3
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	441a      	add	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d118      	bne.n	800ef78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	4b15      	ldr	r3, [pc, #84]	; (800efa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d00d      	beq.n	800ef6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	441a      	add	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	e008      	b.n	800ef80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	e003      	b.n	800ef80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d002      	beq.n	800ef8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef8e:	bf00      	nop
 800ef90:	3714      	adds	r7, #20
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20008504 	.word	0x20008504
 800efa0:	2000850c 	.word	0x2000850c

0800efa4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800efa8:	f005 fa80 	bl	80144ac <touchgfx_init>
}
 800efac:	bf00      	nop
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800efb4:	f005 faa4 	bl	8014500 <touchgfx_taskEntry>
}
 800efb8:	bf00      	nop
 800efba:	bd80      	pop	{r7, pc}

0800efbc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
    {
 800efc4:	4a04      	ldr	r2, [pc, #16]	; (800efd8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	601a      	str	r2, [r3, #0]
    }
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4618      	mov	r0, r3
 800efce:	370c      	adds	r7, #12
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	08026f9c 	.word	0x08026f9c

0800efdc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
    }
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7ff ffe9 	bl	800efbc <_ZN8touchgfx12FontProviderD1Ev>
 800efea:	2104      	movs	r1, #4
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f016 fbba 	bl	8025766 <_ZdlPvj>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	4618      	mov	r0, r3
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	460b      	mov	r3, r1
 800f006:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f008:	887b      	ldrh	r3, [r7, #2]
 800f00a:	2b07      	cmp	r3, #7
 800f00c:	d83a      	bhi.n	800f084 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f00e:	a201      	add	r2, pc, #4	; (adr r2, 800f014 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f014:	0800f035 	.word	0x0800f035
 800f018:	0800f03f 	.word	0x0800f03f
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	0800f053 	.word	0x0800f053
 800f024:	0800f05d 	.word	0x0800f05d
 800f028:	0800f067 	.word	0x0800f067
 800f02c:	0800f071 	.word	0x0800f071
 800f030:	0800f07b 	.word	0x0800f07b
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f034:	f003 fae8 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f038:	4603      	mov	r3, r0
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	e023      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f03e:	f003 fae3 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f042:	4603      	mov	r3, r0
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	e01e      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f048:	f003 fade 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f04c:	4603      	mov	r3, r0
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	e019      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f052:	f003 fad9 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f056:	4603      	mov	r3, r0
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	e014      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f05c:	f003 fad4 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f060:	4603      	mov	r3, r0
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	e00f      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f066:	f003 facf 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f06a:	4603      	mov	r3, r0
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	e00a      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f070:	f003 faca 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f074:	4603      	mov	r3, r0
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	e005      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f07a:	f003 fac5 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 800f07e:	4603      	mov	r3, r0
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	e000      	b.n	800f086 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f084:	2300      	movs	r3, #0
    }
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop

0800f090 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	4a05      	ldr	r2, [pc, #20]	; (800f0b0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	601a      	str	r2, [r3, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff ff8b 	bl	800efbc <_ZN8touchgfx12FontProviderD1Ev>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	08026f88 	.word	0x08026f88

0800f0b4 <_ZN23ApplicationFontProviderD0Ev>:
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff ffe7 	bl	800f090 <_ZN23ApplicationFontProviderD1Ev>
 800f0c2:	2104      	movs	r1, #4
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f016 fb4e 	bl	8025766 <_ZdlPvj>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	4a04      	ldr	r2, [pc, #16]	; (800f0f0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	08029228 	.word	0x08029228

0800f0f4 <_ZN8touchgfx4FontD0Ev>:
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff ffe9 	bl	800f0d4 <_ZN8touchgfx4FontD1Ev>
 800f102:	2110      	movs	r1, #16
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f016 fb2e 	bl	8025766 <_ZdlPvj>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f120:	2300      	movs	r3, #0
 800f122:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f124:	2300      	movs	r3, #0
 800f126:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	3308      	adds	r3, #8
 800f12e:	681c      	ldr	r4, [r3, #0]
 800f130:	f107 030f 	add.w	r3, r7, #15
 800f134:	f107 0210 	add.w	r2, r7, #16
 800f138:	8879      	ldrh	r1, [r7, #2]
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	47a0      	blx	r4
 800f13e:	6178      	str	r0, [r7, #20]
        return glyph;
 800f140:	697b      	ldr	r3, [r7, #20]
    }
 800f142:	4618      	mov	r0, r3
 800f144:	371c      	adds	r7, #28
 800f146:	46bd      	mov	sp, r7
 800f148:	bd90      	pop	{r4, r7, pc}

0800f14a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f14a:	b480      	push	{r7}
 800f14c:	b083      	sub	sp, #12
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	895b      	ldrh	r3, [r3, #10]
    }
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f162:	b480      	push	{r7}
 800f164:	b083      	sub	sp, #12
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	899b      	ldrh	r3, [r3, #12]
    }
 800f16e:	4618      	mov	r0, r3
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	889b      	ldrh	r3, [r3, #4]
    }
 800f186:	4618      	mov	r0, r3
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f192:	b480      	push	{r7}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	889a      	ldrh	r2, [r3, #4]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	799b      	ldrb	r3, [r3, #6]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4413      	add	r3, r2
 800f1a6:	b29b      	uxth	r3, r3
    }
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	79db      	ldrb	r3, [r3, #7]
 800f1c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f1c4:	b2db      	uxtb	r3, r3
    }
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	79db      	ldrb	r3, [r3, #7]
 800f1de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f1e2:	b2db      	uxtb	r3, r3
    }
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	4a05      	ldr	r2, [pc, #20]	; (800f210 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff ff67 	bl	800f0d4 <_ZN8touchgfx4FontD1Ev>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	080292e0 	.word	0x080292e0

0800f214 <_ZN8touchgfx9ConstFontD0Ev>:
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff ffe7 	bl	800f1f0 <_ZN8touchgfx9ConstFontD1Ev>
 800f222:	2118      	movs	r1, #24
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f016 fa9e 	bl	8025766 <_ZdlPvj>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	4a05      	ldr	r2, [pc, #20]	; (800f254 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	601a      	str	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ffd3 	bl	800f1f0 <_ZN8touchgfx9ConstFontD1Ev>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08026fe0 	.word	0x08026fe0

0800f258 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff ffe7 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f266:	2124      	movs	r1, #36	; 0x24
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f016 fa7c 	bl	8025766 <_ZdlPvj>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 f82d 	bl	800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f286:	4b08      	ldr	r3, [pc, #32]	; (800f2a8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	4b08      	ldr	r3, [pc, #32]	; (800f2ac <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f28c:	6819      	ldr	r1, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	005b      	lsls	r3, r3, #1
 800f294:	440b      	add	r3, r1
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	681b      	ldr	r3, [r3, #0]
    }
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	2000bc2c 	.word	0x2000bc2c
 800f2ac:	2000bc24 	.word	0x2000bc24

0800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f811 	bl	800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f2be:	4b07      	ldr	r3, [pc, #28]	; (800f2dc <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	005b      	lsls	r3, r3, #1
 800f2c8:	4413      	add	r3, r2
 800f2ca:	785b      	ldrb	r3, [r3, #1]
 800f2cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f2d0:	b2db      	uxtb	r3, r3
    }
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	2000bc24 	.word	0x2000bc24

0800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f2e8:	4b0c      	ldr	r3, [pc, #48]	; (800f31c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d105      	bne.n	800f2fc <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f2f0:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f2f2:	4a0c      	ldr	r2, [pc, #48]	; (800f324 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f2f4:	21de      	movs	r1, #222	; 0xde
 800f2f6:	480c      	ldr	r0, [pc, #48]	; (800f328 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f2f8:	f016 fa60 	bl	80257bc <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	881a      	ldrh	r2, [r3, #0]
 800f300:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d305      	bcc.n	800f314 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f308:	4b09      	ldr	r3, [pc, #36]	; (800f330 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f30a:	4a06      	ldr	r2, [pc, #24]	; (800f324 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f30c:	21df      	movs	r1, #223	; 0xdf
 800f30e:	4806      	ldr	r0, [pc, #24]	; (800f328 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f310:	f016 fa54 	bl	80257bc <__assert_func>
    }
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	2000bc24 	.word	0x2000bc24
 800f320:	0802686c 	.word	0x0802686c
 800f324:	08026fa8 	.word	0x08026fa8
 800f328:	080268b0 	.word	0x080268b0
 800f32c:	2000bc28 	.word	0x2000bc28
 800f330:	080268f4 	.word	0x080268f4

0800f334 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	7b5b      	ldrb	r3, [r3, #13]
 800f340:	021b      	lsls	r3, r3, #8
 800f342:	b21b      	sxth	r3, r3
 800f344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f348:	b21a      	sxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	7adb      	ldrb	r3, [r3, #11]
 800f34e:	b21b      	sxth	r3, r3
 800f350:	4313      	orrs	r3, r2
 800f352:	b21b      	sxth	r3, r3
 800f354:	b29b      	uxth	r3, r3
    }
 800f356:	4618      	mov	r0, r3
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f362:	b480      	push	{r7}
 800f364:	b083      	sub	sp, #12
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
    }
 800f36e:	4618      	mov	r0, r3
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
	...

0800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b08c      	sub	sp, #48	; 0x30
 800f380:	af08      	add	r7, sp, #32
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	4611      	mov	r1, r2
 800f388:	461a      	mov	r2, r3
 800f38a:	460b      	mov	r3, r1
 800f38c:	80fb      	strh	r3, [r7, #6]
 800f38e:	4613      	mov	r3, r2
 800f390:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	88b9      	ldrh	r1, [r7, #4]
 800f396:	88fa      	ldrh	r2, [r7, #6]
 800f398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f39a:	9306      	str	r3, [sp, #24]
 800f39c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f39e:	9305      	str	r3, [sp, #20]
 800f3a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3a4:	9304      	str	r3, [sp, #16]
 800f3a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3aa:	9303      	str	r3, [sp, #12]
 800f3ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3b0:	9302      	str	r3, [sp, #8]
 800f3b2:	7f3b      	ldrb	r3, [r7, #28]
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	7e3b      	ldrb	r3, [r7, #24]
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	68b9      	ldr	r1, [r7, #8]
 800f3be:	f00a fc4d 	bl	8019c5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f3c2:	4a08      	ldr	r2, [pc, #32]	; (800f3e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	601a      	str	r2, [r3, #0]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3cc:	619a      	str	r2, [r3, #24]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3d2:	61da      	str	r2, [r3, #28]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3d8:	621a      	str	r2, [r3, #32]
{
}
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	08026fe0 	.word	0x08026fe0

0800f3e8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	699b      	ldr	r3, [r3, #24]
 800f3f6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	889b      	ldrh	r3, [r3, #4]
 800f3fc:	0adb      	lsrs	r3, r3, #11
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	4413      	add	r3, r2
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4413      	add	r3, r2
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b086      	sub	sp, #24
 800f41e:	af00      	add	r7, sp, #0
 800f420:	60f8      	str	r0, [r7, #12]
 800f422:	460b      	mov	r3, r1
 800f424:	607a      	str	r2, [r7, #4]
 800f426:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	7b1b      	ldrb	r3, [r3, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f436:	2300      	movs	r3, #0
 800f438:	e023      	b.n	800f482 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff ff7a 	bl	800f334 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f440:	4603      	mov	r3, r0
 800f442:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f444:	8abb      	ldrh	r3, [r7, #20]
 800f446:	82fb      	strh	r3, [r7, #22]
 800f448:	8afa      	ldrh	r2, [r7, #22]
 800f44a:	8abb      	ldrh	r3, [r7, #20]
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	7b09      	ldrb	r1, [r1, #12]
 800f450:	440b      	add	r3, r1
 800f452:	429a      	cmp	r2, r3
 800f454:	da14      	bge.n	800f480 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	69da      	ldr	r2, [r3, #28]
 800f45a:	8afb      	ldrh	r3, [r7, #22]
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	4413      	add	r3, r2
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	897a      	ldrh	r2, [r7, #10]
 800f464:	429a      	cmp	r2, r3
 800f466:	d107      	bne.n	800f478 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	69da      	ldr	r2, [r3, #28]
 800f46c:	8afb      	ldrh	r3, [r7, #22]
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f476:	e004      	b.n	800f482 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f478:	8afb      	ldrh	r3, [r7, #22]
 800f47a:	3301      	adds	r3, #1
 800f47c:	82fb      	strh	r3, [r7, #22]
 800f47e:	e7e3      	b.n	800f448 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f480:	2300      	movs	r3, #0
}
 800f482:	4618      	mov	r0, r3
 800f484:	3718      	adds	r7, #24
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f48c:	b580      	push	{r7, lr}
 800f48e:	af00      	add	r7, sp, #0
 800f490:	4801      	ldr	r0, [pc, #4]	; (800f498 <__tcf_0+0xc>)
 800f492:	f7ff fecf 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f496:	bd80      	pop	{r7, pc}
 800f498:	2000851c 	.word	0x2000851c

0800f49c <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08a      	sub	sp, #40	; 0x28
 800f4a0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f4a2:	4b15      	ldr	r3, [pc, #84]	; (800f4f8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d11f      	bne.n	800f4ee <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	9308      	str	r3, [sp, #32]
 800f4b6:	233f      	movs	r3, #63	; 0x3f
 800f4b8:	9307      	str	r3, [sp, #28]
 800f4ba:	4b10      	ldr	r3, [pc, #64]	; (800f4fc <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f4bc:	9306      	str	r3, [sp, #24]
 800f4be:	4b10      	ldr	r3, [pc, #64]	; (800f500 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f4c0:	9305      	str	r3, [sp, #20]
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	9304      	str	r3, [sp, #16]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	9303      	str	r3, [sp, #12]
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	9302      	str	r3, [sp, #8]
 800f4ce:	2304      	movs	r3, #4
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	230a      	movs	r3, #10
 800f4d8:	2204      	movs	r2, #4
 800f4da:	490a      	ldr	r1, [pc, #40]	; (800f504 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f4dc:	480a      	ldr	r0, [pc, #40]	; (800f508 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f4de:	f7ff ff4d 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4e2:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	4808      	ldr	r0, [pc, #32]	; (800f50c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f4ea:	f016 f985 	bl	80257f8 <atexit>
    return Asap_Bold_10_4bpp;
 800f4ee:	4b06      	ldr	r3, [pc, #24]	; (800f508 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20008540 	.word	0x20008540
 800f4fc:	0802f038 	.word	0x0802f038
 800f500:	0802702c 	.word	0x0802702c
 800f504:	0802f054 	.word	0x0802f054
 800f508:	2000851c 	.word	0x2000851c
 800f50c:	0800f48d 	.word	0x0800f48d

0800f510 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f510:	b580      	push	{r7, lr}
 800f512:	af00      	add	r7, sp, #0
 800f514:	4801      	ldr	r0, [pc, #4]	; (800f51c <__tcf_0+0xc>)
 800f516:	f7ff fe8d 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20008544 	.word	0x20008544

0800f520 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08a      	sub	sp, #40	; 0x28
 800f524:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f526:	4b15      	ldr	r3, [pc, #84]	; (800f57c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d11f      	bne.n	800f572 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f532:	2300      	movs	r3, #0
 800f534:	9309      	str	r3, [sp, #36]	; 0x24
 800f536:	2300      	movs	r3, #0
 800f538:	9308      	str	r3, [sp, #32]
 800f53a:	233f      	movs	r3, #63	; 0x3f
 800f53c:	9307      	str	r3, [sp, #28]
 800f53e:	4b10      	ldr	r3, [pc, #64]	; (800f580 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f540:	9306      	str	r3, [sp, #24]
 800f542:	4b10      	ldr	r3, [pc, #64]	; (800f584 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f544:	9305      	str	r3, [sp, #20]
 800f546:	2301      	movs	r3, #1
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9303      	str	r3, [sp, #12]
 800f54e:	2301      	movs	r3, #1
 800f550:	9302      	str	r3, [sp, #8]
 800f552:	2304      	movs	r3, #4
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	2300      	movs	r3, #0
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	230c      	movs	r3, #12
 800f55c:	221b      	movs	r2, #27
 800f55e:	490a      	ldr	r1, [pc, #40]	; (800f588 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f560:	480a      	ldr	r0, [pc, #40]	; (800f58c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f562:	f7ff ff0b 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f566:	4b05      	ldr	r3, [pc, #20]	; (800f57c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f568:	2201      	movs	r2, #1
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	4808      	ldr	r0, [pc, #32]	; (800f590 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f56e:	f016 f943 	bl	80257f8 <atexit>
    return Asap_Bold_12_4bpp;
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f574:	4618      	mov	r0, r3
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	20008568 	.word	0x20008568
 800f580:	0802f03c 	.word	0x0802f03c
 800f584:	08027030 	.word	0x08027030
 800f588:	0802f08c 	.word	0x0802f08c
 800f58c:	20008544 	.word	0x20008544
 800f590:	0800f511 	.word	0x0800f511

0800f594 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
 800f598:	4801      	ldr	r0, [pc, #4]	; (800f5a0 <__tcf_0+0xc>)
 800f59a:	f7ff fe4b 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	2000856c 	.word	0x2000856c

0800f5a4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08a      	sub	sp, #40	; 0x28
 800f5a8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f5aa:	4b15      	ldr	r3, [pc, #84]	; (800f600 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 0301 	and.w	r3, r3, #1
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d11f      	bne.n	800f5f6 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	9308      	str	r3, [sp, #32]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	9307      	str	r3, [sp, #28]
 800f5c2:	4b10      	ldr	r3, [pc, #64]	; (800f604 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f5c4:	9306      	str	r3, [sp, #24]
 800f5c6:	4b10      	ldr	r3, [pc, #64]	; (800f608 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f5c8:	9305      	str	r3, [sp, #20]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	9304      	str	r3, [sp, #16]
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	9303      	str	r3, [sp, #12]
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	9302      	str	r3, [sp, #8]
 800f5d6:	2304      	movs	r3, #4
 800f5d8:	9301      	str	r3, [sp, #4]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	2312      	movs	r3, #18
 800f5e0:	220d      	movs	r2, #13
 800f5e2:	490a      	ldr	r1, [pc, #40]	; (800f60c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f5e4:	480a      	ldr	r0, [pc, #40]	; (800f610 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f5e6:	f7ff fec9 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f5ea:	4b05      	ldr	r3, [pc, #20]	; (800f600 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	4808      	ldr	r0, [pc, #32]	; (800f614 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f5f2:	f016 f901 	bl	80257f8 <atexit>
    return Asap_Bold_18_4bpp;
 800f5f6:	4b06      	ldr	r3, [pc, #24]	; (800f610 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	20008590 	.word	0x20008590
 800f604:	0802f040 	.word	0x0802f040
 800f608:	08027034 	.word	0x08027034
 800f60c:	0802f208 	.word	0x0802f208
 800f610:	2000856c 	.word	0x2000856c
 800f614:	0800f595 	.word	0x0800f595

0800f618 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f618:	b580      	push	{r7, lr}
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	4801      	ldr	r0, [pc, #4]	; (800f624 <__tcf_0+0xc>)
 800f61e:	f7ff fe09 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f622:	bd80      	pop	{r7, pc}
 800f624:	20008594 	.word	0x20008594

0800f628 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b08a      	sub	sp, #40	; 0x28
 800f62c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f62e:	4b15      	ldr	r3, [pc, #84]	; (800f684 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f003 0301 	and.w	r3, r3, #1
 800f636:	2b00      	cmp	r3, #0
 800f638:	d11f      	bne.n	800f67a <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f63a:	2300      	movs	r3, #0
 800f63c:	9309      	str	r3, [sp, #36]	; 0x24
 800f63e:	2300      	movs	r3, #0
 800f640:	9308      	str	r3, [sp, #32]
 800f642:	233f      	movs	r3, #63	; 0x3f
 800f644:	9307      	str	r3, [sp, #28]
 800f646:	4b10      	ldr	r3, [pc, #64]	; (800f688 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f648:	9306      	str	r3, [sp, #24]
 800f64a:	4b10      	ldr	r3, [pc, #64]	; (800f68c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f64c:	9305      	str	r3, [sp, #20]
 800f64e:	2301      	movs	r3, #1
 800f650:	9304      	str	r3, [sp, #16]
 800f652:	2300      	movs	r3, #0
 800f654:	9303      	str	r3, [sp, #12]
 800f656:	2301      	movs	r3, #1
 800f658:	9302      	str	r3, [sp, #8]
 800f65a:	2304      	movs	r3, #4
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	2300      	movs	r3, #0
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	2315      	movs	r3, #21
 800f664:	220d      	movs	r2, #13
 800f666:	490a      	ldr	r1, [pc, #40]	; (800f690 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f668:	480a      	ldr	r0, [pc, #40]	; (800f694 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f66a:	f7ff fe87 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f670:	2201      	movs	r2, #1
 800f672:	601a      	str	r2, [r3, #0]
 800f674:	4808      	ldr	r0, [pc, #32]	; (800f698 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f676:	f016 f8bf 	bl	80257f8 <atexit>
    return Asap_Bold_21_4bpp;
 800f67a:	4b06      	ldr	r3, [pc, #24]	; (800f694 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	200085b8 	.word	0x200085b8
 800f688:	0802f044 	.word	0x0802f044
 800f68c:	08027038 	.word	0x08027038
 800f690:	0802f2c0 	.word	0x0802f2c0
 800f694:	20008594 	.word	0x20008594
 800f698:	0800f619 	.word	0x0800f619

0800f69c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__tcf_0+0xc>)
 800f6a2:	f7ff fdc7 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	200085bc 	.word	0x200085bc

0800f6ac <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	; 0x28
 800f6b0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f6b2:	4b15      	ldr	r3, [pc, #84]	; (800f708 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f003 0301 	and.w	r3, r3, #1
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d11f      	bne.n	800f6fe <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9308      	str	r3, [sp, #32]
 800f6c6:	233f      	movs	r3, #63	; 0x3f
 800f6c8:	9307      	str	r3, [sp, #28]
 800f6ca:	4b10      	ldr	r3, [pc, #64]	; (800f70c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f6cc:	9306      	str	r3, [sp, #24]
 800f6ce:	4b10      	ldr	r3, [pc, #64]	; (800f710 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f6d0:	9305      	str	r3, [sp, #20]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	9304      	str	r3, [sp, #16]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9303      	str	r3, [sp, #12]
 800f6da:	2301      	movs	r3, #1
 800f6dc:	9302      	str	r3, [sp, #8]
 800f6de:	2304      	movs	r3, #4
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	231e      	movs	r3, #30
 800f6e8:	220c      	movs	r2, #12
 800f6ea:	490a      	ldr	r1, [pc, #40]	; (800f714 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f6ec:	480a      	ldr	r0, [pc, #40]	; (800f718 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f6ee:	f7ff fe45 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f6f2:	4b05      	ldr	r3, [pc, #20]	; (800f708 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]
 800f6f8:	4808      	ldr	r0, [pc, #32]	; (800f71c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f6fa:	f016 f87d 	bl	80257f8 <atexit>
    return Asap_Bold_30_4bpp;
 800f6fe:	4b06      	ldr	r3, [pc, #24]	; (800f718 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f700:	4618      	mov	r0, r3
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	200085e0 	.word	0x200085e0
 800f70c:	0802f048 	.word	0x0802f048
 800f710:	0802703c 	.word	0x0802703c
 800f714:	0802f378 	.word	0x0802f378
 800f718:	200085bc 	.word	0x200085bc
 800f71c:	0800f69d 	.word	0x0800f69d

0800f720 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f720:	b580      	push	{r7, lr}
 800f722:	af00      	add	r7, sp, #0
 800f724:	4801      	ldr	r0, [pc, #4]	; (800f72c <__tcf_0+0xc>)
 800f726:	f7ff fd85 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	200085e4 	.word	0x200085e4

0800f730 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b08a      	sub	sp, #40	; 0x28
 800f734:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f736:	4b15      	ldr	r3, [pc, #84]	; (800f78c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d11f      	bne.n	800f782 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f742:	2300      	movs	r3, #0
 800f744:	9309      	str	r3, [sp, #36]	; 0x24
 800f746:	2300      	movs	r3, #0
 800f748:	9308      	str	r3, [sp, #32]
 800f74a:	233f      	movs	r3, #63	; 0x3f
 800f74c:	9307      	str	r3, [sp, #28]
 800f74e:	4b10      	ldr	r3, [pc, #64]	; (800f790 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f750:	9306      	str	r3, [sp, #24]
 800f752:	4b10      	ldr	r3, [pc, #64]	; (800f794 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	2301      	movs	r3, #1
 800f758:	9304      	str	r3, [sp, #16]
 800f75a:	2300      	movs	r3, #0
 800f75c:	9303      	str	r3, [sp, #12]
 800f75e:	2301      	movs	r3, #1
 800f760:	9302      	str	r3, [sp, #8]
 800f762:	2304      	movs	r3, #4
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	2300      	movs	r3, #0
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	2328      	movs	r3, #40	; 0x28
 800f76c:	220d      	movs	r2, #13
 800f76e:	490a      	ldr	r1, [pc, #40]	; (800f798 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f770:	480a      	ldr	r0, [pc, #40]	; (800f79c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f772:	f7ff fe03 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f776:	4b05      	ldr	r3, [pc, #20]	; (800f78c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f778:	2201      	movs	r2, #1
 800f77a:	601a      	str	r2, [r3, #0]
 800f77c:	4808      	ldr	r0, [pc, #32]	; (800f7a0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f77e:	f016 f83b 	bl	80257f8 <atexit>
    return Asap_Bold_40_4bpp;
 800f782:	4b06      	ldr	r3, [pc, #24]	; (800f79c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f784:	4618      	mov	r0, r3
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20008608 	.word	0x20008608
 800f790:	0802f04c 	.word	0x0802f04c
 800f794:	08027040 	.word	0x08027040
 800f798:	0802f420 	.word	0x0802f420
 800f79c:	200085e4 	.word	0x200085e4
 800f7a0:	0800f721 	.word	0x0800f721

0800f7a4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	4801      	ldr	r0, [pc, #4]	; (800f7b0 <__tcf_0+0xc>)
 800f7aa:	f7ff fd43 	bl	800f234 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	2000860c 	.word	0x2000860c

0800f7b4 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08a      	sub	sp, #40	; 0x28
 800f7b8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7ba:	4b15      	ldr	r3, [pc, #84]	; (800f810 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f003 0301 	and.w	r3, r3, #1
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d11f      	bne.n	800f806 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	9308      	str	r3, [sp, #32]
 800f7ce:	233f      	movs	r3, #63	; 0x3f
 800f7d0:	9307      	str	r3, [sp, #28]
 800f7d2:	4b10      	ldr	r3, [pc, #64]	; (800f814 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f7d4:	9306      	str	r3, [sp, #24]
 800f7d6:	4b10      	ldr	r3, [pc, #64]	; (800f818 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	2300      	movs	r3, #0
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	9303      	str	r3, [sp, #12]
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	9302      	str	r3, [sp, #8]
 800f7e6:	2304      	movs	r3, #4
 800f7e8:	9301      	str	r3, [sp, #4]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	233c      	movs	r3, #60	; 0x3c
 800f7f0:	220c      	movs	r2, #12
 800f7f2:	490a      	ldr	r1, [pc, #40]	; (800f81c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f7f4:	480a      	ldr	r0, [pc, #40]	; (800f820 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f7f6:	f7ff fdc1 	bl	800f37c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f7fa:	4b05      	ldr	r3, [pc, #20]	; (800f810 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	601a      	str	r2, [r3, #0]
 800f800:	4808      	ldr	r0, [pc, #32]	; (800f824 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f802:	f015 fff9 	bl	80257f8 <atexit>
    return Asap_Bold_60_4bpp;
 800f806:	4b06      	ldr	r3, [pc, #24]	; (800f820 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f808:	4618      	mov	r0, r3
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20008630 	.word	0x20008630
 800f814:	0802f050 	.word	0x0802f050
 800f818:	08027044 	.word	0x08027044
 800f81c:	0802f4d8 	.word	0x0802f4d8
 800f820:	2000860c 	.word	0x2000860c
 800f824:	0800f7a5 	.word	0x0800f7a5

0800f828 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr

0800f840 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
    {
    }
 800f84a:	bf00      	nop
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f856:	b480      	push	{r7}
 800f858:	b083      	sub	sp, #12
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	6039      	str	r1, [r7, #0]
    {
    }
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
    {
    }
 800f876:	bf00      	nop
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	460b      	mov	r3, r1
 800f88c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f88e:	bf00      	nop
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
    {
    }
 800f8a2:	bf00      	nop
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f8ae:	b480      	push	{r7}
 800f8b0:	b083      	sub	sp, #12
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
    {
    }
 800f8b6:	bf00      	nop
 800f8b8:	370c      	adds	r7, #12
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
	...

0800f8c4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
    {
 800f8cc:	4a04      	ldr	r2, [pc, #16]	; (800f8e0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]
    }
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	08027138 	.word	0x08027138

0800f8e4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
    }
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff ffe9 	bl	800f8c4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f8f2:	2104      	movs	r1, #4
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f015 ff36 	bl	8025766 <_ZdlPvj>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f90c:	4a07      	ldr	r2, [pc, #28]	; (800f92c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	605a      	str	r2, [r3, #4]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	08027118 	.word	0x08027118

0800f930 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    {
 800f938:	4a04      	ldr	r2, [pc, #16]	; (800f94c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	601a      	str	r2, [r3, #0]
    }
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	08027118 	.word	0x08027118

0800f950 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
    }
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff ffe9 	bl	800f930 <_ZN8touchgfx10TransitionD1Ev>
 800f95e:	210c      	movs	r1, #12
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f015 ff00 	bl	8025766 <_ZdlPvj>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	bf00      	nop
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	bf00      	nop
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	605a      	str	r2, [r3, #4]
    }
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f9d4:	bf00      	nop
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
    {
 800f9e8:	4a04      	ldr	r2, [pc, #16]	; (800f9fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	601a      	str	r2, [r3, #0]
    }
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	08027100 	.word	0x08027100

0800fa00 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    }
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ffe9 	bl	800f9e0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa0e:	2104      	movs	r1, #4
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f015 fea8 	bl	8025766 <_ZdlPvj>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fa20:	b480      	push	{r7}
 800fa22:	af00      	add	r7, sp, #0
    {
        return instance;
 800fa24:	4b03      	ldr	r3, [pc, #12]	; (800fa34 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fa26:	681b      	ldr	r3, [r3, #0]
    }
 800fa28:	4618      	mov	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	2000bb94 	.word	0x2000bb94

0800fa38 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa38:	b480      	push	{r7}
 800fa3a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa3c:	4b0b      	ldr	r3, [pc, #44]	; (800fa6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d008      	beq.n	800fa5a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa48:	4b08      	ldr	r3, [pc, #32]	; (800fa6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa52:	4b06      	ldr	r3, [pc, #24]	; (800fa6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa58:	e002      	b.n	800fa60 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fa5a:	4b04      	ldr	r3, [pc, #16]	; (800fa6c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fa60:	4618      	mov	r0, r3
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	2000bb94 	.word	0x2000bb94

0800fa70 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	4a05      	ldr	r2, [pc, #20]	; (800fa90 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff ff1f 	bl	800f8c4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	08029140 	.word	0x08029140

0800fa94 <_ZN8touchgfx11ApplicationD0Ev>:
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff ffe7 	bl	800fa70 <_ZN8touchgfx11ApplicationD1Ev>
 800faa2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f015 fe5d 	bl	8025766 <_ZdlPvj>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f009 fbdc 	bl	8019280 <_ZN8touchgfx11ApplicationC1Ev>
 800fac8:	4a09      	ldr	r2, [pc, #36]	; (800faf0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a04      	ldr	r2, [pc, #16]	; (800faf4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fae2:	6013      	str	r3, [r2, #0]
    }
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	080270c4 	.word	0x080270c4
 800faf4:	2000bc20 	.word	0x2000bc20

0800faf8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff ffb1 	bl	800fa70 <_ZN8touchgfx11ApplicationD1Ev>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	080270c4 	.word	0x080270c4

0800fb1c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ffe7 	bl	800faf8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fb2a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f015 fe19 	bl	8025766 <_ZdlPvj>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b082      	sub	sp, #8
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f804 	bl	800fb54 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fb4c:	bf00      	nop
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00f      	beq.n	800fb86 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	330c      	adds	r3, #12
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4610      	mov	r0, r2
 800fb7a:	4798      	blx	r3
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e000      	b.n	800fb88 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fb86:	2300      	movs	r3, #0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00e      	beq.n	800fbaa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3308      	adds	r3, #8
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4610      	mov	r0, r2
 800fba0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b084      	sub	sp, #16
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800fbbe:	f009 fb3d 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f009 fb3f 	bl	8019248 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d008      	beq.n	800fbe4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	330c      	adds	r3, #12
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	4798      	blx	r3
    }
    if (*currentTrans)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d007      	beq.n	800fbfc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	4798      	blx	r3
    }
    if (*currentScreen)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d008      	beq.n	800fc16 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	3314      	adds	r3, #20
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4610      	mov	r0, r2
 800fc14:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3304      	adds	r3, #4
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4610      	mov	r0, r2
 800fc2e:	4798      	blx	r3
    }
    if (*currentScreen)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d007      	beq.n	800fc48 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4610      	mov	r0, r2
 800fc46:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d008      	beq.n	800fc62 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4610      	mov	r0, r2
 800fc60:	4798      	blx	r3
    }
}
 800fc62:	bf00      	nop
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	330c      	adds	r3, #12
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	4798      	blx	r3
    newPresenter->activate();
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68b8      	ldr	r0, [r7, #8]
 800fc8a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f00a fc0c 	bl	801a4ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3310      	adds	r3, #16
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	4798      	blx	r3

    Application::getInstance()->draw();
 800fca0:	f009 facc 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 800fca4:	4602      	mov	r2, r0
 800fca6:	6813      	ldr	r3, [r2, #0]
 800fca8:	3328      	adds	r3, #40	; 0x28
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4610      	mov	r0, r2
 800fcae:	4798      	blx	r3
}
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	601a      	str	r2, [r3, #0]
    }
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	4a08      	ldr	r2, [pc, #32]	; (800fd00 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fce8:	4618      	mov	r0, r3
 800fcea:	f000 fa5f 	bl	80101ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff ff01 	bl	800faf8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	08027070 	.word	0x08027070

0800fd04 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7ff ffe1 	bl	800fcd4 <_ZN23FrontendApplicationBaseD1Ev>
 800fd12:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f015 fd25 	bl	8025766 <_ZdlPvj>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
	...

0800fd28 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff fde6 	bl	800f904 <_ZN8touchgfx10TransitionC1Ev>
 800fd38:	4a03      	ldr	r2, [pc, #12]	; (800fd48 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	08027050 	.word	0x08027050

0800fd4c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	4a05      	ldr	r2, [pc, #20]	; (800fd6c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff fde7 	bl	800f930 <_ZN8touchgfx10TransitionD1Ev>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	08027050 	.word	0x08027050

0800fd70 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff ffe7 	bl	800fd4c <_ZN8touchgfx12NoTransitionD1Ev>
 800fd7e:	210c      	movs	r1, #12
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f015 fcf0 	bl	8025766 <_ZdlPvj>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	721a      	strb	r2, [r3, #8]
    }
 800fd9e:	bf00      	nop
 800fda0:	370c      	adds	r7, #12
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr

0800fdaa <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fdaa:	b480      	push	{r7}
 800fdac:	b083      	sub	sp, #12
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
 800fdb2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	683a      	ldr	r2, [r7, #0]
 800fdb8:	605a      	str	r2, [r3, #4]
    }
 800fdba:	bf00      	nop
 800fdbc:	370c      	adds	r7, #12
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff fe6e 	bl	800fab8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fddc:	4a13      	ldr	r2, [pc, #76]	; (800fe2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f89f 	bl	800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fdfe:	f7ff fe0f 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe02:	4602      	mov	r2, r0
 800fe04:	6813      	ldr	r3, [r2, #0]
 800fe06:	3308      	adds	r3, #8
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fe10:	2000      	movs	r0, #0
 800fe12:	f002 fb81 	bl	8012518 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fe16:	f7ff fe0f 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f00f f9b0 	bl	801f182 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	4618      	mov	r0, r3
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	08027070 	.word	0x08027070

0800fe30 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	370c      	adds	r7, #12
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	4611      	mov	r1, r2
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff ffe9 	bl	800fe30 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	605a      	str	r2, [r3, #4]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	3208      	adds	r2, #8
 800fe6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe72:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fe80:	b590      	push	{r4, r7, lr}
 800fe82:	b089      	sub	sp, #36	; 0x24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fe8e:	4b10      	ldr	r3, [pc, #64]	; (800fed0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fe90:	61bb      	str	r3, [r7, #24]
 800fe92:	2300      	movs	r3, #0
 800fe94:	61fb      	str	r3, [r7, #28]
 800fe96:	f107 0008 	add.w	r0, r7, #8
 800fe9a:	f107 0318 	add.w	r3, r7, #24
 800fe9e:	cb0c      	ldmia	r3, {r2, r3}
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	f000 f85f 	bl	800ff64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fea6:	f107 0308 	add.w	r3, r7, #8
 800feaa:	4619      	mov	r1, r3
 800feac:	4620      	mov	r0, r4
 800feae:	f7ff ffcb 	bl	800fe48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800feb2:	f107 0308 	add.w	r3, r7, #8
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 f978 	bl	80101ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fec8:	bf00      	nop
 800feca:	3724      	adds	r7, #36	; 0x24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd90      	pop	{r4, r7, pc}
 800fed0:	0800fed5 	.word	0x0800fed5

0800fed4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af02      	add	r7, sp, #8
 800feda:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fee8:	461a      	mov	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	4b04      	ldr	r3, [pc, #16]	; (800ff04 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fef4:	4804      	ldr	r0, [pc, #16]	; (800ff08 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fef6:	f000 f855 	bl	800ffa4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	2000bc14 	.word	0x2000bc14
 800ff08:	2000bc10 	.word	0x2000bc10

0800ff0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	4a04      	ldr	r2, [pc, #16]	; (800ff28 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr
 800ff28:	08027100 	.word	0x08027100

0800ff2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff ffe8 	bl	800ff0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff3c:	4a08      	ldr	r2, [pc, #32]	; (800ff60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	605a      	str	r2, [r3, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	609a      	str	r2, [r3, #8]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	60da      	str	r2, [r3, #12]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	080270ac 	.word	0x080270ac

0800ff64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	4639      	mov	r1, r7
 800ff70:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff ffc8 	bl	800ff0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff7c:	4a08      	ldr	r2, [pc, #32]	; (800ffa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	3308      	adds	r3, #8
 800ff8c:	463a      	mov	r2, r7
 800ff8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff92:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	080270ac 	.word	0x080270ac

0800ffa4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffa4:	b590      	push	{r4, r7, lr}
 800ffa6:	b089      	sub	sp, #36	; 0x24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	689a      	ldr	r2, [r3, #8]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3320      	adds	r3, #32
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	f242 6317 	movw	r3, #9751	; 0x2617
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d805      	bhi.n	800ffda <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ffce:	4b4e      	ldr	r3, [pc, #312]	; (8010108 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ffd0:	4a4e      	ldr	r2, [pc, #312]	; (801010c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ffd2:	21c2      	movs	r1, #194	; 0xc2
 800ffd4:	484e      	ldr	r0, [pc, #312]	; (8010110 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ffd6:	f015 fbf1 	bl	80257bc <__assert_func>
 800ffda:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685a      	ldr	r2, [r3, #4]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3320      	adds	r3, #32
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4610      	mov	r0, r2
 800ffec:	4798      	blx	r3
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b0f      	cmp	r3, #15
 800fff2:	d805      	bhi.n	8010000 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fff4:	4b47      	ldr	r3, [pc, #284]	; (8010114 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fff6:	4a45      	ldr	r2, [pc, #276]	; (801010c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fff8:	21c3      	movs	r1, #195	; 0xc3
 800fffa:	4845      	ldr	r0, [pc, #276]	; (8010110 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fffc:	f015 fbde 	bl	80257bc <__assert_func>
 8010000:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	68da      	ldr	r2, [r3, #12]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	3320      	adds	r3, #32
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4610      	mov	r0, r2
 8010012:	4798      	blx	r3
 8010014:	4603      	mov	r3, r0
 8010016:	2b0b      	cmp	r3, #11
 8010018:	d805      	bhi.n	8010026 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801001a:	4b3f      	ldr	r3, [pc, #252]	; (8010118 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801001c:	4a3b      	ldr	r2, [pc, #236]	; (801010c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801001e:	21c4      	movs	r1, #196	; 0xc4
 8010020:	483b      	ldr	r0, [pc, #236]	; (8010110 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010022:	f015 fbcb 	bl	80257bc <__assert_func>
 8010026:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7ff fdc0 	bl	800fbb2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	2100      	movs	r1, #0
 8010038:	4618      	mov	r0, r3
 801003a:	f000 f86f 	bl	801011c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801003e:	4603      	mov	r3, r0
 8010040:	4619      	mov	r1, r3
 8010042:	200c      	movs	r0, #12
 8010044:	f7ff fbf0 	bl	800f828 <_ZnwjPv>
 8010048:	4604      	mov	r4, r0
 801004a:	2c00      	cmp	r4, #0
 801004c:	d004      	beq.n	8010058 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801004e:	4620      	mov	r0, r4
 8010050:	f7ff fe6a 	bl	800fd28 <_ZN8touchgfx12NoTransitionC1Ev>
 8010054:	4623      	mov	r3, r4
 8010056:	e000      	b.n	801005a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8010058:	4623      	mov	r3, r4
 801005a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	2100      	movs	r1, #0
 8010062:	4618      	mov	r0, r3
 8010064:	f000 f86d 	bl	8010142 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8010068:	4603      	mov	r3, r0
 801006a:	4619      	mov	r1, r3
 801006c:	f242 6018 	movw	r0, #9752	; 0x2618
 8010070:	f7ff fbda 	bl	800f828 <_ZnwjPv>
 8010074:	4604      	mov	r4, r0
 8010076:	2c00      	cmp	r4, #0
 8010078:	d004      	beq.n	8010084 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801007a:	4620      	mov	r0, r4
 801007c:	f002 fcd4 	bl	8012a28 <_ZN8MainViewC1Ev>
 8010080:	4623      	mov	r3, r4
 8010082:	e000      	b.n	8010086 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8010084:	4623      	mov	r3, r4
 8010086:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	2100      	movs	r1, #0
 801008e:	4618      	mov	r0, r3
 8010090:	f000 f86a 	bl	8010168 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8010094:	4603      	mov	r3, r0
 8010096:	4619      	mov	r1, r3
 8010098:	2010      	movs	r0, #16
 801009a:	f7ff fbc5 	bl	800f828 <_ZnwjPv>
 801009e:	4604      	mov	r4, r0
 80100a0:	2c00      	cmp	r4, #0
 80100a2:	d005      	beq.n	80100b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80100a4:	69b9      	ldr	r1, [r7, #24]
 80100a6:	4620      	mov	r0, r4
 80100a8:	f002 fc04 	bl	80128b4 <_ZN13MainPresenterC1ER8MainView>
 80100ac:	4623      	mov	r3, r4
 80100ae:	e000      	b.n	80100b2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80100b0:	4623      	mov	r3, r4
 80100b2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	69fa      	ldr	r2, [r7, #28]
 80100b8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d002      	beq.n	80100d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	3304      	adds	r3, #4
 80100d0:	e000      	b.n	80100d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80100d2:	2300      	movs	r3, #0
 80100d4:	4619      	mov	r1, r3
 80100d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100d8:	f7ff fdee 	bl	800fcb8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	3304      	adds	r3, #4
 80100e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff fe61 	bl	800fdaa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	6979      	ldr	r1, [r7, #20]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 f84e 	bl	801018e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80100f2:	69fa      	ldr	r2, [r7, #28]
 80100f4:	6979      	ldr	r1, [r7, #20]
 80100f6:	69b8      	ldr	r0, [r7, #24]
 80100f8:	f7ff fdb7 	bl	800fc6a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80100fc:	697b      	ldr	r3, [r7, #20]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3724      	adds	r7, #36	; 0x24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd90      	pop	{r4, r7, pc}
 8010106:	bf00      	nop
 8010108:	08026948 	.word	0x08026948
 801010c:	08027158 	.word	0x08027158
 8010110:	080269d8 	.word	0x080269d8
 8010114:	08026a1c 	.word	0x08026a1c
 8010118:	08026ac0 	.word	0x08026ac0

0801011c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	460b      	mov	r3, r1
 8010126:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3324      	adds	r3, #36	; 0x24
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	887a      	ldrh	r2, [r7, #2]
 8010132:	4611      	mov	r1, r2
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	4798      	blx	r3
 8010138:	4603      	mov	r3, r0
    }
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	460b      	mov	r3, r1
 801014c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3324      	adds	r3, #36	; 0x24
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	887a      	ldrh	r2, [r7, #2]
 8010158:	4611      	mov	r1, r2
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	4798      	blx	r3
 801015e:	4603      	mov	r3, r0
    }
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3324      	adds	r3, #36	; 0x24
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	887a      	ldrh	r2, [r7, #2]
 801017e:	4611      	mov	r1, r2
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	4798      	blx	r3
 8010184:	4603      	mov	r3, r0
    }
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801019e:	bf00      	nop
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
	...

080101ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	4a05      	ldr	r2, [pc, #20]	; (80101cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fc0f 	bl	800f9e0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4618      	mov	r0, r3
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	080270ac 	.word	0x080270ac

080101d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7ff ffe7 	bl	80101ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80101de:	2110      	movs	r1, #16
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f015 fac0 	bl	8025766 <_ZdlPvj>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	68d2      	ldr	r2, [r2, #12]
 8010200:	1052      	asrs	r2, r2, #1
 8010202:	1899      	adds	r1, r3, r2
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	d102      	bne.n	8010216 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	e00a      	b.n	801022c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	68d2      	ldr	r2, [r2, #12]
 801021e:	1052      	asrs	r2, r2, #1
 8010220:	4413      	add	r3, r2
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	6892      	ldr	r2, [r2, #8]
 8010228:	4413      	add	r3, r2
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4608      	mov	r0, r1
 801022e:	4798      	blx	r3
    }
 8010230:	bf00      	nop
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d010      	beq.n	801026a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d107      	bne.n	8010260 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d101      	bne.n	8010260 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801025c:	2301      	movs	r3, #1
 801025e:	e000      	b.n	8010262 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010260:	2300      	movs	r3, #0
 8010262:	2b01      	cmp	r3, #1
 8010264:	d001      	beq.n	801026a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801026a:	2300      	movs	r3, #0
    }
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	601a      	str	r2, [r3, #0]
    }
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4618      	mov	r0, r3
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010296:	b480      	push	{r7}
 8010298:	b083      	sub	sp, #12
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	80da      	strh	r2, [r3, #6]
    }
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	4608      	mov	r0, r1
 80102ce:	4611      	mov	r1, r2
 80102d0:	461a      	mov	r2, r3
 80102d2:	4603      	mov	r3, r0
 80102d4:	817b      	strh	r3, [r7, #10]
 80102d6:	460b      	mov	r3, r1
 80102d8:	813b      	strh	r3, [r7, #8]
 80102da:	4613      	mov	r3, r2
 80102dc:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	897a      	ldrh	r2, [r7, #10]
 80102e2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	893a      	ldrh	r2, [r7, #8]
 80102e8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	88fa      	ldrh	r2, [r7, #6]
 80102ee:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8b3a      	ldrh	r2, [r7, #24]
 80102f4:	80da      	strh	r2, [r3, #6]
    }
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	4618      	mov	r0, r3
 80102fa:	3714      	adds	r7, #20
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	887a      	ldrh	r2, [r7, #2]
 8010314:	801a      	strh	r2, [r3, #0]
    {
    }
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af02      	add	r7, sp, #8
 801032a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 801032c:	4a13      	ldr	r2, [pc, #76]	; (801037c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	601a      	str	r2, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	1d18      	adds	r0, r3, #4
 8010336:	2300      	movs	r3, #0
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	2300      	movs	r3, #0
 801033c:	2200      	movs	r2, #0
 801033e:	2100      	movs	r1, #0
 8010340:	f7ff ffc0 	bl	80102c4 <_ZN8touchgfx4RectC1Essss>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	330c      	adds	r3, #12
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff ffa4 	bl	8010296 <_ZN8touchgfx4RectC1Ev>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	615a      	str	r2, [r3, #20]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	619a      	str	r2, [r3, #24]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	61da      	str	r2, [r3, #28]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	08029278 	.word	0x08029278

08010380 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	4a04      	ldr	r2, [pc, #16]	; (801039c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	08029278 	.word	0x08029278

080103a0 <_ZN8touchgfx8DrawableD0Ev>:
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff ffe9 	bl	8010380 <_ZN8touchgfx8DrawableD1Ev>
 80103ae:	2128      	movs	r1, #40	; 0x28
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f015 f9d8 	bl	8025766 <_ZdlPvj>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	4608      	mov	r0, r1
 80103ca:	4611      	mov	r1, r2
 80103cc:	461a      	mov	r2, r3
 80103ce:	4603      	mov	r3, r0
 80103d0:	817b      	strh	r3, [r7, #10]
 80103d2:	460b      	mov	r3, r1
 80103d4:	813b      	strh	r3, [r7, #8]
 80103d6:	4613      	mov	r3, r2
 80103d8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	3334      	adds	r3, #52	; 0x34
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80103e6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	4798      	blx	r3
        setWidth(width);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3338      	adds	r3, #56	; 0x38
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80103fa:	4611      	mov	r1, r2
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	4798      	blx	r3
        setHeight(height);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	333c      	adds	r3, #60	; 0x3c
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801040c:	4611      	mov	r1, r2
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	4798      	blx	r3
    }
 8010412:	bf00      	nop
 8010414:	3710      	adds	r7, #16
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801041a:	b480      	push	{r7}
 801041c:	b083      	sub	sp, #12
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	460b      	mov	r3, r1
 8010424:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	887a      	ldrh	r2, [r7, #2]
 801042a:	809a      	strh	r2, [r3, #4]
    }
 801042c:	bf00      	nop
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	460b      	mov	r3, r1
 8010442:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	887a      	ldrh	r2, [r7, #2]
 8010448:	80da      	strh	r2, [r3, #6]
    }
 801044a:	bf00      	nop
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	460b      	mov	r3, r1
 8010460:	807b      	strh	r3, [r7, #2]
 8010462:	4613      	mov	r3, r2
 8010464:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	332c      	adds	r3, #44	; 0x2c
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010472:	4611      	mov	r1, r2
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	4798      	blx	r3
        setY(y);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	3330      	adds	r3, #48	; 0x30
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010484:	4611      	mov	r1, r2
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	4798      	blx	r3
    }
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	460b      	mov	r3, r1
 801049c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	887a      	ldrh	r2, [r7, #2]
 80104a2:	811a      	strh	r2, [r3, #8]
    }
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	887a      	ldrh	r2, [r7, #2]
 80104c0:	815a      	strh	r2, [r3, #10]
    }
 80104c2:	bf00      	nop
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80104ce:	b480      	push	{r7}
 80104d0:	b083      	sub	sp, #12
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	bf00      	nop
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80104e2:	b480      	push	{r7}
 80104e4:	b083      	sub	sp, #12
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	6039      	str	r1, [r7, #0]
 80104ec:	bf00      	nop
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
 8010502:	bf00      	nop
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	6039      	str	r1, [r7, #0]
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	bf00      	nop
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	78fa      	ldrb	r2, [r7, #3]
 8010548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010566:	4618      	mov	r0, r3
 8010568:	370c      	adds	r7, #12
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010572:	b480      	push	{r7}
 8010574:	b083      	sub	sp, #12
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010580:	4618      	mov	r0, r3
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	460b      	mov	r3, r1
 8010596:	807b      	strh	r3, [r7, #2]
 8010598:	4613      	mov	r3, r2
 801059a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3354      	adds	r3, #84	; 0x54
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	8879      	ldrh	r1, [r7, #2]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80105ac:	b292      	uxth	r2, r2
 80105ae:	1a8a      	subs	r2, r1, r2
 80105b0:	b292      	uxth	r2, r2
 80105b2:	b210      	sxth	r0, r2
 80105b4:	8839      	ldrh	r1, [r7, #0]
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80105bc:	b292      	uxth	r2, r2
 80105be:	1a8a      	subs	r2, r1, r2
 80105c0:	b292      	uxth	r2, r2
 80105c2:	b212      	sxth	r2, r2
 80105c4:	4601      	mov	r1, r0
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	4798      	blx	r3
    }
 80105ca:	bf00      	nop
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80105d2:	b480      	push	{r7}
 80105d4:	b083      	sub	sp, #12
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105e0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105e8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105f0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80105f2:	bf00      	nop
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	60b9      	str	r1, [r7, #8]
 8010608:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7ff ffe1 	bl	80105d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	601a      	str	r2, [r3, #0]
    }
 801061e:	bf00      	nop
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	4a05      	ldr	r2, [pc, #20]	; (8010648 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff fea1 	bl	8010380 <_ZN8touchgfx8DrawableD1Ev>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	08028044 	.word	0x08028044

0801064c <_ZN8touchgfx9ContainerD0Ev>:
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ffe7 	bl	8010628 <_ZN8touchgfx9ContainerD1Ev>
 801065a:	212c      	movs	r1, #44	; 0x2c
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f015 f882 	bl	8025766 <_ZdlPvj>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4618      	mov	r0, r3
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	4a06      	ldr	r2, [pc, #24]	; (8010690 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	3304      	adds	r3, #4
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff ffd2 	bl	8010628 <_ZN8touchgfx9ContainerD1Ev>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4618      	mov	r0, r3
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	08029370 	.word	0x08029370

08010694 <_ZN8touchgfx6ScreenD0Ev>:
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff ffe5 	bl	801066c <_ZN8touchgfx6ScreenD1Ev>
 80106a2:	213c      	movs	r1, #60	; 0x3c
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f015 f85e 	bl	8025766 <_ZdlPvj>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	bf00      	nop
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
    {
    }
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	460b      	mov	r3, r1
 801070e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3304      	adds	r3, #4
 801072a:	6839      	ldr	r1, [r7, #0]
 801072c:	4618      	mov	r0, r3
 801072e:	f004 ff7f 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010732:	bf00      	nop
 8010734:	3708      	adds	r7, #8
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
	...

0801073c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff fdec 	bl	8010324 <_ZN8touchgfx8DrawableC1Ev>
 801074c:	4a03      	ldr	r2, [pc, #12]	; (801075c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	08027344 	.word	0x08027344

08010760 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	4a05      	ldr	r2, [pc, #20]	; (8010780 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff fe05 	bl	8010380 <_ZN8touchgfx8DrawableD1Ev>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	08027344 	.word	0x08027344

08010784 <_ZN8touchgfx6WidgetD0Ev>:
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f7ff ffe7 	bl	8010760 <_ZN8touchgfx6WidgetD1Ev>
 8010792:	2128      	movs	r1, #40	; 0x28
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f014 ffe6 	bl	8025766 <_ZdlPvj>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	460b      	mov	r3, r1
 80107b0:	817b      	strh	r3, [r7, #10]
 80107b2:	4613      	mov	r3, r2
 80107b4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7ff fecd 	bl	8010558 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d008      	beq.n	80107d6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff fed3 	bl	8010572 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80107d2:	2301      	movs	r3, #1
 80107d4:	e000      	b.n	80107d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80107d6:	2300      	movs	r3, #0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	601a      	str	r2, [r3, #0]
        }
    }
 80107e2:	bf00      	nop
 80107e4:	3710      	adds	r7, #16
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
	...

080107ec <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff ffa0 	bl	801073c <_ZN8touchgfx6WidgetC1Ev>
 80107fc:	4a0a      	ldr	r2, [pc, #40]	; (8010828 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	22ff      	movs	r2, #255	; 0xff
 8010806:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	3328      	adds	r3, #40	; 0x28
 801080e:	2100      	movs	r1, #0
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff fd31 	bl	8010278 <_ZN8touchgfx9colortypeC1Em>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08028d7c 	.word	0x08028d7c

0801082c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	4a05      	ldr	r2, [pc, #20]	; (801084c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4618      	mov	r0, r3
 801083e:	f7ff ff8f 	bl	8010760 <_ZN8touchgfx6WidgetD1Ev>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	08028d7c 	.word	0x08028d7c

08010850 <_ZN8touchgfx3BoxD0Ev>:
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff ffe7 	bl	801082c <_ZN8touchgfx3BoxD1Ev>
 801085e:	2130      	movs	r1, #48	; 0x30
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f014 ff80 	bl	8025766 <_ZdlPvj>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4618      	mov	r0, r3
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	683a      	ldr	r2, [r7, #0]
 801087e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010880:	bf00      	nop
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	460b      	mov	r3, r1
 8010896:	807b      	strh	r3, [r7, #2]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	887a      	ldrh	r2, [r7, #2]
 801089c:	801a      	strh	r2, [r3, #0]
    }
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
        assertValid();
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7fe fd13 	bl	800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 80108ba:	4b06      	ldr	r3, [pc, #24]	; (80108d4 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	881b      	ldrh	r3, [r3, #0]
 80108c2:	4619      	mov	r1, r3
 80108c4:	4610      	mov	r0, r2
 80108c6:	f001 fe7d 	bl	80125c4 <_ZNK8touchgfx5Texts7getTextEt>
 80108ca:	4603      	mov	r3, r0
    }
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000bc30 	.word	0x2000bc30

080108d8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff ff2a 	bl	801073c <_ZN8touchgfx6WidgetC1Ev>
 80108e8:	4a13      	ldr	r2, [pc, #76]	; (8010938 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3326      	adds	r3, #38	; 0x26
 80108f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7ff ffc8 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	3328      	adds	r3, #40	; 0x28
 8010900:	2100      	movs	r1, #0
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff fcb8 	bl	8010278 <_ZN8touchgfx9colortypeC1Em>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	22ff      	movs	r2, #255	; 0xff
 8010912:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2200      	movs	r2, #0
 801091a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2200      	movs	r2, #0
 801092a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	08028d00 	.word	0x08028d00

0801093c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af02      	add	r7, sp, #8
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010946:	2300      	movs	r3, #0
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	2300      	movs	r3, #0
 801094c:	2200      	movs	r2, #0
 801094e:	2100      	movs	r1, #0
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7ff fcb7 	bl	80102c4 <_ZN8touchgfx4RectC1Essss>
    }
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801095e:	b480      	push	{r7}
 8010960:	b083      	sub	sp, #12
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
 8010966:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801096e:	bf00      	nop
 8010970:	370c      	adds	r7, #12
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr

0801097a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 801097a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801097c:	b085      	sub	sp, #20
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	460b      	mov	r3, r1
 8010984:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010986:	687e      	ldr	r6, [r7, #4]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3330      	adds	r3, #48	; 0x30
 801098e:	681c      	ldr	r4, [r3, #0]
 8010990:	887d      	ldrh	r5, [r7, #2]
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f845 	bl	8010a22 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010998:	4603      	mov	r3, r0
 801099a:	81bb      	strh	r3, [r7, #12]
 801099c:	f107 030c 	add.w	r3, r7, #12
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fe fc69 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 80109a6:	4602      	mov	r2, r0
 80109a8:	6813      	ldr	r3, [r2, #0]
 80109aa:	332c      	adds	r3, #44	; 0x2c
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4610      	mov	r0, r2
 80109b0:	4798      	blx	r3
 80109b2:	4603      	mov	r3, r0
 80109b4:	1aeb      	subs	r3, r5, r3
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	b21b      	sxth	r3, r3
 80109ba:	4619      	mov	r1, r3
 80109bc:	4630      	mov	r0, r6
 80109be:	47a0      	blx	r4
    }
 80109c0:	bf00      	nop
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109c8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	807b      	strh	r3, [r7, #2]
 80109d4:	4613      	mov	r3, r2
 80109d6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	332c      	adds	r3, #44	; 0x2c
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80109e6:	4610      	mov	r0, r2
 80109e8:	4798      	blx	r3
        setBaselineY(baselineY);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3360      	adds	r3, #96	; 0x60
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80109f6:	4611      	mov	r1, r2
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	4798      	blx	r3
    }
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	887a      	ldrh	r2, [r7, #2]
 8010a14:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010a16:	bf00      	nop
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010a22:	b480      	push	{r7}
 8010a24:	b083      	sub	sp, #12
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010a2e:	4618      	mov	r0, r3
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
	...

08010a3c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	4a05      	ldr	r2, [pc, #20]	; (8010a5c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7ff fe87 	bl	8010760 <_ZN8touchgfx6WidgetD1Ev>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08028d00 	.word	0x08028d00

08010a60 <_ZN8touchgfx8TextAreaD0Ev>:
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff ffe7 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010a6e:	2134      	movs	r1, #52	; 0x34
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f014 fe78 	bl	8025766 <_ZdlPvj>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ff24 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8010a90:	4a03      	ldr	r2, [pc, #12]	; (8010aa0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]
    {
    }
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	080272c8 	.word	0x080272c8

08010aa4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	4a05      	ldr	r2, [pc, #20]	; (8010ac4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff ffc1 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	080272c8 	.word	0x080272c8

08010ac8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff ffe7 	bl	8010aa4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010ad6:	2134      	movs	r1, #52	; 0x34
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f014 fe44 	bl	8025766 <_ZdlPvj>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff ffc4 	bl	8010a80 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010af8:	4a05      	ldr	r2, [pc, #20]	; (8010b10 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	08028e68 	.word	0x08028e68

08010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	683a      	ldr	r2, [r7, #0]
 8010b22:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010b24:	bf00      	nop
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7ff fdfd 	bl	801073c <_ZN8touchgfx6WidgetC1Ev>
 8010b42:	4a0b      	ldr	r2, [pc, #44]	; (8010b70 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3326      	adds	r3, #38	; 0x26
 8010b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ff fbd7 	bl	8010304 <_ZN8touchgfx6BitmapC1Et>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	22ff      	movs	r2, #255	; 0xff
 8010b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010b5e:	6839      	ldr	r1, [r7, #0]
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f006 fe53 	bl	801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	08028ee4 	.word	0x08028ee4

08010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	601a      	str	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010b92:	b480      	push	{r7}
 8010b94:	b083      	sub	sp, #12
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
        }
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010baa:	b590      	push	{r4, r7, lr}
 8010bac:	b083      	sub	sp, #12
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3340      	adds	r3, #64	; 0x40
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff ffea 	bl	8010b92 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7ff ffe5 	bl	8010b92 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	429c      	cmp	r4, r3
 8010bcc:	bf0c      	ite	eq
 8010bce:	2301      	moveq	r3, #1
 8010bd0:	2300      	movne	r3, #0
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d106      	bne.n	8010be6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	683a      	ldr	r2, [r7, #0]
 8010bdc:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f006 f88e 	bl	8016d00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010be4:	e000      	b.n	8010be8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010be6:	bf00      	nop
    }
 8010be8:	370c      	adds	r7, #12
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd90      	pop	{r4, r7, pc}
	...

08010bf0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	4a05      	ldr	r2, [pc, #20]	; (8010c10 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f005 fe91 	bl	8016928 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	08028854 	.word	0x08028854

08010c14 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7ff ffe7 	bl	8010bf0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010c22:	2114      	movs	r1, #20
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f014 fd9e 	bl	8025766 <_ZdlPvj>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	4a05      	ldr	r2, [pc, #20]	; (8010c54 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	601a      	str	r2, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff fd8b 	bl	8010760 <_ZN8touchgfx6WidgetD1Ev>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	08028ee4 	.word	0x08028ee4

08010c58 <_ZN8touchgfx5ImageD0Ev>:
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffe7 	bl	8010c34 <_ZN8touchgfx5ImageD1Ev>
 8010c66:	212c      	movs	r1, #44	; 0x2c
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f014 fd7c 	bl	8025766 <_ZdlPvj>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	4a05      	ldr	r2, [pc, #20]	; (8010c98 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fcef 	bl	801066c <_ZN8touchgfx6ScreenD1Ev>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	08027294 	.word	0x08027294

08010c9c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f7ff ffe7 	bl	8010c78 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010caa:	2140      	movs	r1, #64	; 0x40
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f014 fd5a 	bl	8025766 <_ZdlPvj>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	4a6f      	ldr	r2, [pc, #444]	; (8010e84 <_ZN12MainViewBaseD1Ev+0x1c8>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	601a      	str	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f001 fb8d 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f001 fb87 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ff fea7 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f001 fb7b 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8010d00:	4618      	mov	r0, r3
 8010d02:	f004 f999 	bl	8015038 <_ZN8touchgfx13ImageProgressD1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f001 fb6f 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f001 fbad 	bl	8012478 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8010d24:	4618      	mov	r0, r3
 8010d26:	f001 fb85 	bl	8012434 <_ZN8touchgfx4LineD1Ev>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8010d30:	4618      	mov	r0, r3
 8010d32:	f001 fba1 	bl	8012478 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f001 fb79 	bl	8012434 <_ZN8touchgfx4LineD1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f004 f875 	bl	8014e38 <_ZN8touchgfx11BoxProgressD1Ev>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff fe71 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010d60:	4618      	mov	r0, r3
 8010d62:	f001 fb45 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f001 fb3f 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff fe5f 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7ff fe59 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010d90:	4618      	mov	r0, r3
 8010d92:	f001 fb2d 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fe4d 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010da8:	4618      	mov	r0, r3
 8010daa:	f001 fb65 	bl	8012478 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010db4:	4618      	mov	r0, r3
 8010db6:	f001 fb3d 	bl	8012434 <_ZN8touchgfx4LineD1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f001 fb15 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f001 fb0f 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f001 fb09 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010de4:	4618      	mov	r0, r3
 8010de6:	f001 fb03 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010df0:	4618      	mov	r0, r3
 8010df2:	f001 fafd 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 faf7 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f001 faf1 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 faeb 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7ff ff07 	bl	8010c34 <_ZN8touchgfx5ImageD1Ev>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 fadf 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 fad9 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fdf9 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	33d8      	adds	r3, #216	; 0xd8
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff fdf4 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	33a4      	adds	r3, #164	; 0xa4
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7ff fdef 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	3370      	adds	r3, #112	; 0x70
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7ff fdea 	bl	8010a3c <_ZN8touchgfx8TextAreaD1Ev>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3340      	adds	r3, #64	; 0x40
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff fcdd 	bl	801082c <_ZN8touchgfx3BoxD1Ev>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff feff 	bl	8010c78 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	08027260 	.word	0x08027260

08010e88 <_ZN12MainViewBaseD0Ev>:
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7ff ff13 	bl	8010cbc <_ZN12MainViewBaseD1Ev>
 8010e96:	f242 6118 	movw	r1, #9752	; 0x2618
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f014 fc63 	bl	8025766 <_ZdlPvj>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
	...

08010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010eac:	b590      	push	{r4, r7, lr}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	71fb      	strb	r3, [r7, #7]
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	71bb      	strb	r3, [r7, #6]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010ebe:	f7fe fdaf 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d105      	bne.n	8010ed4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010ec8:	4b0a      	ldr	r3, [pc, #40]	; (8010ef4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010eca:	4a0b      	ldr	r2, [pc, #44]	; (8010ef8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010ecc:	2138      	movs	r1, #56	; 0x38
 8010ece:	480b      	ldr	r0, [pc, #44]	; (8010efc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010ed0:	f014 fc74 	bl	80257bc <__assert_func>
 8010ed4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010ed6:	f7fe fdaf 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8010eda:	6803      	ldr	r3, [r0, #0]
 8010edc:	332c      	adds	r3, #44	; 0x2c
 8010ede:	681c      	ldr	r4, [r3, #0]
 8010ee0:	797b      	ldrb	r3, [r7, #5]
 8010ee2:	79ba      	ldrb	r2, [r7, #6]
 8010ee4:	79f9      	ldrb	r1, [r7, #7]
 8010ee6:	47a0      	blx	r4
 8010ee8:	4603      	mov	r3, r0
    }
 8010eea:	4618      	mov	r0, r3
 8010eec:	370c      	adds	r7, #12
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd90      	pop	{r4, r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08026c40 	.word	0x08026c40
 8010ef8:	080273a4 	.word	0x080273a4
 8010efc:	08026c84 	.word	0x08026c84

08010f00 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010f00:	b590      	push	{r4, r7, lr}
 8010f02:	b0b5      	sub	sp, #212	; 0xd4
 8010f04:	af02      	add	r7, sp, #8
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f001 f9f6 	bl	80122fc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010f10:	4adc      	ldr	r2, [pc, #880]	; (8011284 <_ZN12MainViewBaseC1Ev+0x384>)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	601a      	str	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	3340      	adds	r3, #64	; 0x40
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fc66 	bl	80107ec <_ZN8touchgfx3BoxC1Ev>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	3370      	adds	r3, #112	; 0x70
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7ff fcd7 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	33a4      	adds	r3, #164	; 0xa4
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff fcd2 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	33d8      	adds	r3, #216	; 0xd8
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff fccd 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fcc7 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fdc9 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff fdc3 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8010f68:	f107 0308 	add.w	r3, r7, #8
 8010f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff f9c7 	bl	8010304 <_ZN8touchgfx6BitmapC1Et>
 8010f76:	f107 0308 	add.w	r3, r7, #8
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f7ff fdd7 	bl	8010b30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff fdad 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff fda7 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff fda1 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fd9b 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fd95 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fd8f 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff fd89 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff fd83 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f005 fe69 	bl	8016cc0 <_ZN8touchgfx4LineC1Ev>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010ff4:	f107 030c 	add.w	r3, r7, #12
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7ff f93c 	bl	8010278 <_ZN8touchgfx9colortypeC1Em>
 8011000:	22ff      	movs	r2, #255	; 0xff
 8011002:	68f9      	ldr	r1, [r7, #12]
 8011004:	4620      	mov	r0, r4
 8011006:	f005 fc4d 	bl	80168a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff fc61 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff fd63 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff fc55 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fc4f 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011040:	4618      	mov	r0, r3
 8011042:	f7ff fd51 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff fd4b 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fc3d 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011064:	4618      	mov	r0, r3
 8011066:	f003 fefb 	bl	8014e60 <_ZN8touchgfx11BoxProgressC1Ev>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011070:	4618      	mov	r0, r3
 8011072:	f005 fe25 	bl	8016cc0 <_ZN8touchgfx4LineC1Ev>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 801107c:	f107 0310 	add.w	r3, r7, #16
 8011080:	2100      	movs	r1, #0
 8011082:	4618      	mov	r0, r3
 8011084:	f7ff f8f8 	bl	8010278 <_ZN8touchgfx9colortypeC1Em>
 8011088:	22ff      	movs	r2, #255	; 0xff
 801108a:	6939      	ldr	r1, [r7, #16]
 801108c:	4620      	mov	r0, r4
 801108e:	f005 fc09 	bl	80168a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011098:	4618      	mov	r0, r3
 801109a:	f005 fe11 	bl	8016cc0 <_ZN8touchgfx4LineC1Ev>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 80110a4:	f107 0314 	add.w	r3, r7, #20
 80110a8:	2100      	movs	r1, #0
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff f8e4 	bl	8010278 <_ZN8touchgfx9colortypeC1Em>
 80110b0:	22ff      	movs	r2, #255	; 0xff
 80110b2:	6979      	ldr	r1, [r7, #20]
 80110b4:	4620      	mov	r0, r4
 80110b6:	f005 fbf5 	bl	80168a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff fd11 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 80110cc:	4618      	mov	r0, r3
 80110ce:	f003 ffdd 	bl	801508c <_ZN8touchgfx13ImageProgressC1Ev>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80110d8:	4618      	mov	r0, r3
 80110da:	f7ff fd05 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff fbf7 	bl	80108d8 <_ZN8touchgfx8TextAreaC1Ev>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff fcf9 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff fcf3 	bl	8010ae8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 8011108:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801110c:	4618      	mov	r0, r3
 801110e:	f006 fbeb 	bl	80178e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 1, 800, 480);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011118:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011122:	2201      	movs	r2, #1
 8011124:	2100      	movs	r1, #0
 8011126:	f7ff f94b 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011130:	2200      	movs	r2, #0
 8011132:	2100      	movs	r1, #0
 8011134:	2000      	movs	r0, #0
 8011136:	f7ff feb9 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801113a:	4603      	mov	r3, r0
 801113c:	4619      	mov	r1, r3
 801113e:	4620      	mov	r0, r4
 8011140:	f7ff fb96 	bl	8010870 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(292, 129);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3370      	adds	r3, #112	; 0x70
 8011148:	2281      	movs	r2, #129	; 0x81
 801114a:	f44f 7192 	mov.w	r1, #292	; 0x124
 801114e:	4618      	mov	r0, r3
 8011150:	f7ff f981 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801115a:	22a9      	movs	r2, #169	; 0xa9
 801115c:	2100      	movs	r1, #0
 801115e:	20ff      	movs	r0, #255	; 0xff
 8011160:	f7ff fea4 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011164:	4603      	mov	r3, r0
 8011166:	4619      	mov	r1, r3
 8011168:	4620      	mov	r0, r4
 801116a:	f7ff fbf8 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	3370      	adds	r3, #112	; 0x70
 8011172:	2100      	movs	r1, #0
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff fc45 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011180:	f107 0318 	add.w	r3, r7, #24
 8011184:	2115      	movs	r1, #21
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff fb80 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801118c:	8b39      	ldrh	r1, [r7, #24]
 801118e:	4620      	mov	r0, r4
 8011190:	f006 f89c 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(174, 129);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	33a4      	adds	r3, #164	; 0xa4
 8011198:	2281      	movs	r2, #129	; 0x81
 801119a:	21ae      	movs	r1, #174	; 0xae
 801119c:	4618      	mov	r0, r3
 801119e:	f7ff f95a 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111a8:	22a9      	movs	r2, #169	; 0xa9
 80111aa:	2100      	movs	r1, #0
 80111ac:	20ff      	movs	r0, #255	; 0xff
 80111ae:	f7ff fe7d 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111b2:	4603      	mov	r3, r0
 80111b4:	4619      	mov	r1, r3
 80111b6:	4620      	mov	r0, r4
 80111b8:	f7ff fbd1 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	33a4      	adds	r3, #164	; 0xa4
 80111c0:	2100      	movs	r1, #0
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff fc1e 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80111ce:	f107 031c 	add.w	r3, r7, #28
 80111d2:	2114      	movs	r1, #20
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff fb59 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80111da:	8bb9      	ldrh	r1, [r7, #28]
 80111dc:	4620      	mov	r0, r4
 80111de:	f006 f875 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(49, 129);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	33d8      	adds	r3, #216	; 0xd8
 80111e6:	2281      	movs	r2, #129	; 0x81
 80111e8:	2131      	movs	r1, #49	; 0x31
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7ff f933 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80111f6:	22a9      	movs	r2, #169	; 0xa9
 80111f8:	2100      	movs	r1, #0
 80111fa:	20ff      	movs	r0, #255	; 0xff
 80111fc:	f7ff fe56 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011200:	4603      	mov	r3, r0
 8011202:	4619      	mov	r1, r3
 8011204:	4620      	mov	r0, r4
 8011206:	f7ff fbaa 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	33d8      	adds	r3, #216	; 0xd8
 801120e:	2100      	movs	r1, #0
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff fbf7 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801121c:	f107 0320 	add.w	r3, r7, #32
 8011220:	2110      	movs	r1, #16
 8011222:	4618      	mov	r0, r3
 8011224:	f7ff fb32 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011228:	8c39      	ldrh	r1, [r7, #32]
 801122a:	4620      	mov	r0, r4
 801122c:	f006 f84e 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(50, 219);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011236:	22db      	movs	r2, #219	; 0xdb
 8011238:	2132      	movs	r1, #50	; 0x32
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff f90b 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011246:	22a9      	movs	r2, #169	; 0xa9
 8011248:	2100      	movs	r1, #0
 801124a:	20ff      	movs	r0, #255	; 0xff
 801124c:	f7ff fe2e 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011250:	4603      	mov	r3, r0
 8011252:	4619      	mov	r1, r3
 8011254:	4620      	mov	r0, r4
 8011256:	f7ff fb82 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011260:	2100      	movs	r1, #0
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff fbce 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011272:	210f      	movs	r1, #15
 8011274:	4618      	mov	r0, r3
 8011276:	f7ff fb09 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801127a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801127c:	4620      	mov	r0, r4
 801127e:	f006 f825 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011282:	e001      	b.n	8011288 <_ZN12MainViewBaseC1Ev+0x388>
 8011284:	08027260 	.word	0x08027260

    LambdaValue.setPosition(15, 77, 100, 47);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 801128e:	232f      	movs	r3, #47	; 0x2f
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	2364      	movs	r3, #100	; 0x64
 8011294:	224d      	movs	r2, #77	; 0x4d
 8011296:	210f      	movs	r1, #15
 8011298:	f7ff f892 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80112a2:	22ff      	movs	r2, #255	; 0xff
 80112a4:	21ff      	movs	r1, #255	; 0xff
 80112a6:	20ff      	movs	r0, #255	; 0xff
 80112a8:	f7ff fe00 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112ac:	4603      	mov	r3, r0
 80112ae:	4619      	mov	r1, r3
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff fb54 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112bc:	2100      	movs	r1, #0
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff fba0 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 80112ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112ce:	2103      	movs	r1, #3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7ff fadb 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80112d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff fae6 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80112e0:	4603      	mov	r3, r0
 80112e2:	4ae1      	ldr	r2, [pc, #900]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 80112e4:	2105      	movs	r1, #5
 80112e6:	4620      	mov	r0, r4
 80112e8:	f00a fad0 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 80112f8:	4619      	mov	r1, r3
 80112fa:	4610      	mov	r0, r2
 80112fc:	f7ff fc0a 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801130a:	2102      	movs	r1, #2
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fabd 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011312:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8011314:	4620      	mov	r0, r4
 8011316:	f005 ffd9 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(15, 170, 100, 47);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8011320:	232f      	movs	r3, #47	; 0x2f
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	2364      	movs	r3, #100	; 0x64
 8011326:	22aa      	movs	r2, #170	; 0xaa
 8011328:	210f      	movs	r1, #15
 801132a:	f7ff f849 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011334:	22ff      	movs	r2, #255	; 0xff
 8011336:	21ff      	movs	r1, #255	; 0xff
 8011338:	20ff      	movs	r0, #255	; 0xff
 801133a:	f7ff fdb7 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801133e:	4603      	mov	r3, r0
 8011340:	4619      	mov	r1, r3
 8011342:	4620      	mov	r0, r4
 8011344:	f7ff fb0b 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801134e:	2100      	movs	r1, #0
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff fb57 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f603 1486 	addw	r4, r3, #2438	; 0x986
 801135c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011360:	2101      	movs	r1, #1
 8011362:	4618      	mov	r0, r3
 8011364:	f7ff fa92 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801136c:	4618      	mov	r0, r3
 801136e:	f7ff fa9d 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011372:	4603      	mov	r3, r0
 8011374:	4abc      	ldr	r2, [pc, #752]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 8011376:	2105      	movs	r1, #5
 8011378:	4620      	mov	r0, r4
 801137a:	f00a fa87 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f603 1386 	addw	r3, r3, #2438	; 0x986
 801138a:	4619      	mov	r1, r3
 801138c:	4610      	mov	r0, r2
 801138e:	f7ff fbc1 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801139c:	2100      	movs	r1, #0
 801139e:	4618      	mov	r0, r3
 80113a0:	f7ff fa74 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80113a4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80113a6:	4620      	mov	r0, r4
 80113a8:	f005 ff90 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113b2:	223f      	movs	r2, #63	; 0x3f
 80113b4:	21b3      	movs	r1, #179	; 0xb3
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff f84d 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80113c2:	2100      	movs	r1, #0
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff f8b7 	bl	8010538 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 80113d0:	230e      	movs	r3, #14
 80113d2:	9300      	str	r3, [sp, #0]
 80113d4:	2312      	movs	r3, #18
 80113d6:	223f      	movs	r2, #63	; 0x3f
 80113d8:	2136      	movs	r1, #54	; 0x36
 80113da:	f7fe fff1 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80113e4:	22ff      	movs	r2, #255	; 0xff
 80113e6:	21ff      	movs	r1, #255	; 0xff
 80113e8:	20ff      	movs	r0, #255	; 0xff
 80113ea:	f7ff fd5f 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113ee:	4603      	mov	r3, r0
 80113f0:	4619      	mov	r1, r3
 80113f2:	4620      	mov	r0, r4
 80113f4:	f7ff fab3 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80113fe:	2100      	movs	r1, #0
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff faff 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 801140c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011410:	211e      	movs	r1, #30
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff fa3a 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff fa45 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011422:	4603      	mov	r3, r0
 8011424:	4a90      	ldr	r2, [pc, #576]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 8011426:	2102      	movs	r1, #2
 8011428:	4620      	mov	r0, r4
 801142a:	f00a fa2f 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 801143a:	4619      	mov	r1, r3
 801143c:	4610      	mov	r0, r2
 801143e:	f7ff fb69 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8011448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801144c:	2104      	movs	r1, #4
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff fa1c 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011454:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8011456:	4620      	mov	r0, r4
 8011458:	f005 ff38 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8011462:	230e      	movs	r3, #14
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	2312      	movs	r3, #18
 8011468:	223f      	movs	r2, #63	; 0x3f
 801146a:	2173      	movs	r1, #115	; 0x73
 801146c:	f7fe ffa8 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8011476:	22ff      	movs	r2, #255	; 0xff
 8011478:	21ff      	movs	r1, #255	; 0xff
 801147a:	20ff      	movs	r0, #255	; 0xff
 801147c:	f7ff fd16 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011480:	4603      	mov	r3, r0
 8011482:	4619      	mov	r1, r3
 8011484:	4620      	mov	r0, r4
 8011486:	f7ff fa6a 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011490:	2100      	movs	r1, #0
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fab6 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f603 1494 	addw	r4, r3, #2452	; 0x994
 801149e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114a2:	211f      	movs	r1, #31
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff f9f1 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80114aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff f9fc 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80114b4:	4603      	mov	r3, r0
 80114b6:	4a6c      	ldr	r2, [pc, #432]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 80114b8:	2102      	movs	r1, #2
 80114ba:	4620      	mov	r0, r4
 80114bc:	f00a f9e6 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f603 1394 	addw	r3, r3, #2452	; 0x994
 80114cc:	4619      	mov	r1, r3
 80114ce:	4610      	mov	r0, r2
 80114d0:	f7ff fb20 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80114da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80114de:	2105      	movs	r1, #5
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff f9d3 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80114e6:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80114ea:	4620      	mov	r0, r4
 80114ec:	f005 feee 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80114f6:	230e      	movs	r3, #14
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	2312      	movs	r3, #18
 80114fc:	223e      	movs	r2, #62	; 0x3e
 80114fe:	21ad      	movs	r1, #173	; 0xad
 8011500:	f7fe ff5e 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801150a:	22ff      	movs	r2, #255	; 0xff
 801150c:	21ff      	movs	r1, #255	; 0xff
 801150e:	20ff      	movs	r0, #255	; 0xff
 8011510:	f7ff fccc 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011514:	4603      	mov	r3, r0
 8011516:	4619      	mov	r1, r3
 8011518:	4620      	mov	r0, r4
 801151a:	f7ff fa20 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011524:	2100      	movs	r1, #0
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fa6c 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f603 1498 	addw	r4, r3, #2456	; 0x998
 8011532:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011536:	2120      	movs	r1, #32
 8011538:	4618      	mov	r0, r3
 801153a:	f7ff f9a7 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801153e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff f9b2 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011548:	4603      	mov	r3, r0
 801154a:	4a47      	ldr	r2, [pc, #284]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 801154c:	2102      	movs	r1, #2
 801154e:	4620      	mov	r0, r4
 8011550:	f00a f99c 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8011560:	4619      	mov	r1, r3
 8011562:	4610      	mov	r0, r2
 8011564:	f7ff fad6 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801156e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011572:	2106      	movs	r1, #6
 8011574:	4618      	mov	r0, r3
 8011576:	f7ff f989 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801157a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 801157e:	4620      	mov	r0, r4
 8011580:	f005 fea4 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f503 7021 	add.w	r0, r3, #644	; 0x284
 801158a:	230e      	movs	r3, #14
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	2312      	movs	r3, #18
 8011590:	223e      	movs	r2, #62	; 0x3e
 8011592:	21e7      	movs	r1, #231	; 0xe7
 8011594:	f7fe ff14 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f503 7421 	add.w	r4, r3, #644	; 0x284
 801159e:	22ff      	movs	r2, #255	; 0xff
 80115a0:	21ff      	movs	r1, #255	; 0xff
 80115a2:	20ff      	movs	r0, #255	; 0xff
 80115a4:	f7ff fc82 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115a8:	4603      	mov	r3, r0
 80115aa:	4619      	mov	r1, r3
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7ff f9d6 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80115b8:	2100      	movs	r1, #0
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fa22 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 80115c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80115ca:	2121      	movs	r1, #33	; 0x21
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff f95d 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80115d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7ff f968 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80115dc:	4603      	mov	r3, r0
 80115de:	4a22      	ldr	r2, [pc, #136]	; (8011668 <_ZN12MainViewBaseC1Ev+0x768>)
 80115e0:	2102      	movs	r1, #2
 80115e2:	4620      	mov	r0, r4
 80115e4:	f00a f952 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f503 7221 	add.w	r2, r3, #644	; 0x284
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 80115f4:	4619      	mov	r1, r3
 80115f6:	4610      	mov	r0, r2
 80115f8:	f7ff fa8c 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8011602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011606:	2107      	movs	r1, #7
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff f93f 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801160e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8011612:	4620      	mov	r0, r4
 8011614:	f005 fe5a 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 801161e:	230e      	movs	r3, #14
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	2312      	movs	r3, #18
 8011624:	223f      	movs	r2, #63	; 0x3f
 8011626:	f44f 7192 	mov.w	r1, #292	; 0x124
 801162a:	f7fe fec9 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011634:	22ff      	movs	r2, #255	; 0xff
 8011636:	21ff      	movs	r1, #255	; 0xff
 8011638:	20ff      	movs	r0, #255	; 0xff
 801163a:	f7ff fc37 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801163e:	4603      	mov	r3, r0
 8011640:	4619      	mov	r1, r3
 8011642:	4620      	mov	r0, r4
 8011644:	f7ff f98b 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801164e:	2100      	movs	r1, #0
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff f9d7 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f503 641a 	add.w	r4, r3, #2464	; 0x9a0
 801165c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011660:	2122      	movs	r1, #34	; 0x22
 8011662:	4618      	mov	r0, r3
 8011664:	e002      	b.n	801166c <_ZN12MainViewBaseC1Ev+0x76c>
 8011666:	bf00      	nop
 8011668:	08026cc4 	.word	0x08026cc4
 801166c:	f7ff f90e 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011670:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011674:	4618      	mov	r0, r3
 8011676:	f7ff f919 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 801167a:	4603      	mov	r3, r0
 801167c:	4ae2      	ldr	r2, [pc, #904]	; (8011a08 <_ZN12MainViewBaseC1Ev+0xb08>)
 801167e:	2102      	movs	r1, #2
 8011680:	4620      	mov	r0, r4
 8011682:	f00a f903 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8011692:	4619      	mov	r1, r3
 8011694:	4610      	mov	r0, r2
 8011696:	f7ff fa3d 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80116a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80116a4:	2108      	movs	r1, #8
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff f8f0 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80116ac:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80116b0:	4620      	mov	r0, r4
 80116b2:	f005 fe0b 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80116bc:	230e      	movs	r3, #14
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	2312      	movs	r3, #18
 80116c2:	223f      	movs	r2, #63	; 0x3f
 80116c4:	f240 115d 	movw	r1, #349	; 0x15d
 80116c8:	f7fe fe7a 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80116d2:	22ff      	movs	r2, #255	; 0xff
 80116d4:	21ff      	movs	r1, #255	; 0xff
 80116d6:	20ff      	movs	r0, #255	; 0xff
 80116d8:	f7ff fbe8 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116dc:	4603      	mov	r3, r0
 80116de:	4619      	mov	r1, r3
 80116e0:	4620      	mov	r0, r4
 80116e2:	f7ff f93c 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80116ec:	2100      	movs	r1, #0
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff f988 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f603 14a4 	addw	r4, r3, #2468	; 0x9a4
 80116fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80116fe:	2123      	movs	r1, #35	; 0x23
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff f8c3 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff f8ce 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011710:	4603      	mov	r3, r0
 8011712:	4abd      	ldr	r2, [pc, #756]	; (8011a08 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011714:	2102      	movs	r1, #2
 8011716:	4620      	mov	r0, r4
 8011718:	f00a f8b8 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f603 13a4 	addw	r3, r3, #2468	; 0x9a4
 8011728:	4619      	mov	r1, r3
 801172a:	4610      	mov	r0, r2
 801172c:	f7ff f9f2 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8011736:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801173a:	2109      	movs	r1, #9
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff f8a5 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011742:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8011746:	4620      	mov	r0, r4
 8011748:	f005 fdc0 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8011752:	230f      	movs	r3, #15
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	2312      	movs	r3, #18
 8011758:	223e      	movs	r2, #62	; 0x3e
 801175a:	f240 119b 	movw	r1, #411	; 0x19b
 801175e:	f7fe fe2f 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8011768:	22ff      	movs	r2, #255	; 0xff
 801176a:	21ff      	movs	r1, #255	; 0xff
 801176c:	20ff      	movs	r0, #255	; 0xff
 801176e:	f7ff fb9d 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011772:	4603      	mov	r3, r0
 8011774:	4619      	mov	r1, r3
 8011776:	4620      	mov	r0, r4
 8011778:	f7ff f8f1 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f7ff f93d 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f603 14a8 	addw	r4, r3, #2472	; 0x9a8
 8011790:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011794:	2124      	movs	r1, #36	; 0x24
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff f878 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801179c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff f883 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80117a6:	4603      	mov	r3, r0
 80117a8:	4a97      	ldr	r2, [pc, #604]	; (8011a08 <_ZN12MainViewBaseC1Ev+0xb08>)
 80117aa:	2102      	movs	r1, #2
 80117ac:	4620      	mov	r0, r4
 80117ae:	f00a f86d 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 80117be:	4619      	mov	r1, r3
 80117c0:	4610      	mov	r0, r2
 80117c2:	f7ff f9a7 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80117cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80117d0:	210a      	movs	r1, #10
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff f85a 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80117d8:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 80117dc:	4620      	mov	r0, r4
 80117de:	f005 fd75 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80117e8:	230e      	movs	r3, #14
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	2312      	movs	r3, #18
 80117ee:	223e      	movs	r2, #62	; 0x3e
 80117f0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80117f4:	f7fe fde4 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80117fe:	22ff      	movs	r2, #255	; 0xff
 8011800:	21ff      	movs	r1, #255	; 0xff
 8011802:	20ff      	movs	r0, #255	; 0xff
 8011804:	f7ff fb52 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011808:	4603      	mov	r3, r0
 801180a:	4619      	mov	r1, r3
 801180c:	4620      	mov	r0, r4
 801180e:	f7ff f8a6 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8011818:	2100      	movs	r1, #0
 801181a:	4618      	mov	r0, r3
 801181c:	f7ff f8f2 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 8011826:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801182a:	2125      	movs	r1, #37	; 0x25
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff f82d 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011836:	4618      	mov	r0, r3
 8011838:	f7ff f838 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 801183c:	4603      	mov	r3, r0
 801183e:	4a72      	ldr	r2, [pc, #456]	; (8011a08 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011840:	2102      	movs	r1, #2
 8011842:	4620      	mov	r0, r4
 8011844:	f00a f822 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f503 7259 	add.w	r2, r3, #868	; 0x364
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8011854:	4619      	mov	r1, r3
 8011856:	4610      	mov	r0, r2
 8011858:	f7ff f95c 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8011862:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011866:	210b      	movs	r1, #11
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff f80f 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801186e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8011872:	4620      	mov	r0, r4
 8011874:	f005 fd2a 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 801187e:	2305      	movs	r3, #5
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011886:	223a      	movs	r2, #58	; 0x3a
 8011888:	f06f 0101 	mvn.w	r1, #1
 801188c:	f7fe fd98 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8011896:	22ff      	movs	r2, #255	; 0xff
 8011898:	21ff      	movs	r1, #255	; 0xff
 801189a:	20ff      	movs	r0, #255	; 0xff
 801189c:	f7ff fb06 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118a0:	4603      	mov	r3, r0
 80118a2:	22ff      	movs	r2, #255	; 0xff
 80118a4:	4619      	mov	r1, r3
 80118a6:	4620      	mov	r0, r4
 80118a8:	f004 ffe1 	bl	801686e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80118b8:	4619      	mov	r1, r3
 80118ba:	4610      	mov	r0, r2
 80118bc:	f005 f840 	bl	8016940 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118c6:	2203      	movs	r2, #3
 80118c8:	2100      	movs	r1, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f000 fd2c 	bl	8012328 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118d6:	2203      	movs	r2, #3
 80118d8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 fd49 	bl	8012374 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118e8:	2102      	movs	r1, #2
 80118ea:	4618      	mov	r0, r3
 80118ec:	f000 fd68 	bl	80123c0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80118f6:	2101      	movs	r1, #1
 80118f8:	4618      	mov	r0, r3
 80118fa:	f005 fb3b 	bl	8016f74 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(413, 129);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011904:	2281      	movs	r2, #129	; 0x81
 8011906:	f240 119d 	movw	r1, #413	; 0x19d
 801190a:	4618      	mov	r0, r3
 801190c:	f7fe fda3 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011916:	22a9      	movs	r2, #169	; 0xa9
 8011918:	2100      	movs	r1, #0
 801191a:	20ff      	movs	r0, #255	; 0xff
 801191c:	f7ff fac6 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011920:	4603      	mov	r3, r0
 8011922:	4619      	mov	r1, r3
 8011924:	4620      	mov	r0, r4
 8011926:	f7ff f81a 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011930:	2100      	movs	r1, #0
 8011932:	4618      	mov	r0, r3
 8011934:	f7ff f866 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 801193e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011942:	210e      	movs	r1, #14
 8011944:	4618      	mov	r0, r3
 8011946:	f7fe ffa1 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 801194a:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 801194e:	4620      	mov	r0, r4
 8011950:	f005 fcbc 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(371, 77, 100, 47);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f203 405c 	addw	r0, r3, #1116	; 0x45c
 801195a:	232f      	movs	r3, #47	; 0x2f
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	2364      	movs	r3, #100	; 0x64
 8011960:	224d      	movs	r2, #77	; 0x4d
 8011962:	f240 1173 	movw	r1, #371	; 0x173
 8011966:	f7fe fd2b 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011970:	22ff      	movs	r2, #255	; 0xff
 8011972:	21ff      	movs	r1, #255	; 0xff
 8011974:	20ff      	movs	r0, #255	; 0xff
 8011976:	f7ff fa99 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801197a:	4603      	mov	r3, r0
 801197c:	4619      	mov	r1, r3
 801197e:	4620      	mov	r0, r4
 8011980:	f7fe ffed 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801198a:	2100      	movs	r1, #0
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff f839 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8011998:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801199c:	210d      	movs	r1, #13
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fe ff74 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80119a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fe ff7f 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80119ae:	4603      	mov	r3, r0
 80119b0:	4a15      	ldr	r2, [pc, #84]	; (8011a08 <_ZN12MainViewBaseC1Ev+0xb08>)
 80119b2:	2105      	movs	r1, #5
 80119b4:	4620      	mov	r0, r4
 80119b6:	f009 ff69 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80119c6:	4619      	mov	r1, r3
 80119c8:	4610      	mov	r0, r2
 80119ca:	f7ff f8a3 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80119d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119d8:	210c      	movs	r1, #12
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fe ff56 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80119e0:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80119e4:	4620      	mov	r0, r4
 80119e6:	f005 fc71 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureDescriptor.setXY(287, 217);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80119f0:	22d9      	movs	r2, #217	; 0xd9
 80119f2:	f240 111f 	movw	r1, #287	; 0x11f
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fd2d 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPressureDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011a02:	22a9      	movs	r2, #169	; 0xa9
 8011a04:	2100      	movs	r1, #0
 8011a06:	e001      	b.n	8011a0c <_ZN12MainViewBaseC1Ev+0xb0c>
 8011a08:	08026cc4 	.word	0x08026cc4
 8011a0c:	20ff      	movs	r0, #255	; 0xff
 8011a0e:	f7ff fa4d 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a12:	4603      	mov	r3, r0
 8011a14:	4619      	mov	r1, r3
 8011a16:	4620      	mov	r0, r4
 8011a18:	f7fe ffa1 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureDescriptor.setLinespacing(0);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011a22:	2100      	movs	r1, #0
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe ffed 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPressureDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011a30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011a34:	2111      	movs	r1, #17
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe ff28 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011a3c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8011a40:	4620      	mov	r0, r4
 8011a42:	f005 fc43 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(168, 219);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011a4c:	22db      	movs	r2, #219	; 0xdb
 8011a4e:	21a8      	movs	r1, #168	; 0xa8
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fe fd00 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011a5c:	22a9      	movs	r2, #169	; 0xa9
 8011a5e:	2100      	movs	r1, #0
 8011a60:	20ff      	movs	r0, #255	; 0xff
 8011a62:	f7ff fa23 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a66:	4603      	mov	r3, r0
 8011a68:	4619      	mov	r1, r3
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f7fe ff77 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011a76:	2100      	movs	r1, #0
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7fe ffc3 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011a84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011a88:	2112      	movs	r1, #18
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe fefe 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011a90:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011a94:	4620      	mov	r0, r4
 8011a96:	f005 fc19 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OilPressureValue.setPosition(133, 170, 100, 47);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f203 40fc 	addw	r0, r3, #1276	; 0x4fc
 8011aa0:	232f      	movs	r3, #47	; 0x2f
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	2364      	movs	r3, #100	; 0x64
 8011aa6:	22aa      	movs	r2, #170	; 0xaa
 8011aa8:	2185      	movs	r1, #133	; 0x85
 8011aaa:	f7fe fc89 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OilPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011ab4:	22ff      	movs	r2, #255	; 0xff
 8011ab6:	21ff      	movs	r1, #255	; 0xff
 8011ab8:	20ff      	movs	r0, #255	; 0xff
 8011aba:	f7ff f9f7 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f7fe ff4b 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OilPressureValue.setLinespacing(0);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011ace:	2100      	movs	r1, #0
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7fe ff97 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID68).getText());
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f603 14ba 	addw	r4, r3, #2490	; 0x9ba
 8011adc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011ae0:	2127      	movs	r1, #39	; 0x27
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe fed2 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011ae8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe fedd 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011af2:	4603      	mov	r3, r0
 8011af4:	4ae1      	ldr	r2, [pc, #900]	; (8011e7c <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011af6:	2105      	movs	r1, #5
 8011af8:	4620      	mov	r0, r4
 8011afa:	f009 fec7 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OilPressureValue.setWildcard(OilPressureValueBuffer);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	f7ff f801 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OilPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011b18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011b1c:	2113      	movs	r1, #19
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fe feb4 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011b24:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f005 fbcf 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureValue.setPosition(252, 170, 100, 47);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f203 5034 	addw	r0, r3, #1332	; 0x534
 8011b34:	232f      	movs	r3, #47	; 0x2f
 8011b36:	9300      	str	r3, [sp, #0]
 8011b38:	2364      	movs	r3, #100	; 0x64
 8011b3a:	22aa      	movs	r2, #170	; 0xaa
 8011b3c:	21fc      	movs	r1, #252	; 0xfc
 8011b3e:	f7fe fc3f 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011b48:	22ff      	movs	r2, #255	; 0xff
 8011b4a:	21ff      	movs	r1, #255	; 0xff
 8011b4c:	20ff      	movs	r0, #255	; 0xff
 8011b4e:	f7ff f9ad 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b52:	4603      	mov	r3, r0
 8011b54:	4619      	mov	r1, r3
 8011b56:	4620      	mov	r0, r4
 8011b58:	f7fe ff01 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureValue.setLinespacing(0);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011b62:	2100      	movs	r1, #0
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fe ff4d 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID71).getText());
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f603 14c4 	addw	r4, r3, #2500	; 0x9c4
 8011b70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b74:	212a      	movs	r1, #42	; 0x2a
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fe fe88 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011b7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe fe93 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011b86:	4603      	mov	r3, r0
 8011b88:	4abc      	ldr	r2, [pc, #752]	; (8011e7c <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011b8a:	2105      	movs	r1, #5
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f009 fe7d 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPressureValue.setWildcard(FuelPressureValueBuffer);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f203 5234 	addw	r2, r3, #1332	; 0x534
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	4610      	mov	r0, r2
 8011ba2:	f7fe ffb7 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011bac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011bb0:	2126      	movs	r1, #38	; 0x26
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fe fe6a 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011bb8:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f005 fb85 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011bc8:	22f0      	movs	r2, #240	; 0xf0
 8011bca:	f240 1197 	movw	r1, #407	; 0x197
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fe fc41 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011bda:	22a9      	movs	r2, #169	; 0xa9
 8011bdc:	2100      	movs	r1, #0
 8011bde:	20ff      	movs	r0, #255	; 0xff
 8011be0:	f7ff f964 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011be4:	4603      	mov	r3, r0
 8011be6:	4619      	mov	r1, r3
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7fe feb8 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7fe ff04 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011c02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011c06:	2116      	movs	r1, #22
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fe fe3f 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011c0e:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8011c12:	4620      	mov	r0, r4
 8011c14:	f005 fb5a 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c1e:	22e2      	movs	r2, #226	; 0xe2
 8011c20:	f240 116d 	movw	r1, #365	; 0x16d
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fe fc16 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011c30:	230a      	movs	r3, #10
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	2364      	movs	r3, #100	; 0x64
 8011c36:	2202      	movs	r2, #2
 8011c38:	2102      	movs	r1, #2
 8011c3a:	f003 f947 	bl	8014ecc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011c44:	2300      	movs	r3, #0
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	2300      	movs	r3, #0
 8011c4a:	2264      	movs	r2, #100	; 0x64
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	f003 fbbb 	bl	80153c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c58:	2100      	movs	r1, #0
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f003 f996 	bl	8014f8c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011c66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fe fb49 	bl	8010304 <_ZN8touchgfx6BitmapC1Et>
 8011c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c76:	4619      	mov	r1, r3
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f003 fb9a 	bl	80153b2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011c84:	22a9      	movs	r2, #169	; 0xa9
 8011c86:	2100      	movs	r1, #0
 8011c88:	20ff      	movs	r0, #255	; 0xff
 8011c8a:	f7ff f90f 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	4619      	mov	r1, r3
 8011c92:	4620      	mov	r0, r4
 8011c94:	f003 f8c4 	bl	8014e20 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011c9e:	213c      	movs	r1, #60	; 0x3c
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f003 f92b 	bl	8014efc <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f503 60cc 	add.w	r0, r3, #1632	; 0x660
 8011cac:	230a      	movs	r3, #10
 8011cae:	9300      	str	r3, [sp, #0]
 8011cb0:	23b4      	movs	r3, #180	; 0xb4
 8011cb2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011cb6:	210e      	movs	r1, #14
 8011cb8:	f7fe fb82 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 8011cc2:	22ff      	movs	r2, #255	; 0xff
 8011cc4:	21ff      	movs	r1, #255	; 0xff
 8011cc6:	20ff      	movs	r0, #255	; 0xff
 8011cc8:	f7ff f8f0 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	22ff      	movs	r2, #255	; 0xff
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f004 fdcb 	bl	801686e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	f004 fe2a 	bl	8016940 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011cf2:	2205      	movs	r2, #5
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f000 fb16 	bl	8012328 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d02:	2205      	movs	r2, #5
 8011d04:	21b4      	movs	r1, #180	; 0xb4
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 fb34 	bl	8012374 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d12:	2102      	movs	r1, #2
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 fb53 	bl	80123c0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011d20:	2100      	movs	r1, #0
 8011d22:	4618      	mov	r0, r3
 8011d24:	f005 f926 	bl	8016f74 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8011d2e:	230a      	movs	r3, #10
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	23b4      	movs	r3, #180	; 0xb4
 8011d34:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011d38:	f240 111f 	movw	r1, #287	; 0x11f
 8011d3c:	f7fe fb40 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 8011d46:	22ff      	movs	r2, #255	; 0xff
 8011d48:	21ff      	movs	r1, #255	; 0xff
 8011d4a:	20ff      	movs	r0, #255	; 0xff
 8011d4c:	f7ff f8ae 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d50:	4603      	mov	r3, r0
 8011d52:	22ff      	movs	r2, #255	; 0xff
 8011d54:	4619      	mov	r1, r3
 8011d56:	4620      	mov	r0, r4
 8011d58:	f004 fd89 	bl	801686e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8011d68:	4619      	mov	r1, r3
 8011d6a:	4610      	mov	r0, r2
 8011d6c:	f004 fde8 	bl	8016940 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011d76:	2205      	movs	r2, #5
 8011d78:	2100      	movs	r1, #0
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 fad4 	bl	8012328 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011d86:	2205      	movs	r2, #5
 8011d88:	21b4      	movs	r1, #180	; 0xb4
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 faf2 	bl	8012374 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011d96:	2102      	movs	r1, #2
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 fb11 	bl	80123c0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011da4:	2100      	movs	r1, #0
 8011da6:	4618      	mov	r0, r3
 8011da8:	f005 f8e4 	bl	8016f74 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f503 60ef 	add.w	r0, r3, #1912	; 0x778
 8011db2:	2315      	movs	r3, #21
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	233c      	movs	r3, #60	; 0x3c
 8011db8:	22f7      	movs	r2, #247	; 0xf7
 8011dba:	21d2      	movs	r1, #210	; 0xd2
 8011dbc:	f7fe fb00 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011dc6:	22ff      	movs	r2, #255	; 0xff
 8011dc8:	21ff      	movs	r1, #255	; 0xff
 8011dca:	20ff      	movs	r0, #255	; 0xff
 8011dcc:	f7ff f86e 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f7fe fdc2 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8011de0:	2100      	movs	r1, #0
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fe fe0e 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f603 14ce 	addw	r4, r3, #2510	; 0x9ce
 8011dee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011df2:	2118      	movs	r1, #24
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fd49 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011dfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe fd54 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011e04:	4603      	mov	r3, r0
 8011e06:	4a1d      	ldr	r2, [pc, #116]	; (8011e7c <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011e08:	2105      	movs	r1, #5
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f009 fd3e 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f603 13ce 	addw	r3, r3, #2510	; 0x9ce
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7fe fe78 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011e2a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011e2e:	2117      	movs	r1, #23
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fe fd2b 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011e36:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f005 fa46 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011e46:	2201      	movs	r2, #1
 8011e48:	2101      	movs	r1, #1
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe fb03 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011e56:	2337      	movs	r3, #55	; 0x37
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011e5e:	2202      	movs	r2, #2
 8011e60:	2102      	movs	r1, #2
 8011e62:	f003 f983 	bl	801516c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	2300      	movs	r3, #0
 8011e72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011e76:	2100      	movs	r1, #0
 8011e78:	e002      	b.n	8011e80 <_ZN12MainViewBaseC1Ev+0xf80>
 8011e7a:	bf00      	nop
 8011e7c:	08026cc4 	.word	0x08026cc4
 8011e80:	f003 faa2 	bl	80153c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f003 f87d 	bl	8014f8c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_GREEN_PINK_FADEPINKPURPLE_SMALL_TRANSPARENT_ID);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011e98:	2101      	movs	r1, #1
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f003 f8c1 	bl	8015022 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011ea6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f003 f976 	bl	801519c <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f003 f89b 	bl	8014ff4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f503 600a 	add.w	r0, r3, #2208	; 0x8a0
 8011ec4:	2316      	movs	r3, #22
 8011ec6:	9300      	str	r3, [sp, #0]
 8011ec8:	2337      	movs	r3, #55	; 0x37
 8011eca:	2204      	movs	r2, #4
 8011ecc:	2119      	movs	r1, #25
 8011ece:	f7fe fa77 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011ed8:	22ff      	movs	r2, #255	; 0xff
 8011eda:	21ff      	movs	r1, #255	; 0xff
 8011edc:	20ff      	movs	r0, #255	; 0xff
 8011ede:	f7fe ffe5 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7fe fd39 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fd85 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f603 14d8 	addw	r4, r3, #2520	; 0x9d8
 8011f00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011f04:	211a      	movs	r1, #26
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe fcc0 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011f0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe fccb 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011f16:	4603      	mov	r3, r0
 8011f18:	4ad6      	ldr	r2, [pc, #856]	; (8012274 <_ZN12MainViewBaseC1Ev+0x1374>)
 8011f1a:	2105      	movs	r1, #5
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f009 fcb5 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4610      	mov	r0, r2
 8011f32:	f7fe fdef 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011f3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011f40:	2119      	movs	r1, #25
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fe fca2 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011f48:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f005 f9bd 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011f58:	220f      	movs	r2, #15
 8011f5a:	2152      	movs	r1, #82	; 0x52
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fa7a 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011f68:	22ff      	movs	r2, #255	; 0xff
 8011f6a:	21ff      	movs	r1, #255	; 0xff
 8011f6c:	20ff      	movs	r0, #255	; 0xff
 8011f6e:	f7fe ff9d 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f72:	4603      	mov	r3, r0
 8011f74:	4619      	mov	r1, r3
 8011f76:	4620      	mov	r0, r4
 8011f78:	f7fe fcf1 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011f82:	2100      	movs	r1, #0
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fe fd3d 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011f94:	211b      	movs	r1, #27
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fe fc78 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011f9c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f005 f993 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(133, 79, 100, 47);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8011fac:	232f      	movs	r3, #47	; 0x2f
 8011fae:	9300      	str	r3, [sp, #0]
 8011fb0:	2364      	movs	r3, #100	; 0x64
 8011fb2:	224f      	movs	r2, #79	; 0x4f
 8011fb4:	2185      	movs	r1, #133	; 0x85
 8011fb6:	f7fe fa03 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011fc0:	22ff      	movs	r2, #255	; 0xff
 8011fc2:	21ff      	movs	r1, #255	; 0xff
 8011fc4:	20ff      	movs	r0, #255	; 0xff
 8011fc6:	f7fe ff71 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	4619      	mov	r1, r3
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f7fe fcc5 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8011fda:	2100      	movs	r1, #0
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fe fd11 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f603 14e2 	addw	r4, r3, #2530	; 0x9e2
 8011fe8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011fec:	2128      	movs	r1, #40	; 0x28
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fe fc4c 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8011ff4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fe fc57 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8011ffe:	4603      	mov	r3, r0
 8012000:	4a9c      	ldr	r2, [pc, #624]	; (8012274 <_ZN12MainViewBaseC1Ev+0x1374>)
 8012002:	2105      	movs	r1, #5
 8012004:	4620      	mov	r0, r4
 8012006:	f009 fc41 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f603 13e2 	addw	r3, r3, #2530	; 0x9e2
 8012016:	4619      	mov	r1, r3
 8012018:	4610      	mov	r0, r2
 801201a:	f7fe fd7b 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8012024:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012028:	211c      	movs	r1, #28
 801202a:	4618      	mov	r0, r3
 801202c:	f7fe fc2e 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8012030:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8012034:	4620      	mov	r0, r4
 8012036:	f005 f949 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(252, 79, 100, 47);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f603 1044 	addw	r0, r3, #2372	; 0x944
 8012040:	232f      	movs	r3, #47	; 0x2f
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	2364      	movs	r3, #100	; 0x64
 8012046:	224f      	movs	r2, #79	; 0x4f
 8012048:	21fc      	movs	r1, #252	; 0xfc
 801204a:	f7fe f9b9 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8012054:	22ff      	movs	r2, #255	; 0xff
 8012056:	21ff      	movs	r1, #255	; 0xff
 8012058:	20ff      	movs	r0, #255	; 0xff
 801205a:	f7fe ff27 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801205e:	4603      	mov	r3, r0
 8012060:	4619      	mov	r1, r3
 8012062:	4620      	mov	r0, r4
 8012064:	f7fe fc7b 	bl	801095e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801206e:	2100      	movs	r1, #0
 8012070:	4618      	mov	r0, r3
 8012072:	f7fe fcc7 	bl	8010a04 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID70).getText());
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 801207c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012080:	2129      	movs	r1, #41	; 0x29
 8012082:	4618      	mov	r0, r3
 8012084:	f7fe fc02 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 8012088:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fc0d 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8012092:	4603      	mov	r3, r0
 8012094:	4a77      	ldr	r2, [pc, #476]	; (8012274 <_ZN12MainViewBaseC1Ev+0x1374>)
 8012096:	2105      	movs	r1, #5
 8012098:	4620      	mov	r0, r4
 801209a:	f009 fbf7 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f603 1244 	addw	r2, r3, #2372	; 0x944
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80120aa:	4619      	mov	r1, r3
 80120ac:	4610      	mov	r0, r2
 80120ae:	f7fe fd31 	bl	8010b14 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f603 1444 	addw	r4, r3, #2372	; 0x944
 80120b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80120bc:	211d      	movs	r1, #29
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fe fbe4 	bl	801088c <_ZN8touchgfx9TypedTextC1Et>
 80120c4:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 80120c8:	4620      	mov	r0, r4
 80120ca:	f005 f8ff 	bl	80172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3340      	adds	r3, #64	; 0x40
 80120d4:	4619      	mov	r1, r3
 80120d6:	4610      	mov	r0, r2
 80120d8:	f7fe fb20 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	3370      	adds	r3, #112	; 0x70
 80120e2:	4619      	mov	r1, r3
 80120e4:	4610      	mov	r0, r2
 80120e6:	f7fe fb19 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	33a4      	adds	r3, #164	; 0xa4
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f7fe fb12 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	33d8      	adds	r3, #216	; 0xd8
 80120fe:	4619      	mov	r1, r3
 8012100:	4610      	mov	r0, r2
 8012102:	f7fe fb0b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801210e:	4619      	mov	r1, r3
 8012110:	4610      	mov	r0, r2
 8012112:	f7fe fb03 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801211e:	4619      	mov	r1, r3
 8012120:	4610      	mov	r0, r2
 8012122:	f7fe fafb 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801212e:	4619      	mov	r1, r3
 8012130:	4610      	mov	r0, r2
 8012132:	f7fe faf3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801213e:	4619      	mov	r1, r3
 8012140:	4610      	mov	r0, r2
 8012142:	f7fe faeb 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801214e:	4619      	mov	r1, r3
 8012150:	4610      	mov	r0, r2
 8012152:	f7fe fae3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801215e:	4619      	mov	r1, r3
 8012160:	4610      	mov	r0, r2
 8012162:	f7fe fadb 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801216e:	4619      	mov	r1, r3
 8012170:	4610      	mov	r0, r2
 8012172:	f7fe fad3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801217e:	4619      	mov	r1, r3
 8012180:	4610      	mov	r0, r2
 8012182:	f7fe facb 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801218e:	4619      	mov	r1, r3
 8012190:	4610      	mov	r0, r2
 8012192:	f7fe fac3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801219e:	4619      	mov	r1, r3
 80121a0:	4610      	mov	r0, r2
 80121a2:	f7fe fabb 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80121ae:	4619      	mov	r1, r3
 80121b0:	4610      	mov	r0, r2
 80121b2:	f7fe fab3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80121be:	4619      	mov	r1, r3
 80121c0:	4610      	mov	r0, r2
 80121c2:	f7fe faab 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fe faa3 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80121de:	4619      	mov	r1, r3
 80121e0:	4610      	mov	r0, r2
 80121e2:	f7fe fa9b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80121ee:	4619      	mov	r1, r3
 80121f0:	4610      	mov	r0, r2
 80121f2:	f7fe fa93 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureDescriptor);
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80121fe:	4619      	mov	r1, r3
 8012200:	4610      	mov	r0, r2
 8012202:	f7fe fa8b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801220e:	4619      	mov	r1, r3
 8012210:	4610      	mov	r0, r2
 8012212:	f7fe fa83 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OilPressureValue);
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801221e:	4619      	mov	r1, r3
 8012220:	4610      	mov	r0, r2
 8012222:	f7fe fa7b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureValue);
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801222e:	4619      	mov	r1, r3
 8012230:	4610      	mov	r0, r2
 8012232:	f7fe fa73 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801223e:	4619      	mov	r1, r3
 8012240:	4610      	mov	r0, r2
 8012242:	f7fe fa6b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801224e:	4619      	mov	r1, r3
 8012250:	4610      	mov	r0, r2
 8012252:	f7fe fa63 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 801225e:	4619      	mov	r1, r3
 8012260:	4610      	mov	r0, r2
 8012262:	f7fe fa5b 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801226e:	4619      	mov	r1, r3
 8012270:	e002      	b.n	8012278 <_ZN12MainViewBaseC1Ev+0x1378>
 8012272:	bf00      	nop
 8012274:	08026cc4 	.word	0x08026cc4
 8012278:	4610      	mov	r0, r2
 801227a:	f7fe fa4f 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8012286:	4619      	mov	r1, r3
 8012288:	4610      	mov	r0, r2
 801228a:	f7fe fa47 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012296:	4619      	mov	r1, r3
 8012298:	4610      	mov	r0, r2
 801229a:	f7fe fa3f 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80122a6:	4619      	mov	r1, r3
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fe fa37 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80122b6:	4619      	mov	r1, r3
 80122b8:	4610      	mov	r0, r2
 80122ba:	f7fe fa2f 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80122c6:	4619      	mov	r1, r3
 80122c8:	4610      	mov	r0, r2
 80122ca:	f7fe fa27 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fe fa1f 	bl	801071c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4618      	mov	r0, r3
 80122e2:	37cc      	adds	r7, #204	; 0xcc
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd90      	pop	{r4, r7, pc}

080122e8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]

}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	4618      	mov	r0, r3
 8012308:	f007 ff56 	bl	801a1b8 <_ZN8touchgfx6ScreenC1Ev>
 801230c:	4a05      	ldr	r2, [pc, #20]	; (8012324 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4618      	mov	r0, r3
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	08027294 	.word	0x08027294

08012328 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8012328:	b590      	push	{r4, r7, lr}
 801232a:	b089      	sub	sp, #36	; 0x24
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	607a      	str	r2, [r7, #4]
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	015a      	lsls	r2, r3, #5
 801233c:	f107 0314 	add.w	r3, r7, #20
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe fc16 	bl	8010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	461c      	mov	r4, r3
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	61fb      	str	r3, [r7, #28]
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	015a      	lsls	r2, r3, #5
 8012354:	f107 0310 	add.w	r3, r7, #16
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe fc0a 	bl	8010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012360:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012362:	461a      	mov	r2, r3
 8012364:	4621      	mov	r1, r4
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f004 fdee 	bl	8016f48 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 801236c:	bf00      	nop
 801236e:	3724      	adds	r7, #36	; 0x24
 8012370:	46bd      	mov	sp, r7
 8012372:	bd90      	pop	{r4, r7, pc}

08012374 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012374:	b590      	push	{r4, r7, lr}
 8012376:	b089      	sub	sp, #36	; 0x24
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	61bb      	str	r3, [r7, #24]
 8012384:	69bb      	ldr	r3, [r7, #24]
 8012386:	015a      	lsls	r2, r3, #5
 8012388:	f107 0314 	add.w	r3, r7, #20
 801238c:	4611      	mov	r1, r2
 801238e:	4618      	mov	r0, r3
 8012390:	f7fe fbf0 	bl	8010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	461c      	mov	r4, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	61fb      	str	r3, [r7, #28]
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	015a      	lsls	r2, r3, #5
 80123a0:	f107 0310 	add.w	r3, r7, #16
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fe fbe4 	bl	8010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80123ac:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80123ae:	461a      	mov	r2, r3
 80123b0:	4621      	mov	r1, r4
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f004 fdd3 	bl	8016f5e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80123b8:	bf00      	nop
 80123ba:	3724      	adds	r7, #36	; 0x24
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd90      	pop	{r4, r7, pc}

080123c0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	60fb      	str	r3, [r7, #12]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	015a      	lsls	r2, r3, #5
 80123d2:	f107 0308 	add.w	r3, r7, #8
 80123d6:	4611      	mov	r1, r2
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fe fbcb 	bl	8010b74 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80123de:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80123e0:	4619      	mov	r1, r3
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7fe fbe1 	bl	8010baa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80123e8:	bf00      	nop
 80123ea:	3710      	adds	r7, #16
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	4a05      	ldr	r2, [pc, #20]	; (8012410 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	601a      	str	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	f7fe fb4f 	bl	8010aa4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	4618      	mov	r0, r3
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	08028e68 	.word	0x08028e68

08012414 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff ffe7 	bl	80123f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012422:	2138      	movs	r1, #56	; 0x38
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f013 f99e 	bl	8025766 <_ZdlPvj>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4618      	mov	r0, r3
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	4a05      	ldr	r2, [pc, #20]	; (8012454 <_ZN8touchgfx4LineD1Ev+0x20>)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	f004 fb59 	bl	8016afc <_ZN8touchgfx12CanvasWidgetD1Ev>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4618      	mov	r0, r3
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	08028c14 	.word	0x08028c14

08012458 <_ZN8touchgfx4LineD0Ev>:
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff ffe7 	bl	8012434 <_ZN8touchgfx4LineD1Ev>
 8012466:	2174      	movs	r1, #116	; 0x74
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f013 f97c 	bl	8025766 <_ZdlPvj>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4618      	mov	r0, r3
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	4a05      	ldr	r2, [pc, #20]	; (8012498 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	601a      	str	r2, [r3, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4618      	mov	r0, r3
 801248a:	f7fe fbb1 	bl	8010bf0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	08028918 	.word	0x08028918

0801249c <_ZN8touchgfx13PainterRGB888D0Ev>:
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff ffe7 	bl	8012478 <_ZN8touchgfx13PainterRGB888D1Ev>
 80124aa:	2118      	movs	r1, #24
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f013 f95a 	bl	8025766 <_ZdlPvj>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80124bc:	b480      	push	{r7}
 80124be:	af00      	add	r7, sp, #0
    return bitmap_database;
 80124c0:	4b02      	ldr	r3, [pc, #8]	; (80124cc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr
 80124cc:	08027400 	.word	0x08027400

080124d0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80124d0:	b480      	push	{r7}
 80124d2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80124d4:	2303      	movs	r3, #3
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80124e0:	b480      	push	{r7}
 80124e2:	b085      	sub	sp, #20
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	4613      	mov	r3, r2
 80124ec:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80124ee:	4a07      	ldr	r2, [pc, #28]	; (801250c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80124f4:	4a06      	ldr	r2, [pc, #24]	; (8012510 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80124fa:	4a06      	ldr	r2, [pc, #24]	; (8012514 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80124fc:	88fb      	ldrh	r3, [r7, #6]
 80124fe:	8013      	strh	r3, [r2, #0]
    }
 8012500:	bf00      	nop
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	2000bc24 	.word	0x2000bc24
 8012510:	2000bc2c 	.word	0x2000bc2c
 8012514:	2000bc28 	.word	0x2000bc28

08012518 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012518:	b590      	push	{r4, r7, lr}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012526:	88fb      	ldrh	r3, [r7, #6]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d127      	bne.n	801257c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801252c:	88fb      	ldrh	r3, [r7, #6]
 801252e:	4a1e      	ldr	r2, [pc, #120]	; (80125a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d016      	beq.n	8012566 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012538:	88fb      	ldrh	r3, [r7, #6]
 801253a:	4a1b      	ldr	r2, [pc, #108]	; (80125a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012540:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	4413      	add	r3, r2
 801254a:	4a18      	ldr	r2, [pc, #96]	; (80125ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801254c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	4413      	add	r3, r2
 8012556:	4a16      	ldr	r2, [pc, #88]	; (80125b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012558:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	68ba      	ldr	r2, [r7, #8]
 8012560:	4413      	add	r3, r2
 8012562:	60fb      	str	r3, [r7, #12]
 8012564:	e00a      	b.n	801257c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012566:	4b11      	ldr	r3, [pc, #68]	; (80125ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012568:	4a12      	ldr	r2, [pc, #72]	; (80125b4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801256a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801256c:	4a12      	ldr	r2, [pc, #72]	; (80125b8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801256e:	4b10      	ldr	r3, [pc, #64]	; (80125b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012570:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012572:	88fb      	ldrh	r3, [r7, #6]
 8012574:	4a11      	ldr	r2, [pc, #68]	; (80125bc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801257a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d00d      	beq.n	801259e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012582:	4a0f      	ldr	r2, [pc, #60]	; (80125c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012584:	88fb      	ldrh	r3, [r7, #6]
 8012586:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012588:	f000 f83e 	bl	8012608 <_ZN17TypedTextDatabase8getFontsEv>
 801258c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801258e:	f000 f833 	bl	80125f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012592:	4603      	mov	r3, r0
 8012594:	461a      	mov	r2, r3
 8012596:	4621      	mov	r1, r4
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f7ff ffa1 	bl	80124e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801259e:	bf00      	nop
 80125a0:	3714      	adds	r7, #20
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd90      	pop	{r4, r7, pc}
 80125a6:	bf00      	nop
 80125a8:	20008634 	.word	0x20008634
 80125ac:	2000863c 	.word	0x2000863c
 80125b0:	20008640 	.word	0x20008640
 80125b4:	08062b24 	.word	0x08062b24
 80125b8:	08062a78 	.word	0x08062a78
 80125bc:	08062ca8 	.word	0x08062ca8
 80125c0:	20008638 	.word	0x20008638

080125c4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	460b      	mov	r3, r1
 80125ce:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80125d0:	4b07      	ldr	r3, [pc, #28]	; (80125f0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	4b07      	ldr	r3, [pc, #28]	; (80125f4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80125d6:	6819      	ldr	r1, [r3, #0]
 80125d8:	887b      	ldrh	r3, [r7, #2]
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	440b      	add	r3, r1
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	005b      	lsls	r3, r3, #1
 80125e2:	4413      	add	r3, r2
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	370c      	adds	r7, #12
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr
 80125f0:	2000863c 	.word	0x2000863c
 80125f4:	20008640 	.word	0x20008640

080125f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80125f8:	b480      	push	{r7}
 80125fa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80125fc:	232b      	movs	r3, #43	; 0x2b
}
 80125fe:	4618      	mov	r0, r3
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
    return _fonts;
 801260c:	4b02      	ldr	r3, [pc, #8]	; (8012618 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801260e:	4618      	mov	r0, r3
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr
 8012618:	20008644 	.word	0x20008644

0801261c <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d127      	bne.n	801267c <_Z41__static_initialization_and_destruction_0ii+0x60>
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012632:	4293      	cmp	r3, r2
 8012634:	d122      	bne.n	801267c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8012636:	f7fc ffb5 	bl	800f5a4 <_Z25getFont_Asap_Bold_18_4bppv>
 801263a:	4602      	mov	r2, r0
};
 801263c:	4b11      	ldr	r3, [pc, #68]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801263e:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012640:	f7fd f876 	bl	800f730 <_Z25getFont_Asap_Bold_40_4bppv>
 8012644:	4602      	mov	r2, r0
};
 8012646:	4b0f      	ldr	r3, [pc, #60]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012648:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801264a:	f7fd f82f 	bl	800f6ac <_Z25getFont_Asap_Bold_30_4bppv>
 801264e:	4602      	mov	r2, r0
};
 8012650:	4b0c      	ldr	r3, [pc, #48]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012652:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012654:	f7fc ff64 	bl	800f520 <_Z25getFont_Asap_Bold_12_4bppv>
 8012658:	4602      	mov	r2, r0
};
 801265a:	4b0a      	ldr	r3, [pc, #40]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801265c:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 801265e:	f7fd f8a9 	bl	800f7b4 <_Z25getFont_Asap_Bold_60_4bppv>
 8012662:	4602      	mov	r2, r0
};
 8012664:	4b07      	ldr	r3, [pc, #28]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012666:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012668:	f7fc ffde 	bl	800f628 <_Z25getFont_Asap_Bold_21_4bppv>
 801266c:	4602      	mov	r2, r0
};
 801266e:	4b05      	ldr	r3, [pc, #20]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012670:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8012672:	f7fc ff13 	bl	800f49c <_Z25getFont_Asap_Bold_10_4bppv>
 8012676:	4602      	mov	r2, r0
};
 8012678:	4b02      	ldr	r3, [pc, #8]	; (8012684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801267a:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	20008644 	.word	0x20008644

08012688 <_GLOBAL__sub_I__fonts>:
 8012688:	b580      	push	{r7, lr}
 801268a:	af00      	add	r7, sp, #0
 801268c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012690:	2001      	movs	r0, #1
 8012692:	f7ff ffc3 	bl	801261c <_Z41__static_initialization_and_destruction_0ii>
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	4a05      	ldr	r2, [pc, #20]	; (80126b8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	601a      	str	r2, [r3, #0]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fd fb13 	bl	800fcd4 <_ZN23FrontendApplicationBaseD1Ev>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	08027444 	.word	0x08027444

080126bc <_ZN19FrontendApplicationD0Ev>:
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f7ff ffe7 	bl	8012698 <_ZN19FrontendApplicationD1Ev>
 80126ca:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f013 f849 	bl	8025766 <_ZdlPvj>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80126ec:	4618      	mov	r0, r3
 80126ee:	f000 fc39 	bl	8012f64 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f006 fcbb 	bl	8019070 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80126fa:	bf00      	nop
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
	...

08012704 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	68b9      	ldr	r1, [r7, #8]
 8012716:	4618      	mov	r0, r3
 8012718:	f7fd fb56 	bl	800fdc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801271c:	4a03      	ldr	r2, [pc, #12]	; (801272c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	601a      	str	r2, [r3, #0]
{
}
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	08027444 	.word	0x08027444

08012730 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
    {
    }
 8012738:	bf00      	nop
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr

08012744 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
    {
    }
 801274c:	bf00      	nop
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    {
 8012760:	4a04      	ldr	r2, [pc, #16]	; (8012774 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	601a      	str	r2, [r3, #0]
    }
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	080274d0 	.word	0x080274d0

08012778 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
    }
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7ff ffe9 	bl	8012758 <_ZN8touchgfx9PresenterD1Ev>
 8012786:	2104      	movs	r1, #4
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f012 ffec 	bl	8025766 <_ZdlPvj>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4618      	mov	r0, r3
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
    {
 80127a0:	4a04      	ldr	r2, [pc, #16]	; (80127b4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	601a      	str	r2, [r3, #0]
    }
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	370c      	adds	r7, #12
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	080274d0 	.word	0x080274d0

080127b8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	4a06      	ldr	r2, [pc, #24]	; (80127dc <_ZN13ModelListenerC1Ev+0x24>)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	601a      	str	r2, [r3, #0]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	605a      	str	r2, [r3, #4]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	080274b8 	.word	0x080274b8

080127e0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	4a04      	ldr	r2, [pc, #16]	; (80127fc <_ZN13ModelListenerD1Ev+0x1c>)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	601a      	str	r2, [r3, #0]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	080274b8 	.word	0x080274b8

08012800 <_ZN13ModelListenerD0Ev>:
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7ff ffe9 	bl	80127e0 <_ZN13ModelListenerD1Ev>
 801280e:	2108      	movs	r1, #8
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f012 ffa8 	bl	8025766 <_ZdlPvj>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
 801282a:	bf00      	nop
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8012836:	b480      	push	{r7}
 8012838:	b083      	sub	sp, #12
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	6039      	str	r1, [r7, #0]
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	4a09      	ldr	r2, [pc, #36]	; (801287c <_ZN13MainPresenterD1Ev+0x30>)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	4a09      	ldr	r2, [pc, #36]	; (8012880 <_ZN13MainPresenterD1Ev+0x34>)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	605a      	str	r2, [r3, #4]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3304      	adds	r3, #4
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff ffbb 	bl	80127e0 <_ZN13ModelListenerD1Ev>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	f7ff ff73 	bl	8012758 <_ZN8touchgfx9PresenterD1Ev>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	08027480 	.word	0x08027480
 8012880:	080274a0 	.word	0x080274a0

08012884 <_ZThn4_N13MainPresenterD1Ev>:
 8012884:	f1a0 0004 	sub.w	r0, r0, #4
 8012888:	e7e0      	b.n	801284c <_ZN13MainPresenterD1Ev>
 801288a:	bf00      	nop

0801288c <_ZN13MainPresenterD0Ev>:
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7ff ffd9 	bl	801284c <_ZN13MainPresenterD1Ev>
 801289a:	2110      	movs	r1, #16
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f012 ff62 	bl	8025766 <_ZdlPvj>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <_ZThn4_N13MainPresenterD0Ev>:
 80128ac:	f1a0 0004 	sub.w	r0, r0, #4
 80128b0:	e7ec      	b.n	801288c <_ZN13MainPresenterD0Ev>
	...

080128b4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
    : view(v)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff ff69 	bl	8012798 <_ZN8touchgfx9PresenterC1Ev>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3304      	adds	r3, #4
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff ff74 	bl	80127b8 <_ZN13ModelListenerC1Ev>
 80128d0:	4a06      	ldr	r2, [pc, #24]	; (80128ec <_ZN13MainPresenterC1ER8MainView+0x38>)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	601a      	str	r2, [r3, #0]
 80128d6:	4a06      	ldr	r2, [pc, #24]	; (80128f0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	605a      	str	r2, [r3, #4]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	683a      	ldr	r2, [r7, #0]
 80128e0:	60da      	str	r2, [r3, #12]
{
}
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	08027480 	.word	0x08027480
 80128f0:	080274a0 	.word	0x080274a0

080128f4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
}
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	6839      	ldr	r1, [r7, #0]
 801292c:	4618      	mov	r0, r3
 801292e:	f000 f9f7 	bl	8012d20 <_ZN8MainView9updateValEPh>
}
 8012932:	bf00      	nop
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801293a:	f1a0 0004 	sub.w	r0, r0, #4
 801293e:	f7ff bfed 	b.w	801291c <_ZN13MainPresenter11setNewValueEPh>

08012942 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b082      	sub	sp, #8
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	6839      	ldr	r1, [r7, #0]
 8012952:	4618      	mov	r0, r3
 8012954:	f000 f908 	bl	8012b68 <_ZN8MainView14updateSettingsEPh>
}
 8012958:	bf00      	nop
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012960:	f1a0 0004 	sub.w	r0, r0, #4
 8012964:	f7ff bfed 	b.w	8012942 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012968 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	370c      	adds	r7, #12
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	460b      	mov	r3, r1
 801298e:	607a      	str	r2, [r7, #4]
 8012990:	ed87 0a00 	vstr	s0, [r7]
 8012994:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012996:	463b      	mov	r3, r7
 8012998:	8979      	ldrh	r1, [r7, #10]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f009 f8cf 	bl	801bb40 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80129a2:	4603      	mov	r3, r0
    }
 80129a4:	4618      	mov	r0, r3
 80129a6:	3710      	adds	r7, #16
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
        return rect.width;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80129ba:	4618      	mov	r0, r3
 80129bc:	370c      	adds	r7, #12
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr

080129c6 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80129c6:	b480      	push	{r7}
 80129c8:	b083      	sub	sp, #12
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
        return rect.height;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	4a05      	ldr	r2, [pc, #20]	; (8012a00 <_ZN8MainViewD1Ev+0x20>)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fe f963 	bl	8010cbc <_ZN12MainViewBaseD1Ev>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	080274e8 	.word	0x080274e8

08012a04 <_ZN8MainViewD0Ev>:
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff ffe7 	bl	80129e0 <_ZN8MainViewD1Ev>
 8012a12:	f242 6118 	movw	r1, #9752	; 0x2618
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f012 fea5 	bl	8025766 <_ZdlPvj>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
	...

08012a28 <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fe fa64 	bl	8010f00 <_ZN12MainViewBaseC1Ev>
 8012a38:	4a15      	ldr	r2, [pc, #84]	; (8012a90 <_ZN8MainViewC1Ev+0x68>)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012a3e:	4b15      	ldr	r3, [pc, #84]	; (8012a94 <_ZN8MainViewC1Ev+0x6c>)
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	461c      	mov	r4, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff ffae 	bl	80129ac <_ZNK8touchgfx8Drawable8getWidthEv>
 8012a50:	4603      	mov	r3, r0
 8012a52:	429c      	cmp	r4, r3
 8012a54:	dc0b      	bgt.n	8012a6e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012a56:	4b10      	ldr	r3, [pc, #64]	; (8012a98 <_ZN8MainViewC1Ev+0x70>)
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	461c      	mov	r4, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7ff ffaf 	bl	80129c6 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012a68:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012a6a:	429c      	cmp	r4, r3
 8012a6c:	dd01      	ble.n	8012a72 <_ZN8MainViewC1Ev+0x4a>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e000      	b.n	8012a74 <_ZN8MainViewC1Ev+0x4c>
 8012a72:	2300      	movs	r3, #0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d005      	beq.n	8012a84 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	3340      	adds	r3, #64	; 0x40
 8012a7c:	2101      	movs	r1, #1
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fd fd5a 	bl	8010538 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	4618      	mov	r0, r3
 8012a88:	370c      	adds	r7, #12
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd90      	pop	{r4, r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	080274e8 	.word	0x080274e8
 8012a94:	2000bb88 	.word	0x2000bb88
 8012a98:	2000bb8a 	.word	0x2000bb8a

08012a9c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
}
 8012aa4:	bf00      	nop
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
}
 8012ab8:	bf00      	nop
 8012aba:	370c      	adds	r7, #12
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr

08012ac4 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012aca:	2200      	movs	r2, #0
 8012acc:	2100      	movs	r1, #0
 8012ace:	2000      	movs	r0, #0
 8012ad0:	f7fe f9ec 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	607b      	str	r3, [r7, #4]
	return black_color;
 8012ad8:	687b      	ldr	r3, [r7, #4]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0

	color_index ++;
 8012aea:	4b1e      	ldr	r3, [pc, #120]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	3301      	adds	r3, #1
 8012af0:	4a1c      	ldr	r2, [pc, #112]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012af2:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012af4:	4b1b      	ldr	r3, [pc, #108]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	dd02      	ble.n	8012b02 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012afc:	4b19      	ldr	r3, [pc, #100]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012afe:	2200      	movs	r2, #0
 8012b00:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012b02:	2200      	movs	r2, #0
 8012b04:	2100      	movs	r1, #0
 8012b06:	20ff      	movs	r0, #255	; 0xff
 8012b08:	f7fe f9d0 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012b10:	2200      	movs	r2, #0
 8012b12:	2100      	movs	r1, #0
 8012b14:	2000      	movs	r0, #0
 8012b16:	f7fe f9c9 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012b1e:	22ff      	movs	r2, #255	; 0xff
 8012b20:	21ff      	movs	r1, #255	; 0xff
 8012b22:	20ff      	movs	r0, #255	; 0xff
 8012b24:	f7fe f9c2 	bl	8010eac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff ff1a 	bl	8012968 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012b34:	4b0b      	ldr	r3, [pc, #44]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012b40:	4b08      	ldr	r3, [pc, #32]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d101      	bne.n	8012b4c <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012b4c:	4b05      	ldr	r3, [pc, #20]	; (8012b64 <_ZL20getColorFromRevLimitv+0x80>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d101      	bne.n	8012b58 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012b58:	683b      	ldr	r3, [r7, #0]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3710      	adds	r7, #16
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	20008660 	.word	0x20008660

08012b68 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af02      	add	r7, sp, #8
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpmLimit;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4a66      	ldr	r2, [pc, #408]	; (8012d14 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012b7c:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6a1b      	ldr	r3, [r3, #32]
 8012b88:	ee07 3a90 	vmov	s15, r3
 8012b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b90:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012d18 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b9c:	ee17 3a90 	vmov	r3, s15
 8012ba0:	b21a      	sxth	r2, r3
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	2100      	movs	r1, #0
 8012baa:	f002 fc0d 	bl	80153c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f006 ff97 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f503 6019 	add.w	r0, r3, #2448	; 0x990
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	4a55      	ldr	r2, [pc, #340]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012bc6:	2102      	movs	r1, #2
 8012bc8:	f008 fe60 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f004 fb50 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012bde:	4618      	mov	r0, r3
 8012be0:	f006 ff82 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f603 1094 	addw	r0, r3, #2452	; 0x994
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	4a4b      	ldr	r2, [pc, #300]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012bf0:	2102      	movs	r1, #2
 8012bf2:	f008 fe4b 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f004 fb3b 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f006 ff6d 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f603 1098 	addw	r0, r3, #2456	; 0x998
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	4a40      	ldr	r2, [pc, #256]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c1a:	2102      	movs	r1, #2
 8012c1c:	f008 fe36 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012c26:	4618      	mov	r0, r3
 8012c28:	f004 fb26 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012c32:	4618      	mov	r0, r3
 8012c34:	f006 ff58 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f603 109c 	addw	r0, r3, #2460	; 0x99c
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	691b      	ldr	r3, [r3, #16]
 8012c42:	4a36      	ldr	r2, [pc, #216]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c44:	2102      	movs	r1, #2
 8012c46:	f008 fe21 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012c50:	4618      	mov	r0, r3
 8012c52:	f004 fb11 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f006 ff43 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	695b      	ldr	r3, [r3, #20]
 8012c6c:	4a2b      	ldr	r2, [pc, #172]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c6e:	2102      	movs	r1, #2
 8012c70:	f008 fe0c 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f004 fafc 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012c86:	4618      	mov	r0, r3
 8012c88:	f006 ff2e 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f603 10a4 	addw	r0, r3, #2468	; 0x9a4
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	699b      	ldr	r3, [r3, #24]
 8012c96:	4a21      	ldr	r2, [pc, #132]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012c98:	2102      	movs	r1, #2
 8012c9a:	f008 fdf7 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f004 fae7 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f006 ff19 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f603 10a8 	addw	r0, r3, #2472	; 0x9a8
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	69db      	ldr	r3, [r3, #28]
 8012cc0:	4a16      	ldr	r2, [pc, #88]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012cc2:	2102      	movs	r1, #2
 8012cc4:	f008 fde2 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f004 fad2 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f006 ff04 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f603 10ac 	addw	r0, r3, #2476	; 0x9ac
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	4a0c      	ldr	r2, [pc, #48]	; (8012d1c <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012cec:	2102      	movs	r1, #2
 8012cee:	f008 fdcd 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f004 fabd 	bl	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012d04:	4618      	mov	r0, r3
 8012d06:	f006 feef 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8012d0a:	bf00      	nop
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	20000048 	.word	0x20000048
 8012d18:	447a0000 	.word	0x447a0000
 8012d1c:	08026e28 	.word	0x08026e28

08012d20 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8012d20:	b590      	push	{r4, r7, lr}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	4b77      	ldr	r3, [pc, #476]	; (8012f10 <_ZN8MainView9updateValEPh+0x1f0>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	bfac      	ite	ge
 8012d3a:	2301      	movge	r3, #1
 8012d3c:	2300      	movlt	r3, #0
 8012d3e:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012d40:	7afb      	ldrb	r3, [r7, #11]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d012      	beq.n	8012d6c <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8012d46:	4b73      	ldr	r3, [pc, #460]	; (8012f14 <_ZN8MainView9updateValEPh+0x1f4>)
 8012d48:	2200      	movs	r2, #0
 8012d4a:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012d52:	f7ff fec7 	bl	8012ae4 <_ZL20getColorFromRevLimitv>
 8012d56:	4603      	mov	r3, r0
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f7fd fd88 	bl	8010870 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	3340      	adds	r3, #64	; 0x40
 8012d64:	4618      	mov	r0, r3
 8012d66:	f006 febf 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012d6a:	e018      	b.n	8012d9e <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8012d6c:	4b69      	ldr	r3, [pc, #420]	; (8012f14 <_ZN8MainView9updateValEPh+0x1f4>)
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	f083 0301 	eor.w	r3, r3, #1
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d011      	beq.n	8012d9e <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012d80:	f7ff fea0 	bl	8012ac4 <_ZL13getBlackColorv>
 8012d84:	4603      	mov	r3, r0
 8012d86:	4619      	mov	r1, r3
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f7fd fd71 	bl	8010870 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	3340      	adds	r3, #64	; 0x40
 8012d92:	4618      	mov	r0, r3
 8012d94:	f006 fea8 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8012d98:	4b5e      	ldr	r3, [pc, #376]	; (8012f14 <_ZN8MainView9updateValEPh+0x1f4>)
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f503 62f6 	add.w	r2, r3, #1968	; 0x7b0
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4619      	mov	r1, r3
 8012daa:	4610      	mov	r0, r2
 8012dac:	f002 f9f6 	bl	801519c <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012db6:	4618      	mov	r0, r3
 8012db8:	f006 fe96 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f603 10d8 	addw	r0, r3, #2520	; 0x9d8
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4a54      	ldr	r2, [pc, #336]	; (8012f18 <_ZN8MainView9updateValEPh+0x1f8>)
 8012dc8:	2105      	movs	r1, #5
 8012dca:	f008 fd5f 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f006 fe87 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	4a4c      	ldr	r2, [pc, #304]	; (8012f18 <_ZN8MainView9updateValEPh+0x1f8>)
 8012de6:	2105      	movs	r1, #5
 8012de8:	f008 fd50 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012df2:	4618      	mov	r0, r3
 8012df4:	f006 fe78 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f603 10e2 	addw	r0, r3, #2530	; 0x9e2
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	4a45      	ldr	r2, [pc, #276]	; (8012f18 <_ZN8MainView9updateValEPh+0x1f8>)
 8012e04:	2105      	movs	r1, #5
 8012e06:	f008 fd41 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012e10:	4618      	mov	r0, r3
 8012e12:	f006 fe69 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e22:	eeb0 0a67 	vmov.f32	s0, s15
 8012e26:	4a3d      	ldr	r2, [pc, #244]	; (8012f1c <_ZN8MainView9updateValEPh+0x1fc>)
 8012e28:	2105      	movs	r1, #5
 8012e2a:	f7ff fdab 	bl	8012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e34:	4618      	mov	r0, r3
 8012e36:	f006 fe57 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambdaTarget);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f603 1086 	addw	r0, r3, #2438	; 0x986
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	edd3 7a04 	vldr	s15, [r3, #16]
 8012e46:	eeb0 0a67 	vmov.f32	s0, s15
 8012e4a:	4a34      	ldr	r2, [pc, #208]	; (8012f1c <_ZN8MainView9updateValEPh+0x1fc>)
 8012e4c:	2105      	movs	r1, #5
 8012e4e:	f7ff fd99 	bl	8012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f006 fe45 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oilPressure);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f603 10ba 	addw	r0, r3, #2490	; 0x9ba
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	edd3 7a07 	vldr	s15, [r3, #28]
 8012e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8012e6e:	4a2c      	ldr	r2, [pc, #176]	; (8012f20 <_ZN8MainView9updateValEPh+0x200>)
 8012e70:	2105      	movs	r1, #5
 8012e72:	f7ff fd87 	bl	8012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OilPressureValue.invalidate();
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f006 fe33 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%.1f",values->fuelPressure);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f603 10c4 	addw	r0, r3, #2500	; 0x9c4
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8012e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8012e92:	4a23      	ldr	r2, [pc, #140]	; (8012f20 <_ZN8MainView9updateValEPh+0x200>)
 8012e94:	2105      	movs	r1, #5
 8012e96:	f7ff fd75 	bl	8012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	FuelPressureValue.invalidate();
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f006 fe21 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	4a19      	ldr	r2, [pc, #100]	; (8012f18 <_ZN8MainView9updateValEPh+0x1f8>)
 8012eb2:	2105      	movs	r1, #5
 8012eb4:	f008 fcea 	bl	801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f006 fe12 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	f002 f813 	bl	8014efc <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012edc:	4618      	mov	r0, r3
 8012ede:	f006 fe03 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->battVoltage);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f603 10ce 	addw	r0, r3, #2510	; 0x9ce
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012eee:	eeb0 0a67 	vmov.f32	s0, s15
 8012ef2:	4a0a      	ldr	r2, [pc, #40]	; (8012f1c <_ZN8MainView9updateValEPh+0x1fc>)
 8012ef4:	2105      	movs	r1, #5
 8012ef6:	f7ff fd45 	bl	8012984 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8012f00:	4618      	mov	r0, r3
 8012f02:	f006 fdf1 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012f06:	bf00      	nop
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd90      	pop	{r4, r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	20000048 	.word	0x20000048
 8012f14:	20008664 	.word	0x20008664
 8012f18:	08026e28 	.word	0x08026e28
 8012f1c:	08026e2c 	.word	0x08026e2c
 8012f20:	08026e34 	.word	0x08026e34

08012f24 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8012f32:	2200      	movs	r2, #0
 8012f34:	2134      	movs	r1, #52	; 0x34
 8012f36:	2001      	movs	r0, #1
 8012f38:	f7f9 fd91 	bl	800ca5e <xQueueGenericCreate>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <_ZN5ModelC1Ev+0x38>)
 8012f40:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8012f42:	2200      	movs	r2, #0
 8012f44:	2128      	movs	r1, #40	; 0x28
 8012f46:	2001      	movs	r0, #1
 8012f48:	f7f9 fd89 	bl	800ca5e <xQueueGenericCreate>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	4b04      	ldr	r3, [pc, #16]	; (8012f60 <_ZN5ModelC1Ev+0x3c>)
 8012f50:	601a      	str	r2, [r3, #0]
}
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	4618      	mov	r0, r3
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	200086c4 	.word	0x200086c4
 8012f60:	200086c8 	.word	0x200086c8

08012f64 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012f6c:	4b1a      	ldr	r3, [pc, #104]	; (8012fd8 <_ZN5Model4tickEv+0x74>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2200      	movs	r2, #0
 8012f72:	491a      	ldr	r1, [pc, #104]	; (8012fdc <_ZN5Model4tickEv+0x78>)
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7fa f803 	bl	800cf80 <xQueueReceive>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	bf0c      	ite	eq
 8012f80:	2301      	moveq	r3, #1
 8012f82:	2300      	movne	r3, #0
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d009      	beq.n	8012f9e <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	3308      	adds	r3, #8
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4910      	ldr	r1, [pc, #64]	; (8012fdc <_ZN5Model4tickEv+0x78>)
 8012f9a:	4610      	mov	r0, r2
 8012f9c:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8012f9e:	4b10      	ldr	r3, [pc, #64]	; (8012fe0 <_ZN5Model4tickEv+0x7c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	490f      	ldr	r1, [pc, #60]	; (8012fe4 <_ZN5Model4tickEv+0x80>)
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7f9 ffea 	bl	800cf80 <xQueueReceive>
 8012fac:	4603      	mov	r3, r0
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	bf0c      	ite	eq
 8012fb2:	2301      	moveq	r3, #1
 8012fb4:	2300      	movne	r3, #0
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d009      	beq.n	8012fd0 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	330c      	adds	r3, #12
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4906      	ldr	r1, [pc, #24]	; (8012fe4 <_ZN5Model4tickEv+0x80>)
 8012fcc:	4610      	mov	r0, r2
 8012fce:	4798      	blx	r3
	}
}
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	200086c4 	.word	0x200086c4
 8012fdc:	20008668 	.word	0x20008668
 8012fe0:	200086c8 	.word	0x200086c8
 8012fe4:	2000869c 	.word	0x2000869c

08012fe8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
    {
 8012ff0:	4a04      	ldr	r2, [pc, #16]	; (8013004 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	601a      	str	r2, [r3, #0]
    }
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	370c      	adds	r7, #12
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr
 8013004:	08027534 	.word	0x08027534

08013008 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
    }
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff ffe9 	bl	8012fe8 <_ZN8touchgfx15TouchControllerD1Ev>
 8013016:	2104      	movs	r1, #4
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f012 fba4 	bl	8025766 <_ZdlPvj>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013030:	bf00      	nop
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	60f8      	str	r0, [r7, #12]
 8013044:	60b9      	str	r1, [r7, #8]
 8013046:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
	...

08013058 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	4a05      	ldr	r2, [pc, #20]	; (8013078 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	601a      	str	r2, [r3, #0]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff ffbd 	bl	8012fe8 <_ZN8touchgfx15TouchControllerD1Ev>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	4618      	mov	r0, r3
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	0802751c 	.word	0x0802751c

0801307c <_ZN20STM32TouchControllerD0Ev>:
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff ffe7 	bl	8013058 <_ZN20STM32TouchControllerD1Ev>
 801308a:	2104      	movs	r1, #4
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f012 fb6a 	bl	8025766 <_ZdlPvj>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	71fb      	strb	r3, [r7, #7]

}
 80130a6:	bf00      	nop
 80130a8:	370c      	adds	r7, #12
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80130b2:	b480      	push	{r7}
 80130b4:	b083      	sub	sp, #12
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	4603      	mov	r3, r0
 80130ba:	71fb      	strb	r3, [r7, #7]

}
 80130bc:	bf00      	nop
 80130be:	370c      	adds	r7, #12
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr

080130c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	4603      	mov	r3, r0
 80130d0:	71fb      	strb	r3, [r7, #7]

}
 80130d2:	bf00      	nop
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr
	...

080130e0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
    {
 80130e8:	4a04      	ldr	r2, [pc, #16]	; (80130fc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	601a      	str	r2, [r3, #0]
    }
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4618      	mov	r0, r3
 80130f2:	370c      	adds	r7, #12
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr
 80130fc:	080282ec 	.word	0x080282ec

08013100 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
    }
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7ff ffe9 	bl	80130e0 <_ZN8touchgfx3HALD1Ev>
 801310e:	2178      	movs	r1, #120	; 0x78
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f012 fb28 	bl	8025766 <_ZdlPvj>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4618      	mov	r0, r3
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	460b      	mov	r3, r1
 801312a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	78fa      	ldrb	r2, [r7, #3]
 8013130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801313c:	bf00      	nop
 801313e:	370c      	adds	r7, #12
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr

08013148 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	685a      	ldr	r2, [r3, #4]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4610      	mov	r0, r2
 801315e:	4798      	blx	r3
 8013160:	4603      	mov	r3, r0
    }
 8013162:	4618      	mov	r0, r3
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}

0801316a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801316a:	b580      	push	{r7, lr}
 801316c:	b082      	sub	sp, #8
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f003 f91c 	bl	80163b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	3390      	adds	r3, #144	; 0x90
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	4798      	blx	r3
    }
 8013184:	bf00      	nop
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801318c:	b480      	push	{r7}
 801318e:	b083      	sub	sp, #12
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013196:	2300      	movs	r3, #0
    }
 8013198:	4618      	mov	r0, r3
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80131a4:	b590      	push	{r4, r7, lr}
 80131a6:	b08b      	sub	sp, #44	; 0x2c
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	4611      	mov	r1, r2
 80131b0:	461a      	mov	r2, r3
 80131b2:	460b      	mov	r3, r1
 80131b4:	80fb      	strh	r3, [r7, #6]
 80131b6:	4613      	mov	r3, r2
 80131b8:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80131ba:	f7fc fc3d 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80131be:	4602      	mov	r2, r0
 80131c0:	6813      	ldr	r3, [r2, #0]
 80131c2:	3328      	adds	r3, #40	; 0x28
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4610      	mov	r0, r2
 80131c8:	4798      	blx	r3
 80131ca:	4603      	mov	r3, r0
 80131cc:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80131ce:	8b7b      	ldrh	r3, [r7, #26]
 80131d0:	4a3d      	ldr	r2, [pc, #244]	; (80132c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80131d2:	8812      	ldrh	r2, [r2, #0]
 80131d4:	fb02 f303 	mul.w	r3, r2, r3
 80131d8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80131de:	2300      	movs	r3, #0
 80131e0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80131e2:	2300      	movs	r3, #0
 80131e4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80131e6:	797b      	ldrb	r3, [r7, #5]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d005      	beq.n	80131f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80131ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	4413      	add	r3, r2
 80131f2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80131f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80131f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d005      	beq.n	801320c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	4413      	add	r3, r2
 8013206:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 801320c:	88fb      	ldrh	r3, [r7, #6]
 801320e:	3b01      	subs	r3, #1
 8013210:	2b1f      	cmp	r3, #31
 8013212:	d84d      	bhi.n	80132b0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013214:	a201      	add	r2, pc, #4	; (adr r2, 801321c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801321a:	bf00      	nop
 801321c:	0801329d 	.word	0x0801329d
 8013220:	0801329d 	.word	0x0801329d
 8013224:	080132b1 	.word	0x080132b1
 8013228:	0801329d 	.word	0x0801329d
 801322c:	080132b1 	.word	0x080132b1
 8013230:	080132b1 	.word	0x080132b1
 8013234:	080132b1 	.word	0x080132b1
 8013238:	0801329d 	.word	0x0801329d
 801323c:	080132b1 	.word	0x080132b1
 8013240:	080132b1 	.word	0x080132b1
 8013244:	080132b1 	.word	0x080132b1
 8013248:	080132b1 	.word	0x080132b1
 801324c:	080132b1 	.word	0x080132b1
 8013250:	080132b1 	.word	0x080132b1
 8013254:	080132b1 	.word	0x080132b1
 8013258:	0801329d 	.word	0x0801329d
 801325c:	080132b1 	.word	0x080132b1
 8013260:	080132b1 	.word	0x080132b1
 8013264:	080132b1 	.word	0x080132b1
 8013268:	080132b1 	.word	0x080132b1
 801326c:	080132b1 	.word	0x080132b1
 8013270:	080132b1 	.word	0x080132b1
 8013274:	080132b1 	.word	0x080132b1
 8013278:	0801329d 	.word	0x0801329d
 801327c:	080132b1 	.word	0x080132b1
 8013280:	080132b1 	.word	0x080132b1
 8013284:	080132b1 	.word	0x080132b1
 8013288:	080132b1 	.word	0x080132b1
 801328c:	080132b1 	.word	0x080132b1
 8013290:	080132b1 	.word	0x080132b1
 8013294:	080132b1 	.word	0x080132b1
 8013298:	0801329d 	.word	0x0801329d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	3374      	adds	r3, #116	; 0x74
 80132a2:	681c      	ldr	r4, [r3, #0]
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	6a3a      	ldr	r2, [r7, #32]
 80132a8:	68b9      	ldr	r1, [r7, #8]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	47a0      	blx	r4
            break;
 80132ae:	e006      	b.n	80132be <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80132b0:	4b06      	ldr	r3, [pc, #24]	; (80132cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80132b2:	4a07      	ldr	r2, [pc, #28]	; (80132d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80132b4:	f240 3125 	movw	r1, #805	; 0x325
 80132b8:	4806      	ldr	r0, [pc, #24]	; (80132d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80132ba:	f012 fa7f 	bl	80257bc <__assert_func>
            break;
        }
    }
 80132be:	bf00      	nop
 80132c0:	372c      	adds	r7, #44	; 0x2c
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd90      	pop	{r4, r7, pc}
 80132c6:	bf00      	nop
 80132c8:	2000bb90 	.word	0x2000bb90
 80132cc:	08026e3c 	.word	0x08026e3c
 80132d0:	08027648 	.word	0x08027648
 80132d4:	08026e5c 	.word	0x08026e5c

080132d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80132ec:	4b11      	ldr	r3, [pc, #68]	; (8013334 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80132ee:	4a12      	ldr	r2, [pc, #72]	; (8013338 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80132f0:	f240 3137 	movw	r1, #823	; 0x337
 80132f4:	4811      	ldr	r0, [pc, #68]	; (801333c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80132f6:	f012 fa61 	bl	80257bc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	bf14      	ite	ne
 8013312:	2301      	movne	r3, #1
 8013314:	2300      	moveq	r3, #0
 8013316:	b2da      	uxtb	r2, r3
 8013318:	4b09      	ldr	r3, [pc, #36]	; (8013340 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801331a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	bf14      	ite	ne
 8013322:	2301      	movne	r3, #1
 8013324:	2300      	moveq	r3, #0
 8013326:	b2da      	uxtb	r2, r3
 8013328:	4b06      	ldr	r3, [pc, #24]	; (8013344 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801332a:	701a      	strb	r2, [r3, #0]
    }
 801332c:	bf00      	nop
 801332e:	3710      	adds	r7, #16
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	08026ea0 	.word	0x08026ea0
 8013338:	080275f8 	.word	0x080275f8
 801333c:	08026e5c 	.word	0x08026e5c
 8013340:	2000bb92 	.word	0x2000bb92
 8013344:	2000bb93 	.word	0x2000bb93

08013348 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	460b      	mov	r3, r1
 8013352:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013358:	2b00      	cmp	r3, #0
 801335a:	d004      	beq.n	8013366 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013360:	887a      	ldrh	r2, [r7, #2]
 8013362:	4610      	mov	r0, r2
 8013364:	4798      	blx	r3
        }
    }
 8013366:	bf00      	nop
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801336e:	b580      	push	{r7, lr}
 8013370:	b082      	sub	sp, #8
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	685a      	ldr	r2, [r3, #4]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	3318      	adds	r3, #24
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4610      	mov	r0, r2
 8013386:	4798      	blx	r3
 8013388:	4603      	mov	r3, r0
    }
 801338a:	4618      	mov	r0, r3
 801338c:	3708      	adds	r7, #8
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d017      	beq.n	80133dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80133ac:	4b1a      	ldr	r3, [pc, #104]	; (8013418 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d12a      	bne.n	801340a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80133b4:	4b19      	ldr	r3, [pc, #100]	; (801341c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80133b6:	881a      	ldrh	r2, [r3, #0]
 80133b8:	4b19      	ldr	r3, [pc, #100]	; (8013420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133ba:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80133bc:	4b19      	ldr	r3, [pc, #100]	; (8013424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133be:	881a      	ldrh	r2, [r3, #0]
 80133c0:	4b19      	ldr	r3, [pc, #100]	; (8013428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133c2:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80133c4:	4b16      	ldr	r3, [pc, #88]	; (8013420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133c6:	881a      	ldrh	r2, [r3, #0]
 80133c8:	4b16      	ldr	r3, [pc, #88]	; (8013424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133ca:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80133cc:	4b16      	ldr	r3, [pc, #88]	; (8013428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133ce:	881a      	ldrh	r2, [r3, #0]
 80133d0:	4b12      	ldr	r3, [pc, #72]	; (801341c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80133d2:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80133d4:	4b10      	ldr	r3, [pc, #64]	; (8013418 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80133d6:	2201      	movs	r2, #1
 80133d8:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80133da:	e016      	b.n	801340a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80133dc:	4b0e      	ldr	r3, [pc, #56]	; (8013418 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d012      	beq.n	801340a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80133e4:	4b0f      	ldr	r3, [pc, #60]	; (8013424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133e6:	881a      	ldrh	r2, [r3, #0]
 80133e8:	4b0d      	ldr	r3, [pc, #52]	; (8013420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133ea:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80133ec:	4b0b      	ldr	r3, [pc, #44]	; (801341c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80133ee:	881a      	ldrh	r2, [r3, #0]
 80133f0:	4b0d      	ldr	r3, [pc, #52]	; (8013428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133f2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80133f4:	4b0c      	ldr	r3, [pc, #48]	; (8013428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80133f6:	881a      	ldrh	r2, [r3, #0]
 80133f8:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80133fa:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80133fc:	4b08      	ldr	r3, [pc, #32]	; (8013420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80133fe:	881a      	ldrh	r2, [r3, #0]
 8013400:	4b06      	ldr	r3, [pc, #24]	; (801341c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013402:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013404:	4b04      	ldr	r3, [pc, #16]	; (8013418 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013406:	2200      	movs	r2, #0
 8013408:	701a      	strb	r2, [r3, #0]
    }
 801340a:	bf00      	nop
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	2000bb8c 	.word	0x2000bb8c
 801341c:	2000bb88 	.word	0x2000bb88
 8013420:	2000bb8e 	.word	0x2000bb8e
 8013424:	2000bb8a 	.word	0x2000bb8a
 8013428:	2000bb90 	.word	0x2000bb90

0801342c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4618      	mov	r0, r3
 8013438:	f002 fa3c 	bl	80158b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801343c:	bf00      	nop
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013444:	b580      	push	{r7, lr}
 8013446:	b082      	sub	sp, #8
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	4a05      	ldr	r2, [pc, #20]	; (8013464 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	f7ff fe43 	bl	80130e0 <_ZN8touchgfx3HALD1Ev>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	4618      	mov	r0, r3
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	08027820 	.word	0x08027820

08013468 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f7ff ffe7 	bl	8013444 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013476:	2178      	movs	r1, #120	; 0x78
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f012 f974 	bl	8025766 <_ZdlPvj>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	4618      	mov	r0, r3
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4618      	mov	r0, r3
 8013494:	f7ff ffca 	bl	801342c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013498:	bf00      	nop
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f001 fb0a 	bl	8014ac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80134b0:	bf00      	nop
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f001 fb8a 	bl	8014bdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80134c8:	4603      	mov	r3, r0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3708      	adds	r7, #8
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b082      	sub	sp, #8
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	6078      	str	r0, [r7, #4]
 80134da:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6839      	ldr	r1, [r7, #0]
 80134e0:	4618      	mov	r0, r3
 80134e2:	f001 fb89 	bl	8014bf8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80134e6:	bf00      	nop
 80134e8:	3708      	adds	r7, #8
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}

080134ee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b082      	sub	sp, #8
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6839      	ldr	r1, [r7, #0]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f001 fb91 	bl	8014c24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013502:	bf00      	nop
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b082      	sub	sp, #8
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	f001 fb07 	bl	8014b28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801351a:	bf00      	nop
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4618      	mov	r0, r3
 801352e:	f001 fb0b 	bl	8014b48 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013532:	bf00      	nop
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801353a:	b580      	push	{r7, lr}
 801353c:	b082      	sub	sp, #8
 801353e:	af00      	add	r7, sp, #0
 8013540:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	f001 fb0d 	bl	8014b64 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801354a:	bf00      	nop
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b082      	sub	sp, #8
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	f001 fb0f 	bl	8014b80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013562:	bf00      	nop
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
	...

0801356c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	4a05      	ldr	r2, [pc, #20]	; (801358c <_ZN11TouchGFXHALD1Ev+0x20>)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	601a      	str	r2, [r3, #0]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff ff61 	bl	8013444 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	0802754c 	.word	0x0802754c

08013590 <_ZN11TouchGFXHALD0Ev>:
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7ff ffe7 	bl	801356c <_ZN11TouchGFXHALD1Ev>
 801359e:	2178      	movs	r1, #120	; 0x78
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f012 f8e0 	bl	8025766 <_ZdlPvj>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 80135b4:	2203      	movs	r2, #3
 80135b6:	2100      	movs	r1, #0
 80135b8:	2001      	movs	r0, #1
 80135ba:	f7f9 fa50 	bl	800ca5e <xQueueGenericCreate>
 80135be:	4602      	mov	r2, r0
 80135c0:	4b0b      	ldr	r3, [pc, #44]	; (80135f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135c2:	601a      	str	r2, [r3, #0]
 80135c4:	4b0a      	ldr	r3, [pc, #40]	; (80135f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d006      	beq.n	80135da <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80135cc:	4b08      	ldr	r3, [pc, #32]	; (80135f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80135ce:	6818      	ldr	r0, [r3, #0]
 80135d0:	2300      	movs	r3, #0
 80135d2:	2200      	movs	r2, #0
 80135d4:	2100      	movs	r1, #0
 80135d6:	f7f9 faa3 	bl	800cb20 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80135da:	2200      	movs	r2, #0
 80135dc:	2101      	movs	r1, #1
 80135de:	2001      	movs	r0, #1
 80135e0:	f7f9 fa3d 	bl	800ca5e <xQueueGenericCreate>
 80135e4:	4602      	mov	r2, r0
 80135e6:	4b03      	ldr	r3, [pc, #12]	; (80135f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80135e8:	601a      	str	r2, [r3, #0]
}
 80135ea:	bf00      	nop
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	200086cc 	.word	0x200086cc
 80135f4:	200086d0 	.word	0x200086d0

080135f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80135fc:	4b04      	ldr	r3, [pc, #16]	; (8013610 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	f04f 31ff 	mov.w	r1, #4294967295
 8013604:	4618      	mov	r0, r3
 8013606:	f7f9 fd9d 	bl	800d144 <xQueueSemaphoreTake>
}
 801360a:	bf00      	nop
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	200086cc 	.word	0x200086cc

08013614 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8013618:	4b04      	ldr	r3, [pc, #16]	; (801362c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 801361a:	6818      	ldr	r0, [r3, #0]
 801361c:	2300      	movs	r3, #0
 801361e:	2200      	movs	r2, #0
 8013620:	2100      	movs	r1, #0
 8013622:	f7f9 fa7d 	bl	800cb20 <xQueueGenericSend>
}
 8013626:	bf00      	nop
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	200086cc 	.word	0x200086cc

08013630 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8013634:	4b03      	ldr	r3, [pc, #12]	; (8013644 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2100      	movs	r1, #0
 801363a:	4618      	mov	r0, r3
 801363c:	f7f9 fd82 	bl	800d144 <xQueueSemaphoreTake>
}
 8013640:	bf00      	nop
 8013642:	bd80      	pop	{r7, pc}
 8013644:	200086cc 	.word	0x200086cc

08013648 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801364e:	2300      	movs	r3, #0
 8013650:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8013652:	4b0b      	ldr	r3, [pc, #44]	; (8013680 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	1d3a      	adds	r2, r7, #4
 8013658:	4611      	mov	r1, r2
 801365a:	4618      	mov	r0, r3
 801365c:	f7f9 fbfe 	bl	800ce5c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d007      	beq.n	8013676 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013666:	4b07      	ldr	r3, [pc, #28]	; (8013684 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801366c:	601a      	str	r2, [r3, #0]
 801366e:	f3bf 8f4f 	dsb	sy
 8013672:	f3bf 8f6f 	isb	sy
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	200086cc 	.word	0x200086cc
 8013684:	e000ed04 	.word	0xe000ed04

08013688 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
    if (vsync_q)
 801368e:	4b0e      	ldr	r3, [pc, #56]	; (80136c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d013      	beq.n	80136be <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013696:	2300      	movs	r3, #0
 8013698:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801369a:	4b0b      	ldr	r3, [pc, #44]	; (80136c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801369c:	6818      	ldr	r0, [r3, #0]
 801369e:	1d3a      	adds	r2, r7, #4
 80136a0:	2300      	movs	r3, #0
 80136a2:	490a      	ldr	r1, [pc, #40]	; (80136cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80136a4:	f7f9 fb3e 	bl	800cd24 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d007      	beq.n	80136be <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 80136ae:	4b08      	ldr	r3, [pc, #32]	; (80136d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 80136b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136b4:	601a      	str	r2, [r3, #0]
 80136b6:	f3bf 8f4f 	dsb	sy
 80136ba:	f3bf 8f6f 	isb	sy
    }
}
 80136be:	bf00      	nop
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	200086d0 	.word	0x200086d0
 80136cc:	2000004c 	.word	0x2000004c
 80136d0:	e000ed04 	.word	0xe000ed04

080136d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 80136d8:	4b08      	ldr	r3, [pc, #32]	; (80136fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2200      	movs	r2, #0
 80136de:	4908      	ldr	r1, [pc, #32]	; (8013700 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f9 fc4d 	bl	800cf80 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80136e6:	4b05      	ldr	r3, [pc, #20]	; (80136fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f04f 32ff 	mov.w	r2, #4294967295
 80136ee:	4904      	ldr	r1, [pc, #16]	; (8013700 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f9 fc45 	bl	800cf80 <xQueueReceive>
}
 80136f6:	bf00      	nop
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	200086d0 	.word	0x200086d0
 8013700:	2000004c 	.word	0x2000004c

08013704 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	4603      	mov	r3, r0
 801370c:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 801370e:	88fb      	ldrh	r3, [r7, #6]
 8013710:	4618      	mov	r0, r3
 8013712:	f7fa f975 	bl	800da00 <vTaskDelay>
}
 8013716:	bf00      	nop
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
	...

08013720 <__NVIC_EnableIRQ>:
{
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
 8013726:	4603      	mov	r3, r0
 8013728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801372e:	2b00      	cmp	r3, #0
 8013730:	db0d      	blt.n	801374e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013736:	b2db      	uxtb	r3, r3
 8013738:	f003 021f 	and.w	r2, r3, #31
 801373c:	4907      	ldr	r1, [pc, #28]	; (801375c <__NVIC_EnableIRQ+0x3c>)
 801373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013742:	095b      	lsrs	r3, r3, #5
 8013744:	2001      	movs	r0, #1
 8013746:	fa00 f202 	lsl.w	r2, r0, r2
 801374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801374e:	bf00      	nop
 8013750:	370c      	adds	r7, #12
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	e000e100 	.word	0xe000e100

08013760 <__NVIC_DisableIRQ>:
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	4603      	mov	r3, r0
 8013768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801376e:	2b00      	cmp	r3, #0
 8013770:	db12      	blt.n	8013798 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013776:	b2db      	uxtb	r3, r3
 8013778:	f003 021f 	and.w	r2, r3, #31
 801377c:	4909      	ldr	r1, [pc, #36]	; (80137a4 <__NVIC_DisableIRQ+0x44>)
 801377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013782:	095b      	lsrs	r3, r3, #5
 8013784:	2001      	movs	r0, #1
 8013786:	fa00 f202 	lsl.w	r2, r0, r2
 801378a:	3320      	adds	r3, #32
 801378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013794:	f3bf 8f6f 	isb	sy
}
 8013798:	bf00      	nop
 801379a:	370c      	adds	r7, #12
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr
 80137a4:	e000e100 	.word	0xe000e100

080137a8 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
        return color;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
    }
 80137b4:	4618      	mov	r0, r3
 80137b6:	370c      	adds	r7, #12
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr

080137c0 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80137c0:	b480      	push	{r7}
 80137c2:	b083      	sub	sp, #12
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	b29b      	uxth	r3, r3
    }
 80137ce:	4618      	mov	r0, r3
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr
	...

080137dc <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    {
 80137e4:	4a04      	ldr	r2, [pc, #16]	; (80137f8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	601a      	str	r2, [r3, #0]
    }
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr
 80137f8:	080276f4 	.word	0x080276f4

080137fc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
    }
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ffe9 	bl	80137dc <_ZN8touchgfx9DMA_QueueD1Ev>
 801380a:	2104      	movs	r1, #4
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f011 ffaa 	bl	8025766 <_ZdlPvj>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	3344      	adds	r3, #68	; 0x44
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	4798      	blx	r3
    }
 8013830:	bf00      	nop
 8013832:	3708      	adds	r7, #8
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013838:	b480      	push	{r7}
 801383a:	b083      	sub	sp, #12
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013840:	2300      	movs	r3, #0
    }
 8013842:	4618      	mov	r0, r3
 8013844:	370c      	adds	r7, #12
 8013846:	46bd      	mov	sp, r7
 8013848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384c:	4770      	bx	lr
	...

08013850 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
    {
 8013858:	4a04      	ldr	r2, [pc, #16]	; (801386c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	601a      	str	r2, [r3, #0]
    }
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4618      	mov	r0, r3
 8013862:	370c      	adds	r7, #12
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr
 801386c:	08028730 	.word	0x08028730

08013870 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
    }
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7ff ffe9 	bl	8013850 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801387e:	210c      	movs	r1, #12
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f011 ff70 	bl	8025766 <_ZdlPvj>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013890:	b480      	push	{r7}
 8013892:	b083      	sub	sp, #12
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801389a:	4a09      	ldr	r2, [pc, #36]	; (80138c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	605a      	str	r2, [r3, #4]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	721a      	strb	r2, [r3, #8]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	725a      	strb	r2, [r3, #9]
    {
    }
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4618      	mov	r0, r3
 80138b6:	370c      	adds	r7, #12
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr
 80138c0:	08028730 	.word	0x08028730

080138c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	3314      	adds	r3, #20
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	4610      	mov	r0, r2
 80138dc:	4798      	blx	r3
    }
 80138de:	bf00      	nop
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}

080138e6 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b082      	sub	sp, #8
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	3328      	adds	r3, #40	; 0x28
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	4610      	mov	r0, r2
 80138fa:	4798      	blx	r3
    }
 80138fc:	bf00      	nop
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	60b9      	str	r1, [r7, #8]
 801390e:	607a      	str	r2, [r7, #4]
 8013910:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	430a      	orrs	r2, r1
 8013924:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801392c:	f023 0107 	bic.w	r1, r3, #7
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	430a      	orrs	r2, r1
 8013938:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013940:	4b06      	ldr	r3, [pc, #24]	; (801395c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013942:	4013      	ands	r3, r2
 8013944:	6839      	ldr	r1, [r7, #0]
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	6812      	ldr	r2, [r2, #0]
 801394a:	430b      	orrs	r3, r1
 801394c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3714      	adds	r7, #20
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	ffffc000 	.word	0xffffc000

08013960 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013968:	f7fc f85a 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 801396c:	4603      	mov	r3, r0
 801396e:	4618      	mov	r0, r3
 8013970:	f7ff ffa8 	bl	80138c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
    assert(0);
 8013984:	4b02      	ldr	r3, [pc, #8]	; (8013990 <DMA2D_XferErrorCallback+0x14>)
 8013986:	4a03      	ldr	r2, [pc, #12]	; (8013994 <DMA2D_XferErrorCallback+0x18>)
 8013988:	213e      	movs	r1, #62	; 0x3e
 801398a:	4803      	ldr	r0, [pc, #12]	; (8013998 <DMA2D_XferErrorCallback+0x1c>)
 801398c:	f011 ff16 	bl	80257bc <__assert_func>
 8013990:	08026ed8 	.word	0x08026ed8
 8013994:	08027710 	.word	0x08027710
 8013998:	08026edc 	.word	0x08026edc

0801399c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	3318      	adds	r3, #24
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe ffdd 	bl	8012968 <_ZN8touchgfx9colortypeC1Ev>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80139b8:	b5b0      	push	{r4, r5, r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	330c      	adds	r3, #12
 80139c6:	4619      	mov	r1, r3
 80139c8:	4610      	mov	r0, r2
 80139ca:	f7ff ff61 	bl	8013890 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80139ce:	4a0e      	ldr	r2, [pc, #56]	; (8013a08 <_ZN10STM32F7DMAC1Ev+0x50>)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	601a      	str	r2, [r3, #0]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f103 000c 	add.w	r0, r3, #12
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	3320      	adds	r3, #32
 80139de:	2260      	movs	r2, #96	; 0x60
 80139e0:	4619      	mov	r1, r3
 80139e2:	f002 fe0b 	bl	80165fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	3320      	adds	r3, #32
 80139ea:	245f      	movs	r4, #95	; 0x5f
 80139ec:	461d      	mov	r5, r3
 80139ee:	2c00      	cmp	r4, #0
 80139f0:	db05      	blt.n	80139fe <_ZN10STM32F7DMAC1Ev+0x46>
 80139f2:	4628      	mov	r0, r5
 80139f4:	f7ff ffd2 	bl	801399c <_ZN8touchgfx6BlitOpC1Ev>
 80139f8:	3520      	adds	r5, #32
 80139fa:	3c01      	subs	r4, #1
 80139fc:	e7f7      	b.n	80139ee <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bdb0      	pop	{r4, r5, r7, pc}
 8013a08:	080276a4 	.word	0x080276a4

08013a0c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	4a0b      	ldr	r2, [pc, #44]	; (8013a44 <_ZN10STM32F7DMAD1Ev+0x38>)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013a1a:	480b      	ldr	r0, [pc, #44]	; (8013a48 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013a1c:	f7f1 fbe0 	bl	80051e0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013a20:	205a      	movs	r0, #90	; 0x5a
 8013a22:	f7ff fe9d 	bl	8013760 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	330c      	adds	r3, #12
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f000 faa0 	bl	8013f70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff ff0c 	bl	8013850 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	080276a4 	.word	0x080276a4
 8013a48:	2000c418 	.word	0x2000c418

08013a4c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
}
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7ff ffd9 	bl	8013a0c <_ZN10STM32F7DMAD1Ev>
 8013a5a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f011 fe81 	bl	8025766 <_ZdlPvj>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
	...

08013a70 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013a78:	4b09      	ldr	r3, [pc, #36]	; (8013aa0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013a7a:	4a0a      	ldr	r2, [pc, #40]	; (8013aa4 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013a7c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013a7e:	4808      	ldr	r0, [pc, #32]	; (8013aa0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013a80:	f7f1 fb64 	bl	800514c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013a84:	4b06      	ldr	r3, [pc, #24]	; (8013aa0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013a86:	4a08      	ldr	r2, [pc, #32]	; (8013aa8 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013a88:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013a8a:	4b05      	ldr	r3, [pc, #20]	; (8013aa0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013a8c:	4a07      	ldr	r2, [pc, #28]	; (8013aac <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013a8e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013a90:	205a      	movs	r0, #90	; 0x5a
 8013a92:	f7ff fe45 	bl	8013720 <__NVIC_EnableIRQ>
}
 8013a96:	bf00      	nop
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	2000c418 	.word	0x2000c418
 8013aa4:	4002b000 	.word	0x4002b000
 8013aa8:	08013961 	.word	0x08013961
 8013aac:	0801397d 	.word	0x0801397d

08013ab0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013ab8:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013ac8:	b590      	push	{r4, r7, lr}
 8013aca:	b08d      	sub	sp, #52	; 0x34
 8013acc:	af02      	add	r7, sp, #8
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013ad6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013ae0:	2b20      	cmp	r3, #32
 8013ae2:	d007      	beq.n	8013af4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	2b40      	cmp	r3, #64	; 0x40
 8013aea:	d003      	beq.n	8013af4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b04      	cmp	r3, #4
 8013af2:	d101      	bne.n	8013af8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013af4:	2301      	movs	r3, #1
 8013af6:	e000      	b.n	8013afa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013af8:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013afa:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013b00:	2b80      	cmp	r3, #128	; 0x80
 8013b02:	d004      	beq.n	8013b0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b0c:	d101      	bne.n	8013b12 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e000      	b.n	8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8013b12:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013b14:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013b16:	f7fb ff8f 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	6813      	ldr	r3, [r2, #0]
 8013b1e:	3320      	adds	r3, #32
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4610      	mov	r0, r2
 8013b24:	4798      	blx	r3
 8013b26:	4603      	mov	r3, r0
 8013b28:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b40      	cmp	r3, #64	; 0x40
 8013b30:	d01d      	beq.n	8013b6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013b32:	2b40      	cmp	r3, #64	; 0x40
 8013b34:	d804      	bhi.n	8013b40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8013b36:	2b04      	cmp	r3, #4
 8013b38:	d00e      	beq.n	8013b58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013b3a:	2b20      	cmp	r3, #32
 8013b3c:	d017      	beq.n	8013b6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013b3e:	e019      	b.n	8013b74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013b40:	2b80      	cmp	r3, #128	; 0x80
 8013b42:	d003      	beq.n	8013b4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b48:	d003      	beq.n	8013b52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013b4a:	e013      	b.n	8013b74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013b4c:	230a      	movs	r3, #10
 8013b4e:	623b      	str	r3, [r7, #32]
        break;
 8013b50:	e01a      	b.n	8013b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013b52:	2309      	movs	r3, #9
 8013b54:	623b      	str	r3, [r7, #32]
        break;
 8013b56:	e017      	b.n	8013b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b5c:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b5e:	7f7b      	ldrb	r3, [r7, #29]
 8013b60:	2b10      	cmp	r3, #16
 8013b62:	d101      	bne.n	8013b68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013b64:	2302      	movs	r3, #2
 8013b66:	e000      	b.n	8013b6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013b68:	2301      	movs	r3, #1
 8013b6a:	623b      	str	r3, [r7, #32]
        break;
 8013b6c:	e00c      	b.n	8013b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	623b      	str	r3, [r7, #32]
        break;
 8013b72:	e009      	b.n	8013b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013b74:	2300      	movs	r3, #0
 8013b76:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b78:	7f7b      	ldrb	r3, [r7, #29]
 8013b7a:	2b10      	cmp	r3, #16
 8013b7c:	d101      	bne.n	8013b82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013b7e:	2302      	movs	r3, #2
 8013b80:	e000      	b.n	8013b84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013b82:	2301      	movs	r3, #1
 8013b84:	623b      	str	r3, [r7, #32]
        break;
 8013b86:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013b88:	4a76      	ldr	r2, [pc, #472]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013b8e:	7f7b      	ldrb	r3, [r7, #29]
 8013b90:	2b10      	cmp	r3, #16
 8013b92:	d101      	bne.n	8013b98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013b94:	2302      	movs	r3, #2
 8013b96:	e000      	b.n	8013b9a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013b98:	2301      	movs	r3, #1
 8013b9a:	4a72      	ldr	r2, [pc, #456]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013b9c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	8adb      	ldrh	r3, [r3, #22]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	8a1b      	ldrh	r3, [r3, #16]
 8013ba8:	1ad3      	subs	r3, r2, r3
 8013baa:	461a      	mov	r2, r3
 8013bac:	4b6d      	ldr	r3, [pc, #436]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bae:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013bb0:	7f7b      	ldrb	r3, [r7, #29]
 8013bb2:	2b10      	cmp	r3, #16
 8013bb4:	d101      	bne.n	8013bba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013bb6:	2202      	movs	r2, #2
 8013bb8:	e000      	b.n	8013bbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8013bba:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	8adb      	ldrh	r3, [r3, #22]
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	8a1b      	ldrh	r3, [r3, #16]
 8013bc6:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bca:	4866      	ldr	r0, [pc, #408]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bcc:	f7ff fe9a 	bl	8013904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013bd0:	4a64      	ldr	r2, [pc, #400]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	8a9b      	ldrh	r3, [r3, #20]
 8013bda:	461a      	mov	r2, r3
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	8a1b      	ldrh	r3, [r3, #16]
 8013be0:	1ad3      	subs	r3, r2, r3
 8013be2:	461a      	mov	r2, r3
 8013be4:	4b5f      	ldr	r3, [pc, #380]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013be6:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013be8:	7ffb      	ldrb	r3, [r7, #31]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d103      	bne.n	8013bf6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8013bee:	7fbb      	ldrb	r3, [r7, #30]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 8082 	beq.w	8013cfa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	7f1b      	ldrb	r3, [r3, #28]
 8013bfa:	2bff      	cmp	r3, #255	; 0xff
 8013bfc:	d008      	beq.n	8013c10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8013bfe:	4b59      	ldr	r3, [pc, #356]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c00:	2202      	movs	r2, #2
 8013c02:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	7f1b      	ldrb	r3, [r3, #28]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	4b56      	ldr	r3, [pc, #344]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8013c0e:	e002      	b.n	8013c16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013c10:	4b54      	ldr	r3, [pc, #336]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8013c16:	7fbb      	ldrb	r3, [r7, #30]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d059      	beq.n	8013cd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013c1c:	7f7b      	ldrb	r3, [r7, #29]
 8013c1e:	2b10      	cmp	r3, #16
 8013c20:	d14a      	bne.n	8013cb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	3318      	adds	r3, #24
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7ff fdca 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	12db      	asrs	r3, r3, #11
 8013c30:	f003 021f 	and.w	r2, r3, #31
 8013c34:	4613      	mov	r3, r2
 8013c36:	021b      	lsls	r3, r3, #8
 8013c38:	1a9b      	subs	r3, r3, r2
 8013c3a:	4a4b      	ldr	r2, [pc, #300]	; (8013d68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8013c40:	441a      	add	r2, r3
 8013c42:	1112      	asrs	r2, r2, #4
 8013c44:	17db      	asrs	r3, r3, #31
 8013c46:	1ad3      	subs	r3, r2, r3
 8013c48:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	3318      	adds	r3, #24
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7ff fdb6 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013c54:	4603      	mov	r3, r0
 8013c56:	115b      	asrs	r3, r3, #5
 8013c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013c5c:	4613      	mov	r3, r2
 8013c5e:	021b      	lsls	r3, r3, #8
 8013c60:	1a9b      	subs	r3, r3, r2
 8013c62:	4a42      	ldr	r2, [pc, #264]	; (8013d6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013c64:	fb82 1203 	smull	r1, r2, r2, r3
 8013c68:	441a      	add	r2, r3
 8013c6a:	1152      	asrs	r2, r2, #5
 8013c6c:	17db      	asrs	r3, r3, #31
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	3318      	adds	r3, #24
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7ff fda2 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	f003 021f 	and.w	r2, r3, #31
 8013c82:	4613      	mov	r3, r2
 8013c84:	021b      	lsls	r3, r3, #8
 8013c86:	1a9b      	subs	r3, r3, r2
 8013c88:	4a37      	ldr	r2, [pc, #220]	; (8013d68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8013c8e:	441a      	add	r2, r3
 8013c90:	1112      	asrs	r2, r2, #4
 8013c92:	17db      	asrs	r3, r3, #31
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	7f1b      	ldrb	r3, [r3, #28]
 8013c9c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	061a      	lsls	r2, r3, #24
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	041b      	lsls	r3, r3, #16
 8013ca6:	431a      	orrs	r2, r3
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	021b      	lsls	r3, r3, #8
 8013cac:	431a      	orrs	r2, r3
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	4a2c      	ldr	r2, [pc, #176]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8013cb6:	e00b      	b.n	8013cd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	3318      	adds	r3, #24
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7ff fd73 	bl	80137a8 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	7f1b      	ldrb	r3, [r3, #28]
 8013cc8:	061b      	lsls	r3, r3, #24
 8013cca:	4313      	orrs	r3, r2
 8013ccc:	4a25      	ldr	r2, [pc, #148]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cce:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	8adb      	ldrh	r3, [r3, #22]
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	8a1b      	ldrh	r3, [r3, #16]
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	461a      	mov	r2, r3
 8013cde:	4b21      	ldr	r3, [pc, #132]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ce0:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013ce2:	7f7b      	ldrb	r3, [r7, #29]
 8013ce4:	2b10      	cmp	r3, #16
 8013ce6:	d101      	bne.n	8013cec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013ce8:	2302      	movs	r3, #2
 8013cea:	e000      	b.n	8013cee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8013cec:	2301      	movs	r3, #1
 8013cee:	4a1d      	ldr	r2, [pc, #116]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cf0:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	481b      	ldr	r0, [pc, #108]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cf6:	f7f1 fcf3 	bl	80056e0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	4819      	ldr	r0, [pc, #100]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013cfe:	f7f1 fcef 	bl	80056e0 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8013d02:	7ffb      	ldrb	r3, [r7, #31]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d102      	bne.n	8013d0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013d08:	7fbb      	ldrb	r3, [r7, #30]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d015      	beq.n	8013d3a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d12:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d18:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d1e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d24:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013d2a:	9301      	str	r3, [sp, #4]
 8013d2c:	9200      	str	r2, [sp, #0]
 8013d2e:	4623      	mov	r3, r4
 8013d30:	4602      	mov	r2, r0
 8013d32:	480c      	ldr	r0, [pc, #48]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d34:	f7f1 faf7 	bl	8005326 <HAL_DMA2D_BlendingStart_IT>
 8013d38:	e00f      	b.n	8013d5a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d3e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d44:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d4a:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013d50:	9300      	str	r3, [sp, #0]
 8013d52:	4603      	mov	r3, r0
 8013d54:	4803      	ldr	r0, [pc, #12]	; (8013d64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013d56:	f7f1 fab3 	bl	80052c0 <HAL_DMA2D_Start_IT>
    }
}
 8013d5a:	bf00      	nop
 8013d5c:	372c      	adds	r7, #44	; 0x2c
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd90      	pop	{r4, r7, pc}
 8013d62:	bf00      	nop
 8013d64:	2000c418 	.word	0x2000c418
 8013d68:	84210843 	.word	0x84210843
 8013d6c:	82082083 	.word	0x82082083

08013d70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013d70:	b590      	push	{r4, r7, lr}
 8013d72:	b08d      	sub	sp, #52	; 0x34
 8013d74:	af02      	add	r7, sp, #8
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013d7a:	f7fb fe5d 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	6813      	ldr	r3, [r2, #0]
 8013d82:	3320      	adds	r3, #32
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4610      	mov	r0, r2
 8013d88:	4798      	blx	r3
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013d8e:	7ffb      	ldrb	r3, [r7, #31]
 8013d90:	2b10      	cmp	r3, #16
 8013d92:	d101      	bne.n	8013d98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8013d94:	2302      	movs	r3, #2
 8013d96:	e000      	b.n	8013d9a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013d98:	2301      	movs	r3, #1
 8013d9a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013da0:	7ffb      	ldrb	r3, [r7, #31]
 8013da2:	2b10      	cmp	r3, #16
 8013da4:	d149      	bne.n	8013e3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	3318      	adds	r3, #24
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7ff fd08 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013db0:	4603      	mov	r3, r0
 8013db2:	12db      	asrs	r3, r3, #11
 8013db4:	f003 021f 	and.w	r2, r3, #31
 8013db8:	4613      	mov	r3, r2
 8013dba:	021b      	lsls	r3, r3, #8
 8013dbc:	1a9b      	subs	r3, r3, r2
 8013dbe:	4a69      	ldr	r2, [pc, #420]	; (8013f64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8013dc4:	441a      	add	r2, r3
 8013dc6:	1112      	asrs	r2, r2, #4
 8013dc8:	17db      	asrs	r3, r3, #31
 8013dca:	1ad3      	subs	r3, r2, r3
 8013dcc:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	3318      	adds	r3, #24
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff fcf4 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	115b      	asrs	r3, r3, #5
 8013ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013de0:	4613      	mov	r3, r2
 8013de2:	021b      	lsls	r3, r3, #8
 8013de4:	1a9b      	subs	r3, r3, r2
 8013de6:	4a60      	ldr	r2, [pc, #384]	; (8013f68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013de8:	fb82 1203 	smull	r1, r2, r2, r3
 8013dec:	441a      	add	r2, r3
 8013dee:	1152      	asrs	r2, r2, #5
 8013df0:	17db      	asrs	r3, r3, #31
 8013df2:	1ad3      	subs	r3, r2, r3
 8013df4:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	3318      	adds	r3, #24
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7ff fce0 	bl	80137c0 <_ZNK8touchgfx9colortypecvtEv>
 8013e00:	4603      	mov	r3, r0
 8013e02:	f003 021f 	and.w	r2, r3, #31
 8013e06:	4613      	mov	r3, r2
 8013e08:	021b      	lsls	r3, r3, #8
 8013e0a:	1a9b      	subs	r3, r3, r2
 8013e0c:	4a55      	ldr	r2, [pc, #340]	; (8013f64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8013e12:	441a      	add	r2, r3
 8013e14:	1112      	asrs	r2, r2, #4
 8013e16:	17db      	asrs	r3, r3, #31
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	7f1b      	ldrb	r3, [r3, #28]
 8013e20:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	061a      	lsls	r2, r3, #24
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	041b      	lsls	r3, r3, #16
 8013e2a:	431a      	orrs	r2, r3
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	021b      	lsls	r3, r3, #8
 8013e30:	4313      	orrs	r3, r2
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	4313      	orrs	r3, r2
 8013e36:	623b      	str	r3, [r7, #32]
 8013e38:	e00b      	b.n	8013e52 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	7f1b      	ldrb	r3, [r3, #28]
 8013e3e:	061b      	lsls	r3, r3, #24
 8013e40:	461c      	mov	r4, r3
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	3318      	adds	r3, #24
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fcae 	bl	80137a8 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	4323      	orrs	r3, r4
 8013e50:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b08      	cmp	r3, #8
 8013e58:	d103      	bne.n	8013e62 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013e60:	e003      	b.n	8013e6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8013e62:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013e68:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013e6a:	4a40      	ldr	r2, [pc, #256]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013e70:	7ffb      	ldrb	r3, [r7, #31]
 8013e72:	2b10      	cmp	r3, #16
 8013e74:	d101      	bne.n	8013e7a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8013e76:	2302      	movs	r3, #2
 8013e78:	e000      	b.n	8013e7c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	4a3b      	ldr	r2, [pc, #236]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013e7e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	8adb      	ldrh	r3, [r3, #22]
 8013e84:	461a      	mov	r2, r3
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	8a1b      	ldrh	r3, [r3, #16]
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	4b37      	ldr	r3, [pc, #220]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013e90:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013e92:	7ffb      	ldrb	r3, [r7, #31]
 8013e94:	2b10      	cmp	r3, #16
 8013e96:	d101      	bne.n	8013e9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013e98:	2202      	movs	r2, #2
 8013e9a:	e000      	b.n	8013e9e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013e9c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	8adb      	ldrh	r3, [r3, #22]
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	8a1b      	ldrh	r3, [r3, #16]
 8013ea8:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013eac:	482f      	ldr	r0, [pc, #188]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013eae:	f7ff fd29 	bl	8013904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013eb8:	d11e      	bne.n	8013ef8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8013eba:	4b2c      	ldr	r3, [pc, #176]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8013ec0:	4a2a      	ldr	r2, [pc, #168]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ec2:	6a3b      	ldr	r3, [r7, #32]
 8013ec4:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8013ec6:	4b29      	ldr	r3, [pc, #164]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ec8:	2209      	movs	r2, #9
 8013eca:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	8adb      	ldrh	r3, [r3, #22]
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	8a1b      	ldrh	r3, [r3, #16]
 8013ed6:	1ad3      	subs	r3, r2, r3
 8013ed8:	461a      	mov	r2, r3
 8013eda:	4b24      	ldr	r3, [pc, #144]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013edc:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013ede:	7ffb      	ldrb	r3, [r7, #31]
 8013ee0:	2b10      	cmp	r3, #16
 8013ee2:	d101      	bne.n	8013ee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8013ee4:	2302      	movs	r3, #2
 8013ee6:	e000      	b.n	8013eea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013ee8:	2301      	movs	r3, #1
 8013eea:	4a20      	ldr	r2, [pc, #128]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013eec:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013eee:	2100      	movs	r1, #0
 8013ef0:	481e      	ldr	r0, [pc, #120]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ef2:	f7f1 fbf5 	bl	80056e0 <HAL_DMA2D_ConfigLayer>
 8013ef6:	e005      	b.n	8013f04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013ef8:	4a1c      	ldr	r2, [pc, #112]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013efe:	4b1b      	ldr	r3, [pc, #108]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f00:	2200      	movs	r2, #0
 8013f02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013f04:	2101      	movs	r1, #1
 8013f06:	4819      	ldr	r0, [pc, #100]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f08:	f7f1 fbea 	bl	80056e0 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013f12:	d115      	bne.n	8013f40 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f18:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f1e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f24:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f2a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013f30:	9301      	str	r3, [sp, #4]
 8013f32:	9200      	str	r2, [sp, #0]
 8013f34:	4623      	mov	r3, r4
 8013f36:	4602      	mov	r2, r0
 8013f38:	480c      	ldr	r0, [pc, #48]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f3a:	f7f1 f9f4 	bl	8005326 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013f3e:	e00d      	b.n	8013f5c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	68db      	ldr	r3, [r3, #12]
 8013f44:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f4a:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	460b      	mov	r3, r1
 8013f54:	6a39      	ldr	r1, [r7, #32]
 8013f56:	4805      	ldr	r0, [pc, #20]	; (8013f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013f58:	f7f1 f9b2 	bl	80052c0 <HAL_DMA2D_Start_IT>
}
 8013f5c:	bf00      	nop
 8013f5e:	372c      	adds	r7, #44	; 0x2c
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd90      	pop	{r4, r7, pc}
 8013f64:	84210843 	.word	0x84210843
 8013f68:	82082083 	.word	0x82082083
 8013f6c:	2000c418 	.word	0x2000c418

08013f70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	4a05      	ldr	r2, [pc, #20]	; (8013f90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	601a      	str	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7ff fc2b 	bl	80137dc <_ZN8touchgfx9DMA_QueueD1Ev>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	08028780 	.word	0x08028780

08013f94 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ffe7 	bl	8013f70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013fa2:	2114      	movs	r1, #20
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f011 fbde 	bl	8025766 <_ZdlPvj>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013fb4:	b480      	push	{r7}
 8013fb6:	b083      	sub	sp, #12
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
        texts = t;
 8013fbc:	4a04      	ldr	r2, [pc, #16]	; (8013fd0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6013      	str	r3, [r2, #0]
    }
 8013fc2:	bf00      	nop
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	2000bc30 	.word	0x2000bc30

08013fd4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013fd4:	b480      	push	{r7}
 8013fd6:	b085      	sub	sp, #20
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
 8013fe0:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013fe2:	4a0b      	ldr	r2, [pc, #44]	; (8014010 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	601a      	str	r2, [r3, #0]
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	68ba      	ldr	r2, [r7, #8]
 8013fec:	605a      	str	r2, [r3, #4]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	609a      	str	r2, [r3, #8]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	683a      	ldr	r2, [r7, #0]
 8013ff8:	60da      	str	r2, [r3, #12]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	69ba      	ldr	r2, [r7, #24]
 8013ffe:	611a      	str	r2, [r3, #16]
    {
    }
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	4618      	mov	r0, r3
 8014004:	3714      	adds	r7, #20
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	08027810 	.word	0x08027810

08014014 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
    {
 801401c:	4a04      	ldr	r2, [pc, #16]	; (8014030 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	601a      	str	r2, [r3, #0]
    }
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4618      	mov	r0, r3
 8014026:	370c      	adds	r7, #12
 8014028:	46bd      	mov	sp, r7
 801402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402e:	4770      	bx	lr
 8014030:	08027810 	.word	0x08027810

08014034 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
    }
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7ff ffe9 	bl	8014014 <_ZN8touchgfx7MVPHeapD1Ev>
 8014042:	2114      	movs	r1, #20
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f011 fb8e 	bl	8025766 <_ZdlPvj>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}

08014054 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
    {
 801405c:	4a04      	ldr	r2, [pc, #16]	; (8014070 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	601a      	str	r2, [r3, #0]
    }
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4618      	mov	r0, r3
 8014066:	370c      	adds	r7, #12
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr
 8014070:	08029064 	.word	0x08029064

08014074 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
    }
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f7ff ffe9 	bl	8014054 <_ZN8touchgfx3LCDD1Ev>
 8014082:	2108      	movs	r1, #8
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f011 fb6e 	bl	8025766 <_ZdlPvj>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2200      	movs	r2, #0
 80140a0:	801a      	strh	r2, [r3, #0]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	805a      	strh	r2, [r3, #2]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2200      	movs	r2, #0
 80140ac:	809a      	strh	r2, [r3, #4]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	80da      	strh	r2, [r3, #6]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2200      	movs	r2, #0
 80140b8:	811a      	strh	r2, [r3, #8]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2200      	movs	r2, #0
 80140be:	815a      	strh	r2, [r3, #10]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2200      	movs	r2, #0
 80140c4:	819a      	strh	r2, [r3, #12]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2200      	movs	r2, #0
 80140ca:	739a      	strb	r2, [r3, #14]
        {
        }
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	4618      	mov	r0, r3
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80140da:	b580      	push	{r7, lr}
 80140dc:	b082      	sub	sp, #8
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7ff ffd5 	bl	8014094 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2200      	movs	r2, #0
 80140ee:	611a      	str	r2, [r3, #16]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2200      	movs	r2, #0
 80140f4:	829a      	strh	r2, [r3, #20]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	3708      	adds	r7, #8
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
 801410c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801410e:	4a44      	ldr	r2, [pc, #272]	; (8014220 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	605a      	str	r2, [r3, #4]
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	687a      	ldr	r2, [r7, #4]
 801411e:	609a      	str	r2, [r3, #8]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	60da      	str	r2, [r3, #12]
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2200      	movs	r2, #0
 801412a:	611a      	str	r2, [r3, #16]
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	2200      	movs	r2, #0
 8014130:	615a      	str	r2, [r3, #20]
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2200      	movs	r2, #0
 8014136:	619a      	str	r2, [r3, #24]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	331c      	adds	r3, #28
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff ffcc 	bl	80140da <_ZN8touchgfx8GesturesC1Ev>
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	2200      	movs	r2, #0
 8014146:	639a      	str	r2, [r3, #56]	; 0x38
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2200      	movs	r2, #0
 801414c:	63da      	str	r2, [r3, #60]	; 0x3c
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2200      	movs	r2, #0
 8014152:	641a      	str	r2, [r3, #64]	; 0x40
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	645a      	str	r2, [r3, #68]	; 0x44
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2200      	movs	r2, #0
 801415e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2201      	movs	r2, #1
 8014166:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2201      	movs	r2, #1
 801416e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2200      	movs	r2, #0
 8014176:	64da      	str	r2, [r3, #76]	; 0x4c
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	3350      	adds	r3, #80	; 0x50
 801417c:	4618      	mov	r0, r3
 801417e:	f7fc f88a 	bl	8010296 <_ZN8touchgfx4RectC1Ev>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2201      	movs	r2, #1
 8014186:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2200      	movs	r2, #0
 8014196:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2201      	movs	r2, #1
 801419e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2200      	movs	r2, #0
 80141a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	2200      	movs	r2, #0
 80141ae:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2200      	movs	r2, #0
 80141b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2200      	movs	r2, #0
 80141be:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2200      	movs	r2, #0
 80141ce:	671a      	str	r2, [r3, #112]	; 0x70
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2200      	movs	r2, #0
 80141d4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80141d8:	4a12      	ldr	r2, [pc, #72]	; (8014224 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80141de:	4a12      	ldr	r2, [pc, #72]	; (8014228 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80141e0:	8b3b      	ldrh	r3, [r7, #24]
 80141e2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80141e4:	4a11      	ldr	r2, [pc, #68]	; (801422c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80141e6:	8bbb      	ldrh	r3, [r7, #28]
 80141e8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80141ea:	4b11      	ldr	r3, [pc, #68]	; (8014230 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80141f0:	4b0d      	ldr	r3, [pc, #52]	; (8014228 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80141f2:	881a      	ldrh	r2, [r3, #0]
 80141f4:	4b0f      	ldr	r3, [pc, #60]	; (8014234 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80141f6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80141f8:	4b0c      	ldr	r3, [pc, #48]	; (801422c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80141fa:	881a      	ldrh	r2, [r3, #0]
 80141fc:	4b0e      	ldr	r3, [pc, #56]	; (8014238 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80141fe:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014200:	8b3a      	ldrh	r2, [r7, #24]
 8014202:	8bbb      	ldrh	r3, [r7, #28]
 8014204:	429a      	cmp	r2, r3
 8014206:	d301      	bcc.n	801420c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014208:	2200      	movs	r2, #0
 801420a:	e000      	b.n	801420e <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 801420c:	2201      	movs	r2, #1
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	080282ec 	.word	0x080282ec
 8014224:	2000bb94 	.word	0x2000bb94
 8014228:	2000bb88 	.word	0x2000bb88
 801422c:	2000bb8a 	.word	0x2000bb8a
 8014230:	2000bb8c 	.word	0x2000bb8c
 8014234:	2000bb8e 	.word	0x2000bb8e
 8014238:	2000bb90 	.word	0x2000bb90

0801423c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	f7fb fe19 	bl	800fe80 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801424e:	bf00      	nop
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af02      	add	r7, sp, #8
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	607a      	str	r2, [r7, #4]
 8014264:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	68b9      	ldr	r1, [r7, #8]
 8014272:	f7ff feaf 	bl	8013fd4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014276:	4a04      	ldr	r2, [pc, #16]	; (8014288 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	601a      	str	r2, [r3, #0]
    {

    }
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	080277fc 	.word	0x080277fc

0801428c <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801428c:	b580      	push	{r7, lr}
 801428e:	af00      	add	r7, sp, #0
 8014290:	4801      	ldr	r0, [pc, #4]	; (8014298 <__tcf_0+0xc>)
 8014292:	f000 f9dd 	bl	8014650 <_ZN12FrontendHeapD1Ev>
 8014296:	bd80      	pop	{r7, pc}
 8014298:	200086d4 	.word	0x200086d4

0801429c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801429c:	b580      	push	{r7, lr}
 801429e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80142a0:	4b08      	ldr	r3, [pc, #32]	; (80142c4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f003 0301 	and.w	r3, r3, #1
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d108      	bne.n	80142be <_ZN12FrontendHeap11getInstanceEv+0x22>
 80142ac:	4806      	ldr	r0, [pc, #24]	; (80142c8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80142ae:	f000 f831 	bl	8014314 <_ZN12FrontendHeapC1Ev>
 80142b2:	4b04      	ldr	r3, [pc, #16]	; (80142c4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80142b4:	2201      	movs	r2, #1
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	4804      	ldr	r0, [pc, #16]	; (80142cc <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80142ba:	f011 fa9d 	bl	80257f8 <atexit>
        return instance;
 80142be:	4b02      	ldr	r3, [pc, #8]	; (80142c8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80142c0:	4618      	mov	r0, r3
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	2000ae88 	.word	0x2000ae88
 80142c8:	200086d4 	.word	0x200086d4
 80142cc:	0801428d 	.word	0x0801428d

080142d0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	4a05      	ldr	r2, [pc, #20]	; (80142f0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	601a      	str	r2, [r3, #0]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7ff fe97 	bl	8014014 <_ZN8touchgfx7MVPHeapD1Ev>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	4618      	mov	r0, r3
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	080277fc 	.word	0x080277fc

080142f4 <_ZN16FrontendHeapBaseD0Ev>:
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7ff ffe7 	bl	80142d0 <_ZN16FrontendHeapBaseD1Ev>
 8014302:	2114      	movs	r1, #20
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f011 fa2e 	bl	8025766 <_ZdlPvj>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014314:	b5b0      	push	{r4, r5, r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af02      	add	r7, sp, #8
 801431a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f103 0414 	add.w	r4, r3, #20
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f242 624c 	movw	r2, #9804	; 0x264c
 8014330:	441a      	add	r2, r3
 8014332:	6879      	ldr	r1, [r7, #4]
 8014334:	f242 6360 	movw	r3, #9824	; 0x2660
 8014338:	440b      	add	r3, r1
 801433a:	9300      	str	r3, [sp, #0]
 801433c:	4613      	mov	r3, r2
 801433e:	462a      	mov	r2, r5
 8014340:	4621      	mov	r1, r4
 8014342:	f7ff ff89 	bl	8014258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014346:	4a1a      	ldr	r2, [pc, #104]	; (80143b0 <_ZN12FrontendHeapC1Ev+0x9c>)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	601a      	str	r2, [r3, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	3314      	adds	r3, #20
 8014350:	4618      	mov	r0, r3
 8014352:	f000 f8df 	bl	8014514 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	332c      	adds	r3, #44	; 0x2c
 801435a:	4618      	mov	r0, r3
 801435c:	f000 f90e 	bl	801457c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	f242 634c 	movw	r3, #9804	; 0x264c
 8014366:	4413      	add	r3, r2
 8014368:	4618      	mov	r0, r3
 801436a:	f000 f93d 	bl	80145e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	f242 6360 	movw	r3, #9824	; 0x2660
 8014374:	4413      	add	r3, r2
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	f242 71b0 	movw	r1, #10160	; 0x27b0
 801437c:	4411      	add	r1, r2
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe f9bf 	bl	8012704 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	f242 73b0 	movw	r3, #10160	; 0x27b0
 801438c:	4413      	add	r3, r2
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe fdc8 	bl	8012f24 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	f242 6360 	movw	r3, #9824	; 0x2660
 801439c:	4413      	add	r3, r2
 801439e:	4619      	mov	r1, r3
 80143a0:	f7ff ff4c 	bl	801423c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	4618      	mov	r0, r3
 80143a8:	3708      	adds	r7, #8
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bdb0      	pop	{r4, r5, r7, pc}
 80143ae:	bf00      	nop
 80143b0:	0802774c 	.word	0x0802774c

080143b4 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
    {
 80143bc:	4a05      	ldr	r2, [pc, #20]	; (80143d4 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	601a      	str	r2, [r3, #0]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff fe45 	bl	8014054 <_ZN8touchgfx3LCDD1Ev>
    }
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	0802b1c4 	.word	0x0802b1c4

080143d8 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
    }
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7ff ffe7 	bl	80143b4 <_ZN8touchgfx8LCD24bppD1Ev>
 80143e6:	2158      	movs	r1, #88	; 0x58
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f011 f9bc 	bl	8025766 <_ZdlPvj>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	4618      	mov	r0, r3
 80143f2:	3708      	adds	r7, #8
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b086      	sub	sp, #24
 80143fc:	af02      	add	r7, sp, #8
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	60b9      	str	r1, [r7, #8]
 8014402:	607a      	str	r2, [r7, #4]
 8014404:	603b      	str	r3, [r7, #0]
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	8bbb      	ldrh	r3, [r7, #28]
 801440a:	9301      	str	r3, [sp, #4]
 801440c:	8b3b      	ldrh	r3, [r7, #24]
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	68b9      	ldr	r1, [r7, #8]
 8014416:	f7ff fe73 	bl	8014100 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801441a:	4a04      	ldr	r2, [pc, #16]	; (801442c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	601a      	str	r2, [r3, #0]
    }
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	4618      	mov	r0, r3
 8014424:	3710      	adds	r7, #16
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	08027820 	.word	0x08027820

08014430 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014430:	b580      	push	{r7, lr}
 8014432:	b086      	sub	sp, #24
 8014434:	af02      	add	r7, sp, #8
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
 801443c:	603b      	str	r3, [r7, #0]
 801443e:	68f8      	ldr	r0, [r7, #12]
 8014440:	8bbb      	ldrh	r3, [r7, #28]
 8014442:	9301      	str	r3, [sp, #4]
 8014444:	8b3b      	ldrh	r3, [r7, #24]
 8014446:	9300      	str	r3, [sp, #0]
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	68b9      	ldr	r1, [r7, #8]
 801444e:	f7ff ffd3 	bl	80143f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014452:	4a04      	ldr	r2, [pc, #16]	; (8014464 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	601a      	str	r2, [r3, #0]
    }
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	0802754c 	.word	0x0802754c

08014468 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	4a04      	ldr	r2, [pc, #16]	; (8014484 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4618      	mov	r0, r3
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr
 8014484:	08027534 	.word	0x08027534

08014488 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff ffe8 	bl	8014468 <_ZN8touchgfx15TouchControllerC1Ev>
 8014498:	4a03      	ldr	r2, [pc, #12]	; (80144a8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	601a      	str	r2, [r3, #0]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	4618      	mov	r0, r3
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0802751c 	.word	0x0802751c

080144ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80144ac:	b590      	push	{r4, r7, lr}
 80144ae:	b085      	sub	sp, #20
 80144b0:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80144b2:	f7fe f803 	bl	80124bc <_ZN14BitmapDatabase11getInstanceEv>
 80144b6:	4604      	mov	r4, r0
 80144b8:	f7fe f80a 	bl	80124d0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80144bc:	4603      	mov	r3, r0
 80144be:	4619      	mov	r1, r3
 80144c0:	2300      	movs	r3, #0
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	2300      	movs	r3, #0
 80144c6:	2200      	movs	r2, #0
 80144c8:	4620      	mov	r0, r4
 80144ca:	f007 fc11 	bl	801bcf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80144ce:	4809      	ldr	r0, [pc, #36]	; (80144f4 <touchgfx_init+0x48>)
 80144d0:	f7ff fd70 	bl	8013fb4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80144d4:	2000      	movs	r0, #0
 80144d6:	f7fe f81f 	bl	8012518 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80144da:	4807      	ldr	r0, [pc, #28]	; (80144f8 <touchgfx_init+0x4c>)
 80144dc:	f007 fb56 	bl	801bb8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80144e0:	f7ff fedc 	bl	801429c <_ZN12FrontendHeap11getInstanceEv>
 80144e4:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80144e6:	4805      	ldr	r0, [pc, #20]	; (80144fc <touchgfx_init+0x50>)
 80144e8:	f7fe ffda 	bl	80134a0 <_ZN11TouchGFXHAL10initializeEv>
}
 80144ec:	bf00      	nop
 80144ee:	370c      	adds	r7, #12
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd90      	pop	{r4, r7, pc}
 80144f4:	2000bb08 	.word	0x2000bb08
 80144f8:	20000050 	.word	0x20000050
 80144fc:	2000bb0c 	.word	0x2000bb0c

08014500 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014500:	b580      	push	{r7, lr}
 8014502:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014504:	4802      	ldr	r0, [pc, #8]	; (8014510 <touchgfx_taskEntry+0x10>)
 8014506:	f001 fa06 	bl	8015916 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801450a:	bf00      	nop
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	2000bb0c 	.word	0x2000bb0c

08014514 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	4618      	mov	r0, r3
 8014520:	f000 fc76 	bl	8014e10 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014524:	4a03      	ldr	r2, [pc, #12]	; (8014534 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	601a      	str	r2, [r3, #0]
    {
    }
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4618      	mov	r0, r3
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	080277c8 	.word	0x080277c8

08014538 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
    {
    }
 8014540:	4a05      	ldr	r2, [pc, #20]	; (8014558 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	601a      	str	r2, [r3, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	4618      	mov	r0, r3
 801454a:	f000 fc5f 	bl	8014e0c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	4618      	mov	r0, r3
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	080277c8 	.word	0x080277c8

0801455c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
    }
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff ffe7 	bl	8014538 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801456a:	2118      	movs	r1, #24
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f011 f8fa 	bl	8025766 <_ZdlPvj>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	4618      	mov	r0, r3
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	4618      	mov	r0, r3
 8014588:	f000 fc42 	bl	8014e10 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801458c:	4a03      	ldr	r2, [pc, #12]	; (801459c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	601a      	str	r2, [r3, #0]
    }
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	4618      	mov	r0, r3
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	08027794 	.word	0x08027794

080145a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
    }
 80145a8:	4a05      	ldr	r2, [pc, #20]	; (80145c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	601a      	str	r2, [r3, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	4618      	mov	r0, r3
 80145b2:	f000 fc2b 	bl	8014e0c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	4618      	mov	r0, r3
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	08027794 	.word	0x08027794

080145c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    }
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f7ff ffe7 	bl	80145a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80145d2:	f242 6120 	movw	r1, #9760	; 0x2620
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f011 f8c5 	bl	8025766 <_ZdlPvj>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	4618      	mov	r0, r3
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
	...

080145e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f000 fc0c 	bl	8014e10 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80145f8:	4a03      	ldr	r2, [pc, #12]	; (8014608 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	601a      	str	r2, [r3, #0]
    }
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	4618      	mov	r0, r3
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}
 8014608:	08027760 	.word	0x08027760

0801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
    }
 8014614:	4a05      	ldr	r2, [pc, #20]	; (801462c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	f000 fbf5 	bl	8014e0c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4618      	mov	r0, r3
 8014626:	3708      	adds	r7, #8
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	08027760 	.word	0x08027760

08014630 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014630:	b580      	push	{r7, lr}
 8014632:	b082      	sub	sp, #8
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
    }
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7ff ffe7 	bl	801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801463e:	2114      	movs	r1, #20
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f011 f890 	bl	8025766 <_ZdlPvj>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	4618      	mov	r0, r3
 801464a:	3708      	adds	r7, #8
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	4a11      	ldr	r2, [pc, #68]	; (80146a0 <_ZN12FrontendHeapD1Ev+0x50>)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	601a      	str	r2, [r3, #0]
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	f242 6360 	movw	r3, #9824	; 0x2660
 8014664:	4413      	add	r3, r2
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe f816 	bl	8012698 <_ZN19FrontendApplicationD1Ev>
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	f242 634c 	movw	r3, #9804	; 0x264c
 8014672:	4413      	add	r3, r2
 8014674:	4618      	mov	r0, r3
 8014676:	f7ff ffc9 	bl	801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	332c      	adds	r3, #44	; 0x2c
 801467e:	4618      	mov	r0, r3
 8014680:	f7ff ff8e 	bl	80145a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	3314      	adds	r3, #20
 8014688:	4618      	mov	r0, r3
 801468a:	f7ff ff55 	bl	8014538 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fe1d 	bl	80142d0 <_ZN16FrontendHeapBaseD1Ev>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	4618      	mov	r0, r3
 801469a:	3708      	adds	r7, #8
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	0802774c 	.word	0x0802774c

080146a4 <_ZN12FrontendHeapD0Ev>:
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff ffcf 	bl	8014650 <_ZN12FrontendHeapD1Ev>
 80146b2:	f242 71b4 	movw	r1, #10164	; 0x27b4
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f011 f855 	bl	8025766 <_ZdlPvj>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	4618      	mov	r0, r3
 80146c0:	3708      	adds	r7, #8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
	...

080146c8 <_Z41__static_initialization_and_destruction_0ii>:
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b084      	sub	sp, #16
 80146cc:	af02      	add	r7, sp, #8
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	6039      	str	r1, [r7, #0]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d119      	bne.n	801470c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146de:	4293      	cmp	r3, r2
 80146e0:	d114      	bne.n	801470c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80146e2:	4818      	ldr	r0, [pc, #96]	; (8014744 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80146e4:	f7ff fed0 	bl	8014488 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80146e8:	4817      	ldr	r0, [pc, #92]	; (8014748 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80146ea:	f7ff f965 	bl	80139b8 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80146ee:	4817      	ldr	r0, [pc, #92]	; (801474c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80146f0:	f009 fd24 	bl	801e13c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80146f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80146f8:	9301      	str	r3, [sp, #4]
 80146fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	4b10      	ldr	r3, [pc, #64]	; (8014744 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014702:	4a12      	ldr	r2, [pc, #72]	; (801474c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014704:	4910      	ldr	r1, [pc, #64]	; (8014748 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014706:	4812      	ldr	r0, [pc, #72]	; (8014750 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014708:	f7ff fe92 	bl	8014430 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d113      	bne.n	801473a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014718:	4293      	cmp	r3, r2
 801471a:	d10e      	bne.n	801473a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801471c:	480c      	ldr	r0, [pc, #48]	; (8014750 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801471e:	f7fe ff25 	bl	801356c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014722:	480c      	ldr	r0, [pc, #48]	; (8014754 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014724:	f7fa fcb4 	bl	800f090 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014728:	4808      	ldr	r0, [pc, #32]	; (801474c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801472a:	f7ff fe43 	bl	80143b4 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 801472e:	4806      	ldr	r0, [pc, #24]	; (8014748 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014730:	f7ff f96c 	bl	8013a0c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014734:	4803      	ldr	r0, [pc, #12]	; (8014744 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014736:	f7fe fc8f 	bl	8013058 <_ZN20STM32TouchControllerD1Ev>
}
 801473a:	bf00      	nop
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	2000ae8c 	.word	0x2000ae8c
 8014748:	2000ae90 	.word	0x2000ae90
 801474c:	2000bab0 	.word	0x2000bab0
 8014750:	2000bb0c 	.word	0x2000bb0c
 8014754:	20000050 	.word	0x20000050

08014758 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014760:	2301      	movs	r3, #1
    }
 8014762:	4618      	mov	r0, r3
 8014764:	370c      	adds	r7, #12
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr

0801476e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801476e:	b480      	push	{r7}
 8014770:	b083      	sub	sp, #12
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014776:	230c      	movs	r3, #12
    }
 8014778:	4618      	mov	r0, r3
 801477a:	370c      	adds	r7, #12
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	460b      	mov	r3, r1
 801478e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014790:	887a      	ldrh	r2, [r7, #2]
 8014792:	4613      	mov	r3, r2
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4413      	add	r3, r2
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	3308      	adds	r3, #8
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	4413      	add	r3, r2
    }
 80147a0:	4618      	mov	r0, r3
 80147a2:	370c      	adds	r7, #12
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80147ac:	b480      	push	{r7}
 80147ae:	b083      	sub	sp, #12
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	460b      	mov	r3, r1
 80147b6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80147b8:	887a      	ldrh	r2, [r7, #2]
 80147ba:	4613      	mov	r3, r2
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	4413      	add	r3, r2
 80147c0:	009b      	lsls	r3, r3, #2
 80147c2:	3308      	adds	r3, #8
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	4413      	add	r3, r2
    }
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80147dc:	2301      	movs	r3, #1
    }
 80147de:	4618      	mov	r0, r3
 80147e0:	370c      	adds	r7, #12
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80147ea:	b480      	push	{r7}
 80147ec:	b083      	sub	sp, #12
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80147f2:	f242 6318 	movw	r3, #9752	; 0x2618
    }
 80147f6:	4618      	mov	r0, r3
 80147f8:	370c      	adds	r7, #12
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr

08014802 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014802:	b480      	push	{r7}
 8014804:	b083      	sub	sp, #12
 8014806:	af00      	add	r7, sp, #0
 8014808:	6078      	str	r0, [r7, #4]
 801480a:	460b      	mov	r3, r1
 801480c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801480e:	887b      	ldrh	r3, [r7, #2]
 8014810:	f242 6218 	movw	r2, #9752	; 0x2618
 8014814:	fb02 f303 	mul.w	r3, r2, r3
 8014818:	3308      	adds	r3, #8
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	4413      	add	r3, r2
    }
 801481e:	4618      	mov	r0, r3
 8014820:	370c      	adds	r7, #12
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr

0801482a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801482a:	b480      	push	{r7}
 801482c:	b083      	sub	sp, #12
 801482e:	af00      	add	r7, sp, #0
 8014830:	6078      	str	r0, [r7, #4]
 8014832:	460b      	mov	r3, r1
 8014834:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014836:	887b      	ldrh	r3, [r7, #2]
 8014838:	f242 6218 	movw	r2, #9752	; 0x2618
 801483c:	fb02 f303 	mul.w	r3, r2, r3
 8014840:	3308      	adds	r3, #8
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	4413      	add	r3, r2
    }
 8014846:	4618      	mov	r0, r3
 8014848:	370c      	adds	r7, #12
 801484a:	46bd      	mov	sp, r7
 801484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014850:	4770      	bx	lr

08014852 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014852:	b480      	push	{r7}
 8014854:	b083      	sub	sp, #12
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801485a:	2301      	movs	r3, #1
    }
 801485c:	4618      	mov	r0, r3
 801485e:	370c      	adds	r7, #12
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr

08014868 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014870:	2310      	movs	r3, #16
    }
 8014872:	4618      	mov	r0, r3
 8014874:	370c      	adds	r7, #12
 8014876:	46bd      	mov	sp, r7
 8014878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487c:	4770      	bx	lr

0801487e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801487e:	b480      	push	{r7}
 8014880:	b083      	sub	sp, #12
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
 8014886:	460b      	mov	r3, r1
 8014888:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801488a:	887b      	ldrh	r3, [r7, #2]
 801488c:	011b      	lsls	r3, r3, #4
 801488e:	3308      	adds	r3, #8
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	4413      	add	r3, r2
    }
 8014894:	4618      	mov	r0, r3
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148ac:	887b      	ldrh	r3, [r7, #2]
 80148ae:	011b      	lsls	r3, r3, #4
 80148b0:	3308      	adds	r3, #8
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	4413      	add	r3, r2
    }
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr

080148c2 <_GLOBAL__sub_I_touchgfx_init>:
 80148c2:	b580      	push	{r7, lr}
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148ca:	2001      	movs	r0, #1
 80148cc:	f7ff fefc 	bl	80146c8 <_Z41__static_initialization_and_destruction_0ii>
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <_GLOBAL__sub_D_touchgfx_init>:
 80148d2:	b580      	push	{r7, lr}
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148da:	2000      	movs	r0, #0
 80148dc:	f7ff fef4 	bl	80146c8 <_Z41__static_initialization_and_destruction_0ii>
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b082      	sub	sp, #8
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	3318      	adds	r3, #24
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	4798      	blx	r3
    }
 80148f6:	bf00      	nop
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}

080148fe <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80148fe:	b480      	push	{r7}
 8014900:	b083      	sub	sp, #12
 8014902:	af00      	add	r7, sp, #0
 8014904:	6078      	str	r0, [r7, #4]
 8014906:	460b      	mov	r3, r1
 8014908:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	78fa      	ldrb	r2, [r7, #3]
 801490e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014912:	bf00      	nop
 8014914:	370c      	adds	r7, #12
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801491e:	b480      	push	{r7}
 8014920:	b083      	sub	sp, #12
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801492c:	3301      	adds	r3, #1
 801492e:	b2da      	uxtb	r2, r3
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014936:	bf00      	nop
 8014938:	370c      	adds	r7, #12
 801493a:	46bd      	mov	sp, r7
 801493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014940:	4770      	bx	lr
	...

08014944 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	460b      	mov	r3, r1
 801494e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014950:	78fb      	ldrb	r3, [r7, #3]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d002      	beq.n	801495c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014956:	78fb      	ldrb	r3, [r7, #3]
 8014958:	2b02      	cmp	r3, #2
 801495a:	d105      	bne.n	8014968 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	78fa      	ldrb	r2, [r7, #3]
 8014960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014964:	2301      	movs	r3, #1
 8014966:	e027      	b.n	80149b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014968:	78fb      	ldrb	r3, [r7, #3]
 801496a:	2b01      	cmp	r3, #1
 801496c:	d123      	bne.n	80149b6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014972:	2b00      	cmp	r3, #0
 8014974:	d014      	beq.n	80149a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	3380      	adds	r3, #128	; 0x80
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	4798      	blx	r3
 8014982:	4603      	mov	r3, r0
 8014984:	461a      	mov	r2, r3
 8014986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801498a:	429a      	cmp	r2, r3
 801498c:	d008      	beq.n	80149a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801498e:	4b0c      	ldr	r3, [pc, #48]	; (80149c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	f083 0301 	eor.w	r3, r3, #1
 8014996:	b2db      	uxtb	r3, r3
 8014998:	2b00      	cmp	r3, #0
 801499a:	d001      	beq.n	80149a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801499c:	2301      	movs	r3, #1
 801499e:	e000      	b.n	80149a2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80149a0:	2300      	movs	r3, #0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d005      	beq.n	80149b2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	78fa      	ldrb	r2, [r7, #3]
 80149aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80149ae:	2301      	movs	r3, #1
 80149b0:	e002      	b.n	80149b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80149b2:	2300      	movs	r3, #0
 80149b4:	e000      	b.n	80149b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80149b6:	2300      	movs	r3, #0
    }
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	2000bb92 	.word	0x2000bb92

080149c4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80149d4:	bf00      	nop
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <__NVIC_EnableIRQ>:
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	4603      	mov	r3, r0
 80149e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80149ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	db0d      	blt.n	8014a0e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80149f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	f003 021f 	and.w	r2, r3, #31
 80149fc:	4907      	ldr	r1, [pc, #28]	; (8014a1c <__NVIC_EnableIRQ+0x3c>)
 80149fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a02:	095b      	lsrs	r3, r3, #5
 8014a04:	2001      	movs	r0, #1
 8014a06:	fa00 f202 	lsl.w	r2, r0, r2
 8014a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014a0e:	bf00      	nop
 8014a10:	370c      	adds	r7, #12
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	e000e100 	.word	0xe000e100

08014a20 <__NVIC_DisableIRQ>:
{
 8014a20:	b480      	push	{r7}
 8014a22:	b083      	sub	sp, #12
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	4603      	mov	r3, r0
 8014a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	db12      	blt.n	8014a58 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	f003 021f 	and.w	r2, r3, #31
 8014a3c:	4909      	ldr	r1, [pc, #36]	; (8014a64 <__NVIC_DisableIRQ+0x44>)
 8014a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a42:	095b      	lsrs	r3, r3, #5
 8014a44:	2001      	movs	r0, #1
 8014a46:	fa00 f202 	lsl.w	r2, r0, r2
 8014a4a:	3320      	adds	r3, #32
 8014a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014a54:	f3bf 8f6f 	isb	sy
}
 8014a58:	bf00      	nop
 8014a5a:	370c      	adds	r7, #12
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr
 8014a64:	e000e100 	.word	0xe000e100

08014a68 <__NVIC_SetPriority>:
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	4603      	mov	r3, r0
 8014a70:	6039      	str	r1, [r7, #0]
 8014a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	db0c      	blt.n	8014a96 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	4a0e      	ldr	r2, [pc, #56]	; (8014abc <__NVIC_SetPriority+0x54>)
 8014a82:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014a86:	4608      	mov	r0, r1
 8014a88:	011b      	lsls	r3, r3, #4
 8014a8a:	b2d9      	uxtb	r1, r3
 8014a8c:	1813      	adds	r3, r2, r0
 8014a8e:	460a      	mov	r2, r1
 8014a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014a94:	e00c      	b.n	8014ab0 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	4909      	ldr	r1, [pc, #36]	; (8014ac0 <__NVIC_SetPriority+0x58>)
 8014a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	f003 030f 	and.w	r3, r3, #15
 8014aa6:	3b04      	subs	r3, #4
 8014aa8:	0112      	lsls	r2, r2, #4
 8014aaa:	b2d2      	uxtb	r2, r2
 8014aac:	440b      	add	r3, r1
 8014aae:	761a      	strb	r2, [r3, #24]
}
 8014ab0:	bf00      	nop
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr
 8014abc:	e000e100 	.word	0xe000e100
 8014ac0:	e000ed00 	.word	0xe000ed00

08014ac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014ac4:	b5b0      	push	{r4, r5, r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f001 f9e6 	bl	8015ea0 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014ad4:	687d      	ldr	r5, [r7, #4]
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	334c      	adds	r3, #76	; 0x4c
 8014adc:	681c      	ldr	r4, [r3, #0]
 8014ade:	f004 fbad 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	490d      	ldr	r1, [pc, #52]	; (8014b24 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7ff ff68 	bl	80149c4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2101      	movs	r1, #1
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7ff ff23 	bl	8014944 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3374      	adds	r3, #116	; 0x74
 8014b06:	681c      	ldr	r4, [r3, #0]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014b10:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2101      	movs	r1, #1
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff fef1 	bl	80148fe <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014b1c:	bf00      	nop
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bdb0      	pop	{r4, r5, r7, pc}
 8014b24:	08013705 	.word	0x08013705

08014b28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014b30:	2109      	movs	r1, #9
 8014b32:	205a      	movs	r0, #90	; 0x5a
 8014b34:	f7ff ff98 	bl	8014a68 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014b38:	2109      	movs	r1, #9
 8014b3a:	2058      	movs	r0, #88	; 0x58
 8014b3c:	f7ff ff94 	bl	8014a68 <__NVIC_SetPriority>
}
 8014b40:	bf00      	nop
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014b50:	205a      	movs	r0, #90	; 0x5a
 8014b52:	f7ff ff45 	bl	80149e0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014b56:	2058      	movs	r0, #88	; 0x58
 8014b58:	f7ff ff42 	bl	80149e0 <__NVIC_EnableIRQ>
}
 8014b5c:	bf00      	nop
 8014b5e:	3708      	adds	r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014b6c:	205a      	movs	r0, #90	; 0x5a
 8014b6e:	f7ff ff57 	bl	8014a20 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014b72:	2058      	movs	r0, #88	; 0x58
 8014b74:	f7ff ff54 	bl	8014a20 <__NVIC_DisableIRQ>
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014b80:	b480      	push	{r7}
 8014b82:	b083      	sub	sp, #12
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014b88:	4b11      	ldr	r3, [pc, #68]	; (8014bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	3b01      	subs	r3, #1
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	4b0e      	ldr	r3, [pc, #56]	; (8014bd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014b9a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014b9c:	4b0c      	ldr	r3, [pc, #48]	; (8014bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	4b0a      	ldr	r3, [pc, #40]	; (8014bd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014bae:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014bb0:	4b08      	ldr	r3, [pc, #32]	; (8014bd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014bb2:	881a      	ldrh	r2, [r3, #0]
 8014bb4:	4b06      	ldr	r3, [pc, #24]	; (8014bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014bb8:	4b05      	ldr	r3, [pc, #20]	; (8014bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bbc:	4a04      	ldr	r2, [pc, #16]	; (8014bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014bbe:	f043 0301 	orr.w	r3, r3, #1
 8014bc2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014bc4:	bf00      	nop
 8014bc6:	370c      	adds	r7, #12
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr
 8014bd0:	40016800 	.word	0x40016800
 8014bd4:	2000bb84 	.word	0x2000bb84
 8014bd8:	2000bb86 	.word	0x2000bb86

08014bdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014be4:	4b03      	ldr	r3, [pc, #12]	; (8014bf4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr
 8014bf4:	40016884 	.word	0x40016884

08014bf8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014c02:	4a06      	ldr	r2, [pc, #24]	; (8014c1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014c08:	4b05      	ldr	r3, [pc, #20]	; (8014c20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014c0e:	bf00      	nop
 8014c10:	370c      	adds	r7, #12
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop
 8014c1c:	40016884 	.word	0x40016884
 8014c20:	40016800 	.word	0x40016800

08014c24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6839      	ldr	r1, [r7, #0]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 fe44 	bl	80158c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014c38:	bf00      	nop
 8014c3a:	3708      	adds	r7, #8
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}

08014c40 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014c40:	b480      	push	{r7}
 8014c42:	b085      	sub	sp, #20
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014c48:	4b0d      	ldr	r3, [pc, #52]	; (8014c80 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c4c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014c4e:	4b0c      	ldr	r3, [pc, #48]	; (8014c80 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014c5e:	89fa      	ldrh	r2, [r7, #14]
 8014c60:	89bb      	ldrh	r3, [r7, #12]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d201      	bcs.n	8014c6a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014c66:	2300      	movs	r3, #0
 8014c68:	e003      	b.n	8014c72 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014c6a:	89fa      	ldrh	r2, [r7, #14]
 8014c6c:	89bb      	ldrh	r3, [r7, #12]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	b29b      	uxth	r3, r3
    }
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop
 8014c80:	40016800 	.word	0x40016800

08014c84 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014c8c:	4b1a      	ldr	r3, [pc, #104]	; (8014cf8 <HAL_LTDC_LineEventCallback+0x74>)
 8014c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c90:	4a1a      	ldr	r2, [pc, #104]	; (8014cfc <HAL_LTDC_LineEventCallback+0x78>)
 8014c92:	8812      	ldrh	r2, [r2, #0]
 8014c94:	4293      	cmp	r3, r2
 8014c96:	bf0c      	ite	eq
 8014c98:	2301      	moveq	r3, #1
 8014c9a:	2300      	movne	r3, #0
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d017      	beq.n	8014cd2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014ca2:	4b17      	ldr	r3, [pc, #92]	; (8014d00 <HAL_LTDC_LineEventCallback+0x7c>)
 8014ca4:	881b      	ldrh	r3, [r3, #0]
 8014ca6:	4619      	mov	r1, r3
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7f1 f9e9 	bl	8006080 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8014cae:	f7fa feb7 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ff fe32 	bl	801491e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014cba:	f7fe fce5 	bl	8013688 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8014cbe:	f7fa feaf 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f001 fb73 	bl	80163b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014cca:	2000      	movs	r0, #0
 8014ccc:	f7fe f9e6 	bl	801309c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014cd0:	e00e      	b.n	8014cf0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014cd2:	4b0a      	ldr	r3, [pc, #40]	; (8014cfc <HAL_LTDC_LineEventCallback+0x78>)
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f7f1 f9d1 	bl	8006080 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014cde:	2000      	movs	r0, #0
 8014ce0:	f7fe f9e7 	bl	80130b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8014ce4:	f7fa fe9c 	bl	800fa20 <_ZN8touchgfx3HAL11getInstanceEv>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7ff fdf9 	bl	80148e2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014cf0:	bf00      	nop
 8014cf2:	3708      	adds	r7, #8
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	40016800 	.word	0x40016800
 8014cfc:	2000bb84 	.word	0x2000bb84
 8014d00:	2000bb86 	.word	0x2000bb86

08014d04 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014d04:	8880      	ldrh	r0, [r0, #4]
 8014d06:	4770      	bx	lr

08014d08 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014d08:	2300      	movs	r3, #0
 8014d0a:	8083      	strh	r3, [r0, #4]
 8014d0c:	4770      	bx	lr
	...

08014d10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d12:	6803      	ldr	r3, [r0, #0]
 8014d14:	460e      	mov	r6, r1
 8014d16:	2100      	movs	r1, #0
 8014d18:	4605      	mov	r5, r0
 8014d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d1c:	4798      	blx	r3
 8014d1e:	4604      	mov	r4, r0
 8014d20:	682b      	ldr	r3, [r5, #0]
 8014d22:	4628      	mov	r0, r5
 8014d24:	1b34      	subs	r4, r6, r4
 8014d26:	6a1b      	ldr	r3, [r3, #32]
 8014d28:	b2a4      	uxth	r4, r4
 8014d2a:	4798      	blx	r3
 8014d2c:	88ab      	ldrh	r3, [r5, #4]
 8014d2e:	fbb4 f4f0 	udiv	r4, r4, r0
 8014d32:	42a3      	cmp	r3, r4
 8014d34:	d805      	bhi.n	8014d42 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014d36:	4b0e      	ldr	r3, [pc, #56]	; (8014d70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014d38:	211e      	movs	r1, #30
 8014d3a:	4a0e      	ldr	r2, [pc, #56]	; (8014d74 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014d3c:	480e      	ldr	r0, [pc, #56]	; (8014d78 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014d3e:	f010 fd3d 	bl	80257bc <__assert_func>
 8014d42:	682b      	ldr	r3, [r5, #0]
 8014d44:	2100      	movs	r1, #0
 8014d46:	4628      	mov	r0, r5
 8014d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4a:	4798      	blx	r3
 8014d4c:	682b      	ldr	r3, [r5, #0]
 8014d4e:	4607      	mov	r7, r0
 8014d50:	4628      	mov	r0, r5
 8014d52:	6a1b      	ldr	r3, [r3, #32]
 8014d54:	4798      	blx	r3
 8014d56:	1bf3      	subs	r3, r6, r7
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	fbb3 f2f0 	udiv	r2, r3, r0
 8014d5e:	fb02 3010 	mls	r0, r2, r0, r3
 8014d62:	b118      	cbz	r0, 8014d6c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014d64:	4b05      	ldr	r3, [pc, #20]	; (8014d7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014d66:	211f      	movs	r1, #31
 8014d68:	4a02      	ldr	r2, [pc, #8]	; (8014d74 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014d6a:	e7e7      	b.n	8014d3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d70:	080278cc 	.word	0x080278cc
 8014d74:	08027a3a 	.word	0x08027a3a
 8014d78:	080278e1 	.word	0x080278e1
 8014d7c:	0802790f 	.word	0x0802790f

08014d80 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014d80:	b538      	push	{r3, r4, r5, lr}
 8014d82:	6803      	ldr	r3, [r0, #0]
 8014d84:	460d      	mov	r5, r1
 8014d86:	4604      	mov	r4, r0
 8014d88:	6a1b      	ldr	r3, [r3, #32]
 8014d8a:	4798      	blx	r3
 8014d8c:	4285      	cmp	r5, r0
 8014d8e:	d905      	bls.n	8014d9c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014d90:	4b0c      	ldr	r3, [pc, #48]	; (8014dc4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014d92:	212f      	movs	r1, #47	; 0x2f
 8014d94:	4a0c      	ldr	r2, [pc, #48]	; (8014dc8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014d96:	480d      	ldr	r0, [pc, #52]	; (8014dcc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014d98:	f010 fd10 	bl	80257bc <__assert_func>
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	4620      	mov	r0, r4
 8014da0:	88a5      	ldrh	r5, [r4, #4]
 8014da2:	69db      	ldr	r3, [r3, #28]
 8014da4:	4798      	blx	r3
 8014da6:	4285      	cmp	r5, r0
 8014da8:	d303      	bcc.n	8014db2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014daa:	4b09      	ldr	r3, [pc, #36]	; (8014dd0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014dac:	2130      	movs	r1, #48	; 0x30
 8014dae:	4a06      	ldr	r2, [pc, #24]	; (8014dc8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014db0:	e7f1      	b.n	8014d96 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	4620      	mov	r0, r4
 8014db6:	88a1      	ldrh	r1, [r4, #4]
 8014db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dba:	4798      	blx	r3
 8014dbc:	88a3      	ldrh	r3, [r4, #4]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	80a3      	strh	r3, [r4, #4]
 8014dc2:	bd38      	pop	{r3, r4, r5, pc}
 8014dc4:	08027989 	.word	0x08027989
 8014dc8:	08027a7d 	.word	0x08027a7d
 8014dcc:	080278e1 	.word	0x080278e1
 8014dd0:	080279a0 	.word	0x080279a0

08014dd4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014dd4:	b570      	push	{r4, r5, r6, lr}
 8014dd6:	6803      	ldr	r3, [r0, #0]
 8014dd8:	4616      	mov	r6, r2
 8014dda:	4604      	mov	r4, r0
 8014ddc:	460d      	mov	r5, r1
 8014dde:	6a1b      	ldr	r3, [r3, #32]
 8014de0:	4798      	blx	r3
 8014de2:	4286      	cmp	r6, r0
 8014de4:	d905      	bls.n	8014df2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014de6:	4b06      	ldr	r3, [pc, #24]	; (8014e00 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014de8:	2139      	movs	r1, #57	; 0x39
 8014dea:	4a06      	ldr	r2, [pc, #24]	; (8014e04 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014dec:	4806      	ldr	r0, [pc, #24]	; (8014e08 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014dee:	f010 fce5 	bl	80257bc <__assert_func>
 8014df2:	6823      	ldr	r3, [r4, #0]
 8014df4:	4629      	mov	r1, r5
 8014df6:	4620      	mov	r0, r4
 8014df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dfe:	4718      	bx	r3
 8014e00:	08027989 	.word	0x08027989
 8014e04:	080279f0 	.word	0x080279f0
 8014e08:	080278e1 	.word	0x080278e1

08014e0c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014e0c:	4770      	bx	lr
	...

08014e10 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014e10:	4a02      	ldr	r2, [pc, #8]	; (8014e1c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014e12:	6002      	str	r2, [r0, #0]
 8014e14:	2200      	movs	r2, #0
 8014e16:	8082      	strh	r2, [r0, #4]
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	080279c4 	.word	0x080279c4

08014e20 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014e20:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8014e24:	4770      	bx	lr

08014e26 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8014e26:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014e2a:	4770      	bx	lr

08014e2c <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014e2c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014e30:	4770      	bx	lr

08014e32 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8014e32:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8014e36:	4770      	bx	lr

08014e38 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014e38:	4b03      	ldr	r3, [pc, #12]	; (8014e48 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014e3a:	b510      	push	{r4, lr}
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	6003      	str	r3, [r0, #0]
 8014e40:	f000 f8b6 	bl	8014fb0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014e44:	4620      	mov	r0, r4
 8014e46:	bd10      	pop	{r4, pc}
 8014e48:	08027ac4 	.word	0x08027ac4

08014e4c <_ZN8touchgfx11BoxProgressD0Ev>:
 8014e4c:	b510      	push	{r4, lr}
 8014e4e:	4604      	mov	r4, r0
 8014e50:	f7ff fff2 	bl	8014e38 <_ZN8touchgfx11BoxProgressD1Ev>
 8014e54:	21c0      	movs	r1, #192	; 0xc0
 8014e56:	4620      	mov	r0, r4
 8014e58:	f010 fc85 	bl	8025766 <_ZdlPvj>
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	bd10      	pop	{r4, pc}

08014e60 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014e60:	b510      	push	{r4, lr}
 8014e62:	4604      	mov	r4, r0
 8014e64:	f000 f8b8 	bl	8014fd8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014e68:	2201      	movs	r2, #1
 8014e6a:	4b16      	ldr	r3, [pc, #88]	; (8014ec4 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e70:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8014e74:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014e78:	4a13      	ldr	r2, [pc, #76]	; (8014ec8 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014e7a:	6023      	str	r3, [r4, #0]
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014e82:	22ff      	movs	r2, #255	; 0xff
 8014e84:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014e88:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014e8c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014e90:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8014e94:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014e98:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014e9c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014ea0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8014ea4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8014ea8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014eac:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8014eb0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8014eb4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8014eb8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8014ebc:	f000 fbb8 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	bd10      	pop	{r4, pc}
 8014ec4:	08027ac4 	.word	0x08027ac4
 8014ec8:	08028d7c 	.word	0x08028d7c

08014ecc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014ed0:	4617      	mov	r7, r2
 8014ed2:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	4604      	mov	r4, r0
 8014eda:	460e      	mov	r6, r1
 8014edc:	4698      	mov	r8, r3
 8014ede:	4611      	mov	r1, r2
 8014ee0:	9500      	str	r5, [sp, #0]
 8014ee2:	3090      	adds	r0, #144	; 0x90
 8014ee4:	f7fb fa6c 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014ee8:	4643      	mov	r3, r8
 8014eea:	463a      	mov	r2, r7
 8014eec:	4631      	mov	r1, r6
 8014eee:	4620      	mov	r0, r4
 8014ef0:	9508      	str	r5, [sp, #32]
 8014ef2:	b002      	add	sp, #8
 8014ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef8:	f000 b9fa 	b.w	80152f0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014efc <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014efe:	4604      	mov	r4, r0
 8014f00:	f000 fa40 	bl	8015384 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014f04:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f004 fded 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f0e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f12:	2b03      	cmp	r3, #3
 8014f14:	d814      	bhi.n	8014f40 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8014f16:	e8df f003 	tbb	[pc, r3]
 8014f1a:	0202      	.short	0x0202
 8014f1c:	1010      	.short	0x1010
 8014f1e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014f22:	4620      	mov	r0, r4
 8014f24:	f000 fa88 	bl	8015438 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014f28:	b200      	sxth	r0, r0
 8014f2a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f2e:	2b03      	cmp	r3, #3
 8014f30:	d81a      	bhi.n	8014f68 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8014f32:	e8df f003 	tbb	[pc, r3]
 8014f36:	0e07      	.short	0x0e07
 8014f38:	231f      	.short	0x231f
 8014f3a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014f3e:	e7f0      	b.n	8014f22 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014f40:	2000      	movs	r0, #0
 8014f42:	e7f2      	b.n	8014f2a <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8014f44:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f48:	9300      	str	r3, [sp, #0]
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	2100      	movs	r1, #0
 8014f50:	e007      	b.n	8014f62 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8014f52:	8921      	ldrh	r1, [r4, #8]
 8014f54:	2200      	movs	r2, #0
 8014f56:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f5a:	1a09      	subs	r1, r1, r0
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	4603      	mov	r3, r0
 8014f60:	b209      	sxth	r1, r1
 8014f62:	4628      	mov	r0, r5
 8014f64:	f7fb fa2c 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f68:	4628      	mov	r0, r5
 8014f6a:	b003      	add	sp, #12
 8014f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f70:	f004 bdba 	b.w	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f74:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f78:	9000      	str	r0, [sp, #0]
 8014f7a:	e7e7      	b.n	8014f4c <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014f7c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014f80:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014f84:	1a12      	subs	r2, r2, r0
 8014f86:	9000      	str	r0, [sp, #0]
 8014f88:	b212      	sxth	r2, r2
 8014f8a:	e7e0      	b.n	8014f4e <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014f8c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014f8c:	b570      	push	{r4, r5, r6, lr}
 8014f8e:	6803      	ldr	r3, [r0, #0]
 8014f90:	4604      	mov	r4, r0
 8014f92:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8014f96:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014f9a:	4798      	blx	r3
 8014f9c:	4601      	mov	r1, r0
 8014f9e:	462b      	mov	r3, r5
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fa6:	4718      	bx	r3

08014fa8 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014fa8:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014fac:	4770      	bx	lr
	...

08014fb0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014fb0:	4b03      	ldr	r3, [pc, #12]	; (8014fc0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014fb2:	b510      	push	{r4, lr}
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	6003      	str	r3, [r0, #0]
 8014fb8:	f000 f999 	bl	80152ee <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	bd10      	pop	{r4, pc}
 8014fc0:	08027b9c 	.word	0x08027b9c

08014fc4 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	f7ff fff2 	bl	8014fb0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014fcc:	2190      	movs	r1, #144	; 0x90
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f010 fbc9 	bl	8025766 <_ZdlPvj>
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	bd10      	pop	{r4, pc}

08014fd8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	4604      	mov	r4, r0
 8014fdc:	f000 fa4c 	bl	8015478 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014fe0:	4b03      	ldr	r3, [pc, #12]	; (8014ff0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	6023      	str	r3, [r4, #0]
 8014fe8:	f7ff ffd0 	bl	8014f8c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014fec:	4620      	mov	r0, r4
 8014fee:	bd10      	pop	{r4, pc}
 8014ff0:	08027b9c 	.word	0x08027b9c

08014ff4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8014ff4:	b570      	push	{r4, r5, r6, lr}
 8014ff6:	6803      	ldr	r3, [r0, #0]
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8014ffe:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015002:	4798      	blx	r3
 8015004:	4601      	mov	r1, r0
 8015006:	462b      	mov	r3, r5
 8015008:	4620      	mov	r0, r4
 801500a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801500e:	4718      	bx	r3

08015010 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8015010:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8015014:	4770      	bx	lr

08015016 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8015016:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801501a:	4770      	bx	lr

0801501c <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801501c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8015020:	4770      	bx	lr

08015022 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8015022:	b507      	push	{r0, r1, r2, lr}
 8015024:	ab02      	add	r3, sp, #8
 8015026:	30bc      	adds	r0, #188	; 0xbc
 8015028:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801502c:	4619      	mov	r1, r3
 801502e:	f002 f9a9 	bl	8017384 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8015032:	b003      	add	sp, #12
 8015034:	f85d fb04 	ldr.w	pc, [sp], #4

08015038 <_ZN8touchgfx13ImageProgressD1Ev>:
 8015038:	4b03      	ldr	r3, [pc, #12]	; (8015048 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801503a:	b510      	push	{r4, lr}
 801503c:	4604      	mov	r4, r0
 801503e:	6003      	str	r3, [r0, #0]
 8015040:	f7ff ffb6 	bl	8014fb0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015044:	4620      	mov	r0, r4
 8015046:	bd10      	pop	{r4, pc}
 8015048:	08027cc8 	.word	0x08027cc8

0801504c <_ZN8touchgfx13ImageProgressD0Ev>:
 801504c:	b510      	push	{r4, lr}
 801504e:	4604      	mov	r4, r0
 8015050:	f7ff fff2 	bl	8015038 <_ZN8touchgfx13ImageProgressD1Ev>
 8015054:	21f0      	movs	r1, #240	; 0xf0
 8015056:	4620      	mov	r0, r4
 8015058:	f010 fb85 	bl	8025766 <_ZdlPvj>
 801505c:	4620      	mov	r0, r4
 801505e:	bd10      	pop	{r4, pc}

08015060 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8015060:	b508      	push	{r3, lr}
 8015062:	4b06      	ldr	r3, [pc, #24]	; (801507c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	b92b      	cbnz	r3, 8015074 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8015068:	4b05      	ldr	r3, [pc, #20]	; (8015080 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801506a:	21b8      	movs	r1, #184	; 0xb8
 801506c:	4a05      	ldr	r2, [pc, #20]	; (8015084 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801506e:	4806      	ldr	r0, [pc, #24]	; (8015088 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8015070:	f010 fba4 	bl	80257bc <__assert_func>
 8015074:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8015078:	bd08      	pop	{r3, pc}
 801507a:	bf00      	nop
 801507c:	2000bc5c 	.word	0x2000bc5c
 8015080:	08027c5c 	.word	0x08027c5c
 8015084:	08027da0 	.word	0x08027da0
 8015088:	08027c98 	.word	0x08027c98

0801508c <_ZN8touchgfx13ImageProgressC1Ev>:
 801508c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015090:	4604      	mov	r4, r0
 8015092:	f7ff ffa1 	bl	8014fd8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015096:	4b31      	ldr	r3, [pc, #196]	; (801515c <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015098:	a902      	add	r1, sp, #8
 801509a:	4626      	mov	r6, r4
 801509c:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 80150a0:	2500      	movs	r5, #0
 80150a2:	4a2f      	ldr	r2, [pc, #188]	; (8015160 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 80150a4:	f846 3b90 	str.w	r3, [r6], #144
 80150a8:	2701      	movs	r7, #1
 80150aa:	4b2e      	ldr	r3, [pc, #184]	; (8015164 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 80150ac:	4640      	mov	r0, r8
 80150ae:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80150b2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80150b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150ba:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 80150be:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80150c2:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80150c6:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80150ca:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80150ce:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80150d2:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80150d6:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80150da:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80150de:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80150e2:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80150e6:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 80150ea:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 80150ee:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 80150f2:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 80150f6:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 80150fa:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 80150fe:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8015102:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8015106:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 801510a:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801510e:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8015112:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8015116:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 801511a:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801511e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015122:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8015126:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801512a:	f002 fb6f 	bl	801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801512e:	4b0e      	ldr	r3, [pc, #56]	; (8015168 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8015130:	4641      	mov	r1, r8
 8015132:	4630      	mov	r0, r6
 8015134:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8015138:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801513c:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8015140:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8015144:	f000 fa74 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015148:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801514c:	4631      	mov	r1, r6
 801514e:	f000 fa6f 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015152:	4620      	mov	r0, r4
 8015154:	b002      	add	sp, #8
 8015156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801515a:	bf00      	nop
 801515c:	08027cc8 	.word	0x08027cc8
 8015160:	08028ee4 	.word	0x08028ee4
 8015164:	08028044 	.word	0x08028044
 8015168:	08028de4 	.word	0x08028de4

0801516c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801516c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015170:	4617      	mov	r7, r2
 8015172:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015176:	2200      	movs	r2, #0
 8015178:	4604      	mov	r4, r0
 801517a:	460e      	mov	r6, r1
 801517c:	4698      	mov	r8, r3
 801517e:	4611      	mov	r1, r2
 8015180:	9500      	str	r5, [sp, #0]
 8015182:	3090      	adds	r0, #144	; 0x90
 8015184:	f7fb f91c 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015188:	4643      	mov	r3, r8
 801518a:	463a      	mov	r2, r7
 801518c:	4631      	mov	r1, r6
 801518e:	4620      	mov	r0, r4
 8015190:	9508      	str	r5, [sp, #32]
 8015192:	b002      	add	sp, #8
 8015194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015198:	f000 b8aa 	b.w	80152f0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801519c <_ZN8touchgfx13ImageProgress8setValueEi>:
 801519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801519e:	4604      	mov	r4, r0
 80151a0:	f000 f8f0 	bl	8015384 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80151a4:	f104 0790 	add.w	r7, r4, #144	; 0x90
 80151a8:	4638      	mov	r0, r7
 80151aa:	f004 fc9d 	bl	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
 80151ae:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80151b2:	4620      	mov	r0, r4
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	bf94      	ite	ls
 80151b8:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80151bc:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80151c0:	f000 f93a 	bl	8015438 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80151c4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80151c8:	4606      	mov	r6, r0
 80151ca:	b205      	sxth	r5, r0
 80151cc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	d056      	beq.n	8015282 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 80151d4:	2b03      	cmp	r3, #3
 80151d6:	d82c      	bhi.n	8015232 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80151d8:	e8df f003 	tbb	[pc, r3]
 80151dc:	3d311202 	.word	0x3d311202
 80151e0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80151e4:	2200      	movs	r2, #0
 80151e6:	9300      	str	r3, [sp, #0]
 80151e8:	4611      	mov	r1, r2
 80151ea:	462b      	mov	r3, r5
 80151ec:	4638      	mov	r0, r7
 80151ee:	f7fb f8e7 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80151f2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80151f6:	9300      	str	r3, [sp, #0]
 80151f8:	462b      	mov	r3, r5
 80151fa:	2200      	movs	r2, #0
 80151fc:	4611      	mov	r1, r2
 80151fe:	e014      	b.n	801522a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015200:	8921      	ldrh	r1, [r4, #8]
 8015202:	2200      	movs	r2, #0
 8015204:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015208:	1a09      	subs	r1, r1, r0
 801520a:	4638      	mov	r0, r7
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	462b      	mov	r3, r5
 8015210:	b209      	sxth	r1, r1
 8015212:	f7fb f8d5 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015216:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801521a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801521e:	4249      	negs	r1, r1
 8015220:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8015224:	9200      	str	r2, [sp, #0]
 8015226:	b209      	sxth	r1, r1
 8015228:	2200      	movs	r2, #0
 801522a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801522e:	f7fb f8c7 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015232:	4638      	mov	r0, r7
 8015234:	b003      	add	sp, #12
 8015236:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801523a:	f004 bc55 	b.w	8019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>
 801523e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015242:	2200      	movs	r2, #0
 8015244:	9500      	str	r5, [sp, #0]
 8015246:	2100      	movs	r1, #0
 8015248:	4638      	mov	r0, r7
 801524a:	f7fb f8b9 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801524e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015252:	9500      	str	r5, [sp, #0]
 8015254:	e7d1      	b.n	80151fa <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8015256:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801525a:	2100      	movs	r1, #0
 801525c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015260:	1a12      	subs	r2, r2, r0
 8015262:	9500      	str	r5, [sp, #0]
 8015264:	4638      	mov	r0, r7
 8015266:	b212      	sxth	r2, r2
 8015268:	f7fb f8aa 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801526c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8015270:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8015274:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015278:	4252      	negs	r2, r2
 801527a:	9100      	str	r1, [sp, #0]
 801527c:	b212      	sxth	r2, r2
 801527e:	2100      	movs	r1, #0
 8015280:	e7d3      	b.n	801522a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015282:	2b03      	cmp	r3, #3
 8015284:	d8d5      	bhi.n	8015232 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015286:	e8df f003 	tbb	[pc, r3]
 801528a:	1102      	.short	0x1102
 801528c:	2a1b      	.short	0x2a1b
 801528e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015292:	2200      	movs	r2, #0
 8015294:	4638      	mov	r0, r7
 8015296:	4611      	mov	r1, r2
 8015298:	9300      	str	r3, [sp, #0]
 801529a:	462b      	mov	r3, r5
 801529c:	f7fb f890 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80152a0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152a4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80152a8:	1af1      	subs	r1, r6, r3
 80152aa:	e7bb      	b.n	8015224 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 80152ac:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80152b0:	2200      	movs	r2, #0
 80152b2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80152b6:	1a09      	subs	r1, r1, r0
 80152b8:	9300      	str	r3, [sp, #0]
 80152ba:	462b      	mov	r3, r5
 80152bc:	b209      	sxth	r1, r1
 80152be:	e795      	b.n	80151ec <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 80152c0:	2200      	movs	r2, #0
 80152c2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152c6:	4638      	mov	r0, r7
 80152c8:	9500      	str	r5, [sp, #0]
 80152ca:	4611      	mov	r1, r2
 80152cc:	f7fb f878 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80152d0:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 80152d4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152d8:	1a32      	subs	r2, r6, r0
 80152da:	9000      	str	r0, [sp, #0]
 80152dc:	e7ce      	b.n	801527c <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 80152de:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80152e2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80152e6:	1a12      	subs	r2, r2, r0
 80152e8:	9500      	str	r5, [sp, #0]
 80152ea:	b212      	sxth	r2, r2
 80152ec:	e7ab      	b.n	8015246 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

080152ee <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80152ee:	4770      	bx	lr

080152f0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80152f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80152f4:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80152f8:	4604      	mov	r4, r0
 80152fa:	460e      	mov	r6, r1
 80152fc:	4698      	mov	r8, r3
 80152fe:	9700      	str	r7, [sp, #0]
 8015300:	3058      	adds	r0, #88	; 0x58
 8015302:	4615      	mov	r5, r2
 8015304:	f7fb f85c 	bl	80103c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015308:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801530c:	eb06 0308 	add.w	r3, r6, r8
 8015310:	429a      	cmp	r2, r3
 8015312:	eb05 0207 	add.w	r2, r5, r7
 8015316:	bfb8      	it	lt
 8015318:	8123      	strhlt	r3, [r4, #8]
 801531a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801531e:	4293      	cmp	r3, r2
 8015320:	bfb8      	it	lt
 8015322:	8162      	strhlt	r2, [r4, #10]
 8015324:	b002      	add	sp, #8
 8015326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801532a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801532a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801532e:	4770      	bx	lr

08015330 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015330:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8015334:	4770      	bx	lr

08015336 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8015336:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801533a:	4770      	bx	lr

0801533c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801533c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015340:	4770      	bx	lr

08015342 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8015342:	b510      	push	{r4, lr}
 8015344:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015348:	800c      	strh	r4, [r1, #0]
 801534a:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801534e:	8011      	strh	r1, [r2, #0]
 8015350:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015354:	801a      	strh	r2, [r3, #0]
 8015356:	9b02      	ldr	r3, [sp, #8]
 8015358:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801535c:	801a      	strh	r2, [r3, #0]
 801535e:	bd10      	pop	{r4, pc}

08015360 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015360:	b510      	push	{r4, lr}
 8015362:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015366:	800c      	strh	r4, [r1, #0]
 8015368:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801536c:	8011      	strh	r1, [r2, #0]
 801536e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015372:	801a      	strh	r2, [r3, #0]
 8015374:	bd10      	pop	{r4, pc}

08015376 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015376:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801537a:	800b      	strh	r3, [r1, #0]
 801537c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015380:	8013      	strh	r3, [r2, #0]
 8015382:	4770      	bx	lr

08015384 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015384:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015388:	4299      	cmp	r1, r3
 801538a:	bfb8      	it	lt
 801538c:	4619      	movlt	r1, r3
 801538e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015392:	4299      	cmp	r1, r3
 8015394:	bfa8      	it	ge
 8015396:	4619      	movge	r1, r3
 8015398:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801539c:	4770      	bx	lr

0801539e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801539e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 80153a2:	4770      	bx	lr

080153a4 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80153a4:	b510      	push	{r4, lr}
 80153a6:	4604      	mov	r4, r0
 80153a8:	2190      	movs	r1, #144	; 0x90
 80153aa:	f010 f9dc 	bl	8025766 <_ZdlPvj>
 80153ae:	4620      	mov	r0, r4
 80153b0:	bd10      	pop	{r4, pc}

080153b2 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80153b2:	b510      	push	{r4, lr}
 80153b4:	4604      	mov	r4, r0
 80153b6:	302c      	adds	r0, #44	; 0x2c
 80153b8:	f002 fa28 	bl	801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80153bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80153be:	8123      	strh	r3, [r4, #8]
 80153c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80153c2:	8163      	strh	r3, [r4, #10]
 80153c4:	bd10      	pop	{r4, pc}
	...

080153c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 80153c8:	4291      	cmp	r1, r2
 80153ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ce:	4604      	mov	r4, r0
 80153d0:	460e      	mov	r6, r1
 80153d2:	4615      	mov	r5, r2
 80153d4:	4698      	mov	r8, r3
 80153d6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80153da:	db05      	blt.n	80153e8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 80153dc:	4b12      	ldr	r3, [pc, #72]	; (8015428 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 80153de:	214d      	movs	r1, #77	; 0x4d
 80153e0:	4a12      	ldr	r2, [pc, #72]	; (801542c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80153e2:	4813      	ldr	r0, [pc, #76]	; (8015430 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80153e4:	f010 f9ea 	bl	80257bc <__assert_func>
 80153e8:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 80153ec:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 80153f0:	6803      	ldr	r3, [r0, #0]
 80153f2:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80153f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80153fa:	4798      	blx	r3
 80153fc:	f1b8 0f00 	cmp.w	r8, #0
 8015400:	d10c      	bne.n	801541c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8015402:	1bad      	subs	r5, r5, r6
 8015404:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8015408:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801540c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8015410:	42bb      	cmp	r3, r7
 8015412:	d806      	bhi.n	8015422 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8015414:	4b07      	ldr	r3, [pc, #28]	; (8015434 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8015416:	215a      	movs	r1, #90	; 0x5a
 8015418:	4a04      	ldr	r2, [pc, #16]	; (801542c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801541a:	e7e2      	b.n	80153e2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801541c:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8015420:	e7f2      	b.n	8015408 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8015422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015426:	bf00      	nop
 8015428:	08027dd3 	.word	0x08027dd3
 801542c:	08027f10 	.word	0x08027f10
 8015430:	08027ddd 	.word	0x08027ddd
 8015434:	08027e34 	.word	0x08027e34

08015438 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801543a:	4604      	mov	r4, r0
 801543c:	460d      	mov	r5, r1
 801543e:	b1b9      	cbz	r1, 8015470 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8015440:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8015444:	ab01      	add	r3, sp, #4
 8015446:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801544a:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801544e:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8015452:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8015456:	1a12      	subs	r2, r2, r0
 8015458:	1b89      	subs	r1, r1, r6
 801545a:	1a38      	subs	r0, r7, r0
 801545c:	f004 fc85 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 8015460:	4629      	mov	r1, r5
 8015462:	ab01      	add	r3, sp, #4
 8015464:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015468:	4430      	add	r0, r6
 801546a:	f004 fc7e 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 801546e:	b285      	uxth	r5, r0
 8015470:	4628      	mov	r0, r5
 8015472:	b003      	add	sp, #12
 8015474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015478 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801547c:	4604      	mov	r4, r0
 801547e:	2600      	movs	r6, #0
 8015480:	f7fa ff50 	bl	8010324 <_ZN8touchgfx8DrawableC1Ev>
 8015484:	4b1b      	ldr	r3, [pc, #108]	; (80154f4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015486:	4625      	mov	r5, r4
 8015488:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801548c:	af02      	add	r7, sp, #8
 801548e:	62a6      	str	r6, [r4, #40]	; 0x28
 8015490:	f845 3b2c 	str.w	r3, [r5], #44
 8015494:	4628      	mov	r0, r5
 8015496:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801549a:	f7fa ff43 	bl	8010324 <_ZN8touchgfx8DrawableC1Ev>
 801549e:	4b16      	ldr	r3, [pc, #88]	; (80154f8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 80154a0:	4639      	mov	r1, r7
 80154a2:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80154a6:	4628      	mov	r0, r5
 80154a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154aa:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 80154ae:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 80154b2:	f002 f9ab 	bl	801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154b6:	4638      	mov	r0, r7
 80154b8:	f7fa ff34 	bl	8010324 <_ZN8touchgfx8DrawableC1Ev>
 80154bc:	4b0f      	ldr	r3, [pc, #60]	; (80154fc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 80154be:	4632      	mov	r2, r6
 80154c0:	4631      	mov	r1, r6
 80154c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80154c4:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80154c8:	4628      	mov	r0, r5
 80154ca:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80154ce:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 80154d2:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 80154d6:	f7fa ffbe 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
 80154da:	4629      	mov	r1, r5
 80154dc:	4620      	mov	r0, r4
 80154de:	f000 f8a7 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80154e2:	4620      	mov	r0, r4
 80154e4:	4639      	mov	r1, r7
 80154e6:	f000 f8a3 	bl	8015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80154ea:	4620      	mov	r0, r4
 80154ec:	b002      	add	sp, #8
 80154ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154f2:	bf00      	nop
 80154f4:	08027e58 	.word	0x08027e58
 80154f8:	08028ee4 	.word	0x08028ee4
 80154fc:	08028044 	.word	0x08028044

08015500 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015500:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015502:	2000      	movs	r0, #0
 8015504:	b12b      	cbz	r3, 8015512 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015506:	b920      	cbnz	r0, 8015512 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015508:	1a5a      	subs	r2, r3, r1
 801550a:	699b      	ldr	r3, [r3, #24]
 801550c:	4250      	negs	r0, r2
 801550e:	4150      	adcs	r0, r2
 8015510:	e7f8      	b.n	8015504 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015512:	4770      	bx	lr

08015514 <_ZN8touchgfx9Container9removeAllEv>:
 8015514:	2200      	movs	r2, #0
 8015516:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015518:	b123      	cbz	r3, 8015524 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801551a:	6999      	ldr	r1, [r3, #24]
 801551c:	6281      	str	r1, [r0, #40]	; 0x28
 801551e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015522:	e7f8      	b.n	8015516 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015524:	4770      	bx	lr

08015526 <_ZN8touchgfx9Container6unlinkEv>:
 8015526:	2300      	movs	r3, #0
 8015528:	6283      	str	r3, [r0, #40]	; 0x28
 801552a:	4770      	bx	lr

0801552c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015530:	461f      	mov	r7, r3
 8015532:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015536:	460d      	mov	r5, r1
 8015538:	4616      	mov	r6, r2
 801553a:	b103      	cbz	r3, 801553e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801553c:	6038      	str	r0, [r7, #0]
 801553e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015540:	b314      	cbz	r4, 8015588 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015542:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015546:	b1eb      	cbz	r3, 8015584 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015548:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801554c:	428d      	cmp	r5, r1
 801554e:	db19      	blt.n	8015584 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015550:	b289      	uxth	r1, r1
 8015552:	8923      	ldrh	r3, [r4, #8]
 8015554:	440b      	add	r3, r1
 8015556:	b21b      	sxth	r3, r3
 8015558:	429d      	cmp	r5, r3
 801555a:	da13      	bge.n	8015584 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801555c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015560:	4296      	cmp	r6, r2
 8015562:	db0f      	blt.n	8015584 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015564:	b292      	uxth	r2, r2
 8015566:	8963      	ldrh	r3, [r4, #10]
 8015568:	4413      	add	r3, r2
 801556a:	b21b      	sxth	r3, r3
 801556c:	429e      	cmp	r6, r3
 801556e:	da09      	bge.n	8015584 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	1ab2      	subs	r2, r6, r2
 8015574:	1a69      	subs	r1, r5, r1
 8015576:	4620      	mov	r0, r4
 8015578:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801557c:	b212      	sxth	r2, r2
 801557e:	463b      	mov	r3, r7
 8015580:	b209      	sxth	r1, r1
 8015582:	47c0      	blx	r8
 8015584:	69a4      	ldr	r4, [r4, #24]
 8015586:	e7db      	b.n	8015540 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801558c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801558c:	2200      	movs	r2, #0
 801558e:	8002      	strh	r2, [r0, #0]
 8015590:	8042      	strh	r2, [r0, #2]
 8015592:	8082      	strh	r2, [r0, #4]
 8015594:	80c2      	strh	r2, [r0, #6]
 8015596:	4770      	bx	lr

08015598 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015598:	b570      	push	{r4, r5, r6, lr}
 801559a:	460d      	mov	r5, r1
 801559c:	4616      	mov	r6, r2
 801559e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155a0:	b13c      	cbz	r4, 80155b2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80155a2:	6823      	ldr	r3, [r4, #0]
 80155a4:	4620      	mov	r0, r4
 80155a6:	4632      	mov	r2, r6
 80155a8:	4629      	mov	r1, r5
 80155aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155ac:	4798      	blx	r3
 80155ae:	69a4      	ldr	r4, [r4, #24]
 80155b0:	e7f6      	b.n	80155a0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80155b2:	bd70      	pop	{r4, r5, r6, pc}

080155b4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80155b4:	b538      	push	{r3, r4, r5, lr}
 80155b6:	460d      	mov	r5, r1
 80155b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155ba:	b134      	cbz	r4, 80155ca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80155bc:	682b      	ldr	r3, [r5, #0]
 80155be:	4621      	mov	r1, r4
 80155c0:	4628      	mov	r0, r5
 80155c2:	689b      	ldr	r3, [r3, #8]
 80155c4:	4798      	blx	r3
 80155c6:	69a4      	ldr	r4, [r4, #24]
 80155c8:	e7f7      	b.n	80155ba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80155ca:	bd38      	pop	{r3, r4, r5, pc}

080155cc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80155cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155ce:	b19b      	cbz	r3, 80155f8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80155d0:	428b      	cmp	r3, r1
 80155d2:	d109      	bne.n	80155e8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80155d4:	699a      	ldr	r2, [r3, #24]
 80155d6:	2100      	movs	r1, #0
 80155d8:	6159      	str	r1, [r3, #20]
 80155da:	6282      	str	r2, [r0, #40]	; 0x28
 80155dc:	b902      	cbnz	r2, 80155e0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80155de:	4770      	bx	lr
 80155e0:	6199      	str	r1, [r3, #24]
 80155e2:	4770      	bx	lr
 80155e4:	4613      	mov	r3, r2
 80155e6:	b13a      	cbz	r2, 80155f8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80155e8:	699a      	ldr	r2, [r3, #24]
 80155ea:	428a      	cmp	r2, r1
 80155ec:	d1fa      	bne.n	80155e4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80155ee:	698a      	ldr	r2, [r1, #24]
 80155f0:	619a      	str	r2, [r3, #24]
 80155f2:	2300      	movs	r3, #0
 80155f4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80155f8:	4770      	bx	lr

080155fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80155fa:	b410      	push	{r4}
 80155fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155fe:	4604      	mov	r4, r0
 8015600:	b92b      	cbnz	r3, 801560e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015602:	6803      	ldr	r3, [r0, #0]
 8015604:	4611      	mov	r1, r2
 8015606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801560a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801560c:	4718      	bx	r3
 801560e:	b941      	cbnz	r1, 8015622 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015610:	6193      	str	r3, [r2, #24]
 8015612:	6282      	str	r2, [r0, #40]	; 0x28
 8015614:	6154      	str	r4, [r2, #20]
 8015616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801561a:	4770      	bx	lr
 801561c:	4603      	mov	r3, r0
 801561e:	2800      	cmp	r0, #0
 8015620:	d0f9      	beq.n	8015616 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015622:	4299      	cmp	r1, r3
 8015624:	6998      	ldr	r0, [r3, #24]
 8015626:	d1f9      	bne.n	801561c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015628:	6190      	str	r0, [r2, #24]
 801562a:	618a      	str	r2, [r1, #24]
 801562c:	e7f2      	b.n	8015614 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015630 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015630:	4288      	cmp	r0, r1
 8015632:	b508      	push	{r3, lr}
 8015634:	d105      	bne.n	8015642 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015636:	4b11      	ldr	r3, [pc, #68]	; (801567c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015638:	2123      	movs	r1, #35	; 0x23
 801563a:	4a11      	ldr	r2, [pc, #68]	; (8015680 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801563c:	4811      	ldr	r0, [pc, #68]	; (8015684 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801563e:	f010 f8bd 	bl	80257bc <__assert_func>
 8015642:	694b      	ldr	r3, [r1, #20]
 8015644:	b11b      	cbz	r3, 801564e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015646:	4b10      	ldr	r3, [pc, #64]	; (8015688 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015648:	2124      	movs	r1, #36	; 0x24
 801564a:	4a0d      	ldr	r2, [pc, #52]	; (8015680 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801564c:	e7f6      	b.n	801563c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801564e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015652:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015654:	b913      	cbnz	r3, 801565c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015656:	6281      	str	r1, [r0, #40]	; 0x28
 8015658:	bd08      	pop	{r3, pc}
 801565a:	4613      	mov	r3, r2
 801565c:	699a      	ldr	r2, [r3, #24]
 801565e:	b12a      	cbz	r2, 801566c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015660:	428b      	cmp	r3, r1
 8015662:	d1fa      	bne.n	801565a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015664:	4b09      	ldr	r3, [pc, #36]	; (801568c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015666:	2135      	movs	r1, #53	; 0x35
 8015668:	4a05      	ldr	r2, [pc, #20]	; (8015680 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801566a:	e7e7      	b.n	801563c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801566c:	428b      	cmp	r3, r1
 801566e:	d103      	bne.n	8015678 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015670:	4b06      	ldr	r3, [pc, #24]	; (801568c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015672:	2138      	movs	r1, #56	; 0x38
 8015674:	4a02      	ldr	r2, [pc, #8]	; (8015680 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015676:	e7e1      	b.n	801563c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015678:	6199      	str	r1, [r3, #24]
 801567a:	e7ed      	b.n	8015658 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801567c:	08027f71 	.word	0x08027f71
 8015680:	080280c8 	.word	0x080280c8
 8015684:	08027f9d 	.word	0x08027f9d
 8015688:	08027fd0 	.word	0x08027fd0
 801568c:	08028006 	.word	0x08028006

08015690 <_ZN8touchgfx4RectaNERKS0_>:
 8015690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015694:	888b      	ldrh	r3, [r1, #4]
 8015696:	f9b1 9000 	ldrsh.w	r9, [r1]
 801569a:	f9b0 a000 	ldrsh.w	sl, [r0]
 801569e:	444b      	add	r3, r9
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	fa0f f883 	sxth.w	r8, r3
 80156a6:	45c2      	cmp	sl, r8
 80156a8:	da30      	bge.n	801570c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156aa:	8882      	ldrh	r2, [r0, #4]
 80156ac:	4452      	add	r2, sl
 80156ae:	b292      	uxth	r2, r2
 80156b0:	fa0f fe82 	sxth.w	lr, r2
 80156b4:	45f1      	cmp	r9, lr
 80156b6:	da29      	bge.n	801570c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156b8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80156bc:	88cc      	ldrh	r4, [r1, #6]
 80156be:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80156c2:	442c      	add	r4, r5
 80156c4:	b224      	sxth	r4, r4
 80156c6:	42a6      	cmp	r6, r4
 80156c8:	da20      	bge.n	801570c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156ca:	88c7      	ldrh	r7, [r0, #6]
 80156cc:	4437      	add	r7, r6
 80156ce:	b2bf      	uxth	r7, r7
 80156d0:	fa0f fc87 	sxth.w	ip, r7
 80156d4:	4565      	cmp	r5, ip
 80156d6:	da19      	bge.n	801570c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80156d8:	45ca      	cmp	sl, r9
 80156da:	4654      	mov	r4, sl
 80156dc:	bfb8      	it	lt
 80156de:	464c      	movlt	r4, r9
 80156e0:	42b5      	cmp	r5, r6
 80156e2:	bfb8      	it	lt
 80156e4:	4635      	movlt	r5, r6
 80156e6:	45f0      	cmp	r8, lr
 80156e8:	bfc8      	it	gt
 80156ea:	4613      	movgt	r3, r2
 80156ec:	1b1b      	subs	r3, r3, r4
 80156ee:	8083      	strh	r3, [r0, #4]
 80156f0:	88ca      	ldrh	r2, [r1, #6]
 80156f2:	884b      	ldrh	r3, [r1, #2]
 80156f4:	8004      	strh	r4, [r0, #0]
 80156f6:	4413      	add	r3, r2
 80156f8:	8045      	strh	r5, [r0, #2]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	b21a      	sxth	r2, r3
 80156fe:	4594      	cmp	ip, r2
 8015700:	bfb8      	it	lt
 8015702:	463b      	movlt	r3, r7
 8015704:	1b5b      	subs	r3, r3, r5
 8015706:	80c3      	strh	r3, [r0, #6]
 8015708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801570c:	2300      	movs	r3, #0
 801570e:	8003      	strh	r3, [r0, #0]
 8015710:	8043      	strh	r3, [r0, #2]
 8015712:	8083      	strh	r3, [r0, #4]
 8015714:	80c3      	strh	r3, [r0, #6]
 8015716:	e7f7      	b.n	8015708 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015718 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015718:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801571c:	b12b      	cbz	r3, 801572a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801571e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015722:	fab0 f080 	clz	r0, r0
 8015726:	0940      	lsrs	r0, r0, #5
 8015728:	4770      	bx	lr
 801572a:	2001      	movs	r0, #1
 801572c:	4770      	bx	lr

0801572e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015732:	2300      	movs	r3, #0
 8015734:	4604      	mov	r4, r0
 8015736:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015738:	8003      	strh	r3, [r0, #0]
 801573a:	8043      	strh	r3, [r0, #2]
 801573c:	8083      	strh	r3, [r0, #4]
 801573e:	80c3      	strh	r3, [r0, #6]
 8015740:	2d00      	cmp	r5, #0
 8015742:	d040      	beq.n	80157c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015744:	1d28      	adds	r0, r5, #4
 8015746:	f7ff ffe7 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 801574a:	b988      	cbnz	r0, 8015770 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801574c:	4620      	mov	r0, r4
 801574e:	f7ff ffe3 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015752:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015756:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801575a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801575e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015762:	b138      	cbz	r0, 8015774 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015764:	8022      	strh	r2, [r4, #0]
 8015766:	8063      	strh	r3, [r4, #2]
 8015768:	f8a4 e004 	strh.w	lr, [r4, #4]
 801576c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015770:	69ad      	ldr	r5, [r5, #24]
 8015772:	e7e5      	b.n	8015740 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015774:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015778:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801577c:	4290      	cmp	r0, r2
 801577e:	4607      	mov	r7, r0
 8015780:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015784:	460e      	mov	r6, r1
 8015786:	bfa8      	it	ge
 8015788:	4617      	movge	r7, r2
 801578a:	4299      	cmp	r1, r3
 801578c:	4472      	add	r2, lr
 801578e:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015792:	bfa8      	it	ge
 8015794:	461e      	movge	r6, r3
 8015796:	4440      	add	r0, r8
 8015798:	4471      	add	r1, lr
 801579a:	4463      	add	r3, ip
 801579c:	b200      	sxth	r0, r0
 801579e:	8027      	strh	r7, [r4, #0]
 80157a0:	b212      	sxth	r2, r2
 80157a2:	8066      	strh	r6, [r4, #2]
 80157a4:	b209      	sxth	r1, r1
 80157a6:	b21b      	sxth	r3, r3
 80157a8:	4290      	cmp	r0, r2
 80157aa:	bfac      	ite	ge
 80157ac:	ebc7 0200 	rsbge	r2, r7, r0
 80157b0:	ebc7 0202 	rsblt	r2, r7, r2
 80157b4:	4299      	cmp	r1, r3
 80157b6:	bfac      	ite	ge
 80157b8:	ebc6 0301 	rsbge	r3, r6, r1
 80157bc:	ebc6 0303 	rsblt	r3, r6, r3
 80157c0:	80a2      	strh	r2, [r4, #4]
 80157c2:	80e3      	strh	r3, [r4, #6]
 80157c4:	e7d4      	b.n	8015770 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80157c6:	4620      	mov	r0, r4
 80157c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157cc <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80157cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80157d0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80157d4:	b383      	cbz	r3, 8015838 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80157d6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80157d8:	b374      	cbz	r4, 8015838 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80157da:	f9b1 5000 	ldrsh.w	r5, [r1]
 80157de:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80157e2:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80157e6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80157ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80157ee:	b303      	cbz	r3, 8015832 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80157f0:	4668      	mov	r0, sp
 80157f2:	1d21      	adds	r1, r4, #4
 80157f4:	f8ad 5000 	strh.w	r5, [sp]
 80157f8:	f8ad 6002 	strh.w	r6, [sp, #2]
 80157fc:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015800:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015804:	f7ff ff44 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8015808:	4668      	mov	r0, sp
 801580a:	f7ff ff85 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 801580e:	b980      	cbnz	r0, 8015832 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015810:	f8bd 3000 	ldrh.w	r3, [sp]
 8015814:	4669      	mov	r1, sp
 8015816:	88a2      	ldrh	r2, [r4, #4]
 8015818:	4620      	mov	r0, r4
 801581a:	1a9b      	subs	r3, r3, r2
 801581c:	88e2      	ldrh	r2, [r4, #6]
 801581e:	f8ad 3000 	strh.w	r3, [sp]
 8015822:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015826:	1a9b      	subs	r3, r3, r2
 8015828:	f8ad 3002 	strh.w	r3, [sp, #2]
 801582c:	6823      	ldr	r3, [r4, #0]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	4798      	blx	r3
 8015832:	69a4      	ldr	r4, [r4, #24]
 8015834:	2c00      	cmp	r4, #0
 8015836:	d1d8      	bne.n	80157ea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015838:	b002      	add	sp, #8
 801583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801583e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801583e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015840:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015844:	460d      	mov	r5, r1
 8015846:	4616      	mov	r6, r2
 8015848:	b323      	cbz	r3, 8015894 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801584a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801584c:	b314      	cbz	r4, 8015894 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801584e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015852:	b1eb      	cbz	r3, 8015890 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015854:	6828      	ldr	r0, [r5, #0]
 8015856:	466b      	mov	r3, sp
 8015858:	6869      	ldr	r1, [r5, #4]
 801585a:	c303      	stmia	r3!, {r0, r1}
 801585c:	4668      	mov	r0, sp
 801585e:	1d21      	adds	r1, r4, #4
 8015860:	f7ff ff16 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8015864:	4668      	mov	r0, sp
 8015866:	f7ff ff57 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 801586a:	b988      	cbnz	r0, 8015890 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801586c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015870:	4669      	mov	r1, sp
 8015872:	88a2      	ldrh	r2, [r4, #4]
 8015874:	4620      	mov	r0, r4
 8015876:	1a9b      	subs	r3, r3, r2
 8015878:	88e2      	ldrh	r2, [r4, #6]
 801587a:	f8ad 3000 	strh.w	r3, [sp]
 801587e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015882:	1a9b      	subs	r3, r3, r2
 8015884:	4632      	mov	r2, r6
 8015886:	f8ad 3002 	strh.w	r3, [sp, #2]
 801588a:	6823      	ldr	r3, [r4, #0]
 801588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801588e:	4798      	blx	r3
 8015890:	69a4      	ldr	r4, [r4, #24]
 8015892:	e7db      	b.n	801584c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015894:	b002      	add	sp, #8
 8015896:	bd70      	pop	{r4, r5, r6, pc}

08015898 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015898:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801589c:	4770      	bx	lr

0801589e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801589e:	6803      	ldr	r3, [r0, #0]
 80158a0:	b513      	push	{r0, r1, r4, lr}
 80158a2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80158a6:	2300      	movs	r3, #0
 80158a8:	e9cd 3300 	strd	r3, r3, [sp]
 80158ac:	466b      	mov	r3, sp
 80158ae:	47a0      	blx	r4
 80158b0:	b002      	add	sp, #8
 80158b2:	bd10      	pop	{r4, pc}

080158b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80158b4:	2301      	movs	r3, #1
 80158b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158be:	4770      	bx	lr

080158c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80158c0:	2301      	movs	r3, #1
 80158c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80158c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80158ca:	4770      	bx	lr

080158cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80158cc:	6843      	ldr	r3, [r0, #4]
 80158ce:	2201      	movs	r2, #1
 80158d0:	725a      	strb	r2, [r3, #9]
 80158d2:	6840      	ldr	r0, [r0, #4]
 80158d4:	6803      	ldr	r3, [r0, #0]
 80158d6:	691b      	ldr	r3, [r3, #16]
 80158d8:	4718      	bx	r3

080158da <_ZN8touchgfx3HAL8flushDMAEv>:
 80158da:	6840      	ldr	r0, [r0, #4]
 80158dc:	6803      	ldr	r3, [r0, #0]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	4718      	bx	r3
	...

080158e4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80158e4:	4b04      	ldr	r3, [pc, #16]	; (80158f8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	b123      	cbz	r3, 80158f4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80158ea:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80158ee:	f080 0001 	eor.w	r0, r0, #1
 80158f2:	4770      	bx	lr
 80158f4:	2001      	movs	r0, #1
 80158f6:	4770      	bx	lr
 80158f8:	2000bb92 	.word	0x2000bb92

080158fc <_ZN8touchgfx3HAL8endFrameEv>:
 80158fc:	b510      	push	{r4, lr}
 80158fe:	4604      	mov	r4, r0
 8015900:	6840      	ldr	r0, [r0, #4]
 8015902:	6803      	ldr	r3, [r0, #0]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	4798      	blx	r3
 8015908:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801590c:	b113      	cbz	r3, 8015914 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801590e:	2301      	movs	r3, #1
 8015910:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015914:	bd10      	pop	{r4, pc}

08015916 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015916:	b508      	push	{r3, lr}
 8015918:	6803      	ldr	r3, [r0, #0]
 801591a:	4604      	mov	r4, r0
 801591c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801591e:	4798      	blx	r3
 8015920:	6823      	ldr	r3, [r4, #0]
 8015922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015924:	4620      	mov	r0, r4
 8015926:	4798      	blx	r3
 8015928:	f7fd fed4 	bl	80136d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801592c:	6823      	ldr	r3, [r4, #0]
 801592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015930:	e7f8      	b.n	8015924 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015934 <_ZN8touchgfx3HAL4tickEv>:
 8015934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015936:	6803      	ldr	r3, [r0, #0]
 8015938:	4604      	mov	r4, r0
 801593a:	4d5c      	ldr	r5, [pc, #368]	; (8015aac <_ZN8touchgfx3HAL4tickEv+0x178>)
 801593c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015940:	4798      	blx	r3
 8015942:	2800      	cmp	r0, #0
 8015944:	f000 8097 	beq.w	8015a76 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015948:	2001      	movs	r0, #1
 801594a:	2600      	movs	r6, #0
 801594c:	f7fd fba6 	bl	801309c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015950:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015954:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015958:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801595c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015960:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015964:	b133      	cbz	r3, 8015974 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015966:	6823      	ldr	r3, [r4, #0]
 8015968:	4620      	mov	r0, r4
 801596a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801596e:	4798      	blx	r3
 8015970:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015974:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015978:	2601      	movs	r6, #1
 801597a:	6862      	ldr	r2, [r4, #4]
 801597c:	f083 0301 	eor.w	r3, r3, #1
 8015980:	702e      	strb	r6, [r5, #0]
 8015982:	7253      	strb	r3, [r2, #9]
 8015984:	f003 fc5a 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8015988:	6803      	ldr	r3, [r0, #0]
 801598a:	4631      	mov	r1, r6
 801598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801598e:	4798      	blx	r3
 8015990:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015994:	b90b      	cbnz	r3, 801599a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015996:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801599a:	f003 fc4f 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 801599e:	6803      	ldr	r3, [r0, #0]
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	4798      	blx	r3
 80159a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	4798      	blx	r3
 80159ac:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80159b0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80159b4:	3b01      	subs	r3, #1
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80159bc:	b10a      	cbz	r2, 80159c2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d1eb      	bne.n	801599a <_ZN8touchgfx3HAL4tickEv+0x66>
 80159c2:	4a3b      	ldr	r2, [pc, #236]	; (8015ab0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80159c4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80159c8:	7813      	ldrb	r3, [r2, #0]
 80159ca:	3301      	adds	r3, #1
 80159cc:	b25b      	sxtb	r3, r3
 80159ce:	4299      	cmp	r1, r3
 80159d0:	7013      	strb	r3, [r2, #0]
 80159d2:	dc10      	bgt.n	80159f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80159d4:	2300      	movs	r3, #0
 80159d6:	68e0      	ldr	r0, [r4, #12]
 80159d8:	a902      	add	r1, sp, #8
 80159da:	7013      	strb	r3, [r2, #0]
 80159dc:	aa03      	add	r2, sp, #12
 80159de:	6803      	ldr	r3, [r0, #0]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	4798      	blx	r3
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d051      	beq.n	8015a8e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80159ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80159ee:	4620      	mov	r0, r4
 80159f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80159f4:	4798      	blx	r3
 80159f6:	2300      	movs	r3, #0
 80159f8:	6960      	ldr	r0, [r4, #20]
 80159fa:	f88d 3007 	strb.w	r3, [sp, #7]
 80159fe:	b158      	cbz	r0, 8015a18 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a00:	6803      	ldr	r3, [r0, #0]
 8015a02:	f10d 0107 	add.w	r1, sp, #7
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	4798      	blx	r3
 8015a0a:	b128      	cbz	r0, 8015a18 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015a12:	6803      	ldr	r3, [r0, #0]
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	4798      	blx	r3
 8015a18:	f104 001c 	add.w	r0, r4, #28
 8015a1c:	f00e fa02 	bl	8023e24 <_ZN8touchgfx8Gestures4tickEv>
 8015a20:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015a24:	b30b      	cbz	r3, 8015a6a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a26:	6920      	ldr	r0, [r4, #16]
 8015a28:	6803      	ldr	r3, [r0, #0]
 8015a2a:	691b      	ldr	r3, [r3, #16]
 8015a2c:	4798      	blx	r3
 8015a2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a30:	4606      	mov	r6, r0
 8015a32:	b903      	cbnz	r3, 8015a36 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015a34:	6720      	str	r0, [r4, #112]	; 0x70
 8015a36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a38:	4a1e      	ldr	r2, [pc, #120]	; (8015ab4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015a3a:	1af3      	subs	r3, r6, r3
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d914      	bls.n	8015a6a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a40:	6920      	ldr	r0, [r4, #16]
 8015a42:	6803      	ldr	r3, [r0, #0]
 8015a44:	699b      	ldr	r3, [r3, #24]
 8015a46:	4798      	blx	r3
 8015a48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a4a:	2264      	movs	r2, #100	; 0x64
 8015a4c:	1af3      	subs	r3, r6, r3
 8015a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a52:	fbb0 f0f3 	udiv	r0, r0, r3
 8015a56:	2800      	cmp	r0, #0
 8015a58:	dc1e      	bgt.n	8015a98 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015a5a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015a5e:	6920      	ldr	r0, [r4, #16]
 8015a60:	2100      	movs	r1, #0
 8015a62:	6803      	ldr	r3, [r0, #0]
 8015a64:	69db      	ldr	r3, [r3, #28]
 8015a66:	4798      	blx	r3
 8015a68:	6726      	str	r6, [r4, #112]	; 0x70
 8015a6a:	f003 fbe7 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8015a6e:	6803      	ldr	r3, [r0, #0]
 8015a70:	2100      	movs	r1, #0
 8015a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a74:	4798      	blx	r3
 8015a76:	6823      	ldr	r3, [r4, #0]
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015a7e:	4798      	blx	r3
 8015a80:	2001      	movs	r0, #1
 8015a82:	f7fd fb16 	bl	80130b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015a86:	2300      	movs	r3, #0
 8015a88:	702b      	strb	r3, [r5, #0]
 8015a8a:	b004      	add	sp, #16
 8015a8c:	bd70      	pop	{r4, r5, r6, pc}
 8015a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015a92:	4620      	mov	r0, r4
 8015a94:	4798      	blx	r3
 8015a96:	e7ae      	b.n	80159f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015a98:	2863      	cmp	r0, #99	; 0x63
 8015a9a:	bfcb      	itete	gt
 8015a9c:	2300      	movgt	r3, #0
 8015a9e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015aa2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015aa6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015aaa:	e7d8      	b.n	8015a5e <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015aac:	2000bb98 	.word	0x2000bb98
 8015ab0:	2000bb99 	.word	0x2000bb99
 8015ab4:	05f5e100 	.word	0x05f5e100

08015ab8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015ab8:	f7fd bdac 	b.w	8013614 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015abc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015abc:	6581      	str	r1, [r0, #88]	; 0x58
 8015abe:	301c      	adds	r0, #28
 8015ac0:	f00e b9ae 	b.w	8023e20 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015ac4 <_ZN8touchgfx3HAL5touchEll>:
 8015ac4:	b530      	push	{r4, r5, lr}
 8015ac6:	b087      	sub	sp, #28
 8015ac8:	4604      	mov	r4, r0
 8015aca:	a804      	add	r0, sp, #16
 8015acc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015ad0:	f003 f9b8 	bl	8018e44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015ad4:	9b04      	ldr	r3, [sp, #16]
 8015ad6:	a906      	add	r1, sp, #24
 8015ad8:	a803      	add	r0, sp, #12
 8015ada:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015ade:	9b05      	ldr	r3, [sp, #20]
 8015ae0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015ae4:	f003 f9fc 	bl	8018ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015ae8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015aec:	f104 001c 	add.w	r0, r4, #28
 8015af0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015af4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015af8:	b189      	cbz	r1, 8015b1e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015afa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015afe:	9300      	str	r3, [sp, #0]
 8015b00:	4613      	mov	r3, r2
 8015b02:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015b06:	462a      	mov	r2, r5
 8015b08:	f00e f99a 	bl	8023e40 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015b0c:	b128      	cbz	r0, 8015b1a <_ZN8touchgfx3HAL5touchEll+0x56>
 8015b0e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015b12:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015b14:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015b18:	6623      	str	r3, [r4, #96]	; 0x60
 8015b1a:	b007      	add	sp, #28
 8015b1c:	bd30      	pop	{r4, r5, pc}
 8015b1e:	f00e f9d3 	bl	8023ec8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015b22:	2301      	movs	r3, #1
 8015b24:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015b28:	e7f1      	b.n	8015b0e <_ZN8touchgfx3HAL5touchEll+0x4a>

08015b2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015b2a:	b570      	push	{r4, r5, r6, lr}
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d050      	beq.n	8015bd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b30:	ea81 0002 	eor.w	r0, r1, r2
 8015b34:	07c6      	lsls	r6, r0, #31
 8015b36:	d508      	bpl.n	8015b4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015b38:	3a01      	subs	r2, #1
 8015b3a:	18cc      	adds	r4, r1, r3
 8015b3c:	42a1      	cmp	r1, r4
 8015b3e:	d048      	beq.n	8015bd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b40:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b44:	f801 0b01 	strb.w	r0, [r1], #1
 8015b48:	e7f8      	b.n	8015b3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015b4a:	07d5      	lsls	r5, r2, #31
 8015b4c:	bf42      	ittt	mi
 8015b4e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015b52:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015b56:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015b5a:	2b01      	cmp	r3, #1
 8015b5c:	d915      	bls.n	8015b8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b5e:	ea82 0001 	eor.w	r0, r2, r1
 8015b62:	0784      	lsls	r4, r0, #30
 8015b64:	d02d      	beq.n	8015bc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015b66:	1e94      	subs	r4, r2, #2
 8015b68:	4608      	mov	r0, r1
 8015b6a:	18ce      	adds	r6, r1, r3
 8015b6c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015b70:	f820 5b02 	strh.w	r5, [r0], #2
 8015b74:	1a35      	subs	r5, r6, r0
 8015b76:	2d01      	cmp	r5, #1
 8015b78:	d8f8      	bhi.n	8015b6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015b7a:	1e98      	subs	r0, r3, #2
 8015b7c:	f003 0301 	and.w	r3, r3, #1
 8015b80:	f020 0001 	bic.w	r0, r0, #1
 8015b84:	3002      	adds	r0, #2
 8015b86:	4401      	add	r1, r0
 8015b88:	4402      	add	r2, r0
 8015b8a:	1f14      	subs	r4, r2, #4
 8015b8c:	4608      	mov	r0, r1
 8015b8e:	18ce      	adds	r6, r1, r3
 8015b90:	1a35      	subs	r5, r6, r0
 8015b92:	2d03      	cmp	r5, #3
 8015b94:	d810      	bhi.n	8015bb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015b96:	089c      	lsrs	r4, r3, #2
 8015b98:	00a0      	lsls	r0, r4, #2
 8015b9a:	4401      	add	r1, r0
 8015b9c:	3801      	subs	r0, #1
 8015b9e:	4402      	add	r2, r0
 8015ba0:	f06f 0003 	mvn.w	r0, #3
 8015ba4:	fb00 3404 	mla	r4, r0, r4, r3
 8015ba8:	440c      	add	r4, r1
 8015baa:	42a1      	cmp	r1, r4
 8015bac:	d011      	beq.n	8015bd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015bae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015bb2:	f801 3b01 	strb.w	r3, [r1], #1
 8015bb6:	e7f8      	b.n	8015baa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015bb8:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015bbc:	f840 5b04 	str.w	r5, [r0], #4
 8015bc0:	e7e6      	b.n	8015b90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015bc2:	0790      	lsls	r0, r2, #30
 8015bc4:	d0e1      	beq.n	8015b8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015bc6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015bca:	3b02      	subs	r3, #2
 8015bcc:	f821 0b02 	strh.w	r0, [r1], #2
 8015bd0:	e7db      	b.n	8015b8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015bd2:	2001      	movs	r0, #1
 8015bd4:	bd70      	pop	{r4, r5, r6, pc}

08015bd6 <_ZN8touchgfx3HAL7noTouchEv>:
 8015bd6:	b510      	push	{r4, lr}
 8015bd8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015bdc:	4604      	mov	r4, r0
 8015bde:	b153      	cbz	r3, 8015bf6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015be0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015be4:	2101      	movs	r1, #1
 8015be6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015bea:	301c      	adds	r0, #28
 8015bec:	f00e f96c 	bl	8023ec8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015bf6:	bd10      	pop	{r4, pc}

08015bf8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	6980      	ldr	r0, [r0, #24]
 8015c00:	b085      	sub	sp, #20
 8015c02:	460f      	mov	r7, r1
 8015c04:	4690      	mov	r8, r2
 8015c06:	4699      	mov	r9, r3
 8015c08:	b930      	cbnz	r0, 8015c18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015c0a:	4b1f      	ldr	r3, [pc, #124]	; (8015c88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015c0c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015c10:	4a1e      	ldr	r2, [pc, #120]	; (8015c8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015c12:	481f      	ldr	r0, [pc, #124]	; (8015c90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015c14:	f00f fdd2 	bl	80257bc <__assert_func>
 8015c18:	ac04      	add	r4, sp, #16
 8015c1a:	2600      	movs	r6, #0
 8015c1c:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015c20:	6806      	ldr	r6, [r0, #0]
 8015c22:	9401      	str	r4, [sp, #4]
 8015c24:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015c28:	9400      	str	r4, [sp, #0]
 8015c2a:	6834      	ldr	r4, [r6, #0]
 8015c2c:	47a0      	blx	r4
 8015c2e:	4c19      	ldr	r4, [pc, #100]	; (8015c94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015c30:	4606      	mov	r6, r0
 8015c32:	f8a4 9000 	strh.w	r9, [r4]
 8015c36:	f7f9 feff 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8015c3a:	6803      	ldr	r3, [r0, #0]
 8015c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c3e:	4798      	blx	r3
 8015c40:	280c      	cmp	r0, #12
 8015c42:	d80f      	bhi.n	8015c64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015c44:	e8df f000 	tbb	[pc, r0]
 8015c48:	1b1b1207 	.word	0x1b1b1207
 8015c4c:	1b1b1b1b 	.word	0x1b1b1b1b
 8015c50:	1b1b1b1b 	.word	0x1b1b1b1b
 8015c54:	1b          	.byte	0x1b
 8015c55:	00          	.byte	0x00
 8015c56:	8823      	ldrh	r3, [r4, #0]
 8015c58:	fb08 7203 	mla	r2, r8, r3, r7
 8015c5c:	9b03      	ldr	r3, [sp, #12]
 8015c5e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015c62:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015c64:	4630      	mov	r0, r6
 8015c66:	b005      	add	sp, #20
 8015c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c6c:	8822      	ldrh	r2, [r4, #0]
 8015c6e:	9b03      	ldr	r3, [sp, #12]
 8015c70:	fb08 7202 	mla	r2, r8, r2, r7
 8015c74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015c78:	1a9a      	subs	r2, r3, r2
 8015c7a:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015c7c:	e7f2      	b.n	8015c64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015c7e:	4b06      	ldr	r3, [pc, #24]	; (8015c98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015c80:	f240 114d 	movw	r1, #333	; 0x14d
 8015c84:	4a01      	ldr	r2, [pc, #4]	; (8015c8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015c86:	e7c4      	b.n	8015c12 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015c88:	08028171 	.word	0x08028171
 8015c8c:	08028482 	.word	0x08028482
 8015c90:	080281b6 	.word	0x080281b6
 8015c94:	2000bb8e 	.word	0x2000bb8e
 8015c98:	080281dc 	.word	0x080281dc

08015c9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ca0:	4698      	mov	r8, r3
 8015ca2:	6803      	ldr	r3, [r0, #0]
 8015ca4:	b087      	sub	sp, #28
 8015ca6:	460e      	mov	r6, r1
 8015ca8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015caa:	4617      	mov	r7, r2
 8015cac:	4b0d      	ldr	r3, [pc, #52]	; (8015ce4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015cae:	4604      	mov	r4, r0
 8015cb0:	f8b3 9000 	ldrh.w	r9, [r3]
 8015cb4:	f7f9 fec0 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8015cb8:	6803      	ldr	r3, [r0, #0]
 8015cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbc:	4798      	blx	r3
 8015cbe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015cc2:	463a      	mov	r2, r7
 8015cc4:	4631      	mov	r1, r6
 8015cc6:	9302      	str	r3, [sp, #8]
 8015cc8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015ccc:	9301      	str	r3, [sp, #4]
 8015cce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015cd2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	4620      	mov	r0, r4
 8015cda:	4643      	mov	r3, r8
 8015cdc:	47a8      	blx	r5
 8015cde:	b007      	add	sp, #28
 8015ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce4:	2000bb8e 	.word	0x2000bb8e

08015ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	4606      	mov	r6, r0
 8015cee:	b089      	sub	sp, #36	; 0x24
 8015cf0:	4610      	mov	r0, r2
 8015cf2:	460c      	mov	r4, r1
 8015cf4:	4691      	mov	r9, r2
 8015cf6:	4698      	mov	r8, r3
 8015cf8:	f005 ff4e 	bl	801bb98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	f000 8092 	beq.w	8015e26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8015d02:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015e40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8015d06:	ad08      	add	r5, sp, #32
 8015d08:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015e44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015d0c:	f8da 0000 	ldr.w	r0, [sl]
 8015d10:	4f4a      	ldr	r7, [pc, #296]	; (8015e3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015d12:	6802      	ldr	r2, [r0, #0]
 8015d14:	6a12      	ldr	r2, [r2, #32]
 8015d16:	4790      	blx	r2
 8015d18:	f8da 0000 	ldr.w	r0, [sl]
 8015d1c:	6802      	ldr	r2, [r0, #0]
 8015d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015d20:	4790      	blx	r2
 8015d22:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d26:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	883b      	ldrh	r3, [r7, #0]
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	f005 fff1 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d36:	f8ab 0000 	strh.w	r0, [fp]
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	f006 f826 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d40:	f8da b000 	ldr.w	fp, [sl]
 8015d44:	8038      	strh	r0, [r7, #0]
 8015d46:	4648      	mov	r0, r9
 8015d48:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015d4c:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015d50:	9302      	str	r3, [sp, #8]
 8015d52:	f005 ff21 	bl	801bb98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d56:	f8da 2000 	ldr.w	r2, [sl]
 8015d5a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015d5e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015d60:	4620      	mov	r0, r4
 8015d62:	6822      	ldr	r2, [r4, #0]
 8015d64:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015d68:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015d70:	4611      	mov	r1, r2
 8015d72:	4798      	blx	r3
 8015d74:	2201      	movs	r2, #1
 8015d76:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015d7a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015d7e:	1d22      	adds	r2, r4, #4
 8015d80:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015d84:	2900      	cmp	r1, #0
 8015d86:	d051      	beq.n	8015e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015d88:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	d04d      	beq.n	8015e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015d90:	6810      	ldr	r0, [r2, #0]
 8015d92:	f10d 0c18 	add.w	ip, sp, #24
 8015d96:	6851      	ldr	r1, [r2, #4]
 8015d98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015d9c:	4641      	mov	r1, r8
 8015d9e:	a806      	add	r0, sp, #24
 8015da0:	f7ff fc76 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8015da4:	4628      	mov	r0, r5
 8015da6:	f006 f943 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015daa:	4680      	mov	r8, r0
 8015dac:	f7f9 fe44 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8015db0:	6802      	ldr	r2, [r0, #0]
 8015db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015db4:	4790      	blx	r2
 8015db6:	4580      	cmp	r8, r0
 8015db8:	d03d      	beq.n	8015e36 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015dba:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015dbc:	b150      	cbz	r0, 8015dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f006 f936 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015dc4:	4605      	mov	r5, r0
 8015dc6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015dc8:	6803      	ldr	r3, [r0, #0]
 8015dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dcc:	4798      	blx	r3
 8015dce:	1a2b      	subs	r3, r5, r0
 8015dd0:	4258      	negs	r0, r3
 8015dd2:	4158      	adcs	r0, r3
 8015dd4:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015dd8:	2500      	movs	r5, #0
 8015dda:	6963      	ldr	r3, [r4, #20]
 8015ddc:	4620      	mov	r0, r4
 8015dde:	6822      	ldr	r2, [r4, #0]
 8015de0:	a906      	add	r1, sp, #24
 8015de2:	6165      	str	r5, [r4, #20]
 8015de4:	9303      	str	r3, [sp, #12]
 8015de6:	6892      	ldr	r2, [r2, #8]
 8015de8:	4790      	blx	r2
 8015dea:	9b03      	ldr	r3, [sp, #12]
 8015dec:	4620      	mov	r0, r4
 8015dee:	4652      	mov	r2, sl
 8015df0:	6163      	str	r3, [r4, #20]
 8015df2:	4649      	mov	r1, r9
 8015df4:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015dfe:	4c10      	ldr	r4, [pc, #64]	; (8015e40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e02:	4798      	blx	r3
 8015e04:	6820      	ldr	r0, [r4, #0]
 8015e06:	9b02      	ldr	r3, [sp, #8]
 8015e08:	9a00      	ldr	r2, [sp, #0]
 8015e0a:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015e0e:	4b0d      	ldr	r3, [pc, #52]	; (8015e44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015e10:	801a      	strh	r2, [r3, #0]
 8015e12:	4b0a      	ldr	r3, [pc, #40]	; (8015e3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015e14:	9a01      	ldr	r2, [sp, #4]
 8015e16:	801a      	strh	r2, [r3, #0]
 8015e18:	6803      	ldr	r3, [r0, #0]
 8015e1a:	6a1b      	ldr	r3, [r3, #32]
 8015e1c:	4798      	blx	r3
 8015e1e:	6820      	ldr	r0, [r4, #0]
 8015e20:	6803      	ldr	r3, [r0, #0]
 8015e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e24:	4798      	blx	r3
 8015e26:	b009      	add	sp, #36	; 0x24
 8015e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2c:	ab06      	add	r3, sp, #24
 8015e2e:	6810      	ldr	r0, [r2, #0]
 8015e30:	6851      	ldr	r1, [r2, #4]
 8015e32:	c303      	stmia	r3!, {r0, r1}
 8015e34:	e7b6      	b.n	8015da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015e36:	2000      	movs	r0, #0
 8015e38:	e7cc      	b.n	8015dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015e3a:	bf00      	nop
 8015e3c:	2000bb90 	.word	0x2000bb90
 8015e40:	2000bb94 	.word	0x2000bb94
 8015e44:	2000bb8e 	.word	0x2000bb8e

08015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015e48:	4b07      	ldr	r3, [pc, #28]	; (8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015e4a:	b510      	push	{r4, lr}
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	4604      	mov	r4, r0
 8015e50:	b13b      	cbz	r3, 8015e62 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e52:	6803      	ldr	r3, [r0, #0]
 8015e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e56:	4798      	blx	r3
 8015e58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015e5a:	4283      	cmp	r3, r0
 8015e5c:	d101      	bne.n	8015e62 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015e60:	bd10      	pop	{r4, pc}
 8015e62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015e64:	e7fc      	b.n	8015e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015e66:	bf00      	nop
 8015e68:	2000bb92 	.word	0x2000bb92

08015e6c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015e6c:	4b0b      	ldr	r3, [pc, #44]	; (8015e9c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	4604      	mov	r4, r0
 8015e74:	b95b      	cbnz	r3, 8015e8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015e76:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015e7a:	2b02      	cmp	r3, #2
 8015e7c:	d007      	beq.n	8015e8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015e7e:	6840      	ldr	r0, [r0, #4]
 8015e80:	f000 fbc8 	bl	8016614 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015e84:	b118      	cbz	r0, 8015e8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015e86:	6862      	ldr	r2, [r4, #4]
 8015e88:	7a53      	ldrb	r3, [r2, #9]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d0fc      	beq.n	8015e88 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015e8e:	f7fd fbb3 	bl	80135f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015e92:	4620      	mov	r0, r4
 8015e94:	f7ff ffd8 	bl	8015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	2000bb92 	.word	0x2000bb92

08015ea0 <_ZN8touchgfx3HAL10initializeEv>:
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	f7fd fb84 	bl	80135b0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015ea8:	6860      	ldr	r0, [r4, #4]
 8015eaa:	6803      	ldr	r3, [r0, #0]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	4798      	blx	r3
 8015eb0:	68e0      	ldr	r0, [r4, #12]
 8015eb2:	6803      	ldr	r3, [r0, #0]
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	4798      	blx	r3
 8015eb8:	6823      	ldr	r3, [r4, #0]
 8015eba:	4620      	mov	r0, r4
 8015ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ec2:	4718      	bx	r3

08015ec4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015ec4:	b508      	push	{r3, lr}
 8015ec6:	290c      	cmp	r1, #12
 8015ec8:	d817      	bhi.n	8015efa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015eca:	e8df f001 	tbb	[pc, r1]
 8015ece:	090b      	.short	0x090b
 8015ed0:	0d0d0d07 	.word	0x0d0d0d07
 8015ed4:	1414140d 	.word	0x1414140d
 8015ed8:	1414      	.short	0x1414
 8015eda:	0d          	.byte	0x0d
 8015edb:	00          	.byte	0x00
 8015edc:	2020      	movs	r0, #32
 8015ede:	bd08      	pop	{r3, pc}
 8015ee0:	2018      	movs	r0, #24
 8015ee2:	e7fc      	b.n	8015ede <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015ee4:	2010      	movs	r0, #16
 8015ee6:	e7fa      	b.n	8015ede <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015ee8:	4b05      	ldr	r3, [pc, #20]	; (8015f00 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015eea:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015eee:	4a05      	ldr	r2, [pc, #20]	; (8015f04 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015ef0:	4805      	ldr	r0, [pc, #20]	; (8015f08 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015ef2:	f00f fc63 	bl	80257bc <__assert_func>
 8015ef6:	2008      	movs	r0, #8
 8015ef8:	e7f1      	b.n	8015ede <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015efa:	2000      	movs	r0, #0
 8015efc:	e7ef      	b.n	8015ede <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015efe:	bf00      	nop
 8015f00:	080282af 	.word	0x080282af
 8015f04:	08028644 	.word	0x08028644
 8015f08:	080281b6 	.word	0x080281b6

08015f0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	460d      	mov	r5, r1
 8015f10:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015f14:	4616      	mov	r6, r2
 8015f16:	461c      	mov	r4, r3
 8015f18:	f7ff ffd4 	bl	8015ec4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015f1c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015f20:	10c0      	asrs	r0, r0, #3
 8015f22:	fb06 5101 	mla	r1, r6, r1, r5
 8015f26:	fb00 4001 	mla	r0, r0, r1, r4
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}

08015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f30:	b08a      	sub	sp, #40	; 0x28
 8015f32:	f04f 0c00 	mov.w	ip, #0
 8015f36:	4604      	mov	r4, r0
 8015f38:	469a      	mov	sl, r3
 8015f3a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015f3e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015f42:	f1b8 0f02 	cmp.w	r8, #2
 8015f46:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015f4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015f4e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015f52:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015f56:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015f5a:	f8cd c020 	str.w	ip, [sp, #32]
 8015f5e:	d030      	beq.n	8015fc2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015f60:	2bff      	cmp	r3, #255	; 0xff
 8015f62:	d12c      	bne.n	8015fbe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015f64:	4560      	cmp	r0, ip
 8015f66:	bf14      	ite	ne
 8015f68:	2004      	movne	r0, #4
 8015f6a:	2001      	moveq	r0, #1
 8015f6c:	9204      	str	r2, [sp, #16]
 8015f6e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015f72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015f76:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015f7a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015f7e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f86:	4620      	mov	r0, r4
 8015f88:	f7ff ff5e 	bl	8015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f8c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015f90:	4603      	mov	r3, r0
 8015f92:	4651      	mov	r1, sl
 8015f94:	4620      	mov	r0, r4
 8015f96:	e9cd 9700 	strd	r9, r7, [sp]
 8015f9a:	f7ff ffb7 	bl	8015f0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015f9e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015fa2:	9005      	str	r0, [sp, #20]
 8015fa4:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015fa8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015fac:	b106      	cbz	r6, 8015fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015fae:	b98d      	cbnz	r5, 8015fd4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015fb0:	4b12      	ldr	r3, [pc, #72]	; (8015ffc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015fb2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015fb6:	4a12      	ldr	r2, [pc, #72]	; (8016000 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015fb8:	4812      	ldr	r0, [pc, #72]	; (8016004 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015fba:	f00f fbff 	bl	80257bc <__assert_func>
 8015fbe:	2004      	movs	r0, #4
 8015fc0:	e7d4      	b.n	8015f6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015fc2:	2bff      	cmp	r3, #255	; 0xff
 8015fc4:	d104      	bne.n	8015fd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	bf14      	ite	ne
 8015fca:	2040      	movne	r0, #64	; 0x40
 8015fcc:	2020      	moveq	r0, #32
 8015fce:	e7cd      	b.n	8015f6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015fd0:	2040      	movs	r0, #64	; 0x40
 8015fd2:	e7cb      	b.n	8015f6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	9d02      	ldr	r5, [sp, #8]
 8015fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fdc:	4798      	blx	r3
 8015fde:	4228      	tst	r0, r5
 8015fe0:	d104      	bne.n	8015fec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015fe2:	4b09      	ldr	r3, [pc, #36]	; (8016008 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015fe4:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015fe8:	4a05      	ldr	r2, [pc, #20]	; (8016000 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015fea:	e7e5      	b.n	8015fb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015fec:	6860      	ldr	r0, [r4, #4]
 8015fee:	a902      	add	r1, sp, #8
 8015ff0:	6803      	ldr	r3, [r0, #0]
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	4798      	blx	r3
 8015ff6:	b00a      	add	sp, #40	; 0x28
 8015ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ffc:	08028232 	.word	0x08028232
 8016000:	080284e6 	.word	0x080284e6
 8016004:	080281b6 	.word	0x080281b6
 8016008:	0802826a 	.word	0x0802826a

0801600c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801600c:	b510      	push	{r4, lr}
 801600e:	b08a      	sub	sp, #40	; 0x28
 8016010:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016014:	9408      	str	r4, [sp, #32]
 8016016:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801601a:	9407      	str	r4, [sp, #28]
 801601c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016020:	9406      	str	r4, [sp, #24]
 8016022:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016026:	9405      	str	r4, [sp, #20]
 8016028:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801602c:	9404      	str	r4, [sp, #16]
 801602e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8016032:	9403      	str	r4, [sp, #12]
 8016034:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016038:	9402      	str	r4, [sp, #8]
 801603a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801603e:	e9cd 3400 	strd	r3, r4, [sp]
 8016042:	4613      	mov	r3, r2
 8016044:	2200      	movs	r2, #0
 8016046:	f7ff ff71 	bl	8015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801604a:	b00a      	add	sp, #40	; 0x28
 801604c:	bd10      	pop	{r4, pc}
	...

08016050 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016052:	b08b      	sub	sp, #44	; 0x2c
 8016054:	4616      	mov	r6, r2
 8016056:	460d      	mov	r5, r1
 8016058:	461f      	mov	r7, r3
 801605a:	4604      	mov	r4, r0
 801605c:	f7f9 fcec 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8016060:	6803      	ldr	r3, [r0, #0]
 8016062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016064:	4798      	blx	r3
 8016066:	4b0e      	ldr	r3, [pc, #56]	; (80160a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016068:	2200      	movs	r2, #0
 801606a:	4629      	mov	r1, r5
 801606c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016070:	881b      	ldrh	r3, [r3, #0]
 8016072:	4620      	mov	r0, r4
 8016074:	9306      	str	r3, [sp, #24]
 8016076:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801607a:	9305      	str	r3, [sp, #20]
 801607c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016080:	9304      	str	r3, [sp, #16]
 8016082:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016086:	9303      	str	r3, [sp, #12]
 8016088:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801608c:	9302      	str	r3, [sp, #8]
 801608e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016092:	e9cd 7300 	strd	r7, r3, [sp]
 8016096:	4633      	mov	r3, r6
 8016098:	f7ff ff48 	bl	8015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801609c:	b00b      	add	sp, #44	; 0x2c
 801609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a0:	2000bb8e 	.word	0x2000bb8e

080160a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80160a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a8:	461f      	mov	r7, r3
 80160aa:	4b14      	ldr	r3, [pc, #80]	; (80160fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80160ac:	b08a      	sub	sp, #40	; 0x28
 80160ae:	4616      	mov	r6, r2
 80160b0:	f8b3 8000 	ldrh.w	r8, [r3]
 80160b4:	460d      	mov	r5, r1
 80160b6:	4604      	mov	r4, r0
 80160b8:	f7f9 fcbe 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80160bc:	6803      	ldr	r3, [r0, #0]
 80160be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c0:	4798      	blx	r3
 80160c2:	2302      	movs	r3, #2
 80160c4:	9008      	str	r0, [sp, #32]
 80160c6:	2200      	movs	r2, #0
 80160c8:	4629      	mov	r1, r5
 80160ca:	4620      	mov	r0, r4
 80160cc:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80160d0:	2301      	movs	r3, #1
 80160d2:	9305      	str	r3, [sp, #20]
 80160d4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80160d8:	9304      	str	r3, [sp, #16]
 80160da:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80160de:	9303      	str	r3, [sp, #12]
 80160e0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80160e4:	9302      	str	r3, [sp, #8]
 80160e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80160ea:	e9cd 7300 	strd	r7, r3, [sp]
 80160ee:	4633      	mov	r3, r6
 80160f0:	f7ff ff1c 	bl	8015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80160f4:	b00a      	add	sp, #40	; 0x28
 80160f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fa:	bf00      	nop
 80160fc:	2000bb8e 	.word	0x2000bb8e

08016100 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	b08b      	sub	sp, #44	; 0x2c
 8016106:	469b      	mov	fp, r3
 8016108:	4604      	mov	r4, r0
 801610a:	4692      	mov	sl, r2
 801610c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016110:	2600      	movs	r6, #0
 8016112:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016116:	4689      	mov	r9, r1
 8016118:	2fff      	cmp	r7, #255	; 0xff
 801611a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801611e:	9608      	str	r6, [sp, #32]
 8016120:	bf14      	ite	ne
 8016122:	2308      	movne	r3, #8
 8016124:	2302      	moveq	r3, #2
 8016126:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801612a:	f7ff fe8d 	bl	8015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801612e:	465a      	mov	r2, fp
 8016130:	4603      	mov	r3, r0
 8016132:	4651      	mov	r1, sl
 8016134:	4620      	mov	r0, r4
 8016136:	e9cd 8500 	strd	r8, r5, [sp]
 801613a:	f7ff fee7 	bl	8015f0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801613e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016142:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016146:	f8ad 3018 	strh.w	r3, [sp, #24]
 801614a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801614e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016152:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016156:	6823      	ldr	r3, [r4, #0]
 8016158:	9d02      	ldr	r5, [sp, #8]
 801615a:	9005      	str	r0, [sp, #20]
 801615c:	4620      	mov	r0, r4
 801615e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016162:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016166:	f8cd 9020 	str.w	r9, [sp, #32]
 801616a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016170:	4798      	blx	r3
 8016172:	4228      	tst	r0, r5
 8016174:	d106      	bne.n	8016184 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016176:	4b07      	ldr	r3, [pc, #28]	; (8016194 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016178:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801617c:	4a06      	ldr	r2, [pc, #24]	; (8016198 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801617e:	4807      	ldr	r0, [pc, #28]	; (801619c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016180:	f00f fb1c 	bl	80257bc <__assert_func>
 8016184:	6860      	ldr	r0, [r4, #4]
 8016186:	a902      	add	r1, sp, #8
 8016188:	6803      	ldr	r3, [r0, #0]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	4798      	blx	r3
 801618e:	b00b      	add	sp, #44	; 0x2c
 8016190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016194:	0802826a 	.word	0x0802826a
 8016198:	080285af 	.word	0x080285af
 801619c:	080281b6 	.word	0x080281b6

080161a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80161a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80161a4:	461f      	mov	r7, r3
 80161a6:	4b0b      	ldr	r3, [pc, #44]	; (80161d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80161a8:	460d      	mov	r5, r1
 80161aa:	4616      	mov	r6, r2
 80161ac:	f8b3 8000 	ldrh.w	r8, [r3]
 80161b0:	4604      	mov	r4, r0
 80161b2:	f7f9 fc41 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80161b6:	6803      	ldr	r3, [r0, #0]
 80161b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ba:	4798      	blx	r3
 80161bc:	463b      	mov	r3, r7
 80161be:	4632      	mov	r2, r6
 80161c0:	4629      	mov	r1, r5
 80161c2:	e9cd 8000 	strd	r8, r0, [sp]
 80161c6:	4620      	mov	r0, r4
 80161c8:	f7ff fea0 	bl	8015f0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80161cc:	b002      	add	sp, #8
 80161ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161d2:	bf00      	nop
 80161d4:	2000bb8e 	.word	0x2000bb8e

080161d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80161d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161dc:	4698      	mov	r8, r3
 80161de:	b088      	sub	sp, #32
 80161e0:	2300      	movs	r3, #0
 80161e2:	4617      	mov	r7, r2
 80161e4:	4604      	mov	r4, r0
 80161e6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80161ea:	9306      	str	r3, [sp, #24]
 80161ec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80161f0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80161f4:	f8ad 6010 	strh.w	r6, [sp, #16]
 80161f8:	f8ad 5012 	strh.w	r5, [sp, #18]
 80161fc:	e9cd 3100 	strd	r3, r1, [sp]
 8016200:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016204:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016208:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801620c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016210:	f7ff fe1a 	bl	8015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016214:	4642      	mov	r2, r8
 8016216:	4603      	mov	r3, r0
 8016218:	4639      	mov	r1, r7
 801621a:	4620      	mov	r0, r4
 801621c:	f7ff ffc0 	bl	80161a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016220:	4b16      	ldr	r3, [pc, #88]	; (801627c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016222:	9003      	str	r0, [sp, #12]
 8016224:	881b      	ldrh	r3, [r3, #0]
 8016226:	f8ad 3016 	strh.w	r3, [sp, #22]
 801622a:	f7f9 fc05 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 801622e:	6803      	ldr	r3, [r0, #0]
 8016230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016232:	4798      	blx	r3
 8016234:	f88d 001e 	strb.w	r0, [sp, #30]
 8016238:	f88d 001d 	strb.w	r0, [sp, #29]
 801623c:	b106      	cbz	r6, 8016240 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801623e:	b935      	cbnz	r5, 801624e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016240:	4b0f      	ldr	r3, [pc, #60]	; (8016280 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016242:	f240 11cd 	movw	r1, #461	; 0x1cd
 8016246:	4a0f      	ldr	r2, [pc, #60]	; (8016284 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016248:	480f      	ldr	r0, [pc, #60]	; (8016288 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801624a:	f00f fab7 	bl	80257bc <__assert_func>
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	4620      	mov	r0, r4
 8016252:	9d00      	ldr	r5, [sp, #0]
 8016254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016256:	4798      	blx	r3
 8016258:	4228      	tst	r0, r5
 801625a:	d104      	bne.n	8016266 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801625c:	4b0b      	ldr	r3, [pc, #44]	; (801628c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801625e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016262:	4a08      	ldr	r2, [pc, #32]	; (8016284 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016264:	e7f0      	b.n	8016248 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016268:	4669      	mov	r1, sp
 801626a:	6860      	ldr	r0, [r4, #4]
 801626c:	9306      	str	r3, [sp, #24]
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	4798      	blx	r3
 8016274:	b008      	add	sp, #32
 8016276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801627a:	bf00      	nop
 801627c:	2000bb8e 	.word	0x2000bb8e
 8016280:	08028232 	.word	0x08028232
 8016284:	08028398 	.word	0x08028398
 8016288:	080281b6 	.word	0x080281b6
 801628c:	0802826a 	.word	0x0802826a

08016290 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016290:	b570      	push	{r4, r5, r6, lr}
 8016292:	b08a      	sub	sp, #40	; 0x28
 8016294:	4604      	mov	r4, r0
 8016296:	466b      	mov	r3, sp
 8016298:	e883 0006 	stmia.w	r3, {r1, r2}
 801629c:	4b1f      	ldr	r3, [pc, #124]	; (801631c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	b933      	cbnz	r3, 80162b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80162a2:	4b1f      	ldr	r3, [pc, #124]	; (8016320 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80162a4:	f240 11f9 	movw	r1, #505	; 0x1f9
 80162a8:	4a1e      	ldr	r2, [pc, #120]	; (8016324 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80162aa:	481f      	ldr	r0, [pc, #124]	; (8016328 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80162ac:	f00f fa86 	bl	80257bc <__assert_func>
 80162b0:	2300      	movs	r3, #0
 80162b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80162b6:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80162ba:	9308      	str	r3, [sp, #32]
 80162bc:	2301      	movs	r3, #1
 80162be:	9302      	str	r3, [sp, #8]
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162c4:	4798      	blx	r3
 80162c6:	4632      	mov	r2, r6
 80162c8:	4629      	mov	r1, r5
 80162ca:	4603      	mov	r3, r0
 80162cc:	4620      	mov	r0, r4
 80162ce:	f7ff ff67 	bl	80161a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80162d4:	9003      	str	r0, [sp, #12]
 80162d6:	9305      	str	r3, [sp, #20]
 80162d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80162dc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80162e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162e8:	4b10      	ldr	r3, [pc, #64]	; (801632c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80162ea:	881b      	ldrh	r3, [r3, #0]
 80162ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80162f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80162f4:	f7f9 fba0 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80162f8:	6803      	ldr	r3, [r0, #0]
 80162fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162fc:	4798      	blx	r3
 80162fe:	23ff      	movs	r3, #255	; 0xff
 8016300:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016304:	a902      	add	r1, sp, #8
 8016306:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801630a:	6860      	ldr	r0, [r4, #4]
 801630c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016310:	6803      	ldr	r3, [r0, #0]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	4798      	blx	r3
 8016316:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016318:	b00a      	add	sp, #40	; 0x28
 801631a:	bd70      	pop	{r4, r5, r6, pc}
 801631c:	2000bb93 	.word	0x2000bb93
 8016320:	08028103 	.word	0x08028103
 8016324:	0802843c 	.word	0x0802843c
 8016328:	080281b6 	.word	0x080281b6
 801632c:	2000bb8e 	.word	0x2000bb8e

08016330 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016332:	b08b      	sub	sp, #44	; 0x2c
 8016334:	4604      	mov	r4, r0
 8016336:	466d      	mov	r5, sp
 8016338:	e885 0006 	stmia.w	r5, {r1, r2}
 801633c:	461d      	mov	r5, r3
 801633e:	2300      	movs	r3, #0
 8016340:	f8bd 6000 	ldrh.w	r6, [sp]
 8016344:	9308      	str	r3, [sp, #32]
 8016346:	2301      	movs	r3, #1
 8016348:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801634c:	9302      	str	r3, [sp, #8]
 801634e:	6803      	ldr	r3, [r0, #0]
 8016350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016352:	4798      	blx	r3
 8016354:	463a      	mov	r2, r7
 8016356:	4631      	mov	r1, r6
 8016358:	4603      	mov	r3, r0
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff ff20 	bl	80161a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016360:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016364:	9003      	str	r0, [sp, #12]
 8016366:	f8ad 3018 	strh.w	r3, [sp, #24]
 801636a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801636e:	9505      	str	r5, [sp, #20]
 8016370:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016374:	4b0d      	ldr	r3, [pc, #52]	; (80163ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016376:	881b      	ldrh	r3, [r3, #0]
 8016378:	f8ad 301c 	strh.w	r3, [sp, #28]
 801637c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801637e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016382:	f7f9 fb59 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8016386:	6803      	ldr	r3, [r0, #0]
 8016388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638a:	4798      	blx	r3
 801638c:	23ff      	movs	r3, #255	; 0xff
 801638e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016392:	a902      	add	r1, sp, #8
 8016394:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016398:	6860      	ldr	r0, [r4, #4]
 801639a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801639e:	6803      	ldr	r3, [r0, #0]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	4798      	blx	r3
 80163a4:	4628      	mov	r0, r5
 80163a6:	b00b      	add	sp, #44	; 0x2c
 80163a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163aa:	bf00      	nop
 80163ac:	2000bb8e 	.word	0x2000bb8e

080163b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80163b0:	b570      	push	{r4, r5, r6, lr}
 80163b2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80163b6:	4604      	mov	r4, r0
 80163b8:	b19b      	cbz	r3, 80163e2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80163ba:	2002      	movs	r0, #2
 80163bc:	f7fc fe84 	bl	80130c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80163c0:	2300      	movs	r3, #0
 80163c2:	4620      	mov	r0, r4
 80163c4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80163c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80163cc:	6823      	ldr	r3, [r4, #0]
 80163ce:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80163d2:	f7ff fd39 	bl	8015e48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163d6:	4601      	mov	r1, r0
 80163d8:	4620      	mov	r0, r4
 80163da:	462b      	mov	r3, r5
 80163dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163e0:	4718      	bx	r3
 80163e2:	bd70      	pop	{r4, r5, r6, pc}

080163e4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80163e4:	4770      	bx	lr

080163e6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80163e6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80163ea:	1a13      	subs	r3, r2, r0
 80163ec:	4258      	negs	r0, r3
 80163ee:	4158      	adcs	r0, r3
 80163f0:	4770      	bx	lr

080163f2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80163f2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80163f6:	1a9b      	subs	r3, r3, r2
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	bfdc      	itt	le
 80163fc:	6882      	ldrle	r2, [r0, #8]
 80163fe:	189b      	addle	r3, r3, r2
 8016400:	2b01      	cmp	r3, #1
 8016402:	bfcc      	ite	gt
 8016404:	2000      	movgt	r0, #0
 8016406:	2001      	movle	r0, #1
 8016408:	4770      	bx	lr

0801640a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801640a:	6902      	ldr	r2, [r0, #16]
 801640c:	6840      	ldr	r0, [r0, #4]
 801640e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016412:	4770      	bx	lr

08016414 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016414:	6803      	ldr	r3, [r0, #0]
 8016416:	691b      	ldr	r3, [r3, #16]
 8016418:	4718      	bx	r3

0801641a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801641a:	4770      	bx	lr

0801641c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801641c:	4770      	bx	lr
	...

08016420 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016420:	2301      	movs	r3, #1
 8016422:	b570      	push	{r4, r5, r6, lr}
 8016424:	7203      	strb	r3, [r0, #8]
 8016426:	4604      	mov	r4, r0
 8016428:	6840      	ldr	r0, [r0, #4]
 801642a:	6803      	ldr	r3, [r0, #0]
 801642c:	699b      	ldr	r3, [r3, #24]
 801642e:	4798      	blx	r3
 8016430:	6803      	ldr	r3, [r0, #0]
 8016432:	4605      	mov	r5, r0
 8016434:	2b08      	cmp	r3, #8
 8016436:	d01e      	beq.n	8016476 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016438:	d80b      	bhi.n	8016452 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801643a:	2b02      	cmp	r3, #2
 801643c:	d027      	beq.n	801648e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801643e:	2b04      	cmp	r3, #4
 8016440:	d011      	beq.n	8016466 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016442:	2b01      	cmp	r3, #1
 8016444:	d028      	beq.n	8016498 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016446:	4b17      	ldr	r3, [pc, #92]	; (80164a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016448:	218b      	movs	r1, #139	; 0x8b
 801644a:	4a17      	ldr	r2, [pc, #92]	; (80164a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801644c:	4817      	ldr	r0, [pc, #92]	; (80164ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801644e:	f00f f9b5 	bl	80257bc <__assert_func>
 8016452:	2b40      	cmp	r3, #64	; 0x40
 8016454:	d020      	beq.n	8016498 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016456:	d801      	bhi.n	801645c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016458:	2b20      	cmp	r3, #32
 801645a:	e7f3      	b.n	8016444 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801645c:	2b80      	cmp	r3, #128	; 0x80
 801645e:	d01b      	beq.n	8016498 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016464:	e7ee      	b.n	8016444 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016466:	6823      	ldr	r3, [r4, #0]
 8016468:	7f01      	ldrb	r1, [r0, #28]
 801646a:	4620      	mov	r0, r4
 801646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801646e:	4798      	blx	r3
 8016470:	6823      	ldr	r3, [r4, #0]
 8016472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016474:	e006      	b.n	8016484 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016476:	6823      	ldr	r3, [r4, #0]
 8016478:	7f01      	ldrb	r1, [r0, #28]
 801647a:	4620      	mov	r0, r4
 801647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801647e:	4798      	blx	r3
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016484:	4629      	mov	r1, r5
 8016486:	4620      	mov	r0, r4
 8016488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801648c:	4718      	bx	r3
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	4620      	mov	r0, r4
 8016492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016494:	4798      	blx	r3
 8016496:	e7f3      	b.n	8016480 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	4620      	mov	r0, r4
 801649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801649e:	4798      	blx	r3
 80164a0:	e7e6      	b.n	8016470 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80164a2:	bf00      	nop
 80164a4:	0802868d 	.word	0x0802868d
 80164a8:	0802879c 	.word	0x0802879c
 80164ac:	080286b2 	.word	0x080286b2

080164b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80164b0:	b570      	push	{r4, r5, r6, lr}
 80164b2:	4604      	mov	r4, r0
 80164b4:	460e      	mov	r6, r1
 80164b6:	6860      	ldr	r0, [r4, #4]
 80164b8:	6803      	ldr	r3, [r0, #0]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	4798      	blx	r3
 80164be:	2800      	cmp	r0, #0
 80164c0:	d1f9      	bne.n	80164b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80164c2:	4d0b      	ldr	r5, [pc, #44]	; (80164f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80164c4:	6828      	ldr	r0, [r5, #0]
 80164c6:	6803      	ldr	r3, [r0, #0]
 80164c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80164ca:	4798      	blx	r3
 80164cc:	f7fd f8b0 	bl	8013630 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80164d0:	6860      	ldr	r0, [r4, #4]
 80164d2:	4631      	mov	r1, r6
 80164d4:	6803      	ldr	r3, [r0, #0]
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	4798      	blx	r3
 80164da:	6823      	ldr	r3, [r4, #0]
 80164dc:	4620      	mov	r0, r4
 80164de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e0:	4798      	blx	r3
 80164e2:	6828      	ldr	r0, [r5, #0]
 80164e4:	6803      	ldr	r3, [r0, #0]
 80164e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164ec:	4718      	bx	r3
 80164ee:	bf00      	nop
 80164f0:	2000bb94 	.word	0x2000bb94

080164f4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80164f4:	b508      	push	{r3, lr}
 80164f6:	f7fd f87f 	bl	80135f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80164fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80164fe:	f7fd b889 	b.w	8013614 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016502 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016502:	b510      	push	{r4, lr}
 8016504:	4604      	mov	r4, r0
 8016506:	6840      	ldr	r0, [r0, #4]
 8016508:	6803      	ldr	r3, [r0, #0]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	4798      	blx	r3
 801650e:	b948      	cbnz	r0, 8016524 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016510:	7a63      	ldrb	r3, [r4, #9]
 8016512:	b13b      	cbz	r3, 8016524 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016514:	7a23      	ldrb	r3, [r4, #8]
 8016516:	b92b      	cbnz	r3, 8016524 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	4620      	mov	r0, r4
 801651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801651e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016522:	4718      	bx	r3
 8016524:	bd10      	pop	{r4, pc}
	...

08016528 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016528:	b510      	push	{r4, lr}
 801652a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801652e:	1b12      	subs	r2, r2, r4
 8016530:	2a00      	cmp	r2, #0
 8016532:	bfdc      	itt	le
 8016534:	6883      	ldrle	r3, [r0, #8]
 8016536:	18d2      	addle	r2, r2, r3
 8016538:	2a01      	cmp	r2, #1
 801653a:	dd18      	ble.n	801656e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801653c:	6843      	ldr	r3, [r0, #4]
 801653e:	f101 021c 	add.w	r2, r1, #28
 8016542:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016546:	f851 4b04 	ldr.w	r4, [r1], #4
 801654a:	4291      	cmp	r1, r2
 801654c:	f843 4b04 	str.w	r4, [r3], #4
 8016550:	d1f9      	bne.n	8016546 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016552:	880a      	ldrh	r2, [r1, #0]
 8016554:	801a      	strh	r2, [r3, #0]
 8016556:	788a      	ldrb	r2, [r1, #2]
 8016558:	709a      	strb	r2, [r3, #2]
 801655a:	68c3      	ldr	r3, [r0, #12]
 801655c:	6882      	ldr	r2, [r0, #8]
 801655e:	f3bf 8f5b 	dmb	ish
 8016562:	3301      	adds	r3, #1
 8016564:	429a      	cmp	r2, r3
 8016566:	bfd8      	it	le
 8016568:	1a9b      	suble	r3, r3, r2
 801656a:	60c3      	str	r3, [r0, #12]
 801656c:	bd10      	pop	{r4, pc}
 801656e:	4b03      	ldr	r3, [pc, #12]	; (801657c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016570:	2139      	movs	r1, #57	; 0x39
 8016572:	4a03      	ldr	r2, [pc, #12]	; (8016580 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016574:	4803      	ldr	r0, [pc, #12]	; (8016584 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016576:	f00f f921 	bl	80257bc <__assert_func>
 801657a:	bf00      	nop
 801657c:	080286d8 	.word	0x080286d8
 8016580:	080287cc 	.word	0x080287cc
 8016584:	080286b2 	.word	0x080286b2

08016588 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016588:	b510      	push	{r4, lr}
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	4604      	mov	r4, r0
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4798      	blx	r3
 8016592:	b128      	cbz	r0, 80165a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016594:	4b07      	ldr	r3, [pc, #28]	; (80165b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016596:	213f      	movs	r1, #63	; 0x3f
 8016598:	4a07      	ldr	r2, [pc, #28]	; (80165b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801659a:	4808      	ldr	r0, [pc, #32]	; (80165bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801659c:	f00f f90e 	bl	80257bc <__assert_func>
 80165a0:	6923      	ldr	r3, [r4, #16]
 80165a2:	68a2      	ldr	r2, [r4, #8]
 80165a4:	f3bf 8f5b 	dmb	ish
 80165a8:	3301      	adds	r3, #1
 80165aa:	429a      	cmp	r2, r3
 80165ac:	bfd8      	it	le
 80165ae:	1a9b      	suble	r3, r3, r2
 80165b0:	6123      	str	r3, [r4, #16]
 80165b2:	bd10      	pop	{r4, pc}
 80165b4:	080286fb 	.word	0x080286fb
 80165b8:	0802881a 	.word	0x0802881a
 80165bc:	080286b2 	.word	0x080286b2

080165c0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80165c0:	b570      	push	{r4, r5, r6, lr}
 80165c2:	4604      	mov	r4, r0
 80165c4:	6840      	ldr	r0, [r0, #4]
 80165c6:	6803      	ldr	r3, [r0, #0]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4798      	blx	r3
 80165cc:	4605      	mov	r5, r0
 80165ce:	b930      	cbnz	r0, 80165de <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80165d0:	7a23      	ldrb	r3, [r4, #8]
 80165d2:	b123      	cbz	r3, 80165de <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80165d4:	6860      	ldr	r0, [r4, #4]
 80165d6:	6803      	ldr	r3, [r0, #0]
 80165d8:	695b      	ldr	r3, [r3, #20]
 80165da:	4798      	blx	r3
 80165dc:	7225      	strb	r5, [r4, #8]
 80165de:	6860      	ldr	r0, [r4, #4]
 80165e0:	6803      	ldr	r3, [r0, #0]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4798      	blx	r3
 80165e6:	b928      	cbnz	r0, 80165f4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80165e8:	6823      	ldr	r3, [r4, #0]
 80165ea:	4620      	mov	r0, r4
 80165ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165f2:	4718      	bx	r3
 80165f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165f8:	f7fd b826 	b.w	8013648 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080165fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80165fc:	b510      	push	{r4, lr}
 80165fe:	6082      	str	r2, [r0, #8]
 8016600:	2200      	movs	r2, #0
 8016602:	4c03      	ldr	r4, [pc, #12]	; (8016610 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016604:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016608:	e9c0 4100 	strd	r4, r1, [r0]
 801660c:	bd10      	pop	{r4, pc}
 801660e:	bf00      	nop
 8016610:	08028780 	.word	0x08028780

08016614 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016614:	6840      	ldr	r0, [r0, #4]
 8016616:	6803      	ldr	r3, [r0, #0]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4718      	bx	r3

0801661c <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801661c:	2001      	movs	r0, #1
 801661e:	4770      	bx	lr

08016620 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016624:	460d      	mov	r5, r1
 8016626:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801662a:	b085      	sub	sp, #20
 801662c:	4690      	mov	r8, r2
 801662e:	4411      	add	r1, r2
 8016630:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016634:	4699      	mov	r9, r3
 8016636:	6803      	ldr	r3, [r0, #0]
 8016638:	60c1      	str	r1, [r0, #12]
 801663a:	4604      	mov	r4, r0
 801663c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801663e:	440a      	add	r2, r1
 8016640:	6102      	str	r2, [r0, #16]
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016648:	4798      	blx	r3
 801664a:	2800      	cmp	r0, #0
 801664c:	d039      	beq.n	80166c2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801664e:	44c8      	add	r8, r9
 8016650:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016654:	4445      	add	r5, r8
 8016656:	6823      	ldr	r3, [r4, #0]
 8016658:	f10d 020f 	add.w	r2, sp, #15
 801665c:	a903      	add	r1, sp, #12
 801665e:	4620      	mov	r0, r4
 8016660:	9200      	str	r2, [sp, #0]
 8016662:	f10d 020d 	add.w	r2, sp, #13
 8016666:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801666a:	f10d 030e 	add.w	r3, sp, #14
 801666e:	47c0      	blx	r8
 8016670:	b1f8      	cbz	r0, 80166b2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016672:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016676:	7a20      	ldrb	r0, [r4, #8]
 8016678:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801667c:	4358      	muls	r0, r3
 801667e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016682:	1c43      	adds	r3, r0, #1
 8016684:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016688:	f817 0b01 	ldrb.w	r0, [r7], #1
 801668c:	121b      	asrs	r3, r3, #8
 801668e:	fb10 f003 	smulbb	r0, r0, r3
 8016692:	b283      	uxth	r3, r0
 8016694:	1c58      	adds	r0, r3, #1
 8016696:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801669a:	6823      	ldr	r3, [r4, #0]
 801669c:	1200      	asrs	r0, r0, #8
 801669e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80166a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80166a6:	28ff      	cmp	r0, #255	; 0xff
 80166a8:	d10e      	bne.n	80166c8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80166aa:	9100      	str	r1, [sp, #0]
 80166ac:	4629      	mov	r1, r5
 80166ae:	4620      	mov	r0, r4
 80166b0:	47c0      	blx	r8
 80166b2:	68e3      	ldr	r3, [r4, #12]
 80166b4:	3e01      	subs	r6, #1
 80166b6:	f105 0503 	add.w	r5, r5, #3
 80166ba:	f103 0301 	add.w	r3, r3, #1
 80166be:	60e3      	str	r3, [r4, #12]
 80166c0:	d1c9      	bne.n	8016656 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80166c2:	b005      	add	sp, #20
 80166c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166c8:	fa1f fc80 	uxth.w	ip, r0
 80166cc:	43c0      	mvns	r0, r0
 80166ce:	f895 e002 	ldrb.w	lr, [r5, #2]
 80166d2:	fb12 f20c 	smulbb	r2, r2, ip
 80166d6:	b2c0      	uxtb	r0, r0
 80166d8:	fb13 f30c 	smulbb	r3, r3, ip
 80166dc:	fb0e 2200 	mla	r2, lr, r0, r2
 80166e0:	f895 e001 	ldrb.w	lr, [r5, #1]
 80166e4:	fb11 f10c 	smulbb	r1, r1, ip
 80166e8:	fb0e 3300 	mla	r3, lr, r0, r3
 80166ec:	f895 e000 	ldrb.w	lr, [r5]
 80166f0:	b292      	uxth	r2, r2
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	fb0e 1000 	mla	r0, lr, r0, r1
 80166f8:	1c59      	adds	r1, r3, #1
 80166fa:	b280      	uxth	r0, r0
 80166fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016700:	1c51      	adds	r1, r2, #1
 8016702:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016706:	1c41      	adds	r1, r0, #1
 8016708:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801670c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016710:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016714:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016718:	9000      	str	r0, [sp, #0]
 801671a:	e7c7      	b.n	80166ac <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801671c <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801671c:	f89d 0000 	ldrb.w	r0, [sp]
 8016720:	704b      	strb	r3, [r1, #1]
 8016722:	7008      	strb	r0, [r1, #0]
 8016724:	708a      	strb	r2, [r1, #2]
 8016726:	4770      	bx	lr

08016728 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016728:	4413      	add	r3, r2
 801672a:	7dc2      	ldrb	r2, [r0, #23]
 801672c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016730:	4419      	add	r1, r3
 8016732:	7a03      	ldrb	r3, [r0, #8]
 8016734:	435a      	muls	r2, r3
 8016736:	1c53      	adds	r3, r2, #1
 8016738:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801673c:	121b      	asrs	r3, r3, #8
 801673e:	2bff      	cmp	r3, #255	; 0xff
 8016740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016742:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016746:	d13e      	bne.n	80167c6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016748:	4427      	add	r7, r4
 801674a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801674e:	3103      	adds	r1, #3
 8016750:	7d86      	ldrb	r6, [r0, #22]
 8016752:	2bff      	cmp	r3, #255	; 0xff
 8016754:	d10a      	bne.n	801676c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016756:	f801 6c03 	strb.w	r6, [r1, #-3]
 801675a:	7d43      	ldrb	r3, [r0, #21]
 801675c:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016760:	7d03      	ldrb	r3, [r0, #20]
 8016762:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016766:	42a7      	cmp	r7, r4
 8016768:	d1ef      	bne.n	801674a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801676c:	b29a      	uxth	r2, r3
 801676e:	43db      	mvns	r3, r3
 8016770:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016774:	fb16 f602 	smulbb	r6, r6, r2
 8016778:	b2db      	uxtb	r3, r3
 801677a:	fb05 6503 	mla	r5, r5, r3, r6
 801677e:	b2ad      	uxth	r5, r5
 8016780:	1c6e      	adds	r6, r5, #1
 8016782:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016786:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801678a:	fb16 f603 	smulbb	r6, r6, r3
 801678e:	122d      	asrs	r5, r5, #8
 8016790:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016794:	7d45      	ldrb	r5, [r0, #21]
 8016796:	fb05 6502 	mla	r5, r5, r2, r6
 801679a:	b2ad      	uxth	r5, r5
 801679c:	1c6e      	adds	r6, r5, #1
 801679e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80167a2:	122d      	asrs	r5, r5, #8
 80167a4:	f801 5c02 	strb.w	r5, [r1, #-2]
 80167a8:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80167ac:	7d06      	ldrb	r6, [r0, #20]
 80167ae:	fb15 f303 	smulbb	r3, r5, r3
 80167b2:	fb06 3202 	mla	r2, r6, r2, r3
 80167b6:	b292      	uxth	r2, r2
 80167b8:	1c53      	adds	r3, r2, #1
 80167ba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80167be:	1212      	asrs	r2, r2, #8
 80167c0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80167c4:	e7cf      	b.n	8016766 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 80167c6:	b2de      	uxtb	r6, r3
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d0ce      	beq.n	801676a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 80167cc:	3103      	adds	r1, #3
 80167ce:	4427      	add	r7, r4
 80167d0:	f814 2b01 	ldrb.w	r2, [r4], #1
 80167d4:	3103      	adds	r1, #3
 80167d6:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80167da:	fb02 f306 	mul.w	r3, r2, r6
 80167de:	42bc      	cmp	r4, r7
 80167e0:	f103 0201 	add.w	r2, r3, #1
 80167e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80167e8:	ea4f 2222 	mov.w	r2, r2, asr #8
 80167ec:	b295      	uxth	r5, r2
 80167ee:	ea6f 0202 	mvn.w	r2, r2
 80167f2:	b2d3      	uxtb	r3, r2
 80167f4:	7d82      	ldrb	r2, [r0, #22]
 80167f6:	fb1c fc03 	smulbb	ip, ip, r3
 80167fa:	fb02 c205 	mla	r2, r2, r5, ip
 80167fe:	b292      	uxth	r2, r2
 8016800:	f102 0c01 	add.w	ip, r2, #1
 8016804:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016808:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801680c:	fb1c fc03 	smulbb	ip, ip, r3
 8016810:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016814:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016818:	7d42      	ldrb	r2, [r0, #21]
 801681a:	fb02 c205 	mla	r2, r2, r5, ip
 801681e:	b292      	uxth	r2, r2
 8016820:	f102 0c01 	add.w	ip, r2, #1
 8016824:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016828:	ea4f 2222 	mov.w	r2, r2, asr #8
 801682c:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016830:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016834:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016838:	fb12 f303 	smulbb	r3, r2, r3
 801683c:	fb0c 3305 	mla	r3, ip, r5, r3
 8016840:	b29b      	uxth	r3, r3
 8016842:	f103 0201 	add.w	r2, r3, #1
 8016846:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801684a:	ea4f 2323 	mov.w	r3, r3, asr #8
 801684e:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016852:	d1bd      	bne.n	80167d0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016854:	e789      	b.n	801676a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016856 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016856:	b510      	push	{r4, lr}
 8016858:	7d04      	ldrb	r4, [r0, #20]
 801685a:	700c      	strb	r4, [r1, #0]
 801685c:	7d41      	ldrb	r1, [r0, #21]
 801685e:	7011      	strb	r1, [r2, #0]
 8016860:	7d82      	ldrb	r2, [r0, #22]
 8016862:	701a      	strb	r2, [r3, #0]
 8016864:	9b02      	ldr	r3, [sp, #8]
 8016866:	7dc2      	ldrb	r2, [r0, #23]
 8016868:	2001      	movs	r0, #1
 801686a:	701a      	strb	r2, [r3, #0]
 801686c:	bd10      	pop	{r4, pc}

0801686e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801686e:	b570      	push	{r4, r5, r6, lr}
 8016870:	4616      	mov	r6, r2
 8016872:	4604      	mov	r4, r0
 8016874:	460d      	mov	r5, r1
 8016876:	f7f9 f8df 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 801687a:	6803      	ldr	r3, [r0, #0]
 801687c:	4629      	mov	r1, r5
 801687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016880:	4798      	blx	r3
 8016882:	7520      	strb	r0, [r4, #20]
 8016884:	f7f9 f8d8 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8016888:	6803      	ldr	r3, [r0, #0]
 801688a:	4629      	mov	r1, r5
 801688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801688e:	4798      	blx	r3
 8016890:	7560      	strb	r0, [r4, #21]
 8016892:	f7f9 f8d1 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8016896:	6803      	ldr	r3, [r0, #0]
 8016898:	4629      	mov	r1, r5
 801689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801689c:	4798      	blx	r3
 801689e:	75e6      	strb	r6, [r4, #23]
 80168a0:	75a0      	strb	r0, [r4, #22]
 80168a2:	bd70      	pop	{r4, r5, r6, pc}

080168a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 80168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168a6:	460e      	mov	r6, r1
 80168a8:	4617      	mov	r7, r2
 80168aa:	4604      	mov	r4, r0
 80168ac:	f000 f832 	bl	8016914 <_ZN8touchgfx15AbstractPainterC1Ev>
 80168b0:	4b12      	ldr	r3, [pc, #72]	; (80168fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 80168b2:	6023      	str	r3, [r4, #0]
 80168b4:	f7f9 f8c0 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80168b8:	6803      	ldr	r3, [r0, #0]
 80168ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168bc:	4798      	blx	r3
 80168be:	1e43      	subs	r3, r0, #1
 80168c0:	425d      	negs	r5, r3
 80168c2:	415d      	adcs	r5, r3
 80168c4:	4b0e      	ldr	r3, [pc, #56]	; (8016900 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80168ca:	b130      	cbz	r0, 80168da <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 80168cc:	6803      	ldr	r3, [r0, #0]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	4798      	blx	r3
 80168d2:	2801      	cmp	r0, #1
 80168d4:	bf08      	it	eq
 80168d6:	f045 0501 	orreq.w	r5, r5, #1
 80168da:	b92d      	cbnz	r5, 80168e8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 80168dc:	4b09      	ldr	r3, [pc, #36]	; (8016904 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 80168de:	2129      	movs	r1, #41	; 0x29
 80168e0:	4a09      	ldr	r2, [pc, #36]	; (8016908 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 80168e2:	480a      	ldr	r0, [pc, #40]	; (801690c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80168e4:	f00e ff6a 	bl	80257bc <__assert_func>
 80168e8:	4b09      	ldr	r3, [pc, #36]	; (8016910 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80168ea:	4620      	mov	r0, r4
 80168ec:	463a      	mov	r2, r7
 80168ee:	4631      	mov	r1, r6
 80168f0:	6023      	str	r3, [r4, #0]
 80168f2:	f7ff ffbc 	bl	801686e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80168f6:	4620      	mov	r0, r4
 80168f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168fa:	bf00      	nop
 80168fc:	08028854 	.word	0x08028854
 8016900:	2000bb94 	.word	0x2000bb94
 8016904:	0802886c 	.word	0x0802886c
 8016908:	08028930 	.word	0x08028930
 801690c:	080288ca 	.word	0x080288ca
 8016910:	08028918 	.word	0x08028918

08016914 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016914:	4a03      	ldr	r2, [pc, #12]	; (8016924 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016916:	6002      	str	r2, [r0, #0]
 8016918:	2200      	movs	r2, #0
 801691a:	6042      	str	r2, [r0, #4]
 801691c:	22ff      	movs	r2, #255	; 0xff
 801691e:	7202      	strb	r2, [r0, #8]
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop
 8016924:	08028974 	.word	0x08028974

08016928 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016928:	4770      	bx	lr

0801692a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801692a:	8081      	strh	r1, [r0, #4]
 801692c:	80c2      	strh	r2, [r0, #6]
 801692e:	4770      	bx	lr

08016930 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016930:	7201      	strb	r1, [r0, #8]
 8016932:	4770      	bx	lr

08016934 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016934:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016938:	4770      	bx	lr

0801693a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801693a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801693e:	4770      	bx	lr

08016940 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016940:	6281      	str	r1, [r0, #40]	; 0x28
 8016942:	4770      	bx	lr

08016944 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016944:	b513      	push	{r0, r1, r4, lr}
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	4604      	mov	r4, r0
 801694a:	4601      	mov	r1, r0
 801694c:	4668      	mov	r0, sp
 801694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016950:	4798      	blx	r3
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	4669      	mov	r1, sp
 8016956:	4620      	mov	r0, r4
 8016958:	691b      	ldr	r3, [r3, #16]
 801695a:	4798      	blx	r3
 801695c:	b002      	add	sp, #8
 801695e:	bd10      	pop	{r4, pc}

08016960 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016960:	b510      	push	{r4, lr}
 8016962:	2200      	movs	r2, #0
 8016964:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016968:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801696c:	8002      	strh	r2, [r0, #0]
 801696e:	8042      	strh	r2, [r0, #2]
 8016970:	8084      	strh	r4, [r0, #4]
 8016972:	80c1      	strh	r1, [r0, #6]
 8016974:	bd10      	pop	{r4, pc}

08016976 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016976:	2200      	movs	r2, #0
 8016978:	8002      	strh	r2, [r0, #0]
 801697a:	8042      	strh	r2, [r0, #2]
 801697c:	8082      	strh	r2, [r0, #4]
 801697e:	80c2      	strh	r2, [r0, #6]
 8016980:	4770      	bx	lr
	...

08016984 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016984:	b508      	push	{r3, lr}
 8016986:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016988:	b928      	cbnz	r0, 8016996 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801698a:	4b03      	ldr	r3, [pc, #12]	; (8016998 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801698c:	2127      	movs	r1, #39	; 0x27
 801698e:	4a03      	ldr	r2, [pc, #12]	; (801699c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016990:	4803      	ldr	r0, [pc, #12]	; (80169a0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016992:	f00e ff13 	bl	80257bc <__assert_func>
 8016996:	bd08      	pop	{r3, pc}
 8016998:	08028980 	.word	0x08028980
 801699c:	08028a64 	.word	0x08028a64
 80169a0:	080289a7 	.word	0x080289a7

080169a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80169a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a8:	b089      	sub	sp, #36	; 0x24
 80169aa:	4604      	mov	r4, r0
 80169ac:	6808      	ldr	r0, [r1, #0]
 80169ae:	f04f 0a00 	mov.w	sl, #0
 80169b2:	6849      	ldr	r1, [r1, #4]
 80169b4:	ab02      	add	r3, sp, #8
 80169b6:	f04f 0b01 	mov.w	fp, #1
 80169ba:	c303      	stmia	r3!, {r0, r1}
 80169bc:	4b3f      	ldr	r3, [pc, #252]	; (8016abc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80169be:	4621      	mov	r1, r4
 80169c0:	a804      	add	r0, sp, #16
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	6823      	ldr	r3, [r4, #0]
 80169c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169ca:	bf1f      	itttt	ne
 80169cc:	f10d 0906 	addne.w	r9, sp, #6
 80169d0:	ae03      	addne	r6, sp, #12
 80169d2:	f10d 050e 	addne.w	r5, sp, #14
 80169d6:	f10d 080a 	addne.w	r8, sp, #10
 80169da:	bf01      	itttt	eq
 80169dc:	f10d 090e 	addeq.w	r9, sp, #14
 80169e0:	f10d 0606 	addeq.w	r6, sp, #6
 80169e4:	ad03      	addeq	r5, sp, #12
 80169e6:	f10d 0808 	addeq.w	r8, sp, #8
 80169ea:	4798      	blx	r3
 80169ec:	f9b5 3000 	ldrsh.w	r3, [r5]
 80169f0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d056      	beq.n	8016aa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80169f8:	4293      	cmp	r3, r2
 80169fa:	bfa8      	it	ge
 80169fc:	4613      	movge	r3, r2
 80169fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a02:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016a06:	2f00      	cmp	r7, #0
 8016a08:	dd34      	ble.n	8016a74 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016a0a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016a0e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016a12:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016a16:	4484      	add	ip, r0
 8016a18:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016a1c:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016a20:	fa0f fc8c 	sxth.w	ip, ip
 8016a24:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016a28:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016a2c:	4562      	cmp	r2, ip
 8016a2e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016a32:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016a36:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016a3a:	da29      	bge.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a3c:	4472      	add	r2, lr
 8016a3e:	b212      	sxth	r2, r2
 8016a40:	4290      	cmp	r0, r2
 8016a42:	da25      	bge.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a44:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016a48:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016a4c:	4402      	add	r2, r0
 8016a4e:	b212      	sxth	r2, r2
 8016a50:	4293      	cmp	r3, r2
 8016a52:	da1d      	bge.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a54:	440b      	add	r3, r1
 8016a56:	b21b      	sxth	r3, r3
 8016a58:	4298      	cmp	r0, r3
 8016a5a:	da19      	bge.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a5c:	6823      	ldr	r3, [r4, #0]
 8016a5e:	a906      	add	r1, sp, #24
 8016a60:	4620      	mov	r0, r4
 8016a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a64:	4798      	blx	r3
 8016a66:	b998      	cbnz	r0, 8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a68:	107f      	asrs	r7, r7, #1
 8016a6a:	f04f 0a01 	mov.w	sl, #1
 8016a6e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016a72:	e7c6      	b.n	8016a02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016a74:	d10c      	bne.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016a76:	f8ad b006 	strh.w	fp, [sp, #6]
 8016a7a:	f8b8 2000 	ldrh.w	r2, [r8]
 8016a7e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016a82:	440a      	add	r2, r1
 8016a84:	f8a8 2000 	strh.w	r2, [r8]
 8016a88:	882b      	ldrh	r3, [r5, #0]
 8016a8a:	1a5b      	subs	r3, r3, r1
 8016a8c:	802b      	strh	r3, [r5, #0]
 8016a8e:	e7ad      	b.n	80169ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016a90:	f1ba 0f00 	cmp.w	sl, #0
 8016a94:	d0f1      	beq.n	8016a7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016a96:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016a9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	bf08      	it	eq
 8016aa2:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016aa4:	e7e9      	b.n	8016a7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016aa6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	bf04      	itt	eq
 8016aae:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016ab2:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016ab4:	b009      	add	sp, #36	; 0x24
 8016ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aba:	bf00      	nop
 8016abc:	2000bb8c 	.word	0x2000bb8c

08016ac0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	8082      	strh	r2, [r0, #4]
 8016ac6:	80c2      	strh	r2, [r0, #6]
 8016ac8:	8102      	strh	r2, [r0, #8]
 8016aca:	8142      	strh	r2, [r0, #10]
 8016acc:	8182      	strh	r2, [r0, #12]
 8016ace:	81c2      	strh	r2, [r0, #14]
 8016ad0:	8202      	strh	r2, [r0, #16]
 8016ad2:	8242      	strh	r2, [r0, #18]
 8016ad4:	61c2      	str	r2, [r0, #28]
 8016ad6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016ada:	6282      	str	r2, [r0, #40]	; 0x28
 8016adc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016ae0:	4905      	ldr	r1, [pc, #20]	; (8016af8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016ae2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016ae6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016aea:	6001      	str	r1, [r0, #0]
 8016aec:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016aee:	22ff      	movs	r2, #255	; 0xff
 8016af0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop
 8016af8:	080289ec 	.word	0x080289ec

08016afc <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016afc:	4770      	bx	lr

08016afe <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016afe:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016b02:	4602      	mov	r2, r0
 8016b04:	cb03      	ldmia	r3!, {r0, r1}
 8016b06:	6010      	str	r0, [r2, #0]
 8016b08:	4610      	mov	r0, r2
 8016b0a:	6051      	str	r1, [r2, #4]
 8016b0c:	4770      	bx	lr

08016b0e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b12:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016b16:	b395      	cbz	r5, 8016b7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016b18:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016b1c:	f1bc 0f00 	cmp.w	ip, #0
 8016b20:	d02d      	beq.n	8016b7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016b22:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016b26:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016b2a:	b354      	cbz	r4, 8016b82 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016b2c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016b30:	b33f      	cbz	r7, 8016b82 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016b32:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016b36:	4475      	add	r5, lr
 8016b38:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016b3c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016b40:	45f0      	cmp	r8, lr
 8016b42:	4646      	mov	r6, r8
 8016b44:	4444      	add	r4, r8
 8016b46:	bfa8      	it	ge
 8016b48:	4676      	movge	r6, lr
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	443b      	add	r3, r7
 8016b50:	bfa8      	it	ge
 8016b52:	4611      	movge	r1, r2
 8016b54:	4462      	add	r2, ip
 8016b56:	b22d      	sxth	r5, r5
 8016b58:	8006      	strh	r6, [r0, #0]
 8016b5a:	b224      	sxth	r4, r4
 8016b5c:	8041      	strh	r1, [r0, #2]
 8016b5e:	b212      	sxth	r2, r2
 8016b60:	b21b      	sxth	r3, r3
 8016b62:	42a5      	cmp	r5, r4
 8016b64:	bfac      	ite	ge
 8016b66:	ebc6 0405 	rsbge	r4, r6, r5
 8016b6a:	ebc6 0404 	rsblt	r4, r6, r4
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	bfac      	ite	ge
 8016b72:	ebc1 0302 	rsbge	r3, r1, r2
 8016b76:	ebc1 0303 	rsblt	r3, r1, r3
 8016b7a:	8084      	strh	r4, [r0, #4]
 8016b7c:	80c3      	strh	r3, [r0, #6]
 8016b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b82:	f8a0 e000 	strh.w	lr, [r0]
 8016b86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016b8a:	8043      	strh	r3, [r0, #2]
 8016b8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016b90:	8083      	strh	r3, [r0, #4]
 8016b92:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016b96:	e7f1      	b.n	8016b7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016b98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016b98:	b507      	push	{r0, r1, r2, lr}
 8016b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016b9e:	ab01      	add	r3, sp, #4
 8016ba0:	6809      	ldr	r1, [r1, #0]
 8016ba2:	6800      	ldr	r0, [r0, #0]
 8016ba4:	f003 f8e1 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 8016ba8:	b003      	add	sp, #12
 8016baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016bb0 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016bb0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016bb4:	fb90 f3f2 	sdiv	r3, r0, r2
 8016bb8:	fb03 0312 	mls	r3, r3, r2, r0
 8016bbc:	4413      	add	r3, r2
 8016bbe:	fb93 f0f2 	sdiv	r0, r3, r2
 8016bc2:	fb02 3010 	mls	r0, r2, r0, r3
 8016bc6:	4b0a      	ldr	r3, [pc, #40]	; (8016bf0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016bc8:	285a      	cmp	r0, #90	; 0x5a
 8016bca:	dc02      	bgt.n	8016bd2 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016bcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016bd0:	4770      	bx	lr
 8016bd2:	28b4      	cmp	r0, #180	; 0xb4
 8016bd4:	dc02      	bgt.n	8016bdc <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016bd6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016bda:	e7f7      	b.n	8016bcc <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016bdc:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016be0:	bfd4      	ite	le
 8016be2:	38b4      	suble	r0, #180	; 0xb4
 8016be4:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016be8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016bec:	4240      	negs	r0, r0
 8016bee:	4770      	bx	lr
 8016bf0:	08028b0e 	.word	0x08028b0e

08016bf4 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016bf4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016bf8:	f04f 0300 	mov.w	r3, #0
 8016bfc:	bf2c      	ite	cs
 8016bfe:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016c02:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016c06:	1899      	adds	r1, r3, r2
 8016c08:	4288      	cmp	r0, r1
 8016c0a:	bf24      	itt	cs
 8016c0c:	1853      	addcs	r3, r2, r1
 8016c0e:	1a40      	subcs	r0, r0, r1
 8016c10:	0892      	lsrs	r2, r2, #2
 8016c12:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016c16:	d1f6      	bne.n	8016c06 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016c18:	4618      	mov	r0, r3
 8016c1a:	4770      	bx	lr

08016c1c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	b508      	push	{r3, lr}
 8016c20:	da05      	bge.n	8016c2e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016c22:	4240      	negs	r0, r0
 8016c24:	f7ff fffa 	bl	8016c1c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016c28:	4240      	negs	r0, r0
 8016c2a:	b240      	sxtb	r0, r0
 8016c2c:	bd08      	pop	{r3, pc}
 8016c2e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016c32:	dc11      	bgt.n	8016c58 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016c34:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016c38:	dd09      	ble.n	8016c4e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016c3a:	4340      	muls	r0, r0
 8016c3c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016c40:	f7ff ffd8 	bl	8016bf4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016c44:	f7ff ffea 	bl	8016c1c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016c48:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016c4c:	e7ed      	b.n	8016c2a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016c4e:	3003      	adds	r0, #3
 8016c50:	4b02      	ldr	r3, [pc, #8]	; (8016c5c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016c52:	10c0      	asrs	r0, r0, #3
 8016c54:	5618      	ldrsb	r0, [r3, r0]
 8016c56:	e7e9      	b.n	8016c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016c58:	2000      	movs	r0, #0
 8016c5a:	e7e7      	b.n	8016c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016c5c:	08028ab2 	.word	0x08028ab2

08016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c62:	460c      	mov	r4, r1
 8016c64:	1e01      	subs	r1, r0, #0
 8016c66:	4615      	mov	r5, r2
 8016c68:	db01      	blt.n	8016c6e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016c6a:	2c00      	cmp	r4, #0
 8016c6c:	da06      	bge.n	8016c7c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016c6e:	4b11      	ldr	r3, [pc, #68]	; (8016cb4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016c70:	f240 3197 	movw	r1, #919	; 0x397
 8016c74:	4a10      	ldr	r2, [pc, #64]	; (8016cb8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016c76:	4811      	ldr	r0, [pc, #68]	; (8016cbc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016c78:	f00e fda0 	bl	80257bc <__assert_func>
 8016c7c:	428c      	cmp	r4, r1
 8016c7e:	dd06      	ble.n	8016c8e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016c80:	4620      	mov	r0, r4
 8016c82:	f7ff ffed 	bl	8016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016c86:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016c8a:	b003      	add	sp, #12
 8016c8c:	bd30      	pop	{r4, r5, pc}
 8016c8e:	4349      	muls	r1, r1
 8016c90:	fb04 1004 	mla	r0, r4, r4, r1
 8016c94:	f7ff ffae 	bl	8016bf4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016c98:	6028      	str	r0, [r5, #0]
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d0f5      	beq.n	8016c8a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016c9e:	4602      	mov	r2, r0
 8016ca0:	ab01      	add	r3, sp, #4
 8016ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	f003 f85f 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 8016cac:	f7ff ffb6 	bl	8016c1c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016cb0:	e7eb      	b.n	8016c8a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016cb2:	bf00      	nop
 8016cb4:	08028bc4 	.word	0x08028bc4
 8016cb8:	08028c8c 	.word	0x08028c8c
 8016cbc:	08028bd5 	.word	0x08028bd5

08016cc0 <_ZN8touchgfx4LineC1Ev>:
 8016cc0:	b510      	push	{r4, lr}
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	f7ff fefc 	bl	8016ac0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016cc8:	4b0c      	ldr	r3, [pc, #48]	; (8016cfc <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016cca:	2220      	movs	r2, #32
 8016ccc:	4620      	mov	r0, r4
 8016cce:	6023      	str	r3, [r4, #0]
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	6422      	str	r2, [r4, #64]	; 0x40
 8016cd4:	2212      	movs	r2, #18
 8016cd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016cda:	6722      	str	r2, [r4, #112]	; 0x70
 8016cdc:	60a3      	str	r3, [r4, #8]
 8016cde:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016ce2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016ce6:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016cea:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016cee:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016cf2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016cf6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016cfa:	bd10      	pop	{r4, pc}
 8016cfc:	08028c14 	.word	0x08028c14

08016d00 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d04:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8016d06:	b085      	sub	sp, #20
 8016d08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016d0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016d10:	1af6      	subs	r6, r6, r3
 8016d12:	eba5 0502 	sub.w	r5, r5, r2
 8016d16:	f040 809b 	bne.w	8016e50 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016d1a:	b955      	cbnz	r5, 8016d32 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016d1c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016d20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016d24:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016d28:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016d2c:	b005      	add	sp, #20
 8016d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8016d36:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016d3a:	f04f 0802 	mov.w	r8, #2
 8016d3e:	463a      	mov	r2, r7
 8016d40:	4629      	mov	r1, r5
 8016d42:	ab03      	add	r3, sp, #12
 8016d44:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016d46:	f003 f810 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 8016d4a:	ab03      	add	r3, sp, #12
 8016d4c:	463a      	mov	r2, r7
 8016d4e:	4631      	mov	r1, r6
 8016d50:	fb90 f5f8 	sdiv	r5, r0, r8
 8016d54:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016d56:	f003 f808 	bl	8019d6a <_ZN8touchgfx6muldivElllRl>
 8016d5a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016d5e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8016d62:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8016d66:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016d68:	fb90 f0f8 	sdiv	r0, r0, r8
 8016d6c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016d70:	eba8 0305 	sub.w	r3, r8, r5
 8016d74:	f1ba 0f00 	cmp.w	sl, #0
 8016d78:	f040 80c3 	bne.w	8016f02 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016d7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8016d7e:	19c3      	adds	r3, r0, r7
 8016d80:	65a3      	str	r3, [r4, #88]	; 0x58
 8016d82:	ebae 0305 	sub.w	r3, lr, r5
 8016d86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016d88:	eb00 030c 	add.w	r3, r0, ip
 8016d8c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016d8e:	eb05 030e 	add.w	r3, r5, lr
 8016d92:	6523      	str	r3, [r4, #80]	; 0x50
 8016d94:	ebac 0300 	sub.w	r3, ip, r0
 8016d98:	6623      	str	r3, [r4, #96]	; 0x60
 8016d9a:	eb05 0308 	add.w	r3, r5, r8
 8016d9e:	6563      	str	r3, [r4, #84]	; 0x54
 8016da0:	1a3b      	subs	r3, r7, r0
 8016da2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8016da4:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016da8:	6663      	str	r3, [r4, #100]	; 0x64
 8016daa:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016dae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016db0:	4632      	mov	r2, r6
 8016db2:	9301      	str	r3, [sp, #4]
 8016db4:	9100      	str	r1, [sp, #0]
 8016db6:	f859 bb04 	ldr.w	fp, [r9], #4
 8016dba:	9b00      	ldr	r3, [sp, #0]
 8016dbc:	455e      	cmp	r6, fp
 8016dbe:	bfa8      	it	ge
 8016dc0:	465e      	movge	r6, fp
 8016dc2:	455a      	cmp	r2, fp
 8016dc4:	bfb8      	it	lt
 8016dc6:	465a      	movlt	r2, fp
 8016dc8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016dcc:	4559      	cmp	r1, fp
 8016dce:	bfa8      	it	ge
 8016dd0:	4659      	movge	r1, fp
 8016dd2:	455b      	cmp	r3, fp
 8016dd4:	bfb8      	it	lt
 8016dd6:	465b      	movlt	r3, fp
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	9b01      	ldr	r3, [sp, #4]
 8016ddc:	454b      	cmp	r3, r9
 8016dde:	d1ea      	bne.n	8016db6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8016de0:	f04f 0b20 	mov.w	fp, #32
 8016de4:	b209      	sxth	r1, r1
 8016de6:	b212      	sxth	r2, r2
 8016de8:	f1ba 0f01 	cmp.w	sl, #1
 8016dec:	b236      	sxth	r6, r6
 8016dee:	fb91 f9fb 	sdiv	r9, r1, fp
 8016df2:	f9bd 1000 	ldrsh.w	r1, [sp]
 8016df6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016dfa:	fb92 f2fb 	sdiv	r2, r2, fp
 8016dfe:	fb91 f1fb 	sdiv	r1, r1, fp
 8016e02:	fb96 f6fb 	sdiv	r6, r6, fp
 8016e06:	f102 0201 	add.w	r2, r2, #1
 8016e0a:	f101 0101 	add.w	r1, r1, #1
 8016e0e:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8016e12:	eba1 0109 	sub.w	r1, r1, r9
 8016e16:	eba2 0606 	sub.w	r6, r2, r6
 8016e1a:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016e1e:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8016e22:	d183      	bne.n	8016d2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016e24:	eba8 0305 	sub.w	r3, r8, r5
 8016e28:	64a3      	str	r3, [r4, #72]	; 0x48
 8016e2a:	19c3      	adds	r3, r0, r7
 8016e2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8016e2e:	ebae 0305 	sub.w	r3, lr, r5
 8016e32:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016e34:	eb00 030c 	add.w	r3, r0, ip
 8016e38:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016e3a:	eb05 030e 	add.w	r3, r5, lr
 8016e3e:	4445      	add	r5, r8
 8016e40:	6523      	str	r3, [r4, #80]	; 0x50
 8016e42:	ebac 0300 	sub.w	r3, ip, r0
 8016e46:	1a38      	subs	r0, r7, r0
 8016e48:	6565      	str	r5, [r4, #84]	; 0x54
 8016e4a:	6623      	str	r3, [r4, #96]	; 0x60
 8016e4c:	6660      	str	r0, [r4, #100]	; 0x64
 8016e4e:	e76d      	b.n	8016d2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016e50:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016e54:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016e58:	2d00      	cmp	r5, #0
 8016e5a:	f43f af6e 	beq.w	8016d3a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016e5e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016e62:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016e66:	fb93 f2f7 	sdiv	r2, r3, r7
 8016e6a:	fb07 3312 	mls	r3, r7, r2, r3
 8016e6e:	b34b      	cbz	r3, 8016ec4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016e70:	fb97 f2f3 	sdiv	r2, r7, r3
 8016e74:	fb03 7712 	mls	r7, r3, r2, r7
 8016e78:	2f00      	cmp	r7, #0
 8016e7a:	d1f4      	bne.n	8016e66 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016e7c:	2b01      	cmp	r3, #1
 8016e7e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016e82:	bf18      	it	ne
 8016e84:	fb96 f6f3 	sdivne	r6, r6, r3
 8016e88:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016e8c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016e90:	bf18      	it	ne
 8016e92:	fb95 f5f3 	sdivne	r5, r5, r3
 8016e96:	4291      	cmp	r1, r2
 8016e98:	dd16      	ble.n	8016ec8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016e9a:	2d00      	cmp	r5, #0
 8016e9c:	da4d      	bge.n	8016f3a <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016e9e:	4b29      	ldr	r3, [pc, #164]	; (8016f44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016ea0:	429d      	cmp	r5, r3
 8016ea2:	da27      	bge.n	8016ef4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8016ea4:	426a      	negs	r2, r5
 8016ea6:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016eaa:	fb91 f1f3 	sdiv	r1, r1, r3
 8016eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8016eb2:	4299      	cmp	r1, r3
 8016eb4:	bfcc      	ite	gt
 8016eb6:	1c4b      	addgt	r3, r1, #1
 8016eb8:	3301      	addle	r3, #1
 8016eba:	fb96 f6f3 	sdiv	r6, r6, r3
 8016ebe:	fb95 f5f3 	sdiv	r5, r5, r3
 8016ec2:	e00f      	b.n	8016ee4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8016ec4:	463b      	mov	r3, r7
 8016ec6:	e7d9      	b.n	8016e7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8016ec8:	2d00      	cmp	r5, #0
 8016eca:	fb92 f2f1 	sdiv	r2, r2, r1
 8016ece:	da13      	bge.n	8016ef8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8016ed0:	4269      	negs	r1, r5
 8016ed2:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016ed6:	fb93 f3f1 	sdiv	r3, r3, r1
 8016eda:	429a      	cmp	r2, r3
 8016edc:	bfa8      	it	ge
 8016ede:	461a      	movge	r2, r3
 8016ee0:	4356      	muls	r6, r2
 8016ee2:	4355      	muls	r5, r2
 8016ee4:	fb05 f005 	mul.w	r0, r5, r5
 8016ee8:	fb06 0006 	mla	r0, r6, r6, r0
 8016eec:	f7ff fe82 	bl	8016bf4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016ef0:	4607      	mov	r7, r0
 8016ef2:	e722      	b.n	8016d3a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	e7eb      	b.n	8016ed0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016ef8:	4629      	mov	r1, r5
 8016efa:	e7ea      	b.n	8016ed2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016efc:	4629      	mov	r1, r5
 8016efe:	2200      	movs	r2, #0
 8016f00:	e7e7      	b.n	8016ed2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016f02:	1a1b      	subs	r3, r3, r0
 8016f04:	64a3      	str	r3, [r4, #72]	; 0x48
 8016f06:	19c3      	adds	r3, r0, r7
 8016f08:	1b5b      	subs	r3, r3, r5
 8016f0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8016f0c:	ebae 0305 	sub.w	r3, lr, r5
 8016f10:	4403      	add	r3, r0
 8016f12:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016f14:	eb00 030c 	add.w	r3, r0, ip
 8016f18:	442b      	add	r3, r5
 8016f1a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016f1c:	eb05 030e 	add.w	r3, r5, lr
 8016f20:	4403      	add	r3, r0
 8016f22:	6523      	str	r3, [r4, #80]	; 0x50
 8016f24:	ebac 0300 	sub.w	r3, ip, r0
 8016f28:	442b      	add	r3, r5
 8016f2a:	6623      	str	r3, [r4, #96]	; 0x60
 8016f2c:	eb05 0308 	add.w	r3, r5, r8
 8016f30:	1a1b      	subs	r3, r3, r0
 8016f32:	6563      	str	r3, [r4, #84]	; 0x54
 8016f34:	1a3b      	subs	r3, r7, r0
 8016f36:	1b5b      	subs	r3, r3, r5
 8016f38:	e733      	b.n	8016da2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016f3a:	4295      	cmp	r5, r2
 8016f3c:	ddde      	ble.n	8016efc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016f3e:	462a      	mov	r2, r5
 8016f40:	e7b1      	b.n	8016ea6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8016f42:	bf00      	nop
 8016f44:	ffff4afc 	.word	0xffff4afc

08016f48 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016f48:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016f4a:	428b      	cmp	r3, r1
 8016f4c:	d102      	bne.n	8016f54 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016f4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d003      	beq.n	8016f5c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016f54:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016f58:	f7ff bed2 	b.w	8016d00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016f5c:	4770      	bx	lr

08016f5e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016f5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016f60:	428b      	cmp	r3, r1
 8016f62:	d102      	bne.n	8016f6a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016f64:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016f66:	4293      	cmp	r3, r2
 8016f68:	d003      	beq.n	8016f72 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016f6a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016f6e:	f7ff bec7 	b.w	8016d00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016f72:	4770      	bx	lr

08016f74 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016f74:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016f78:	f7ff bec2 	b.w	8016d00 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016f7c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f80:	b0b3      	sub	sp, #204	; 0xcc
 8016f82:	4604      	mov	r4, r0
 8016f84:	460a      	mov	r2, r1
 8016f86:	4601      	mov	r1, r0
 8016f88:	a804      	add	r0, sp, #16
 8016f8a:	ad32      	add	r5, sp, #200	; 0xc8
 8016f8c:	f00d f84a 	bl	8024024 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016f90:	2300      	movs	r3, #0
 8016f92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016f94:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016f9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016f9e:	1ac0      	subs	r0, r0, r3
 8016fa0:	eba1 0102 	sub.w	r1, r1, r2
 8016fa4:	d43c      	bmi.n	8017020 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016fa6:	2900      	cmp	r1, #0
 8016fa8:	462a      	mov	r2, r5
 8016faa:	db33      	blt.n	8017014 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016fac:	f7ff fe58 	bl	8016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016fb0:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016fb4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016fb6:	a804      	add	r0, sp, #16
 8016fb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016fba:	f00d f9fc 	bl	80243b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016fbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016fc0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016fc2:	a804      	add	r0, sp, #16
 8016fc4:	f00d f986 	bl	80242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016fc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016fcc:	2b01      	cmp	r3, #1
 8016fce:	d137      	bne.n	8017040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016fd0:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016fd2:	2eb3      	cmp	r6, #179	; 0xb3
 8016fd4:	dc34      	bgt.n	8017040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016fd6:	eba7 0906 	sub.w	r9, r7, r6
 8016fda:	4648      	mov	r0, r9
 8016fdc:	f7ff fde8 	bl	8016bb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8016fe0:	a902      	add	r1, sp, #8
 8016fe2:	9002      	str	r0, [sp, #8]
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	f7ff fdd7 	bl	8016b98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016fea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fec:	eb00 0801 	add.w	r8, r0, r1
 8016ff0:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016ff4:	f7ff fddc 	bl	8016bb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8016ff8:	a903      	add	r1, sp, #12
 8016ffa:	9003      	str	r0, [sp, #12]
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	f7ff fdcb 	bl	8016b98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017002:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017004:	4641      	mov	r1, r8
 8017006:	1a12      	subs	r2, r2, r0
 8017008:	a804      	add	r0, sp, #16
 801700a:	f00d f963 	bl	80242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801700e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017010:	441e      	add	r6, r3
 8017012:	e7de      	b.n	8016fd2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8017014:	4249      	negs	r1, r1
 8017016:	f7ff fe23 	bl	8016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801701a:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801701e:	e7c9      	b.n	8016fb4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017020:	2900      	cmp	r1, #0
 8017022:	f1c0 0000 	rsb	r0, r0, #0
 8017026:	462a      	mov	r2, r5
 8017028:	db04      	blt.n	8017034 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801702a:	f7ff fe19 	bl	8016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801702e:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8017032:	e7bf      	b.n	8016fb4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017034:	4249      	negs	r1, r1
 8017036:	f7ff fe13 	bl	8016c60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801703a:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801703e:	e7b9      	b.n	8016fb4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017040:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017042:	a804      	add	r0, sp, #16
 8017044:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017046:	f00d f945 	bl	80242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801704a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801704c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801704e:	a804      	add	r0, sp, #16
 8017050:	f00d f940 	bl	80242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017054:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017058:	2b01      	cmp	r3, #1
 801705a:	d123      	bne.n	80170a4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801705c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801705e:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8017062:	2e00      	cmp	r6, #0
 8017064:	dd1e      	ble.n	80170a4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017066:	eb06 0907 	add.w	r9, r6, r7
 801706a:	4648      	mov	r0, r9
 801706c:	f7ff fda0 	bl	8016bb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017070:	a902      	add	r1, sp, #8
 8017072:	9002      	str	r0, [sp, #8]
 8017074:	4628      	mov	r0, r5
 8017076:	f7ff fd8f 	bl	8016b98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801707a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801707c:	eb00 0801 	add.w	r8, r0, r1
 8017080:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017084:	f7ff fd94 	bl	8016bb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017088:	a903      	add	r1, sp, #12
 801708a:	9003      	str	r0, [sp, #12]
 801708c:	4628      	mov	r0, r5
 801708e:	f7ff fd83 	bl	8016b98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017092:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017094:	4641      	mov	r1, r8
 8017096:	1a12      	subs	r2, r2, r0
 8017098:	a804      	add	r0, sp, #16
 801709a:	f00d f91b 	bl	80242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801709e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80170a0:	1af6      	subs	r6, r6, r3
 80170a2:	e7de      	b.n	8017062 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 80170a4:	a804      	add	r0, sp, #16
 80170a6:	f00d fa8a 	bl	80245be <_ZN8touchgfx6Canvas6renderEv>
 80170aa:	4604      	mov	r4, r0
 80170ac:	a804      	add	r0, sp, #16
 80170ae:	f00d fac7 	bl	8024640 <_ZN8touchgfx6CanvasD1Ev>
 80170b2:	4620      	mov	r0, r4
 80170b4:	b033      	add	sp, #204	; 0xcc
 80170b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080170ba <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80170ba:	b570      	push	{r4, r5, r6, lr}
 80170bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170c0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80170c2:	4604      	mov	r4, r0
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d00c      	beq.n	80170e2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80170c8:	f850 3b26 	ldr.w	r3, [r0], #38
 80170cc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80170ce:	f7f9 fbed 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80170d2:	2300      	movs	r3, #0
 80170d4:	4601      	mov	r1, r0
 80170d6:	46ac      	mov	ip, r5
 80170d8:	4620      	mov	r0, r4
 80170da:	461a      	mov	r2, r3
 80170dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170e0:	4760      	bx	ip
 80170e2:	2000      	movs	r0, #0
 80170e4:	bd70      	pop	{r4, r5, r6, pc}

080170e6 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80170e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170ec:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d016      	beq.n	8017120 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 80170f2:	f100 0426 	add.w	r4, r0, #38	; 0x26
 80170f6:	4620      	mov	r0, r4
 80170f8:	f7f8 f8be 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 80170fc:	6803      	ldr	r3, [r0, #0]
 80170fe:	4605      	mov	r5, r0
 8017100:	4620      	mov	r0, r4
 8017102:	69de      	ldr	r6, [r3, #28]
 8017104:	f7f8 f8d4 	bl	800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017108:	4607      	mov	r7, r0
 801710a:	4620      	mov	r0, r4
 801710c:	f7f9 fbce 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8017110:	2300      	movs	r3, #0
 8017112:	4602      	mov	r2, r0
 8017114:	4639      	mov	r1, r7
 8017116:	9300      	str	r3, [sp, #0]
 8017118:	4628      	mov	r0, r5
 801711a:	47b0      	blx	r6
 801711c:	b003      	add	sp, #12
 801711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017120:	2000      	movs	r0, #0
 8017122:	e7fb      	b.n	801711c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08017124 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017124:	b40e      	push	{r1, r2, r3}
 8017126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017130:	b09b      	sub	sp, #108	; 0x6c
 8017132:	4604      	mov	r4, r0
 8017134:	429a      	cmp	r2, r3
 8017136:	d03f      	beq.n	80171b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8017138:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801713c:	ab22      	add	r3, sp, #136	; 0x88
 801713e:	4638      	mov	r0, r7
 8017140:	9303      	str	r3, [sp, #12]
 8017142:	f7f8 f899 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 8017146:	6803      	ldr	r3, [r0, #0]
 8017148:	4680      	mov	r8, r0
 801714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801714c:	4798      	blx	r3
 801714e:	4606      	mov	r6, r0
 8017150:	b205      	sxth	r5, r0
 8017152:	a804      	add	r0, sp, #16
 8017154:	f003 feb4 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8017158:	f8d8 3000 	ldr.w	r3, [r8]
 801715c:	4640      	mov	r0, r8
 801715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017160:	4798      	blx	r3
 8017162:	9a03      	ldr	r2, [sp, #12]
 8017164:	4603      	mov	r3, r0
 8017166:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017168:	a804      	add	r0, sp, #16
 801716a:	f003 fec6 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801716e:	4638      	mov	r0, r7
 8017170:	f7f8 f89e 	bl	800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017174:	4680      	mov	r8, r0
 8017176:	4638      	mov	r0, r7
 8017178:	f7f8 f87e 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 801717c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017180:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8017184:	4642      	mov	r2, r8
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	4603      	mov	r3, r0
 801718a:	a804      	add	r0, sp, #16
 801718c:	f001 fbc8 	bl	8018920 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017190:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017194:	b203      	sxth	r3, r0
 8017196:	18a9      	adds	r1, r5, r2
 8017198:	2900      	cmp	r1, #0
 801719a:	dd0b      	ble.n	80171b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801719c:	3b01      	subs	r3, #1
 801719e:	fb13 f302 	smulbb	r3, r3, r2
 80171a2:	fb16 3300 	smlabb	r3, r6, r0, r3
 80171a6:	b21d      	sxth	r5, r3
 80171a8:	4628      	mov	r0, r5
 80171aa:	b01b      	add	sp, #108	; 0x6c
 80171ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171b0:	b003      	add	sp, #12
 80171b2:	4770      	bx	lr
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	dcf7      	bgt.n	80171a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 80171b8:	2500      	movs	r5, #0
 80171ba:	e7f5      	b.n	80171a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

080171bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171c4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80171c6:	b08d      	sub	sp, #52	; 0x34
 80171c8:	4604      	mov	r4, r0
 80171ca:	429e      	cmp	r6, r3
 80171cc:	4688      	mov	r8, r1
 80171ce:	d04b      	beq.n	8017268 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80171d0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80171d4:	4628      	mov	r0, r5
 80171d6:	f7f8 f84f 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 80171da:	4607      	mov	r7, r0
 80171dc:	2800      	cmp	r0, #0
 80171de:	d043      	beq.n	8017268 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80171e0:	4628      	mov	r0, r5
 80171e2:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80171e6:	f7f8 f87b 	bl	800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>
 80171ea:	4b21      	ldr	r3, [pc, #132]	; (8017270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 80171ec:	4628      	mov	r0, r5
 80171ee:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80171f8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80171fc:	785e      	ldrb	r6, [r3, #1]
 80171fe:	f7f8 f857 	bl	800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017204:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017208:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801720c:	9309      	str	r3, [sp, #36]	; 0x24
 801720e:	4b19      	ldr	r3, [pc, #100]	; (8017274 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8017210:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801721a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801721e:	9707      	str	r7, [sp, #28]
 8017220:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017224:	f88d 6020 	strb.w	r6, [sp, #32]
 8017228:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801722c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017230:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017234:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017238:	b10a      	cbz	r2, 801723e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801723a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801723c:	b906      	cbnz	r6, 8017240 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801723e:	689e      	ldr	r6, [r3, #8]
 8017240:	af05      	add	r7, sp, #20
 8017242:	4621      	mov	r1, r4
 8017244:	4638      	mov	r0, r7
 8017246:	f002 fcf6 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801724a:	4628      	mov	r0, r5
 801724c:	f7f9 fb2e 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8017250:	2300      	movs	r3, #0
 8017252:	9001      	str	r0, [sp, #4]
 8017254:	4630      	mov	r0, r6
 8017256:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801725a:	ab07      	add	r3, sp, #28
 801725c:	9300      	str	r3, [sp, #0]
 801725e:	4643      	mov	r3, r8
 8017260:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017264:	f000 fd80 	bl	8017d68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017268:	b00d      	add	sp, #52	; 0x34
 801726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801726e:	bf00      	nop
 8017270:	2000bc24 	.word	0x2000bc24
 8017274:	2000bb94 	.word	0x2000bb94

08017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017278:	b570      	push	{r4, r5, r6, lr}
 801727a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801727e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017280:	4604      	mov	r4, r0
 8017282:	429a      	cmp	r2, r3
 8017284:	d021      	beq.n	80172ca <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017286:	6803      	ldr	r3, [r0, #0]
 8017288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801728a:	4798      	blx	r3
 801728c:	6823      	ldr	r3, [r4, #0]
 801728e:	4605      	mov	r5, r0
 8017290:	4620      	mov	r0, r4
 8017292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017294:	4798      	blx	r3
 8017296:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801729a:	4606      	mov	r6, r0
 801729c:	b22d      	sxth	r5, r5
 801729e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80172a2:	6823      	ldr	r3, [r4, #0]
 80172a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a6:	d109      	bne.n	80172bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 80172a8:	4629      	mov	r1, r5
 80172aa:	4620      	mov	r0, r4
 80172ac:	4798      	blx	r3
 80172ae:	6823      	ldr	r3, [r4, #0]
 80172b0:	4631      	mov	r1, r6
 80172b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172b4:	4620      	mov	r0, r4
 80172b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172ba:	4718      	bx	r3
 80172bc:	4601      	mov	r1, r0
 80172be:	4620      	mov	r0, r4
 80172c0:	4798      	blx	r3
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	4629      	mov	r1, r5
 80172c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172c8:	e7f4      	b.n	80172b4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80172ca:	bd70      	pop	{r4, r5, r6, pc}

080172cc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80172cc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80172d0:	84c1      	strh	r1, [r0, #38]	; 0x26
 80172d2:	b922      	cbnz	r2, 80172de <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80172d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80172d8:	b90b      	cbnz	r3, 80172de <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80172da:	f7ff bfcd 	b.w	8017278 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80172de:	4770      	bx	lr

080172e0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80172e0:	2300      	movs	r3, #0
 80172e2:	8003      	strh	r3, [r0, #0]
 80172e4:	8043      	strh	r3, [r0, #2]
 80172e6:	8083      	strh	r3, [r0, #4]
 80172e8:	80c3      	strh	r3, [r0, #6]
 80172ea:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80172ee:	b91b      	cbnz	r3, 80172f8 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80172f0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80172f4:	2bff      	cmp	r3, #255	; 0xff
 80172f6:	d103      	bne.n	8017300 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80172f8:	890b      	ldrh	r3, [r1, #8]
 80172fa:	8083      	strh	r3, [r0, #4]
 80172fc:	894b      	ldrh	r3, [r1, #10]
 80172fe:	80c3      	strh	r3, [r0, #6]
 8017300:	4770      	bx	lr
	...

08017304 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017306:	4604      	mov	r4, r0
 8017308:	466b      	mov	r3, sp
 801730a:	6808      	ldr	r0, [r1, #0]
 801730c:	6849      	ldr	r1, [r1, #4]
 801730e:	c303      	stmia	r3!, {r0, r1}
 8017310:	6823      	ldr	r3, [r4, #0]
 8017312:	4669      	mov	r1, sp
 8017314:	4620      	mov	r0, r4
 8017316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017318:	4798      	blx	r3
 801731a:	4b08      	ldr	r3, [pc, #32]	; (801733c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017322:	b10a      	cbz	r2, 8017328 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017324:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017326:	b900      	cbnz	r0, 801732a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017328:	6898      	ldr	r0, [r3, #8]
 801732a:	6803      	ldr	r3, [r0, #0]
 801732c:	4669      	mov	r1, sp
 801732e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017330:	69dd      	ldr	r5, [r3, #28]
 8017332:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017336:	47a8      	blx	r5
 8017338:	b003      	add	sp, #12
 801733a:	bd30      	pop	{r4, r5, pc}
 801733c:	2000bb94 	.word	0x2000bb94

08017340 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017340:	b570      	push	{r4, r5, r6, lr}
 8017342:	6803      	ldr	r3, [r0, #0]
 8017344:	4604      	mov	r4, r0
 8017346:	4615      	mov	r5, r2
 8017348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801734a:	4798      	blx	r3
 801734c:	6823      	ldr	r3, [r4, #0]
 801734e:	4629      	mov	r1, r5
 8017350:	4620      	mov	r0, r4
 8017352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017358:	4718      	bx	r3

0801735a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801735a:	b570      	push	{r4, r5, r6, lr}
 801735c:	6803      	ldr	r3, [r0, #0]
 801735e:	4604      	mov	r4, r0
 8017360:	460e      	mov	r6, r1
 8017362:	4615      	mov	r5, r2
 8017364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017366:	4798      	blx	r3
 8017368:	8030      	strh	r0, [r6, #0]
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	4620      	mov	r0, r4
 801736e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017370:	4798      	blx	r3
 8017372:	8028      	strh	r0, [r5, #0]
 8017374:	bd70      	pop	{r4, r5, r6, pc}

08017376 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017376:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801737a:	4770      	bx	lr

0801737c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801737c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017380:	4770      	bx	lr

08017382 <_ZN8touchgfx10TiledImageD1Ev>:
 8017382:	4770      	bx	lr

08017384 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017384:	b510      	push	{r4, lr}
 8017386:	4604      	mov	r4, r0
 8017388:	f000 fa40 	bl	801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801738c:	6823      	ldr	r3, [r4, #0]
 801738e:	4620      	mov	r0, r4
 8017390:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017394:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801739a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801739e:	4718      	bx	r3

080173a0 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80173a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173a2:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80173a6:	4605      	mov	r5, r0
 80173a8:	8541      	strh	r1, [r0, #42]	; 0x2a
 80173aa:	4630      	mov	r0, r6
 80173ac:	f004 fcb4 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173b0:	b1a0      	cbz	r0, 80173dc <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 80173b2:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 80173b6:	4630      	mov	r0, r6
 80173b8:	f004 fcae 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173bc:	fb97 f4f0 	sdiv	r4, r7, r0
 80173c0:	fb04 7410 	mls	r4, r4, r0, r7
 80173c4:	4630      	mov	r0, r6
 80173c6:	f004 fca7 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173ca:	4404      	add	r4, r0
 80173cc:	4630      	mov	r0, r6
 80173ce:	f004 fca3 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173d2:	fb94 f3f0 	sdiv	r3, r4, r0
 80173d6:	fb03 4010 	mls	r0, r3, r0, r4
 80173da:	8568      	strh	r0, [r5, #42]	; 0x2a
 80173dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080173de <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80173de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173e0:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80173e4:	4605      	mov	r5, r0
 80173e6:	8581      	strh	r1, [r0, #44]	; 0x2c
 80173e8:	4630      	mov	r0, r6
 80173ea:	f004 fccf 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80173ee:	b1a0      	cbz	r0, 801741a <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80173f0:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80173f4:	4630      	mov	r0, r6
 80173f6:	f004 fcc9 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80173fa:	fb97 f4f0 	sdiv	r4, r7, r0
 80173fe:	fb04 7410 	mls	r4, r4, r0, r7
 8017402:	4630      	mov	r0, r6
 8017404:	f004 fcc2 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017408:	4404      	add	r4, r0
 801740a:	4630      	mov	r0, r6
 801740c:	f004 fcbe 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017410:	fb94 f3f0 	sdiv	r3, r4, r0
 8017414:	fb03 4010 	mls	r0, r3, r0, r4
 8017418:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801741c <_ZN8touchgfx10TiledImageD0Ev>:
 801741c:	b510      	push	{r4, lr}
 801741e:	4604      	mov	r4, r0
 8017420:	2130      	movs	r1, #48	; 0x30
 8017422:	f00e f9a0 	bl	8025766 <_ZdlPvj>
 8017426:	4620      	mov	r0, r4
 8017428:	bd10      	pop	{r4, pc}
	...

0801742c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017430:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8017434:	b093      	sub	sp, #76	; 0x4c
 8017436:	4607      	mov	r7, r0
 8017438:	460e      	mov	r6, r1
 801743a:	4658      	mov	r0, fp
 801743c:	f004 fc6c 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017440:	4605      	mov	r5, r0
 8017442:	4658      	mov	r0, fp
 8017444:	f004 fca2 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017448:	4680      	mov	r8, r0
 801744a:	2d00      	cmp	r5, #0
 801744c:	f000 80c5 	beq.w	80175da <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017450:	2800      	cmp	r0, #0
 8017452:	f000 80c2 	beq.w	80175da <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017456:	2300      	movs	r3, #0
 8017458:	a90e      	add	r1, sp, #56	; 0x38
 801745a:	4638      	mov	r0, r7
 801745c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017464:	4798      	blx	r3
 8017466:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801746a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801746e:	88b1      	ldrh	r1, [r6, #4]
 8017470:	189c      	adds	r4, r3, r2
 8017472:	440b      	add	r3, r1
 8017474:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017478:	fa02 f383 	sxtah	r3, r2, r3
 801747c:	3b01      	subs	r3, #1
 801747e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017482:	fb94 f4f5 	sdiv	r4, r4, r5
 8017486:	fb13 f305 	smulbb	r3, r3, r5
 801748a:	fb14 f405 	smulbb	r4, r4, r5
 801748e:	b21b      	sxth	r3, r3
 8017490:	1aa4      	subs	r4, r4, r2
 8017492:	930b      	str	r3, [sp, #44]	; 0x2c
 8017494:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017498:	b2a4      	uxth	r4, r4
 801749a:	185a      	adds	r2, r3, r1
 801749c:	fb92 f2f8 	sdiv	r2, r2, r8
 80174a0:	fb12 f208 	smulbb	r2, r2, r8
 80174a4:	1a52      	subs	r2, r2, r1
 80174a6:	b212      	sxth	r2, r2
 80174a8:	920c      	str	r2, [sp, #48]	; 0x30
 80174aa:	88f2      	ldrh	r2, [r6, #6]
 80174ac:	4413      	add	r3, r2
 80174ae:	fa01 f383 	sxtah	r3, r1, r3
 80174b2:	3b01      	subs	r3, #1
 80174b4:	fb93 f3f8 	sdiv	r3, r3, r8
 80174b8:	fb13 f308 	smulbb	r3, r3, r8
 80174bc:	b21b      	sxth	r3, r3
 80174be:	930d      	str	r3, [sp, #52]	; 0x34
 80174c0:	1963      	adds	r3, r4, r5
 80174c2:	fa1f fa83 	uxth.w	sl, r3
 80174c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174c8:	b223      	sxth	r3, r4
 80174ca:	4293      	cmp	r3, r2
 80174cc:	9305      	str	r3, [sp, #20]
 80174ce:	f300 8084 	bgt.w	80175da <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80174d2:	fa0f f38a 	sxth.w	r3, sl
 80174d6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80174da:	9309      	str	r3, [sp, #36]	; 0x24
 80174dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174de:	4599      	cmp	r9, r3
 80174e0:	dd04      	ble.n	80174ec <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 80174e2:	442c      	add	r4, r5
 80174e4:	eb05 030a 	add.w	r3, r5, sl
 80174e8:	b2a4      	uxth	r4, r4
 80174ea:	e7ea      	b.n	80174c2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 80174ec:	f9b6 c000 	ldrsh.w	ip, [r6]
 80174f0:	88b2      	ldrh	r2, [r6, #4]
 80174f2:	4462      	add	r2, ip
 80174f4:	b292      	uxth	r2, r2
 80174f6:	b213      	sxth	r3, r2
 80174f8:	9308      	str	r3, [sp, #32]
 80174fa:	fa1f f389 	uxth.w	r3, r9
 80174fe:	eb08 0103 	add.w	r1, r8, r3
 8017502:	9307      	str	r3, [sp, #28]
 8017504:	b289      	uxth	r1, r1
 8017506:	b208      	sxth	r0, r1
 8017508:	9006      	str	r0, [sp, #24]
 801750a:	9805      	ldr	r0, [sp, #20]
 801750c:	4603      	mov	r3, r0
 801750e:	9808      	ldr	r0, [sp, #32]
 8017510:	4283      	cmp	r3, r0
 8017512:	da5e      	bge.n	80175d2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017516:	4584      	cmp	ip, r0
 8017518:	da5b      	bge.n	80175d2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801751a:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801751e:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017522:	4486      	add	lr, r0
 8017524:	fa1f fe8e 	uxth.w	lr, lr
 8017528:	fa0f f38e 	sxth.w	r3, lr
 801752c:	4599      	cmp	r9, r3
 801752e:	930a      	str	r3, [sp, #40]	; 0x28
 8017530:	da4f      	bge.n	80175d2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017532:	9b06      	ldr	r3, [sp, #24]
 8017534:	4298      	cmp	r0, r3
 8017536:	da4c      	bge.n	80175d2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017538:	9b05      	ldr	r3, [sp, #20]
 801753a:	459c      	cmp	ip, r3
 801753c:	bfb8      	it	lt
 801753e:	469c      	movlt	ip, r3
 8017540:	4548      	cmp	r0, r9
 8017542:	9b08      	ldr	r3, [sp, #32]
 8017544:	bfb8      	it	lt
 8017546:	4648      	movlt	r0, r9
 8017548:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801754c:	4699      	mov	r9, r3
 801754e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017550:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8017554:	4599      	cmp	r9, r3
 8017556:	bfc8      	it	gt
 8017558:	4652      	movgt	r2, sl
 801755a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801755c:	eba2 020c 	sub.w	r2, r2, ip
 8017560:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017564:	9a06      	ldr	r2, [sp, #24]
 8017566:	4293      	cmp	r3, r2
 8017568:	bfd8      	it	le
 801756a:	4671      	movle	r1, lr
 801756c:	1a09      	subs	r1, r1, r0
 801756e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8017572:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017576:	9b07      	ldr	r3, [sp, #28]
 8017578:	1b12      	subs	r2, r2, r4
 801757a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801757e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017582:	1ad2      	subs	r2, r2, r3
 8017584:	4b16      	ldr	r3, [pc, #88]	; (80175e0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017586:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017590:	b109      	cbz	r1, 8017596 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8017592:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017594:	b900      	cbnz	r0, 8017598 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017596:	6890      	ldr	r0, [r2, #8]
 8017598:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801759c:	f04f 0c01 	mov.w	ip, #1
 80175a0:	9b07      	ldr	r3, [sp, #28]
 80175a2:	6801      	ldr	r1, [r0, #0]
 80175a4:	4413      	add	r3, r2
 80175a6:	f8cd c008 	str.w	ip, [sp, #8]
 80175aa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80175ae:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80175b2:	b21b      	sxth	r3, r3
 80175b4:	4422      	add	r2, r4
 80175b6:	f8cd c004 	str.w	ip, [sp, #4]
 80175ba:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80175be:	b212      	sxth	r2, r2
 80175c0:	f8cd c000 	str.w	ip, [sp]
 80175c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80175c8:	4659      	mov	r1, fp
 80175ca:	47c8      	blx	r9
 80175cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80175d0:	e784      	b.n	80174dc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 80175d2:	2300      	movs	r3, #0
 80175d4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80175d8:	e7cb      	b.n	8017572 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 80175da:	b013      	add	sp, #76	; 0x4c
 80175dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e0:	2000bb94 	.word	0x2000bb94

080175e4 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80175e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80175ec:	4606      	mov	r6, r0
 80175ee:	4689      	mov	r9, r1
 80175f0:	2bff      	cmp	r3, #255	; 0xff
 80175f2:	d008      	beq.n	8017606 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80175f4:	2300      	movs	r3, #0
 80175f6:	8003      	strh	r3, [r0, #0]
 80175f8:	8043      	strh	r3, [r0, #2]
 80175fa:	8083      	strh	r3, [r0, #4]
 80175fc:	4630      	mov	r0, r6
 80175fe:	80f3      	strh	r3, [r6, #6]
 8017600:	b003      	add	sp, #12
 8017602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017606:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801760a:	4668      	mov	r0, sp
 801760c:	4659      	mov	r1, fp
 801760e:	f004 fbf7 	bl	801be00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017612:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8017616:	4658      	mov	r0, fp
 8017618:	f9bd 7000 	ldrsh.w	r7, [sp]
 801761c:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8017620:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017624:	f004 fb78 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017628:	4284      	cmp	r4, r0
 801762a:	d10d      	bne.n	8017648 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801762c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017630:	4658      	mov	r0, fp
 8017632:	f004 fbab 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017636:	4580      	cmp	r8, r0
 8017638:	d12a      	bne.n	8017690 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801763a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801763e:	8037      	strh	r7, [r6, #0]
 8017640:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017644:	80b5      	strh	r5, [r6, #4]
 8017646:	e7d9      	b.n	80175fc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017648:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801764c:	4658      	mov	r0, fp
 801764e:	f004 fb63 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017652:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017656:	1b7f      	subs	r7, r7, r5
 8017658:	b2a3      	uxth	r3, r4
 801765a:	b2bd      	uxth	r5, r7
 801765c:	b22f      	sxth	r7, r5
 801765e:	4428      	add	r0, r5
 8017660:	2f00      	cmp	r7, #0
 8017662:	b280      	uxth	r0, r0
 8017664:	bfb8      	it	lt
 8017666:	18ed      	addlt	r5, r5, r3
 8017668:	4403      	add	r3, r0
 801766a:	bfac      	ite	ge
 801766c:	4625      	movge	r5, r4
 801766e:	2700      	movlt	r7, #0
 8017670:	b29b      	uxth	r3, r3
 8017672:	bfb8      	it	lt
 8017674:	b22d      	sxthlt	r5, r5
 8017676:	b219      	sxth	r1, r3
 8017678:	bfb8      	it	lt
 801767a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801767e:	4291      	cmp	r1, r2
 8017680:	bfc4      	itt	gt
 8017682:	1a9c      	subgt	r4, r3, r2
 8017684:	b224      	sxthgt	r4, r4
 8017686:	42ac      	cmp	r4, r5
 8017688:	bfc4      	itt	gt
 801768a:	b207      	sxthgt	r7, r0
 801768c:	4625      	movgt	r5, r4
 801768e:	e7cf      	b.n	8017630 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017690:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017694:	4658      	mov	r0, fp
 8017696:	f004 fb79 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801769a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801769e:	ebaa 0404 	sub.w	r4, sl, r4
 80176a2:	fa1f f288 	uxth.w	r2, r8
 80176a6:	b2a4      	uxth	r4, r4
 80176a8:	fa0f fa84 	sxth.w	sl, r4
 80176ac:	4420      	add	r0, r4
 80176ae:	f1ba 0f00 	cmp.w	sl, #0
 80176b2:	b280      	uxth	r0, r0
 80176b4:	bfb8      	it	lt
 80176b6:	18a3      	addlt	r3, r4, r2
 80176b8:	4402      	add	r2, r0
 80176ba:	bfac      	ite	ge
 80176bc:	4643      	movge	r3, r8
 80176be:	f04f 0a00 	movlt.w	sl, #0
 80176c2:	b292      	uxth	r2, r2
 80176c4:	bfb8      	it	lt
 80176c6:	b21b      	sxthlt	r3, r3
 80176c8:	b214      	sxth	r4, r2
 80176ca:	bfb8      	it	lt
 80176cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80176d0:	428c      	cmp	r4, r1
 80176d2:	bfc4      	itt	gt
 80176d4:	eba2 0801 	subgt.w	r8, r2, r1
 80176d8:	fa0f f888 	sxthgt.w	r8, r8
 80176dc:	4543      	cmp	r3, r8
 80176de:	bfbc      	itt	lt
 80176e0:	fa0f fa80 	sxthlt.w	sl, r0
 80176e4:	4643      	movlt	r3, r8
 80176e6:	e7aa      	b.n	801763e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080176e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80176e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80176ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80176f2:	4604      	mov	r4, r0
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d018      	beq.n	801772a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80176f8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80176fc:	4628      	mov	r0, r5
 80176fe:	f7f7 fdbb 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	4606      	mov	r6, r0
 8017706:	4628      	mov	r0, r5
 8017708:	69df      	ldr	r7, [r3, #28]
 801770a:	f7f7 fdd1 	bl	800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801770e:	4680      	mov	r8, r0
 8017710:	4628      	mov	r0, r5
 8017712:	f7f9 f8cb 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8017716:	2300      	movs	r3, #0
 8017718:	4602      	mov	r2, r0
 801771a:	4641      	mov	r1, r8
 801771c:	9300      	str	r3, [sp, #0]
 801771e:	4630      	mov	r0, r6
 8017720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017722:	47b8      	blx	r7
 8017724:	b002      	add	sp, #8
 8017726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801772a:	2000      	movs	r0, #0
 801772c:	e7fa      	b.n	8017724 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801772e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801772e:	b570      	push	{r4, r5, r6, lr}
 8017730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017734:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017736:	4604      	mov	r4, r0
 8017738:	429a      	cmp	r2, r3
 801773a:	d00c      	beq.n	8017756 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801773c:	f850 3b26 	ldr.w	r3, [r0], #38
 8017740:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017742:	f7f9 f8b3 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 8017746:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017748:	4601      	mov	r1, r0
 801774a:	46ac      	mov	ip, r5
 801774c:	4620      	mov	r0, r4
 801774e:	2300      	movs	r3, #0
 8017750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017754:	4760      	bx	ip
 8017756:	2000      	movs	r0, #0
 8017758:	bd70      	pop	{r4, r5, r6, pc}
	...

0801775c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017764:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017766:	b08d      	sub	sp, #52	; 0x34
 8017768:	4604      	mov	r4, r0
 801776a:	429e      	cmp	r6, r3
 801776c:	460f      	mov	r7, r1
 801776e:	d048      	beq.n	8017802 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017770:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017774:	4628      	mov	r0, r5
 8017776:	f7f7 fd7f 	bl	800f278 <_ZNK8touchgfx9TypedText7getFontEv>
 801777a:	4680      	mov	r8, r0
 801777c:	2800      	cmp	r0, #0
 801777e:	d040      	beq.n	8017802 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017780:	4628      	mov	r0, r5
 8017782:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017786:	f7f7 fdab 	bl	800f2e0 <_ZNK8touchgfx9TypedText11assertValidEv>
 801778a:	4b1f      	ldr	r3, [pc, #124]	; (8017808 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801778c:	4628      	mov	r0, r5
 801778e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017798:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801779c:	785e      	ldrb	r6, [r3, #1]
 801779e:	f7f7 fd87 	bl	800f2b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80177a2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80177a6:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80177aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80177ac:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80177b0:	f88d 6020 	strb.w	r6, [sp, #32]
 80177b4:	ae05      	add	r6, sp, #20
 80177b6:	9309      	str	r3, [sp, #36]	; 0x24
 80177b8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80177bc:	f8cd 801c 	str.w	r8, [sp, #28]
 80177c0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80177c4:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80177c8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80177cc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80177d0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80177d4:	f7f8 f930 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 80177d8:	4621      	mov	r1, r4
 80177da:	4680      	mov	r8, r0
 80177dc:	4630      	mov	r0, r6
 80177de:	f002 fa2a 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177e2:	4628      	mov	r0, r5
 80177e4:	f7f9 f862 	bl	80108ac <_ZNK8touchgfx9TypedText7getTextEv>
 80177e8:	2300      	movs	r3, #0
 80177ea:	9303      	str	r3, [sp, #12]
 80177ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177ee:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80177f2:	ab07      	add	r3, sp, #28
 80177f4:	4640      	mov	r0, r8
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	463b      	mov	r3, r7
 80177fa:	e896 0006 	ldmia.w	r6, {r1, r2}
 80177fe:	f000 fab3 	bl	8017d68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017802:	b00d      	add	sp, #52	; 0x34
 8017804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017808:	2000bc24 	.word	0x2000bc24

0801780c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	4605      	mov	r5, r0
 8017810:	880b      	ldrh	r3, [r1, #0]
 8017812:	4604      	mov	r4, r0
 8017814:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017816:	f855 3b26 	ldr.w	r3, [r5], #38
 801781a:	4628      	mov	r0, r5
 801781c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801781e:	f004 fa7b 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017822:	b201      	sxth	r1, r0
 8017824:	4620      	mov	r0, r4
 8017826:	47b0      	blx	r6
 8017828:	6823      	ldr	r3, [r4, #0]
 801782a:	4628      	mov	r0, r5
 801782c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801782e:	f004 faad 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017832:	b201      	sxth	r1, r0
 8017834:	4620      	mov	r0, r4
 8017836:	47b0      	blx	r6
 8017838:	4628      	mov	r0, r5
 801783a:	f004 fb3b 	bl	801beb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801783e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017842:	bd70      	pop	{r4, r5, r6, pc}

08017844 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017844:	b510      	push	{r4, lr}
 8017846:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801784a:	4604      	mov	r4, r0
 801784c:	2bff      	cmp	r3, #255	; 0xff
 801784e:	d006      	beq.n	801785e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017850:	2300      	movs	r3, #0
 8017852:	8003      	strh	r3, [r0, #0]
 8017854:	8043      	strh	r3, [r0, #2]
 8017856:	8083      	strh	r3, [r0, #4]
 8017858:	80c3      	strh	r3, [r0, #6]
 801785a:	4620      	mov	r0, r4
 801785c:	bd10      	pop	{r4, pc}
 801785e:	3126      	adds	r1, #38	; 0x26
 8017860:	f004 face 	bl	801be00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017864:	e7f9      	b.n	801785a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017868 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801786c:	4604      	mov	r4, r0
 801786e:	b088      	sub	sp, #32
 8017870:	2500      	movs	r5, #0
 8017872:	460f      	mov	r7, r1
 8017874:	f854 3b26 	ldr.w	r3, [r4], #38
 8017878:	a904      	add	r1, sp, #16
 801787a:	4606      	mov	r6, r0
 801787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801787e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017882:	4798      	blx	r3
 8017884:	4620      	mov	r0, r4
 8017886:	f004 fa47 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801788a:	4680      	mov	r8, r0
 801788c:	4620      	mov	r0, r4
 801788e:	f004 fa7d 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017892:	9506      	str	r5, [sp, #24]
 8017894:	ad06      	add	r5, sp, #24
 8017896:	f8ad 001e 	strh.w	r0, [sp, #30]
 801789a:	4639      	mov	r1, r7
 801789c:	f8ad 801c 	strh.w	r8, [sp, #28]
 80178a0:	4628      	mov	r0, r5
 80178a2:	f7fd fef5 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 80178a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80178aa:	b1c3      	cbz	r3, 80178de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80178ac:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80178b0:	b1ab      	cbz	r3, 80178de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80178b2:	4b0c      	ldr	r3, [pc, #48]	; (80178e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80178ba:	b10a      	cbz	r2, 80178c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80178bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80178be:	b900      	cbnz	r0, 80178c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80178c0:	6898      	ldr	r0, [r3, #8]
 80178c2:	2701      	movs	r7, #1
 80178c4:	6801      	ldr	r1, [r0, #0]
 80178c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80178ca:	9702      	str	r7, [sp, #8]
 80178cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80178d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80178d4:	e9cd 5600 	strd	r5, r6, [sp]
 80178d8:	68cd      	ldr	r5, [r1, #12]
 80178da:	4621      	mov	r1, r4
 80178dc:	47a8      	blx	r5
 80178de:	b008      	add	sp, #32
 80178e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178e4:	2000bb94 	.word	0x2000bb94

080178e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80178e8:	4b02      	ldr	r3, [pc, #8]	; (80178f4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80178ea:	6018      	str	r0, [r3, #0]
 80178ec:	4b02      	ldr	r3, [pc, #8]	; (80178f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80178ee:	6019      	str	r1, [r3, #0]
 80178f0:	4770      	bx	lr
 80178f2:	bf00      	nop
 80178f4:	2000bb9c 	.word	0x2000bb9c
 80178f8:	2000bbb0 	.word	0x2000bbb0

080178fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80178fc:	b538      	push	{r3, r4, r5, lr}
 80178fe:	4c2b      	ldr	r4, [pc, #172]	; (80179ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017900:	4b2b      	ldr	r3, [pc, #172]	; (80179b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017902:	6821      	ldr	r1, [r4, #0]
 8017904:	681a      	ldr	r2, [r3, #0]
 8017906:	4281      	cmp	r1, r0
 8017908:	4d2a      	ldr	r5, [pc, #168]	; (80179b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801790a:	492b      	ldr	r1, [pc, #172]	; (80179b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801790c:	d108      	bne.n	8017920 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801790e:	682b      	ldr	r3, [r5, #0]
 8017910:	4293      	cmp	r3, r2
 8017912:	d105      	bne.n	8017920 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017914:	6808      	ldr	r0, [r1, #0]
 8017916:	280f      	cmp	r0, #15
 8017918:	bf94      	ite	ls
 801791a:	2000      	movls	r0, #0
 801791c:	2001      	movhi	r0, #1
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	4b26      	ldr	r3, [pc, #152]	; (80179bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017922:	6020      	str	r0, [r4, #0]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	602a      	str	r2, [r5, #0]
 8017928:	4298      	cmp	r0, r3
 801792a:	d905      	bls.n	8017938 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801792c:	4b24      	ldr	r3, [pc, #144]	; (80179c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801792e:	2137      	movs	r1, #55	; 0x37
 8017930:	4a24      	ldr	r2, [pc, #144]	; (80179c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017932:	4825      	ldr	r0, [pc, #148]	; (80179c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017934:	f00d ff42 	bl	80257bc <__assert_func>
 8017938:	f010 0403 	ands.w	r4, r0, #3
 801793c:	bf1f      	itttt	ne
 801793e:	f1c4 0504 	rsbne	r5, r4, #4
 8017942:	3b04      	subne	r3, #4
 8017944:	1952      	addne	r2, r2, r5
 8017946:	191b      	addne	r3, r3, r4
 8017948:	4d20      	ldr	r5, [pc, #128]	; (80179cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801794a:	4402      	add	r2, r0
 801794c:	1a1b      	subs	r3, r3, r0
 801794e:	3001      	adds	r0, #1
 8017950:	602a      	str	r2, [r5, #0]
 8017952:	f020 0401 	bic.w	r4, r0, #1
 8017956:	42a3      	cmp	r3, r4
 8017958:	d203      	bcs.n	8017962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801795a:	4b19      	ldr	r3, [pc, #100]	; (80179c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801795c:	214a      	movs	r1, #74	; 0x4a
 801795e:	4a19      	ldr	r2, [pc, #100]	; (80179c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017960:	e7e7      	b.n	8017932 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017962:	f010 0002 	ands.w	r0, r0, #2
 8017966:	bf1f      	itttt	ne
 8017968:	f1c0 0504 	rsbne	r5, r0, #4
 801796c:	1952      	addne	r2, r2, r5
 801796e:	1f05      	subne	r5, r0, #4
 8017970:	195b      	addne	r3, r3, r5
 8017972:	4422      	add	r2, r4
 8017974:	4d16      	ldr	r5, [pc, #88]	; (80179d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017976:	1b1b      	subs	r3, r3, r4
 8017978:	602a      	str	r2, [r5, #0]
 801797a:	429c      	cmp	r4, r3
 801797c:	d903      	bls.n	8017986 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801797e:	4b10      	ldr	r3, [pc, #64]	; (80179c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017980:	215d      	movs	r1, #93	; 0x5d
 8017982:	4a10      	ldr	r2, [pc, #64]	; (80179c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017984:	e7d5      	b.n	8017932 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017986:	b120      	cbz	r0, 8017992 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017988:	f1c0 0504 	rsb	r5, r0, #4
 801798c:	3804      	subs	r0, #4
 801798e:	442a      	add	r2, r5
 8017990:	4403      	add	r3, r0
 8017992:	1b1b      	subs	r3, r3, r4
 8017994:	4422      	add	r2, r4
 8017996:	480f      	ldr	r0, [pc, #60]	; (80179d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017998:	2b0f      	cmp	r3, #15
 801799a:	600b      	str	r3, [r1, #0]
 801799c:	6002      	str	r2, [r0, #0]
 801799e:	d803      	bhi.n	80179a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80179a0:	4b0d      	ldr	r3, [pc, #52]	; (80179d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80179a2:	2170      	movs	r1, #112	; 0x70
 80179a4:	4a07      	ldr	r2, [pc, #28]	; (80179c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80179a6:	e7c4      	b.n	8017932 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80179a8:	2001      	movs	r0, #1
 80179aa:	e7b8      	b.n	801791e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80179ac:	2000bba4 	.word	0x2000bba4
 80179b0:	2000bb9c 	.word	0x2000bb9c
 80179b4:	2000bbac 	.word	0x2000bbac
 80179b8:	2000bbb4 	.word	0x2000bbb4
 80179bc:	2000bbb0 	.word	0x2000bbb0
 80179c0:	08028f48 	.word	0x08028f48
 80179c4:	08029010 	.word	0x08029010
 80179c8:	08028f81 	.word	0x08028f81
 80179cc:	2000bbb8 	.word	0x2000bbb8
 80179d0:	2000bba8 	.word	0x2000bba8
 80179d4:	2000bba0 	.word	0x2000bba0
 80179d8:	08028fcb 	.word	0x08028fcb

080179dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80179dc:	4b04      	ldr	r3, [pc, #16]	; (80179f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80179de:	6818      	ldr	r0, [r3, #0]
 80179e0:	b120      	cbz	r0, 80179ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80179e2:	4b04      	ldr	r3, [pc, #16]	; (80179f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80179e4:	6818      	ldr	r0, [r3, #0]
 80179e6:	3000      	adds	r0, #0
 80179e8:	bf18      	it	ne
 80179ea:	2001      	movne	r0, #1
 80179ec:	4770      	bx	lr
 80179ee:	bf00      	nop
 80179f0:	2000bb9c 	.word	0x2000bb9c
 80179f4:	2000bbb0 	.word	0x2000bbb0

080179f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80179f8:	4b01      	ldr	r3, [pc, #4]	; (8017a00 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80179fa:	6818      	ldr	r0, [r3, #0]
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	2000bba4 	.word	0x2000bba4

08017a04 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017a04:	4b01      	ldr	r3, [pc, #4]	; (8017a0c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017a06:	6818      	ldr	r0, [r3, #0]
 8017a08:	4770      	bx	lr
 8017a0a:	bf00      	nop
 8017a0c:	2000bbac 	.word	0x2000bbac

08017a10 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017a10:	4b01      	ldr	r3, [pc, #4]	; (8017a18 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017a12:	6818      	ldr	r0, [r3, #0]
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	2000bbb8 	.word	0x2000bbb8

08017a1c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017a1c:	4b01      	ldr	r3, [pc, #4]	; (8017a24 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017a1e:	6818      	ldr	r0, [r3, #0]
 8017a20:	4770      	bx	lr
 8017a22:	bf00      	nop
 8017a24:	2000bba8 	.word	0x2000bba8

08017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017a28:	4b01      	ldr	r3, [pc, #4]	; (8017a30 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017a2a:	6818      	ldr	r0, [r3, #0]
 8017a2c:	4770      	bx	lr
 8017a2e:	bf00      	nop
 8017a30:	2000bba0 	.word	0x2000bba0

08017a34 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017a34:	4b01      	ldr	r3, [pc, #4]	; (8017a3c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017a36:	6818      	ldr	r0, [r3, #0]
 8017a38:	4770      	bx	lr
 8017a3a:	bf00      	nop
 8017a3c:	2000bbb4 	.word	0x2000bbb4

08017a40 <_ZN8touchgfx3LCD4initEv>:
 8017a40:	4770      	bx	lr

08017a42 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017a42:	2000      	movs	r0, #0
 8017a44:	4770      	bx	lr

08017a46 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a4a:	b091      	sub	sp, #68	; 0x44
 8017a4c:	4699      	mov	r9, r3
 8017a4e:	4617      	mov	r7, r2
 8017a50:	2500      	movs	r5, #0
 8017a52:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017a56:	4680      	mov	r8, r0
 8017a58:	a80e      	add	r0, sp, #56	; 0x38
 8017a5a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017a5c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017a60:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017a64:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017a68:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a6c:	910d      	str	r1, [sp, #52]	; 0x34
 8017a6e:	950e      	str	r5, [sp, #56]	; 0x38
 8017a70:	f001 faa4 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017a76:	f8d9 6000 	ldr.w	r6, [r9]
 8017a7a:	6818      	ldr	r0, [r3, #0]
 8017a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017a7e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017a82:	1b80      	subs	r0, r0, r6
 8017a84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a88:	eb02 0c06 	add.w	ip, r2, r6
 8017a8c:	ebab 0e0c 	sub.w	lr, fp, ip
 8017a90:	4570      	cmp	r0, lr
 8017a92:	f340 80bc 	ble.w	8017c0e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017a96:	88a1      	ldrh	r1, [r4, #4]
 8017a98:	4459      	add	r1, fp
 8017a9a:	b209      	sxth	r1, r1
 8017a9c:	458c      	cmp	ip, r1
 8017a9e:	f300 80b6 	bgt.w	8017c0e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017aa2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017aa6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017aaa:	4283      	cmp	r3, r0
 8017aac:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017ab0:	edd9 6a07 	vldr	s13, [r9, #28]
 8017ab4:	bfa8      	it	ge
 8017ab6:	4603      	movge	r3, r0
 8017ab8:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017abc:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017ac0:	45e3      	cmp	fp, ip
 8017ac2:	ee07 3a90 	vmov	s15, r3
 8017ac6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017aca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017ace:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017ad2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017ad6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017ada:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017ade:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017ae2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017ae6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017aea:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017aee:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017af2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017af6:	f340 808d 	ble.w	8017c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017afa:	fb9e f5f3 	sdiv	r5, lr, r3
 8017afe:	ee07 5a10 	vmov	s14, r5
 8017b02:	2d00      	cmp	r5, #0
 8017b04:	fb03 e415 	mls	r4, r3, r5, lr
 8017b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b0c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017b10:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017b14:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017b18:	dd12      	ble.n	8017b40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017b1a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017b1e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017b22:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017b26:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2e:	bf14      	ite	ne
 8017b30:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017b34:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017b38:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b3c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b40:	fb05 f703 	mul.w	r7, r5, r3
 8017b44:	1bc0      	subs	r0, r0, r7
 8017b46:	443e      	add	r6, r7
 8017b48:	1997      	adds	r7, r2, r6
 8017b4a:	4407      	add	r7, r0
 8017b4c:	42b9      	cmp	r1, r7
 8017b4e:	bfbc      	itt	lt
 8017b50:	1a88      	sublt	r0, r1, r2
 8017b52:	1b80      	sublt	r0, r0, r6
 8017b54:	2800      	cmp	r0, #0
 8017b56:	dd5a      	ble.n	8017c0e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017b58:	fb90 f1f3 	sdiv	r1, r0, r3
 8017b5c:	fb03 0211 	mls	r2, r3, r1, r0
 8017b60:	b90a      	cbnz	r2, 8017b66 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017b62:	3901      	subs	r1, #1
 8017b64:	461a      	mov	r2, r3
 8017b66:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017b6a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017b6e:	44a4      	add	ip, r4
 8017b70:	2900      	cmp	r1, #0
 8017b72:	bfcc      	ite	gt
 8017b74:	469e      	movgt	lr, r3
 8017b76:	4696      	movle	lr, r2
 8017b78:	fb03 c505 	mla	r5, r3, r5, ip
 8017b7c:	eef0 6a42 	vmov.f32	s13, s4
 8017b80:	eeb0 7a61 	vmov.f32	s14, s3
 8017b84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017b88:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017b8c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017b90:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017b94:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017b98:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017b9c:	ee17 0a90 	vmov	r0, s15
 8017ba0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017ba4:	fb90 f6f3 	sdiv	r6, r0, r3
 8017ba8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017bac:	ee17 0a90 	vmov	r0, s15
 8017bb0:	fb90 f7f3 	sdiv	r7, r0, r3
 8017bb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017bb8:	f8d0 8000 	ldr.w	r8, [r0]
 8017bbc:	900c      	str	r0, [sp, #48]	; 0x30
 8017bbe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017bc0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017bc4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017bc8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017bcc:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017bd0:	f8cd a020 	str.w	sl, [sp, #32]
 8017bd4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017bda:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8017bde:	9603      	str	r6, [sp, #12]
 8017be0:	44ca      	add	sl, r9
 8017be2:	9506      	str	r5, [sp, #24]
 8017be4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017be8:	ee16 0a90 	vmov	r0, s13
 8017bec:	f8cd a01c 	str.w	sl, [sp, #28]
 8017bf0:	fb07 0704 	mla	r7, r7, r4, r0
 8017bf4:	ee17 0a10 	vmov	r0, s14
 8017bf8:	fb06 0604 	mla	r6, r6, r4, r0
 8017bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017bfe:	9702      	str	r7, [sp, #8]
 8017c00:	e9cd 3600 	strd	r3, r6, [sp]
 8017c04:	ebae 0304 	sub.w	r3, lr, r4
 8017c08:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017c0c:	47a8      	blx	r5
 8017c0e:	b011      	add	sp, #68	; 0x44
 8017c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c14:	462c      	mov	r4, r5
 8017c16:	e797      	b.n	8017b48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017c18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	2500      	movs	r5, #0
 8017c1e:	9804      	ldr	r0, [sp, #16]
 8017c20:	7223      	strb	r3, [r4, #8]
 8017c22:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017c26:	8025      	strh	r5, [r4, #0]
 8017c28:	6061      	str	r1, [r4, #4]
 8017c2a:	7263      	strb	r3, [r4, #9]
 8017c2c:	60e0      	str	r0, [r4, #12]
 8017c2e:	8222      	strh	r2, [r4, #16]
 8017c30:	8265      	strh	r5, [r4, #18]
 8017c32:	82a5      	strh	r5, [r4, #20]
 8017c34:	82e5      	strh	r5, [r4, #22]
 8017c36:	8325      	strh	r5, [r4, #24]
 8017c38:	8365      	strh	r5, [r4, #26]
 8017c3a:	83a5      	strh	r5, [r4, #28]
 8017c3c:	77a5      	strb	r5, [r4, #30]
 8017c3e:	6803      	ldr	r3, [r0, #0]
 8017c40:	695b      	ldr	r3, [r3, #20]
 8017c42:	4798      	blx	r3
 8017c44:	4606      	mov	r6, r0
 8017c46:	b1f8      	cbz	r0, 8017c88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017c48:	68e0      	ldr	r0, [r4, #12]
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	6803      	ldr	r3, [r0, #0]
 8017c4e:	68db      	ldr	r3, [r3, #12]
 8017c50:	4798      	blx	r3
 8017c52:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017c56:	4605      	mov	r5, r0
 8017c58:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c5c:	7a83      	ldrb	r3, [r0, #10]
 8017c5e:	4313      	orrs	r3, r2
 8017c60:	83a3      	strh	r3, [r4, #28]
 8017c62:	7a63      	ldrb	r3, [r4, #9]
 8017c64:	2b04      	cmp	r3, #4
 8017c66:	d10f      	bne.n	8017c88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017c68:	68e0      	ldr	r0, [r4, #12]
 8017c6a:	462a      	mov	r2, r5
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	6803      	ldr	r3, [r0, #0]
 8017c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c72:	4798      	blx	r3
 8017c74:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017c78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c7c:	7aab      	ldrb	r3, [r5, #10]
 8017c7e:	4313      	orrs	r3, r2
 8017c80:	4418      	add	r0, r3
 8017c82:	8ba3      	ldrh	r3, [r4, #28]
 8017c84:	4418      	add	r0, r3
 8017c86:	83a0      	strh	r0, [r4, #28]
 8017c88:	4620      	mov	r0, r4
 8017c8a:	bd70      	pop	{r4, r5, r6, pc}

08017c8c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c90:	2400      	movs	r4, #0
 8017c92:	b085      	sub	sp, #20
 8017c94:	4681      	mov	r9, r0
 8017c96:	460f      	mov	r7, r1
 8017c98:	4692      	mov	sl, r2
 8017c9a:	469b      	mov	fp, r3
 8017c9c:	46a0      	mov	r8, r4
 8017c9e:	4626      	mov	r6, r4
 8017ca0:	4554      	cmp	r4, sl
 8017ca2:	da21      	bge.n	8017ce8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	463a      	mov	r2, r7
 8017ca8:	4659      	mov	r1, fp
 8017caa:	4648      	mov	r0, r9
 8017cac:	9303      	str	r3, [sp, #12]
 8017cae:	ab03      	add	r3, sp, #12
 8017cb0:	f003 fa88 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cb4:	4605      	mov	r5, r0
 8017cb6:	b1b8      	cbz	r0, 8017ce8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017cb8:	280a      	cmp	r0, #10
 8017cba:	d015      	beq.n	8017ce8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017cbc:	9a03      	ldr	r2, [sp, #12]
 8017cbe:	b182      	cbz	r2, 8017ce2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017cc0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017cc4:	4641      	mov	r1, r8
 8017cc6:	7a93      	ldrb	r3, [r2, #10]
 8017cc8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017ccc:	8895      	ldrh	r5, [r2, #4]
 8017cce:	4303      	orrs	r3, r0
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	9301      	str	r3, [sp, #4]
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cd8:	4798      	blx	r3
 8017cda:	9b01      	ldr	r3, [sp, #4]
 8017cdc:	4418      	add	r0, r3
 8017cde:	4406      	add	r6, r0
 8017ce0:	b2b6      	uxth	r6, r6
 8017ce2:	3401      	adds	r4, #1
 8017ce4:	46a8      	mov	r8, r5
 8017ce6:	e7db      	b.n	8017ca0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017ce8:	4630      	mov	r0, r6
 8017cea:	b005      	add	sp, #20
 8017cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017cf0 <_ZN8touchgfx3LCD23drawStringWidthInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8017cf0:	b510      	push	{r4, lr}
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	4611      	mov	r1, r2
 8017cf6:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 8017cfa:	f7ff ffc7 	bl	8017c8c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017cfe:	8823      	ldrh	r3, [r4, #0]
 8017d00:	4418      	add	r0, r3
 8017d02:	8020      	strh	r0, [r4, #0]
 8017d04:	bd10      	pop	{r4, pc}

08017d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017d06:	2a02      	cmp	r2, #2
 8017d08:	b530      	push	{r4, r5, lr}
 8017d0a:	d011      	beq.n	8017d30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017d0c:	2a03      	cmp	r2, #3
 8017d0e:	d01c      	beq.n	8017d4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017d10:	2a01      	cmp	r2, #1
 8017d12:	d10c      	bne.n	8017d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d14:	888b      	ldrh	r3, [r1, #4]
 8017d16:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017d1a:	8801      	ldrh	r1, [r0, #0]
 8017d1c:	1a9b      	subs	r3, r3, r2
 8017d1e:	8844      	ldrh	r4, [r0, #2]
 8017d20:	1a5b      	subs	r3, r3, r1
 8017d22:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017d26:	8004      	strh	r4, [r0, #0]
 8017d28:	8043      	strh	r3, [r0, #2]
 8017d2a:	8081      	strh	r1, [r0, #4]
 8017d2c:	80c2      	strh	r2, [r0, #6]
 8017d2e:	bd30      	pop	{r4, r5, pc}
 8017d30:	88cb      	ldrh	r3, [r1, #6]
 8017d32:	88c2      	ldrh	r2, [r0, #6]
 8017d34:	1a9b      	subs	r3, r3, r2
 8017d36:	8842      	ldrh	r2, [r0, #2]
 8017d38:	1a9b      	subs	r3, r3, r2
 8017d3a:	888a      	ldrh	r2, [r1, #4]
 8017d3c:	8881      	ldrh	r1, [r0, #4]
 8017d3e:	8043      	strh	r3, [r0, #2]
 8017d40:	1a52      	subs	r2, r2, r1
 8017d42:	8801      	ldrh	r1, [r0, #0]
 8017d44:	1a52      	subs	r2, r2, r1
 8017d46:	8002      	strh	r2, [r0, #0]
 8017d48:	e7f1      	b.n	8017d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d4a:	88cb      	ldrh	r3, [r1, #6]
 8017d4c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017d50:	8841      	ldrh	r1, [r0, #2]
 8017d52:	1a9b      	subs	r3, r3, r2
 8017d54:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017d58:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017d5c:	1a5b      	subs	r3, r3, r1
 8017d5e:	8045      	strh	r5, [r0, #2]
 8017d60:	8082      	strh	r2, [r0, #4]
 8017d62:	8003      	strh	r3, [r0, #0]
 8017d64:	80c4      	strh	r4, [r0, #6]
 8017d66:	e7e2      	b.n	8017d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017d68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	b086      	sub	sp, #24
 8017d6c:	ac02      	add	r4, sp, #8
 8017d6e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017d72:	461a      	mov	r2, r3
 8017d74:	ab0c      	add	r3, sp, #48	; 0x30
 8017d76:	9305      	str	r3, [sp, #20]
 8017d78:	4b0a      	ldr	r3, [pc, #40]	; (8017da4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8017d7a:	685d      	ldr	r5, [r3, #4]
 8017d7c:	1069      	asrs	r1, r5, #1
 8017d7e:	07ed      	lsls	r5, r5, #31
 8017d80:	eb00 0601 	add.w	r6, r0, r1
 8017d84:	bf46      	itte	mi
 8017d86:	681b      	ldrmi	r3, [r3, #0]
 8017d88:	5841      	ldrmi	r1, [r0, r1]
 8017d8a:	681d      	ldrpl	r5, [r3, #0]
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	bf48      	it	mi
 8017d90:	58cd      	ldrmi	r5, [r1, r3]
 8017d92:	4621      	mov	r1, r4
 8017d94:	9b05      	ldr	r3, [sp, #20]
 8017d96:	9301      	str	r3, [sp, #4]
 8017d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d9a:	9300      	str	r3, [sp, #0]
 8017d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d9e:	47a8      	blx	r5
 8017da0:	b006      	add	sp, #24
 8017da2:	bd70      	pop	{r4, r5, r6, pc}
 8017da4:	20000030 	.word	0x20000030

08017da8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>:
 8017da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dac:	b08f      	sub	sp, #60	; 0x3c
 8017dae:	4617      	mov	r7, r2
 8017db0:	4680      	mov	r8, r0
 8017db2:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8017db6:	9105      	str	r1, [sp, #20]
 8017db8:	920c      	str	r2, [sp, #48]	; 0x30
 8017dba:	9308      	str	r3, [sp, #32]
 8017dbc:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	; 0x6c
 8017dc0:	ea4f 0b62 	mov.w	fp, r2, asr #1
 8017dc4:	9206      	str	r2, [sp, #24]
 8017dc6:	eb00 050b 	add.w	r5, r0, fp
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f040 814e 	bne.w	801806c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c4>
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	4699      	mov	r9, r3
 8017dd4:	9307      	str	r3, [sp, #28]
 8017dd6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8017dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ddc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017dde:	428b      	cmp	r3, r1
 8017de0:	f280 80b1 	bge.w	8017f46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017de4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017de6:	881b      	ldrh	r3, [r3, #0]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f000 80ac 	beq.w	8017f46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017dee:	2b0a      	cmp	r3, #10
 8017df0:	f000 80a9 	beq.w	8017f46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017df4:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8017df8:	f023 0c20 	bic.w	ip, r3, #32
 8017dfc:	2901      	cmp	r1, #1
 8017dfe:	fa1f fc8c 	uxth.w	ip, ip
 8017e02:	d92c      	bls.n	8017e5e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e04:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8017e08:	d029      	beq.n	8017e5e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e0a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8017e0e:	d026      	beq.n	8017e5e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017e10:	f023 0002 	bic.w	r0, r3, #2
 8017e14:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 8017e18:	4270      	negs	r0, r6
 8017e1a:	4170      	adcs	r0, r6
 8017e1c:	f5a3 61a0 	sub.w	r1, r3, #1280	; 0x500
 8017e20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e24:	d31d      	bcc.n	8017e62 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xba>
 8017e26:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8017e2a:	f240 36af 	movw	r6, #943	; 0x3af
 8017e2e:	b289      	uxth	r1, r1
 8017e30:	42b1      	cmp	r1, r6
 8017e32:	bf8c      	ite	hi
 8017e34:	2100      	movhi	r1, #0
 8017e36:	2101      	movls	r1, #1
 8017e38:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017e3c:	f1bc 0f19 	cmp.w	ip, #25
 8017e40:	f240 82c4 	bls.w	80183cc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 8017e44:	2b7f      	cmp	r3, #127	; 0x7f
 8017e46:	f240 82ad 	bls.w	80183a4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	f040 82aa 	bne.w	80183a4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017e50:	f1b9 0f03 	cmp.w	r9, #3
 8017e54:	d83f      	bhi.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017e56:	e8df f009 	tbb	[pc, r9]
 8017e5a:	2138      	.short	0x2138
 8017e5c:	5125      	.short	0x5125
 8017e5e:	2001      	movs	r0, #1
 8017e60:	e7dc      	b.n	8017e1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x74>
 8017e62:	2101      	movs	r1, #1
 8017e64:	e7e8      	b.n	8017e38 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x90>
 8017e66:	2201      	movs	r2, #1
 8017e68:	2900      	cmp	r1, #0
 8017e6a:	d02f      	beq.n	8017ecc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x124>
 8017e6c:	f04f 0902 	mov.w	r9, #2
 8017e70:	e031      	b.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017e72:	b199      	cbz	r1, 8017e9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf4>
 8017e74:	9b06      	ldr	r3, [sp, #24]
 8017e76:	9905      	ldr	r1, [sp, #20]
 8017e78:	07d8      	lsls	r0, r3, #31
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	bf4a      	itet	mi
 8017e7e:	682b      	ldrmi	r3, [r5, #0]
 8017e80:	46a1      	movpl	r9, r4
 8017e82:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017e86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e88:	9303      	str	r3, [sp, #12]
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017e90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017e92:	9200      	str	r2, [sp, #0]
 8017e94:	463a      	mov	r2, r7
 8017e96:	47c8      	blx	r9
 8017e98:	2201      	movs	r2, #1
 8017e9a:	e7e7      	b.n	8017e6c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017e9c:	3201      	adds	r2, #1
 8017e9e:	f04f 0901 	mov.w	r9, #1
 8017ea2:	e018      	b.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017ea4:	9b06      	ldr	r3, [sp, #24]
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	07d9      	lsls	r1, r3, #31
 8017eaa:	9905      	ldr	r1, [sp, #20]
 8017eac:	bf4a      	itet	mi
 8017eae:	682b      	ldrmi	r3, [r5, #0]
 8017eb0:	46a1      	movpl	r9, r4
 8017eb2:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017eb8:	9303      	str	r3, [sp, #12]
 8017eba:	2300      	movs	r3, #0
 8017ebc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017ec0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ec2:	463a      	mov	r2, r7
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	2301      	movs	r3, #1
 8017ec8:	47c8      	blx	r9
 8017eca:	2201      	movs	r2, #1
 8017ecc:	4691      	mov	r9, r2
 8017ece:	e002      	b.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017ed0:	2900      	cmp	r1, #0
 8017ed2:	d030      	beq.n	8017f36 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x18e>
 8017ed4:	3201      	adds	r2, #1
 8017ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ed8:	2100      	movs	r1, #0
 8017eda:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017edc:	f1b9 0f01 	cmp.w	r9, #1
 8017ee0:	bf08      	it	eq
 8017ee2:	f043 0301 	orreq.w	r3, r3, #1
 8017ee6:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8017eea:	f003 f92b 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017eee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ef2:	8018      	strh	r0, [r3, #0]
 8017ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8017efa:	e76e      	b.n	8017dda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x32>
 8017efc:	2001      	movs	r0, #1
 8017efe:	9b07      	ldr	r3, [sp, #28]
 8017f00:	f103 0901 	add.w	r9, r3, #1
 8017f04:	b109      	cbz	r1, 8017f0a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x162>
 8017f06:	444a      	add	r2, r9
 8017f08:	e7b0      	b.n	8017e6c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017f0a:	b1c8      	cbz	r0, 8017f40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x198>
 8017f0c:	9b06      	ldr	r3, [sp, #24]
 8017f0e:	4628      	mov	r0, r5
 8017f10:	9905      	ldr	r1, [sp, #20]
 8017f12:	07db      	lsls	r3, r3, #31
 8017f14:	bf4a      	itet	mi
 8017f16:	682b      	ldrmi	r3, [r5, #0]
 8017f18:	46a2      	movpl	sl, r4
 8017f1a:	f853 a004 	ldrmi.w	sl, [r3, r4]
 8017f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f20:	9303      	str	r3, [sp, #12]
 8017f22:	2300      	movs	r3, #0
 8017f24:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017f28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017f2a:	463a      	mov	r2, r7
 8017f2c:	9300      	str	r3, [sp, #0]
 8017f2e:	2301      	movs	r3, #1
 8017f30:	47d0      	blx	sl
 8017f32:	464a      	mov	r2, r9
 8017f34:	e7b3      	b.n	8017e9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf6>
 8017f36:	2301      	movs	r3, #1
 8017f38:	9307      	str	r3, [sp, #28]
 8017f3a:	f04f 0903 	mov.w	r9, #3
 8017f3e:	e7ca      	b.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017f40:	f8cd 901c 	str.w	r9, [sp, #28]
 8017f44:	e7f9      	b.n	8017f3a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x192>
 8017f46:	f1b9 0f01 	cmp.w	r9, #1
 8017f4a:	d10f      	bne.n	8017f6c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1c4>
 8017f4c:	9b06      	ldr	r3, [sp, #24]
 8017f4e:	07d8      	lsls	r0, r3, #31
 8017f50:	bf4a      	itet	mi
 8017f52:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017f56:	46a1      	movpl	r9, r4
 8017f58:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f5e:	9303      	str	r3, [sp, #12]
 8017f60:	2300      	movs	r3, #0
 8017f62:	9302      	str	r3, [sp, #8]
 8017f64:	9201      	str	r2, [sp, #4]
 8017f66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017f68:	9200      	str	r2, [sp, #0]
 8017f6a:	e078      	b.n	801805e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2b6>
 8017f6c:	f1b9 0f02 	cmp.w	r9, #2
 8017f70:	d10c      	bne.n	8017f8c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1e4>
 8017f72:	9b06      	ldr	r3, [sp, #24]
 8017f74:	07de      	lsls	r6, r3, #31
 8017f76:	bf4a      	itet	mi
 8017f78:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017f7c:	46a1      	movpl	r9, r4
 8017f7e:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017f82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f84:	9303      	str	r3, [sp, #12]
 8017f86:	2300      	movs	r3, #0
 8017f88:	9302      	str	r3, [sp, #8]
 8017f8a:	e064      	b.n	8018056 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2ae>
 8017f8c:	f1b9 0f03 	cmp.w	r9, #3
 8017f90:	d12d      	bne.n	8017fee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017f92:	9b06      	ldr	r3, [sp, #24]
 8017f94:	f003 0a01 	and.w	sl, r3, #1
 8017f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d04e      	beq.n	801803c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x294>
 8017f9e:	f1ba 0f00 	cmp.w	sl, #0
 8017fa2:	d047      	beq.n	8018034 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x28c>
 8017fa4:	f858 300b 	ldr.w	r3, [r8, fp]
 8017fa8:	591b      	ldr	r3, [r3, r4]
 8017faa:	461e      	mov	r6, r3
 8017fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017fae:	f04f 0900 	mov.w	r9, #0
 8017fb2:	9905      	ldr	r1, [sp, #20]
 8017fb4:	4628      	mov	r0, r5
 8017fb6:	9303      	str	r3, [sp, #12]
 8017fb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017fba:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8017fbe:	9300      	str	r3, [sp, #0]
 8017fc0:	463a      	mov	r2, r7
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	47b0      	blx	r6
 8017fc6:	464b      	mov	r3, r9
 8017fc8:	f1ba 0f00 	cmp.w	sl, #0
 8017fcc:	d034      	beq.n	8018038 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x290>
 8017fce:	f858 200b 	ldr.w	r2, [r8, fp]
 8017fd2:	f852 a004 	ldr.w	sl, [r2, r4]
 8017fd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017fd8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017fdc:	9b07      	ldr	r3, [sp, #28]
 8017fde:	9301      	str	r3, [sp, #4]
 8017fe0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017fe2:	9300      	str	r3, [sp, #0]
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	463a      	mov	r2, r7
 8017fe8:	9905      	ldr	r1, [sp, #20]
 8017fea:	4628      	mov	r0, r5
 8017fec:	47d0      	blx	sl
 8017fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ff0:	b18b      	cbz	r3, 8018016 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x26e>
 8017ff2:	9b06      	ldr	r3, [sp, #24]
 8017ff4:	2201      	movs	r2, #1
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	07d9      	lsls	r1, r3, #31
 8017ffa:	9905      	ldr	r1, [sp, #20]
 8017ffc:	bf44      	itt	mi
 8017ffe:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8018002:	591c      	ldrmi	r4, [r3, r4]
 8018004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018006:	9303      	str	r3, [sp, #12]
 8018008:	2300      	movs	r3, #0
 801800a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801800e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018010:	9200      	str	r2, [sp, #0]
 8018012:	463a      	mov	r2, r7
 8018014:	47a0      	blx	r4
 8018016:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	2b0a      	cmp	r3, #10
 801801c:	f040 81c0 	bne.w	80183a0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f8>
 8018020:	9908      	ldr	r1, [sp, #32]
 8018022:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018024:	f003 f88e 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018028:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801802a:	8018      	strh	r0, [r3, #0]
 801802c:	2001      	movs	r0, #1
 801802e:	b00f      	add	sp, #60	; 0x3c
 8018030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018034:	4626      	mov	r6, r4
 8018036:	e7b9      	b.n	8017fac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x204>
 8018038:	46a2      	mov	sl, r4
 801803a:	e7cc      	b.n	8017fd6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x22e>
 801803c:	f1ba 0f00 	cmp.w	sl, #0
 8018040:	d012      	beq.n	8018068 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c0>
 8018042:	f858 300b 	ldr.w	r3, [r8, fp]
 8018046:	f853 9004 	ldr.w	r9, [r3, r4]
 801804a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801804c:	9303      	str	r3, [sp, #12]
 801804e:	2300      	movs	r3, #0
 8018050:	9302      	str	r3, [sp, #8]
 8018052:	9b07      	ldr	r3, [sp, #28]
 8018054:	441a      	add	r2, r3
 8018056:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018058:	9201      	str	r2, [sp, #4]
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	2301      	movs	r3, #1
 801805e:	463a      	mov	r2, r7
 8018060:	9905      	ldr	r1, [sp, #20]
 8018062:	4628      	mov	r0, r5
 8018064:	47c8      	blx	r9
 8018066:	e7c2      	b.n	8017fee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8018068:	46a1      	mov	r9, r4
 801806a:	e7ee      	b.n	801804a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2a2>
 801806c:	2300      	movs	r3, #0
 801806e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018072:	9307      	str	r3, [sp, #28]
 8018074:	461a      	mov	r2, r3
 8018076:	469a      	mov	sl, r3
 8018078:	9b06      	ldr	r3, [sp, #24]
 801807a:	f003 0301 	and.w	r3, r3, #1
 801807e:	9309      	str	r3, [sp, #36]	; 0x24
 8018080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018082:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018084:	428b      	cmp	r3, r1
 8018086:	f280 813f 	bge.w	8018308 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 801808a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801808c:	881b      	ldrh	r3, [r3, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	f000 813a 	beq.w	8018308 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 8018094:	2b0a      	cmp	r3, #10
 8018096:	f000 8137 	beq.w	8018308 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 801809a:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 801809e:	f023 0c20 	bic.w	ip, r3, #32
 80180a2:	2901      	cmp	r1, #1
 80180a4:	fa1f fc8c 	uxth.w	ip, ip
 80180a8:	d934      	bls.n	8018114 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180aa:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 80180ae:	d031      	beq.n	8018114 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180b0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80180b4:	d02e      	beq.n	8018114 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 80180b6:	f023 0102 	bic.w	r1, r3, #2
 80180ba:	f1a1 0e3c 	sub.w	lr, r1, #60	; 0x3c
 80180be:	f1de 0100 	rsbs	r1, lr, #0
 80180c2:	eb41 010e 	adc.w	r1, r1, lr
 80180c6:	f5a3 60a0 	sub.w	r0, r3, #1280	; 0x500
 80180ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80180ce:	d323      	bcc.n	8018118 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x370>
 80180d0:	f503 6096 	add.w	r0, r3, #1200	; 0x4b0
 80180d4:	b280      	uxth	r0, r0
 80180d6:	f5b0 7f6c 	cmp.w	r0, #944	; 0x3b0
 80180da:	bf38      	it	cc
 80180dc:	2101      	movcc	r1, #1
 80180de:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80180e2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80180e6:	f1bc 0f19 	cmp.w	ip, #25
 80180ea:	b280      	uxth	r0, r0
 80180ec:	d905      	bls.n	80180fa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x352>
 80180ee:	2b7f      	cmp	r3, #127	; 0x7f
 80180f0:	f240 817c 	bls.w	80183ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 80180f4:	2900      	cmp	r1, #0
 80180f6:	f040 8179 	bne.w	80183ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 80180fa:	f1ba 0f07 	cmp.w	sl, #7
 80180fe:	d818      	bhi.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018100:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8018104:	0017002a 	.word	0x0017002a
 8018108:	00170044 	.word	0x00170044
 801810c:	007e0069 	.word	0x007e0069
 8018110:	00d90075 	.word	0x00d90075
 8018114:	2101      	movs	r1, #1
 8018116:	e7d6      	b.n	80180c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x31e>
 8018118:	2101      	movs	r1, #1
 801811a:	e7e0      	b.n	80180de <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x336>
 801811c:	2300      	movs	r3, #0
 801811e:	2809      	cmp	r0, #9
 8018120:	f04f 0201 	mov.w	r2, #1
 8018124:	d92f      	bls.n	8018186 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8018126:	2b00      	cmp	r3, #0
 8018128:	bf0c      	ite	eq
 801812a:	f04f 0a02 	moveq.w	sl, #2
 801812e:	f04f 0a06 	movne.w	sl, #6
 8018132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018134:	9908      	ldr	r1, [sp, #32]
 8018136:	f1ba 0f02 	cmp.w	sl, #2
 801813a:	bf08      	it	eq
 801813c:	f043 0301 	orreq.w	r3, r3, #1
 8018140:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018142:	920d      	str	r2, [sp, #52]	; 0x34
 8018144:	930b      	str	r3, [sp, #44]	; 0x2c
 8018146:	f002 fffd 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801814a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801814c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801814e:	8018      	strh	r0, [r3, #0]
 8018150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018152:	3301      	adds	r3, #1
 8018154:	930a      	str	r3, [sp, #40]	; 0x28
 8018156:	e793      	b.n	8018080 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2d8>
 8018158:	2301      	movs	r3, #1
 801815a:	e7e0      	b.n	801811e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x376>
 801815c:	2300      	movs	r3, #0
 801815e:	2809      	cmp	r0, #9
 8018160:	d818      	bhi.n	8018194 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3ec>
 8018162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018164:	b1a3      	cbz	r3, 8018190 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3e8>
 8018166:	682b      	ldr	r3, [r5, #0]
 8018168:	f853 9004 	ldr.w	r9, [r3, r4]
 801816c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801816e:	4628      	mov	r0, r5
 8018170:	9905      	ldr	r1, [sp, #20]
 8018172:	9303      	str	r3, [sp, #12]
 8018174:	2300      	movs	r3, #0
 8018176:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801817a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801817c:	463a      	mov	r2, r7
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	2301      	movs	r3, #1
 8018182:	47c8      	blx	r9
 8018184:	2201      	movs	r2, #1
 8018186:	f04f 0a04 	mov.w	sl, #4
 801818a:	e7d2      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 801818c:	2301      	movs	r3, #1
 801818e:	e7e6      	b.n	801815e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3b6>
 8018190:	46a1      	mov	r9, r4
 8018192:	e7eb      	b.n	801816c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3c4>
 8018194:	b1b3      	cbz	r3, 80181c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41c>
 8018196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018198:	b193      	cbz	r3, 80181c0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x418>
 801819a:	682b      	ldr	r3, [r5, #0]
 801819c:	f853 9004 	ldr.w	r9, [r3, r4]
 80181a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80181a2:	4628      	mov	r0, r5
 80181a4:	9905      	ldr	r1, [sp, #20]
 80181a6:	9303      	str	r3, [sp, #12]
 80181a8:	2300      	movs	r3, #0
 80181aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80181ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80181b0:	463a      	mov	r2, r7
 80181b2:	9300      	str	r3, [sp, #0]
 80181b4:	2301      	movs	r3, #1
 80181b6:	47c8      	blx	r9
 80181b8:	2201      	movs	r2, #1
 80181ba:	f04f 0a06 	mov.w	sl, #6
 80181be:	e7b8      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181c0:	46a1      	mov	r9, r4
 80181c2:	e7ed      	b.n	80181a0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3f8>
 80181c4:	3201      	adds	r2, #1
 80181c6:	f04f 0a02 	mov.w	sl, #2
 80181ca:	e7b2      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181cc:	2100      	movs	r1, #0
 80181ce:	2809      	cmp	r0, #9
 80181d0:	d803      	bhi.n	80181da <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x432>
 80181d2:	3201      	adds	r2, #1
 80181d4:	e7d7      	b.n	8018186 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 80181d6:	2101      	movs	r1, #1
 80181d8:	e7f9      	b.n	80181ce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x426>
 80181da:	f023 0002 	bic.w	r0, r3, #2
 80181de:	282c      	cmp	r0, #44	; 0x2c
 80181e0:	f000 8085 	beq.w	80182ee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 80181e4:	2b3a      	cmp	r3, #58	; 0x3a
 80181e6:	f000 8082 	beq.w	80182ee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 80181ea:	2900      	cmp	r1, #0
 80181ec:	d04d      	beq.n	801828a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4e2>
 80181ee:	3201      	adds	r2, #1
 80181f0:	e7e3      	b.n	80181ba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 80181f2:	2300      	movs	r3, #0
 80181f4:	2809      	cmp	r0, #9
 80181f6:	d805      	bhi.n	8018204 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x45c>
 80181f8:	9b07      	ldr	r3, [sp, #28]
 80181fa:	3301      	adds	r3, #1
 80181fc:	441a      	add	r2, r3
 80181fe:	e7c2      	b.n	8018186 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8018200:	2301      	movs	r3, #1
 8018202:	e7f7      	b.n	80181f4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x44c>
 8018204:	b343      	cbz	r3, 8018258 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4b0>
 8018206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018208:	b313      	cbz	r3, 8018250 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4a8>
 801820a:	682b      	ldr	r3, [r5, #0]
 801820c:	f853 a004 	ldr.w	sl, [r3, r4]
 8018210:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018212:	f04f 0900 	mov.w	r9, #0
 8018216:	9905      	ldr	r1, [sp, #20]
 8018218:	4628      	mov	r0, r5
 801821a:	9303      	str	r3, [sp, #12]
 801821c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801821e:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8018222:	9300      	str	r3, [sp, #0]
 8018224:	463a      	mov	r2, r7
 8018226:	464b      	mov	r3, r9
 8018228:	47d0      	blx	sl
 801822a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801822c:	464b      	mov	r3, r9
 801822e:	b18a      	cbz	r2, 8018254 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ac>
 8018230:	682a      	ldr	r2, [r5, #0]
 8018232:	f852 a004 	ldr.w	sl, [r2, r4]
 8018236:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018238:	4628      	mov	r0, r5
 801823a:	9905      	ldr	r1, [sp, #20]
 801823c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018240:	9b07      	ldr	r3, [sp, #28]
 8018242:	463a      	mov	r2, r7
 8018244:	9301      	str	r3, [sp, #4]
 8018246:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	2301      	movs	r3, #1
 801824c:	47d0      	blx	sl
 801824e:	e7b3      	b.n	80181b8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x410>
 8018250:	46a2      	mov	sl, r4
 8018252:	e7dd      	b.n	8018210 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x468>
 8018254:	46a2      	mov	sl, r4
 8018256:	e7ee      	b.n	8018236 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x48e>
 8018258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801825a:	b183      	cbz	r3, 801827e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4d6>
 801825c:	682b      	ldr	r3, [r5, #0]
 801825e:	f853 9004 	ldr.w	r9, [r3, r4]
 8018262:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018264:	4628      	mov	r0, r5
 8018266:	9905      	ldr	r1, [sp, #20]
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	2300      	movs	r3, #0
 801826c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8018270:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018272:	9200      	str	r2, [sp, #0]
 8018274:	463a      	mov	r2, r7
 8018276:	47c8      	blx	r9
 8018278:	9b07      	ldr	r3, [sp, #28]
 801827a:	1c5a      	adds	r2, r3, #1
 801827c:	e7a3      	b.n	80181c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801827e:	46a1      	mov	r9, r4
 8018280:	e7ef      	b.n	8018262 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ba>
 8018282:	2809      	cmp	r0, #9
 8018284:	d9b3      	bls.n	80181ee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x446>
 8018286:	2900      	cmp	r1, #0
 8018288:	d036      	beq.n	80182f8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x550>
 801828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828c:	b17b      	cbz	r3, 80182ae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x506>
 801828e:	682b      	ldr	r3, [r5, #0]
 8018290:	f853 9004 	ldr.w	r9, [r3, r4]
 8018294:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018296:	4628      	mov	r0, r5
 8018298:	9905      	ldr	r1, [sp, #20]
 801829a:	9303      	str	r3, [sp, #12]
 801829c:	2300      	movs	r3, #0
 801829e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80182a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182a4:	9200      	str	r2, [sp, #0]
 80182a6:	463a      	mov	r2, r7
 80182a8:	47c8      	blx	r9
 80182aa:	2201      	movs	r2, #1
 80182ac:	e78b      	b.n	80181c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 80182ae:	46a1      	mov	r9, r4
 80182b0:	e7f0      	b.n	8018294 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ec>
 80182b2:	2809      	cmp	r0, #9
 80182b4:	d803      	bhi.n	80182be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x516>
 80182b6:	9b07      	ldr	r3, [sp, #28]
 80182b8:	3301      	adds	r3, #1
 80182ba:	441a      	add	r2, r3
 80182bc:	e77d      	b.n	80181ba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 80182be:	9b07      	ldr	r3, [sp, #28]
 80182c0:	f103 0901 	add.w	r9, r3, #1
 80182c4:	b1e9      	cbz	r1, 8018302 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x55a>
 80182c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c8:	b17b      	cbz	r3, 80182ea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x542>
 80182ca:	682b      	ldr	r3, [r5, #0]
 80182cc:	f853 a004 	ldr.w	sl, [r3, r4]
 80182d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80182d2:	4628      	mov	r0, r5
 80182d4:	9905      	ldr	r1, [sp, #20]
 80182d6:	9303      	str	r3, [sp, #12]
 80182d8:	2300      	movs	r3, #0
 80182da:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80182de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182e0:	9200      	str	r2, [sp, #0]
 80182e2:	463a      	mov	r2, r7
 80182e4:	47d0      	blx	sl
 80182e6:	464a      	mov	r2, r9
 80182e8:	e76d      	b.n	80181c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 80182ea:	46a2      	mov	sl, r4
 80182ec:	e7f0      	b.n	80182d0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x528>
 80182ee:	2301      	movs	r3, #1
 80182f0:	f04f 0a05 	mov.w	sl, #5
 80182f4:	9307      	str	r3, [sp, #28]
 80182f6:	e71c      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80182f8:	2301      	movs	r3, #1
 80182fa:	f04f 0a07 	mov.w	sl, #7
 80182fe:	9307      	str	r3, [sp, #28]
 8018300:	e717      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018302:	f8cd 901c 	str.w	r9, [sp, #28]
 8018306:	e714      	b.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8018308:	f1ba 0f02 	cmp.w	sl, #2
 801830c:	f43f ae31 	beq.w	8017f72 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1ca>
 8018310:	f00a 0a05 	and.w	sl, sl, #5
 8018314:	f1ba 0f04 	cmp.w	sl, #4
 8018318:	f43f ae18 	beq.w	8017f4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1a4>
 801831c:	f1ba 0f05 	cmp.w	sl, #5
 8018320:	f47f ae65 	bne.w	8017fee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8018324:	9b06      	ldr	r3, [sp, #24]
 8018326:	f003 0a01 	and.w	sl, r3, #1
 801832a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801832c:	b343      	cbz	r3, 8018380 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d8>
 801832e:	f1ba 0f00 	cmp.w	sl, #0
 8018332:	d021      	beq.n	8018378 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d0>
 8018334:	f858 300b 	ldr.w	r3, [r8, fp]
 8018338:	591b      	ldr	r3, [r3, r4]
 801833a:	461e      	mov	r6, r3
 801833c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801833e:	f04f 0900 	mov.w	r9, #0
 8018342:	9905      	ldr	r1, [sp, #20]
 8018344:	4628      	mov	r0, r5
 8018346:	9303      	str	r3, [sp, #12]
 8018348:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801834a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	463a      	mov	r2, r7
 8018352:	464b      	mov	r3, r9
 8018354:	47b0      	blx	r6
 8018356:	464b      	mov	r3, r9
 8018358:	f1ba 0f00 	cmp.w	sl, #0
 801835c:	d00e      	beq.n	801837c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d4>
 801835e:	f858 200b 	ldr.w	r2, [r8, fp]
 8018362:	f852 a004 	ldr.w	sl, [r2, r4]
 8018366:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018368:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801836c:	9b07      	ldr	r3, [sp, #28]
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	2301      	movs	r3, #1
 8018376:	e636      	b.n	8017fe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x23e>
 8018378:	4626      	mov	r6, r4
 801837a:	e7df      	b.n	801833c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x594>
 801837c:	46a2      	mov	sl, r4
 801837e:	e7f2      	b.n	8018366 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5be>
 8018380:	f1ba 0f00 	cmp.w	sl, #0
 8018384:	d00a      	beq.n	801839c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f4>
 8018386:	f858 300b 	ldr.w	r3, [r8, fp]
 801838a:	f853 9004 	ldr.w	r9, [r3, r4]
 801838e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018390:	9907      	ldr	r1, [sp, #28]
 8018392:	9303      	str	r3, [sp, #12]
 8018394:	2300      	movs	r3, #0
 8018396:	440a      	add	r2, r1
 8018398:	9302      	str	r3, [sp, #8]
 801839a:	e5e3      	b.n	8017f64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1bc>
 801839c:	46a1      	mov	r9, r4
 801839e:	e7f6      	b.n	801838e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5e6>
 80183a0:	2000      	movs	r0, #0
 80183a2:	e644      	b.n	801802e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x286>
 80183a4:	3b30      	subs	r3, #48	; 0x30
 80183a6:	2b09      	cmp	r3, #9
 80183a8:	d910      	bls.n	80183cc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 80183aa:	b978      	cbnz	r0, 80183cc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 80183ac:	f1b9 0f03 	cmp.w	r9, #3
 80183b0:	f63f ad91 	bhi.w	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 80183b4:	a301      	add	r3, pc, #4	; (adr r3, 80183bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x614>)
 80183b6:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 80183ba:	bf00      	nop
 80183bc:	08017e67 	.word	0x08017e67
 80183c0:	08017e73 	.word	0x08017e73
 80183c4:	08017ed1 	.word	0x08017ed1
 80183c8:	08017eff 	.word	0x08017eff
 80183cc:	f1b9 0f03 	cmp.w	r9, #3
 80183d0:	f63f ad81 	bhi.w	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 80183d4:	a301      	add	r3, pc, #4	; (adr r3, 80183dc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x634>)
 80183d6:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 80183da:	bf00      	nop
 80183dc:	08017e67 	.word	0x08017e67
 80183e0:	08017e73 	.word	0x08017e73
 80183e4:	08017ea5 	.word	0x08017ea5
 80183e8:	08017efd 	.word	0x08017efd
 80183ec:	f1ba 0f07 	cmp.w	sl, #7
 80183f0:	f63f ae9f 	bhi.w	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80183f4:	a601      	add	r6, pc, #4	; (adr r6, 80183fc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x654>)
 80183f6:	f856 f02a 	ldr.w	pc, [r6, sl, lsl #2]
 80183fa:	bf00      	nop
 80183fc:	0801811d 	.word	0x0801811d
 8018400:	08018133 	.word	0x08018133
 8018404:	0801815d 	.word	0x0801815d
 8018408:	08018133 	.word	0x08018133
 801840c:	080181cd 	.word	0x080181cd
 8018410:	080181f3 	.word	0x080181f3
 8018414:	08018283 	.word	0x08018283
 8018418:	080182b3 	.word	0x080182b3

0801841c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018420:	b09d      	sub	sp, #116	; 0x74
 8018422:	9114      	str	r1, [sp, #80]	; 0x50
 8018424:	9315      	str	r3, [sp, #84]	; 0x54
 8018426:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018428:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801842a:	8809      	ldrh	r1, [r1, #0]
 801842c:	889b      	ldrh	r3, [r3, #4]
 801842e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018430:	440b      	add	r3, r1
 8018432:	9210      	str	r2, [sp, #64]	; 0x40
 8018434:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018438:	b21b      	sxth	r3, r3
 801843a:	900f      	str	r0, [sp, #60]	; 0x3c
 801843c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018440:	930e      	str	r3, [sp, #56]	; 0x38
 8018442:	6833      	ldr	r3, [r6, #0]
 8018444:	7a59      	ldrb	r1, [r3, #9]
 8018446:	7a1b      	ldrb	r3, [r3, #8]
 8018448:	9113      	str	r1, [sp, #76]	; 0x4c
 801844a:	9312      	str	r3, [sp, #72]	; 0x48
 801844c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801844e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018452:	2a00      	cmp	r2, #0
 8018454:	d059      	beq.n	801850a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8018456:	7c33      	ldrb	r3, [r6, #16]
 8018458:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801845a:	2b04      	cmp	r3, #4
 801845c:	bf14      	ite	ne
 801845e:	2301      	movne	r3, #1
 8018460:	2302      	moveq	r3, #2
 8018462:	4413      	add	r3, r2
 8018464:	f04f 0800 	mov.w	r8, #0
 8018468:	930d      	str	r3, [sp, #52]	; 0x34
 801846a:	4645      	mov	r5, r8
 801846c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018470:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018474:	4293      	cmp	r3, r2
 8018476:	da75      	bge.n	8018564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8018478:	2300      	movs	r3, #0
 801847a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801847c:	6832      	ldr	r2, [r6, #0]
 801847e:	931a      	str	r3, [sp, #104]	; 0x68
 8018480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018482:	428b      	cmp	r3, r1
 8018484:	db43      	blt.n	801850e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8018486:	6813      	ldr	r3, [r2, #0]
 8018488:	4610      	mov	r0, r2
 801848a:	695b      	ldr	r3, [r3, #20]
 801848c:	4798      	blx	r3
 801848e:	4681      	mov	r9, r0
 8018490:	6830      	ldr	r0, [r6, #0]
 8018492:	aa1b      	add	r2, sp, #108	; 0x6c
 8018494:	4649      	mov	r1, r9
 8018496:	6803      	ldr	r3, [r0, #0]
 8018498:	689f      	ldr	r7, [r3, #8]
 801849a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801849e:	47b8      	blx	r7
 80184a0:	901a      	str	r0, [sp, #104]	; 0x68
 80184a2:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80184a6:	45d1      	cmp	r9, sl
 80184a8:	d045      	beq.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184aa:	f242 070b 	movw	r7, #8203	; 0x200b
 80184ae:	45b9      	cmp	r9, r7
 80184b0:	d041      	beq.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80184b2:	f1b9 0f00 	cmp.w	r9, #0
 80184b6:	f000 80ee 	beq.w	8018696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80184ba:	f1b9 0f0a 	cmp.w	r9, #10
 80184be:	d057      	beq.n	8018570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80184c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80184c2:	b383      	cbz	r3, 8018526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80184c4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80184c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80184ca:	2a00      	cmp	r2, #0
 80184cc:	f000 80d2 	beq.w	8018674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80184d0:	f1bb 0f00 	cmp.w	fp, #0
 80184d4:	d100      	bne.n	80184d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80184d6:	4444      	add	r4, r8
 80184d8:	f992 800d 	ldrsb.w	r8, [r2, #13]
 80184dc:	f1bb 0f01 	cmp.w	fp, #1
 80184e0:	f408 7380 	and.w	r3, r8, #256	; 0x100
 80184e4:	f892 800a 	ldrb.w	r8, [r2, #10]
 80184e8:	ea48 0803 	orr.w	r8, r8, r3
 80184ec:	d128      	bne.n	8018540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 80184ee:	eba4 0408 	sub.w	r4, r4, r8
 80184f2:	2d00      	cmp	r5, #0
 80184f4:	d143      	bne.n	801857e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80184f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80184f8:	eb08 0304 	add.w	r3, r8, r4
 80184fc:	4413      	add	r3, r2
 80184fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018500:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018504:	4293      	cmp	r3, r2
 8018506:	da44      	bge.n	8018592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018508:	e02b      	b.n	8018562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801850a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801850c:	e7aa      	b.n	8018464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801850e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018512:	4659      	mov	r1, fp
 8018514:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018516:	9301      	str	r3, [sp, #4]
 8018518:	ab1b      	add	r3, sp, #108	; 0x6c
 801851a:	9300      	str	r3, [sp, #0]
 801851c:	ab1a      	add	r3, sp, #104	; 0x68
 801851e:	f002 fe85 	bl	801b22c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018522:	4681      	mov	r9, r0
 8018524:	e7bd      	b.n	80184a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018526:	6830      	ldr	r0, [r6, #0]
 8018528:	6803      	ldr	r3, [r0, #0]
 801852a:	691b      	ldr	r3, [r3, #16]
 801852c:	4798      	blx	r3
 801852e:	4550      	cmp	r0, sl
 8018530:	d001      	beq.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018532:	42b8      	cmp	r0, r7
 8018534:	d1c8      	bne.n	80184c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018538:	464d      	mov	r5, r9
 801853a:	3301      	adds	r3, #1
 801853c:	930c      	str	r3, [sp, #48]	; 0x30
 801853e:	e797      	b.n	8018470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018540:	2d00      	cmp	r5, #0
 8018542:	f000 80aa 	beq.w	801869a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8018546:	f1bb 0f00 	cmp.w	fp, #0
 801854a:	d118      	bne.n	801857e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801854c:	6830      	ldr	r0, [r6, #0]
 801854e:	4629      	mov	r1, r5
 8018550:	6803      	ldr	r3, [r0, #0]
 8018552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018554:	4798      	blx	r3
 8018556:	4404      	add	r4, r0
 8018558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801855a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801855c:	1ae3      	subs	r3, r4, r3
 801855e:	4293      	cmp	r3, r2
 8018560:	dd17      	ble.n	8018592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018562:	464d      	mov	r5, r9
 8018564:	2d00      	cmp	r5, #0
 8018566:	f000 8096 	beq.w	8018696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801856a:	2d0a      	cmp	r5, #10
 801856c:	f040 8084 	bne.w	8018678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018570:	250a      	movs	r5, #10
 8018572:	fab5 f085 	clz	r0, r5
 8018576:	0940      	lsrs	r0, r0, #5
 8018578:	b01d      	add	sp, #116	; 0x74
 801857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801857e:	6830      	ldr	r0, [r6, #0]
 8018580:	4629      	mov	r1, r5
 8018582:	6803      	ldr	r3, [r0, #0]
 8018584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018586:	4798      	blx	r3
 8018588:	f1bb 0f01 	cmp.w	fp, #1
 801858c:	eba4 0400 	sub.w	r4, r4, r0
 8018590:	d0b1      	beq.n	80184f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018592:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018594:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018596:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801859a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801859e:	7b43      	ldrb	r3, [r0, #13]
 80185a0:	4421      	add	r1, r4
 80185a2:	015b      	lsls	r3, r3, #5
 80185a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80185a8:	7983      	ldrb	r3, [r0, #6]
 80185aa:	4313      	orrs	r3, r2
 80185ac:	440b      	add	r3, r1
 80185ae:	42ab      	cmp	r3, r5
 80185b0:	dbc1      	blt.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80185b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185b4:	4299      	cmp	r1, r3
 80185b6:	dabe      	bge.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80185b8:	6830      	ldr	r0, [r6, #0]
 80185ba:	42a5      	cmp	r5, r4
 80185bc:	6803      	ldr	r3, [r0, #0]
 80185be:	bfcc      	ite	gt
 80185c0:	1b2d      	subgt	r5, r5, r4
 80185c2:	2500      	movle	r5, #0
 80185c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c6:	bfc8      	it	gt
 80185c8:	b2ad      	uxthgt	r5, r5
 80185ca:	4798      	blx	r3
 80185cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80185ce:	4935      	ldr	r1, [pc, #212]	; (80186a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80185d0:	7b5a      	ldrb	r2, [r3, #13]
 80185d2:	f893 e008 	ldrb.w	lr, [r3, #8]
 80185d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80185da:	bf18      	it	ne
 80185dc:	468c      	movne	ip, r1
 80185de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80185e0:	bf08      	it	eq
 80185e2:	f04f 0c00 	moveq.w	ip, #0
 80185e6:	4408      	add	r0, r1
 80185e8:	00d1      	lsls	r1, r2, #3
 80185ea:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80185ee:	ea41 070e 	orr.w	r7, r1, lr
 80185f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80185f4:	ea4c 0707 	orr.w	r7, ip, r7
 80185f8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80185fc:	1bc7      	subs	r7, r0, r7
 80185fe:	b2bf      	uxth	r7, r7
 8018600:	fa0f fa87 	sxth.w	sl, r7
 8018604:	4551      	cmp	r1, sl
 8018606:	dd33      	ble.n	8018670 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018608:	0112      	lsls	r2, r2, #4
 801860a:	79d8      	ldrb	r0, [r3, #7]
 801860c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018610:	4302      	orrs	r2, r0
 8018612:	4492      	add	sl, r2
 8018614:	4551      	cmp	r1, sl
 8018616:	dc8e      	bgt.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018618:	1bcf      	subs	r7, r1, r7
 801861a:	468a      	mov	sl, r1
 801861c:	b2bf      	uxth	r7, r7
 801861e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018622:	6830      	ldr	r0, [r6, #0]
 8018624:	681a      	ldr	r2, [r3, #0]
 8018626:	6801      	ldr	r1, [r0, #0]
 8018628:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801862a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801862c:	9311      	str	r3, [sp, #68]	; 0x44
 801862e:	9216      	str	r2, [sp, #88]	; 0x58
 8018630:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018632:	4788      	blx	r1
 8018634:	79b1      	ldrb	r1, [r6, #6]
 8018636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018638:	910b      	str	r1, [sp, #44]	; 0x2c
 801863a:	7bb1      	ldrb	r1, [r6, #14]
 801863c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801863e:	910a      	str	r1, [sp, #40]	; 0x28
 8018640:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018644:	9109      	str	r1, [sp, #36]	; 0x24
 8018646:	68b1      	ldr	r1, [r6, #8]
 8018648:	9305      	str	r3, [sp, #20]
 801864a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801864c:	9206      	str	r2, [sp, #24]
 801864e:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018652:	4425      	add	r5, r4
 8018654:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018658:	b22d      	sxth	r5, r5
 801865a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801865c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018660:	9500      	str	r5, [sp, #0]
 8018662:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018668:	685b      	ldr	r3, [r3, #4]
 801866a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801866c:	47a8      	blx	r5
 801866e:	e762      	b.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018670:	2700      	movs	r7, #0
 8018672:	e7d4      	b.n	801861e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018674:	4690      	mov	r8, r2
 8018676:	e75e      	b.n	8018536 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018678:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801867a:	3401      	adds	r4, #1
 801867c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801867e:	429c      	cmp	r4, r3
 8018680:	f6bf af77 	bge.w	8018572 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018684:	4659      	mov	r1, fp
 8018686:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018688:	f002 fd5c 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801868c:	4605      	mov	r5, r0
 801868e:	b110      	cbz	r0, 8018696 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018690:	280a      	cmp	r0, #10
 8018692:	d1f2      	bne.n	801867a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018694:	e76c      	b.n	8018570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018696:	2500      	movs	r5, #0
 8018698:	e76b      	b.n	8018572 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801869a:	f1bb 0f00 	cmp.w	fp, #0
 801869e:	f43f af5b 	beq.w	8018558 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80186a2:	e776      	b.n	8018592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80186a4:	fffffe00 	.word	0xfffffe00

080186a8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 80186a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ac:	b08b      	sub	sp, #44	; 0x2c
 80186ae:	460e      	mov	r6, r1
 80186b0:	4690      	mov	r8, r2
 80186b2:	4699      	mov	r9, r3
 80186b4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80186b6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80186ba:	6929      	ldr	r1, [r5, #16]
 80186bc:	9009      	str	r0, [sp, #36]	; 0x24
 80186be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80186c0:	6809      	ldr	r1, [r1, #0]
 80186c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80186c4:	f7ff fae2 	bl	8017c8c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80186c8:	4604      	mov	r4, r0
 80186ca:	f1bb 0f00 	cmp.w	fp, #0
 80186ce:	d022      	beq.n	8018716 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 80186d0:	f8d8 3000 	ldr.w	r3, [r8]
 80186d4:	4640      	mov	r0, r8
 80186d6:	695b      	ldr	r3, [r3, #20]
 80186d8:	4798      	blx	r3
 80186da:	4682      	mov	sl, r0
 80186dc:	b1d8      	cbz	r0, 8018716 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 80186de:	f8d8 3000 	ldr.w	r3, [r8]
 80186e2:	4601      	mov	r1, r0
 80186e4:	4640      	mov	r0, r8
 80186e6:	68db      	ldr	r3, [r3, #12]
 80186e8:	4798      	blx	r3
 80186ea:	4602      	mov	r2, r0
 80186ec:	f990 700d 	ldrsb.w	r7, [r0, #13]
 80186f0:	692b      	ldr	r3, [r5, #16]
 80186f2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80186f6:	7a97      	ldrb	r7, [r2, #10]
 80186f8:	7c1b      	ldrb	r3, [r3, #16]
 80186fa:	4307      	orrs	r7, r0
 80186fc:	2b04      	cmp	r3, #4
 80186fe:	443c      	add	r4, r7
 8018700:	b2a4      	uxth	r4, r4
 8018702:	d108      	bne.n	8018716 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8018704:	f8d8 3000 	ldr.w	r3, [r8]
 8018708:	4651      	mov	r1, sl
 801870a:	4640      	mov	r0, r8
 801870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801870e:	4798      	blx	r3
 8018710:	4438      	add	r0, r7
 8018712:	4404      	add	r4, r0
 8018714:	b2a4      	uxth	r4, r4
 8018716:	692b      	ldr	r3, [r5, #16]
 8018718:	795b      	ldrb	r3, [r3, #5]
 801871a:	bb23      	cbnz	r3, 8018766 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xbe>
 801871c:	f1b9 0f01 	cmp.w	r9, #1
 8018720:	d102      	bne.n	8018728 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8018722:	8833      	ldrh	r3, [r6, #0]
 8018724:	4423      	add	r3, r4
 8018726:	8033      	strh	r3, [r6, #0]
 8018728:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801872a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801872e:	f8cd b018 	str.w	fp, [sp, #24]
 8018732:	9205      	str	r2, [sp, #20]
 8018734:	696a      	ldr	r2, [r5, #20]
 8018736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018738:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801873c:	692a      	ldr	r2, [r5, #16]
 801873e:	9202      	str	r2, [sp, #8]
 8018740:	68ea      	ldr	r2, [r5, #12]
 8018742:	e9cd 6200 	strd	r6, r2, [sp]
 8018746:	e9d5 1200 	ldrd	r1, r2, [r5]
 801874a:	f7ff fe67 	bl	801841c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801874e:	692b      	ldr	r3, [r5, #16]
 8018750:	795b      	ldrb	r3, [r3, #5]
 8018752:	b983      	cbnz	r3, 8018776 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xce>
 8018754:	f1b9 0f00 	cmp.w	r9, #0
 8018758:	d102      	bne.n	8018760 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 801875a:	8830      	ldrh	r0, [r6, #0]
 801875c:	4404      	add	r4, r0
 801875e:	8034      	strh	r4, [r6, #0]
 8018760:	b00b      	add	sp, #44	; 0x2c
 8018762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018766:	2b01      	cmp	r3, #1
 8018768:	d1de      	bne.n	8018728 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 801876a:	f1b9 0f00 	cmp.w	r9, #0
 801876e:	d1db      	bne.n	8018728 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8018770:	8833      	ldrh	r3, [r6, #0]
 8018772:	1b1b      	subs	r3, r3, r4
 8018774:	e7d7      	b.n	8018726 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x7e>
 8018776:	2b01      	cmp	r3, #1
 8018778:	d1f2      	bne.n	8018760 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 801877a:	f1b9 0f01 	cmp.w	r9, #1
 801877e:	d1ef      	bne.n	8018760 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 8018780:	8830      	ldrh	r0, [r6, #0]
 8018782:	1b04      	subs	r4, r0, r4
 8018784:	e7eb      	b.n	801875e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb6>

08018786 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018786:	b530      	push	{r4, r5, lr}
 8018788:	8a44      	ldrh	r4, [r0, #18]
 801878a:	8ac5      	ldrh	r5, [r0, #22]
 801878c:	82c3      	strh	r3, [r0, #22]
 801878e:	442c      	add	r4, r5
 8018790:	1ae4      	subs	r4, r4, r3
 8018792:	8b03      	ldrh	r3, [r0, #24]
 8018794:	8244      	strh	r4, [r0, #18]
 8018796:	8a84      	ldrh	r4, [r0, #20]
 8018798:	4422      	add	r2, r4
 801879a:	440c      	add	r4, r1
 801879c:	1a59      	subs	r1, r3, r1
 801879e:	8342      	strh	r2, [r0, #26]
 80187a0:	8284      	strh	r4, [r0, #20]
 80187a2:	8301      	strh	r1, [r0, #24]
 80187a4:	bd30      	pop	{r4, r5, pc}

080187a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80187a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187aa:	7a45      	ldrb	r5, [r0, #9]
 80187ac:	b085      	sub	sp, #20
 80187ae:	4604      	mov	r4, r0
 80187b0:	4689      	mov	r9, r1
 80187b2:	1eeb      	subs	r3, r5, #3
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	b329      	cbz	r1, 8018804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80187b8:	2b01      	cmp	r3, #1
 80187ba:	d921      	bls.n	8018800 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 80187bc:	1e69      	subs	r1, r5, #1
 80187be:	f1d1 0b00 	rsbs	fp, r1, #0
 80187c2:	eb4b 0b01 	adc.w	fp, fp, r1
 80187c6:	1eaa      	subs	r2, r5, #2
 80187c8:	2500      	movs	r5, #0
 80187ca:	4253      	negs	r3, r2
 80187cc:	9500      	str	r5, [sp, #0]
 80187ce:	4153      	adcs	r3, r2
 80187d0:	9301      	str	r3, [sp, #4]
 80187d2:	2600      	movs	r6, #0
 80187d4:	f242 080b 	movw	r8, #8203	; 0x200b
 80187d8:	8266      	strh	r6, [r4, #18]
 80187da:	82a6      	strh	r6, [r4, #20]
 80187dc:	2300      	movs	r3, #0
 80187de:	68e2      	ldr	r2, [r4, #12]
 80187e0:	7a21      	ldrb	r1, [r4, #8]
 80187e2:	9303      	str	r3, [sp, #12]
 80187e4:	ab03      	add	r3, sp, #12
 80187e6:	6860      	ldr	r0, [r4, #4]
 80187e8:	8827      	ldrh	r7, [r4, #0]
 80187ea:	f002 fceb 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80187ee:	8020      	strh	r0, [r4, #0]
 80187f0:	b9b0      	cbnz	r0, 8018820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 80187f2:	8b22      	ldrh	r2, [r4, #24]
 80187f4:	2300      	movs	r3, #0
 80187f6:	4611      	mov	r1, r2
 80187f8:	4620      	mov	r0, r4
 80187fa:	f7ff ffc4 	bl	8018786 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80187fe:	e062      	b.n	80188c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018800:	468b      	mov	fp, r1
 8018802:	e7e0      	b.n	80187c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8018804:	2b01      	cmp	r3, #1
 8018806:	f105 35ff 	add.w	r5, r5, #4294967295
 801880a:	9101      	str	r1, [sp, #4]
 801880c:	468b      	mov	fp, r1
 801880e:	bf8c      	ite	hi
 8018810:	2300      	movhi	r3, #0
 8018812:	2301      	movls	r3, #1
 8018814:	2d01      	cmp	r5, #1
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	bf8c      	ite	hi
 801881a:	2500      	movhi	r5, #0
 801881c:	2501      	movls	r5, #1
 801881e:	e7d8      	b.n	80187d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018820:	8ae3      	ldrh	r3, [r4, #22]
 8018822:	280a      	cmp	r0, #10
 8018824:	f103 0301 	add.w	r3, r3, #1
 8018828:	82e3      	strh	r3, [r4, #22]
 801882a:	d0e2      	beq.n	80187f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801882c:	9a03      	ldr	r2, [sp, #12]
 801882e:	b972      	cbnz	r2, 801884e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018830:	4540      	cmp	r0, r8
 8018832:	d1d3      	bne.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018834:	8823      	ldrh	r3, [r4, #0]
 8018836:	8b21      	ldrh	r1, [r4, #24]
 8018838:	2b20      	cmp	r3, #32
 801883a:	d001      	beq.n	8018840 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801883c:	4543      	cmp	r3, r8
 801883e:	d11d      	bne.n	801887c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018840:	2f20      	cmp	r7, #32
 8018842:	d002      	beq.n	801884a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018844:	4547      	cmp	r7, r8
 8018846:	bf18      	it	ne
 8018848:	460e      	movne	r6, r1
 801884a:	2001      	movs	r0, #1
 801884c:	e017      	b.n	801887e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801884e:	4540      	cmp	r0, r8
 8018850:	d012      	beq.n	8018878 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018852:	8893      	ldrh	r3, [r2, #4]
 8018854:	4639      	mov	r1, r7
 8018856:	8023      	strh	r3, [r4, #0]
 8018858:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801885c:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018860:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8018864:	ea4a 0a00 	orr.w	sl, sl, r0
 8018868:	68e0      	ldr	r0, [r4, #12]
 801886a:	6803      	ldr	r3, [r0, #0]
 801886c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801886e:	4798      	blx	r3
 8018870:	eb0a 0200 	add.w	r2, sl, r0
 8018874:	b292      	uxth	r2, r2
 8018876:	e7dd      	b.n	8018834 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018878:	2200      	movs	r2, #0
 801887a:	e7db      	b.n	8018834 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801887c:	2000      	movs	r0, #0
 801887e:	440a      	add	r2, r1
 8018880:	8aa3      	ldrh	r3, [r4, #20]
 8018882:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018886:	b292      	uxth	r2, r2
 8018888:	8322      	strh	r2, [r4, #24]
 801888a:	4413      	add	r3, r2
 801888c:	f1b9 0f00 	cmp.w	r9, #0
 8018890:	d022      	beq.n	80188d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018892:	f1bb 0f00 	cmp.w	fp, #0
 8018896:	d102      	bne.n	801889e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8018898:	9901      	ldr	r1, [sp, #4]
 801889a:	b149      	cbz	r1, 80188b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801889c:	b140      	cbz	r0, 80188b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801889e:	8ba1      	ldrh	r1, [r4, #28]
 80188a0:	4419      	add	r1, r3
 80188a2:	458c      	cmp	ip, r1
 80188a4:	da12      	bge.n	80188cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80188a6:	8a61      	ldrh	r1, [r4, #18]
 80188a8:	b181      	cbz	r1, 80188cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80188aa:	4563      	cmp	r3, ip
 80188ac:	dd96      	ble.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188ae:	e004      	b.n	80188ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 80188b0:	4563      	cmp	r3, ip
 80188b2:	dd93      	ble.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188b4:	8a63      	ldrh	r3, [r4, #18]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d090      	beq.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188ba:	2301      	movs	r3, #1
 80188bc:	8ba2      	ldrh	r2, [r4, #28]
 80188be:	77a3      	strb	r3, [r4, #30]
 80188c0:	8b63      	ldrh	r3, [r4, #26]
 80188c2:	4413      	add	r3, r2
 80188c4:	8363      	strh	r3, [r4, #26]
 80188c6:	b005      	add	sp, #20
 80188c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188cc:	2300      	movs	r3, #0
 80188ce:	4611      	mov	r1, r2
 80188d0:	4620      	mov	r0, r4
 80188d2:	f7ff ff58 	bl	8018786 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80188d6:	e781      	b.n	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188d8:	4563      	cmp	r3, ip
 80188da:	dd16      	ble.n	801890a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 80188dc:	9b00      	ldr	r3, [sp, #0]
 80188de:	b113      	cbz	r3, 80188e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80188e0:	2301      	movs	r3, #1
 80188e2:	460a      	mov	r2, r1
 80188e4:	e787      	b.n	80187f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 80188e6:	2d00      	cmp	r5, #0
 80188e8:	f43f af78 	beq.w	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188ec:	2800      	cmp	r0, #0
 80188ee:	f47f af75 	bne.w	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80188f2:	2f20      	cmp	r7, #32
 80188f4:	d001      	beq.n	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 80188f6:	4547      	cmp	r7, r8
 80188f8:	d102      	bne.n	8018900 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 80188fa:	2301      	movs	r3, #1
 80188fc:	4632      	mov	r2, r6
 80188fe:	e77b      	b.n	80187f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018900:	8a63      	ldrh	r3, [r4, #18]
 8018902:	2b00      	cmp	r3, #0
 8018904:	f43f af6a 	beq.w	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018908:	e7dd      	b.n	80188c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801890a:	2800      	cmp	r0, #0
 801890c:	f47f af66 	bne.w	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018910:	2f20      	cmp	r7, #32
 8018912:	d002      	beq.n	801891a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8018914:	4547      	cmp	r7, r8
 8018916:	f47f af61 	bne.w	80187dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801891a:	2301      	movs	r3, #1
 801891c:	4632      	mov	r2, r6
 801891e:	e7d7      	b.n	80188d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018920 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018920:	b570      	push	{r4, r5, r6, lr}
 8018922:	4606      	mov	r6, r0
 8018924:	b08a      	sub	sp, #40	; 0x28
 8018926:	4615      	mov	r5, r2
 8018928:	b191      	cbz	r1, 8018950 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801892a:	2401      	movs	r4, #1
 801892c:	e9cd 3100 	strd	r3, r1, [sp]
 8018930:	4613      	mov	r3, r2
 8018932:	4601      	mov	r1, r0
 8018934:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018938:	a802      	add	r0, sp, #8
 801893a:	f7ff f96d 	bl	8017c18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801893e:	2100      	movs	r1, #0
 8018940:	a802      	add	r0, sp, #8
 8018942:	f7ff ff30 	bl	80187a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018946:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801894a:	b173      	cbz	r3, 801896a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801894c:	3401      	adds	r4, #1
 801894e:	e7f6      	b.n	801893e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018950:	2401      	movs	r4, #1
 8018952:	4611      	mov	r1, r2
 8018954:	f002 fbf6 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018958:	280a      	cmp	r0, #10
 801895a:	4629      	mov	r1, r5
 801895c:	4630      	mov	r0, r6
 801895e:	bf08      	it	eq
 8018960:	3401      	addeq	r4, #1
 8018962:	f002 fbef 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018966:	2800      	cmp	r0, #0
 8018968:	d1f6      	bne.n	8018958 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801896a:	b2a0      	uxth	r0, r4
 801896c:	b00a      	add	sp, #40	; 0x28
 801896e:	bd70      	pop	{r4, r5, r6, pc}

08018970 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018974:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8018978:	4689      	mov	r9, r1
 801897a:	461c      	mov	r4, r3
 801897c:	f8dd a2c8 	ldr.w	sl, [sp, #712]	; 0x2c8
 8018980:	900a      	str	r0, [sp, #40]	; 0x28
 8018982:	f1ba 0f00 	cmp.w	sl, #0
 8018986:	f000 80eb 	beq.w	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	2b00      	cmp	r3, #0
 801898e:	f000 80e7 	beq.w	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018992:	7ba3      	ldrb	r3, [r4, #14]
 8018994:	2b00      	cmp	r3, #0
 8018996:	f000 80e3 	beq.w	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801899a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 801899e:	6810      	ldr	r0, [r2, #0]
 80189a0:	6851      	ldr	r1, [r2, #4]
 80189a2:	2600      	movs	r6, #0
 80189a4:	465b      	mov	r3, fp
 80189a6:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80189aa:	7965      	ldrb	r5, [r4, #5]
 80189ac:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80189b0:	79a2      	ldrb	r2, [r4, #6]
 80189b2:	9610      	str	r6, [sp, #64]	; 0x40
 80189b4:	c303      	stmia	r3!, {r0, r1}
 80189b6:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80189ba:	a910      	add	r1, sp, #64	; 0x40
 80189bc:	4658      	mov	r0, fp
 80189be:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 80189c2:	f7ff f9a0 	bl	8017d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80189c6:	a910      	add	r1, sp, #64	; 0x40
 80189c8:	79a2      	ldrb	r2, [r4, #6]
 80189ca:	4608      	mov	r0, r1
 80189cc:	f7ff f99b 	bl	8017d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80189d0:	2d00      	cmp	r5, #0
 80189d2:	f040 80a7 	bne.w	8018b24 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 80189d6:	7923      	ldrb	r3, [r4, #4]
 80189d8:	1b9b      	subs	r3, r3, r6
 80189da:	bf18      	it	ne
 80189dc:	2301      	movne	r3, #1
 80189de:	461e      	mov	r6, r3
 80189e0:	9309      	str	r3, [sp, #36]	; 0x24
 80189e2:	a824      	add	r0, sp, #144	; 0x90
 80189e4:	f002 fa6c 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 80189e8:	6820      	ldr	r0, [r4, #0]
 80189ea:	6803      	ldr	r3, [r0, #0]
 80189ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ee:	4798      	blx	r3
 80189f0:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 80189f2:	4603      	mov	r3, r0
 80189f4:	4651      	mov	r1, sl
 80189f6:	a824      	add	r0, sp, #144	; 0x90
 80189f8:	f002 fa7f 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80189fc:	a83a      	add	r0, sp, #232	; 0xe8
 80189fe:	f002 fa5f 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a02:	6820      	ldr	r0, [r4, #0]
 8018a04:	6803      	ldr	r3, [r0, #0]
 8018a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a08:	4798      	blx	r3
 8018a0a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	4651      	mov	r1, sl
 8018a10:	a83a      	add	r0, sp, #232	; 0xe8
 8018a12:	f002 fa72 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a16:	a850      	add	r0, sp, #320	; 0x140
 8018a18:	f002 fa52 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a1c:	6820      	ldr	r0, [r4, #0]
 8018a1e:	6803      	ldr	r3, [r0, #0]
 8018a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a22:	4798      	blx	r3
 8018a24:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a26:	4603      	mov	r3, r0
 8018a28:	4651      	mov	r1, sl
 8018a2a:	a850      	add	r0, sp, #320	; 0x140
 8018a2c:	f002 fa65 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a30:	a866      	add	r0, sp, #408	; 0x198
 8018a32:	f002 fa45 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a36:	a87c      	add	r0, sp, #496	; 0x1f0
 8018a38:	f002 fa42 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a3c:	b19e      	cbz	r6, 8018a66 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8018a3e:	6820      	ldr	r0, [r4, #0]
 8018a40:	6803      	ldr	r3, [r0, #0]
 8018a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a44:	4798      	blx	r3
 8018a46:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a48:	4603      	mov	r3, r0
 8018a4a:	4651      	mov	r1, sl
 8018a4c:	a866      	add	r0, sp, #408	; 0x198
 8018a4e:	f002 fa54 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a52:	6820      	ldr	r0, [r4, #0]
 8018a54:	6803      	ldr	r3, [r0, #0]
 8018a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a58:	4798      	blx	r3
 8018a5a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	4651      	mov	r1, sl
 8018a60:	a87c      	add	r0, sp, #496	; 0x1f0
 8018a62:	f002 fa4a 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018a66:	6820      	ldr	r0, [r4, #0]
 8018a68:	6803      	ldr	r3, [r0, #0]
 8018a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a6c:	4798      	blx	r3
 8018a6e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018a72:	eb07 0800 	add.w	r8, r7, r0
 8018a76:	f1b8 0f00 	cmp.w	r8, #0
 8018a7a:	dd5e      	ble.n	8018b3a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8018a7c:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8018a80:	4283      	cmp	r3, r0
 8018a82:	db5a      	blt.n	8018b3a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8018a84:	441f      	add	r7, r3
 8018a86:	fb97 f7f8 	sdiv	r7, r7, r8
 8018a8a:	a892      	add	r0, sp, #584	; 0x248
 8018a8c:	f002 fa18 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8018a90:	7c23      	ldrb	r3, [r4, #16]
 8018a92:	b14b      	cbz	r3, 8018aa8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018a94:	6820      	ldr	r0, [r4, #0]
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a9a:	4798      	blx	r3
 8018a9c:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	4651      	mov	r1, sl
 8018aa2:	a892      	add	r0, sp, #584	; 0x248
 8018aa4:	f002 fa29 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018aa8:	7c21      	ldrb	r1, [r4, #16]
 8018aaa:	a81c      	add	r0, sp, #112	; 0x70
 8018aac:	7963      	ldrb	r3, [r4, #5]
 8018aae:	9101      	str	r1, [sp, #4]
 8018ab0:	6821      	ldr	r1, [r4, #0]
 8018ab2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8018ab6:	9100      	str	r1, [sp, #0]
 8018ab8:	a992      	add	r1, sp, #584	; 0x248
 8018aba:	f7ff f8ad 	bl	8017c18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018abe:	7c23      	ldrb	r3, [r4, #16]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d051      	beq.n	8018b68 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018ac4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018aca:	2f00      	cmp	r7, #0
 8018acc:	dd78      	ble.n	8018bc0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8018ace:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8018ad2:	a81c      	add	r0, sp, #112	; 0x70
 8018ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ad6:	428b      	cmp	r3, r1
 8018ad8:	bfd4      	ite	le
 8018ada:	2100      	movle	r1, #0
 8018adc:	2101      	movgt	r1, #1
 8018ade:	f7ff fe62 	bl	80187a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018ae2:	f8bd a082 	ldrh.w	sl, [sp, #130]	; 0x82
 8018ae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018aea:	fa1f fa83 	uxth.w	sl, r3
 8018aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018af2:	459a      	cmp	sl, r3
 8018af4:	d023      	beq.n	8018b3e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ce>
 8018af6:	4629      	mov	r1, r5
 8018af8:	a824      	add	r0, sp, #144	; 0x90
 8018afa:	f002 fb23 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018afe:	4629      	mov	r1, r5
 8018b00:	a83a      	add	r0, sp, #232	; 0xe8
 8018b02:	f002 fb1f 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b06:	4629      	mov	r1, r5
 8018b08:	a850      	add	r0, sp, #320	; 0x140
 8018b0a:	f002 fb1b 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b0e:	2e00      	cmp	r6, #0
 8018b10:	d0e9      	beq.n	8018ae6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8018b12:	4629      	mov	r1, r5
 8018b14:	a866      	add	r0, sp, #408	; 0x198
 8018b16:	f002 fb15 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b1a:	4629      	mov	r1, r5
 8018b1c:	a87c      	add	r0, sp, #496	; 0x1f0
 8018b1e:	f002 fb11 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b22:	e7e0      	b.n	8018ae6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8018b24:	2d01      	cmp	r5, #1
 8018b26:	d105      	bne.n	8018b34 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c4>
 8018b28:	7926      	ldrb	r6, [r4, #4]
 8018b2a:	9509      	str	r5, [sp, #36]	; 0x24
 8018b2c:	3e02      	subs	r6, #2
 8018b2e:	bf18      	it	ne
 8018b30:	2601      	movne	r6, #1
 8018b32:	e756      	b.n	80189e2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8018b34:	2301      	movs	r3, #1
 8018b36:	9309      	str	r3, [sp, #36]	; 0x24
 8018b38:	e753      	b.n	80189e2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 8018b3a:	2700      	movs	r7, #0
 8018b3c:	e7a5      	b.n	8018a8a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11a>
 8018b3e:	fa1f f388 	uxth.w	r3, r8
 8018b42:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018b46:	3f01      	subs	r7, #1
 8018b48:	441a      	add	r2, r3
 8018b4a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018b4e:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018b52:	1ad3      	subs	r3, r2, r3
 8018b54:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018b58:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1b4      	bne.n	8018aca <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018b60:	f50d 7d29 	add.w	sp, sp, #676	; 0x2a4
 8018b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b68:	2f00      	cmp	r7, #0
 8018b6a:	dd29      	ble.n	8018bc0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	a824      	add	r0, sp, #144	; 0x90
 8018b70:	f002 fae8 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b74:	4629      	mov	r1, r5
 8018b76:	4682      	mov	sl, r0
 8018b78:	a83a      	add	r0, sp, #232	; 0xe8
 8018b7a:	f002 fae3 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b7e:	4629      	mov	r1, r5
 8018b80:	a850      	add	r0, sp, #320	; 0x140
 8018b82:	f002 fadf 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b86:	b13e      	cbz	r6, 8018b98 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x228>
 8018b88:	4629      	mov	r1, r5
 8018b8a:	a866      	add	r0, sp, #408	; 0x198
 8018b8c:	f002 fada 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b90:	4629      	mov	r1, r5
 8018b92:	a87c      	add	r0, sp, #496	; 0x1f0
 8018b94:	f002 fad6 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b98:	f1ba 0f00 	cmp.w	sl, #0
 8018b9c:	d0e0      	beq.n	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018b9e:	f1ba 0f0a 	cmp.w	sl, #10
 8018ba2:	d1e1      	bne.n	8018b68 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018ba4:	fa1f f388 	uxth.w	r3, r8
 8018ba8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018bac:	3f01      	subs	r7, #1
 8018bae:	441a      	add	r2, r3
 8018bb0:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018bb4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018bb8:	1ad3      	subs	r3, r2, r3
 8018bba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018bbe:	e7d3      	b.n	8018b68 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	4629      	mov	r1, r5
 8018bc4:	a824      	add	r0, sp, #144	; 0x90
 8018bc6:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
 8018bca:	9316      	str	r3, [sp, #88]	; 0x58
 8018bcc:	ab3a      	add	r3, sp, #232	; 0xe8
 8018bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8018bd0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018bd4:	e9cd b419 	strd	fp, r4, [sp, #100]	; 0x64
 8018bd8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8018bdc:	f002 fab2 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018be0:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018be4:	b12e      	cbz	r6, 8018bf2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 8018be6:	4629      	mov	r1, r5
 8018be8:	a866      	add	r0, sp, #408	; 0x198
 8018bea:	f002 faab 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018bee:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8018bf2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8018bf8:	f04f 0300 	mov.w	r3, #0
 8018bfc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018c00:	7c23      	ldrb	r3, [r4, #16]
 8018c02:	b14b      	cbz	r3, 8018c18 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 8018c04:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8018c08:	a81c      	add	r0, sp, #112	; 0x70
 8018c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c0c:	428b      	cmp	r3, r1
 8018c0e:	bfd4      	ite	le
 8018c10:	2100      	movle	r1, #0
 8018c12:	2101      	movgt	r1, #1
 8018c14:	f7ff fdc7 	bl	80187a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	f000 809e 	beq.w	8018d5c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ec>
 8018c20:	2e00      	cmp	r6, #0
 8018c22:	f000 8097 	beq.w	8018d54 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3e4>
 8018c26:	7c22      	ldrb	r2, [r4, #16]
 8018c28:	b9d2      	cbnz	r2, 8018c60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2f0>
 8018c2a:	494f      	ldr	r1, [pc, #316]	; (8018d68 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f8>)
 8018c2c:	ab12      	add	r3, sp, #72	; 0x48
 8018c2e:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 8018c32:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8018c36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018c3a:	9205      	str	r2, [sp, #20]
 8018c3c:	aa03      	add	r2, sp, #12
 8018c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018c42:	ab7c      	add	r3, sp, #496	; 0x1f0
 8018c44:	e882 0003 	stmia.w	r2, {r0, r1}
 8018c48:	9302      	str	r3, [sp, #8]
 8018c4a:	ab66      	add	r3, sp, #408	; 0x198
 8018c4c:	6822      	ldr	r2, [r4, #0]
 8018c4e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018c52:	9301      	str	r3, [sp, #4]
 8018c54:	ab0d      	add	r3, sp, #52	; 0x34
 8018c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018c58:	9300      	str	r3, [sp, #0]
 8018c5a:	462b      	mov	r3, r5
 8018c5c:	f7ff f8a4 	bl	8017da8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018c60:	7c23      	ldrb	r3, [r4, #16]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d064      	beq.n	8018d30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c0>
 8018c66:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
 8018c6a:	7921      	ldrb	r1, [r4, #4]
 8018c6c:	2d00      	cmp	r5, #0
 8018c6e:	d166      	bne.n	8018d3e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ce>
 8018c70:	2901      	cmp	r1, #1
 8018c72:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018c76:	d15e      	bne.n	8018d36 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c6>
 8018c78:	1a9b      	subs	r3, r3, r2
 8018c7a:	2202      	movs	r2, #2
 8018c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c80:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018c84:	7c23      	ldrb	r3, [r4, #16]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d06a      	beq.n	8018d60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f0>
 8018c8a:	f8bd 1082 	ldrh.w	r1, [sp, #130]	; 0x82
 8018c8e:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
 8018c92:	4836      	ldr	r0, [pc, #216]	; (8018d6c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3fc>)
 8018c94:	af16      	add	r7, sp, #88	; 0x58
 8018c96:	aa14      	add	r2, sp, #80	; 0x50
 8018c98:	9105      	str	r1, [sp, #20]
 8018c9a:	9014      	str	r0, [sp, #80]	; 0x50
 8018c9c:	2000      	movs	r0, #0
 8018c9e:	f50d 79a0 	add.w	r9, sp, #320	; 0x140
 8018ca2:	f10d 0a32 	add.w	sl, sp, #50	; 0x32
 8018ca6:	9015      	str	r0, [sp, #84]	; 0x54
 8018ca8:	e9cd 3706 	strd	r3, r7, [sp, #24]
 8018cac:	ab03      	add	r3, sp, #12
 8018cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8018cb6:	ab24      	add	r3, sp, #144	; 0x90
 8018cb8:	6822      	ldr	r2, [r4, #0]
 8018cba:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018cbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8018cc2:	9301      	str	r3, [sp, #4]
 8018cc4:	462b      	mov	r3, r5
 8018cc6:	f8cd a000 	str.w	sl, [sp]
 8018cca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018ccc:	f7ff f86c 	bl	8017da8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018cd0:	8939      	ldrh	r1, [r7, #8]
 8018cd2:	fa1f f388 	uxth.w	r3, r8
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	440b      	add	r3, r1
 8018cda:	813b      	strh	r3, [r7, #8]
 8018cdc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8018ce0:	1a9b      	subs	r3, r3, r2
 8018ce2:	7c22      	ldrb	r2, [r4, #16]
 8018ce4:	b21b      	sxth	r3, r3
 8018ce6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018cea:	b112      	cbz	r2, 8018cf2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x382>
 8018cec:	4543      	cmp	r3, r8
 8018cee:	f6ff af37 	blt.w	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018cf2:	b160      	cbz	r0, 8018d0e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018cf4:	7961      	ldrb	r1, [r4, #5]
 8018cf6:	a83a      	add	r0, sp, #232	; 0xe8
 8018cf8:	f002 fa24 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018cfc:	7961      	ldrb	r1, [r4, #5]
 8018cfe:	4648      	mov	r0, r9
 8018d00:	f002 fa20 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d04:	b11e      	cbz	r6, 8018d0e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018d06:	4629      	mov	r1, r5
 8018d08:	a87c      	add	r0, sp, #496	; 0x1f0
 8018d0a:	f002 fa1b 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d0e:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8018d12:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018d16:	4413      	add	r3, r2
 8018d18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018d1c:	b21b      	sxth	r3, r3
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	f73f af1e 	bgt.w	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018d24:	f8ba 3000 	ldrh.w	r3, [sl]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	f47f af65 	bne.w	8018bf8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 8018d2e:	e717      	b.n	8018b60 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018d30:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8018d34:	e799      	b.n	8018c6a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2fa>
 8018d36:	7be1      	ldrb	r1, [r4, #15]
 8018d38:	1a5b      	subs	r3, r3, r1
 8018d3a:	1a9b      	subs	r3, r3, r2
 8018d3c:	e7a0      	b.n	8018c80 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d3e:	2901      	cmp	r1, #1
 8018d40:	d103      	bne.n	8018d4a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3da>
 8018d42:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018d46:	4413      	add	r3, r2
 8018d48:	e797      	b.n	8018c7a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x30a>
 8018d4a:	2900      	cmp	r1, #0
 8018d4c:	d19a      	bne.n	8018c84 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x314>
 8018d4e:	7be3      	ldrb	r3, [r4, #15]
 8018d50:	4413      	add	r3, r2
 8018d52:	e795      	b.n	8018c80 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d54:	7be2      	ldrb	r2, [r4, #15]
 8018d56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018d5a:	e7ee      	b.n	8018d3a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ca>
 8018d5c:	7be3      	ldrb	r3, [r4, #15]
 8018d5e:	e78f      	b.n	8018c80 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018d60:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018d64:	e795      	b.n	8018c92 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x322>
 8018d66:	bf00      	nop
 8018d68:	08017cf1 	.word	0x08017cf1
 8018d6c:	080186a9 	.word	0x080186a9

08018d70 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018d70:	2b02      	cmp	r3, #2
 8018d72:	b510      	push	{r4, lr}
 8018d74:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018d78:	d00b      	beq.n	8018d92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018d7a:	2b03      	cmp	r3, #3
 8018d7c:	d00e      	beq.n	8018d9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018d7e:	2b01      	cmp	r3, #1
 8018d80:	d001      	beq.n	8018d86 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018d82:	1860      	adds	r0, r4, r1
 8018d84:	bd10      	pop	{r4, pc}
 8018d86:	8880      	ldrh	r0, [r0, #4]
 8018d88:	4420      	add	r0, r4
 8018d8a:	b200      	sxth	r0, r0
 8018d8c:	1a80      	subs	r0, r0, r2
 8018d8e:	3801      	subs	r0, #1
 8018d90:	e7f8      	b.n	8018d84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018d92:	8880      	ldrh	r0, [r0, #4]
 8018d94:	4420      	add	r0, r4
 8018d96:	b200      	sxth	r0, r0
 8018d98:	1a40      	subs	r0, r0, r1
 8018d9a:	e7f8      	b.n	8018d8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018d9c:	18a0      	adds	r0, r4, r2
 8018d9e:	e7f1      	b.n	8018d84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018da0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018da0:	2b02      	cmp	r3, #2
 8018da2:	b510      	push	{r4, lr}
 8018da4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018da8:	d006      	beq.n	8018db8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018daa:	2b03      	cmp	r3, #3
 8018dac:	d00a      	beq.n	8018dc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	bf14      	ite	ne
 8018db2:	18a0      	addne	r0, r4, r2
 8018db4:	1860      	addeq	r0, r4, r1
 8018db6:	bd10      	pop	{r4, pc}
 8018db8:	88c0      	ldrh	r0, [r0, #6]
 8018dba:	4420      	add	r0, r4
 8018dbc:	b200      	sxth	r0, r0
 8018dbe:	1a80      	subs	r0, r0, r2
 8018dc0:	3801      	subs	r0, #1
 8018dc2:	e7f8      	b.n	8018db6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018dc4:	88c0      	ldrh	r0, [r0, #6]
 8018dc6:	4420      	add	r0, r4
 8018dc8:	b200      	sxth	r0, r0
 8018dca:	1a40      	subs	r0, r0, r1
 8018dcc:	e7f8      	b.n	8018dc0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018dd0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018dd0:	4b01      	ldr	r3, [pc, #4]	; (8018dd8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	601a      	str	r2, [r3, #0]
 8018dd6:	4770      	bx	lr
 8018dd8:	2000bbbc 	.word	0x2000bbbc

08018ddc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dde:	1e05      	subs	r5, r0, #0
 8018de0:	f04f 0601 	mov.w	r6, #1
 8018de4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018de8:	bfba      	itte	lt
 8018dea:	f04f 37ff 	movlt.w	r7, #4294967295
 8018dee:	426d      	neglt	r5, r5
 8018df0:	2701      	movge	r7, #1
 8018df2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018df6:	f1be 0f00 	cmp.w	lr, #0
 8018dfa:	bfbc      	itt	lt
 8018dfc:	f1ce 0e00 	rsblt	lr, lr, #0
 8018e00:	427f      	neglt	r7, r7
 8018e02:	2c00      	cmp	r4, #0
 8018e04:	fa4e f001 	asr.w	r0, lr, r1
 8018e08:	fa06 f101 	lsl.w	r1, r6, r1
 8018e0c:	bfbc      	itt	lt
 8018e0e:	4264      	neglt	r4, r4
 8018e10:	427f      	neglt	r7, r7
 8018e12:	3901      	subs	r1, #1
 8018e14:	ea01 010e 	and.w	r1, r1, lr
 8018e18:	434d      	muls	r5, r1
 8018e1a:	f8dc 1000 	ldr.w	r1, [ip]
 8018e1e:	fb03 1300 	mla	r3, r3, r0, r1
 8018e22:	fb95 f1f4 	sdiv	r1, r5, r4
 8018e26:	fb04 5511 	mls	r5, r4, r1, r5
 8018e2a:	441d      	add	r5, r3
 8018e2c:	fb95 f3f4 	sdiv	r3, r5, r4
 8018e30:	4419      	add	r1, r3
 8018e32:	fb04 5413 	mls	r4, r4, r3, r5
 8018e36:	fb02 1000 	mla	r0, r2, r0, r1
 8018e3a:	f8cc 4000 	str.w	r4, [ip]
 8018e3e:	4378      	muls	r0, r7
 8018e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018e44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e48:	4c24      	ldr	r4, [pc, #144]	; (8018edc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018e4a:	b086      	sub	sp, #24
 8018e4c:	4605      	mov	r5, r0
 8018e4e:	6807      	ldr	r7, [r0, #0]
 8018e50:	69a3      	ldr	r3, [r4, #24]
 8018e52:	b92b      	cbnz	r3, 8018e60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018e54:	6840      	ldr	r0, [r0, #4]
 8018e56:	e9c5 7000 	strd	r7, r0, [r5]
 8018e5a:	b006      	add	sp, #24
 8018e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e60:	f04f 0802 	mov.w	r8, #2
 8018e64:	68a2      	ldr	r2, [r4, #8]
 8018e66:	ae06      	add	r6, sp, #24
 8018e68:	6820      	ldr	r0, [r4, #0]
 8018e6a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018e6e:	440a      	add	r2, r1
 8018e70:	69e1      	ldr	r1, [r4, #28]
 8018e72:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018e76:	9700      	str	r7, [sp, #0]
 8018e78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018e7a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018e7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e80:	f7ff ffac 	bl	8018ddc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018e84:	69a3      	ldr	r3, [r4, #24]
 8018e86:	4607      	mov	r7, r0
 8018e88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018e8a:	9301      	str	r3, [sp, #4]
 8018e8c:	686b      	ldr	r3, [r5, #4]
 8018e8e:	6a21      	ldr	r1, [r4, #32]
 8018e90:	9300      	str	r3, [sp, #0]
 8018e92:	9602      	str	r6, [sp, #8]
 8018e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e96:	6860      	ldr	r0, [r4, #4]
 8018e98:	f7ff ffa0 	bl	8018ddc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018e9c:	69a2      	ldr	r2, [r4, #24]
 8018e9e:	6963      	ldr	r3, [r4, #20]
 8018ea0:	4407      	add	r7, r0
 8018ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018ea4:	68e0      	ldr	r0, [r4, #12]
 8018ea6:	fb92 f8f8 	sdiv	r8, r2, r8
 8018eaa:	4443      	add	r3, r8
 8018eac:	9305      	str	r3, [sp, #20]
 8018eae:	682b      	ldr	r3, [r5, #0]
 8018eb0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018eb4:	9300      	str	r3, [sp, #0]
 8018eb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018eba:	f7ff ff8f 	bl	8018ddc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018ebe:	69a3      	ldr	r3, [r4, #24]
 8018ec0:	4680      	mov	r8, r0
 8018ec2:	9602      	str	r6, [sp, #8]
 8018ec4:	9301      	str	r3, [sp, #4]
 8018ec6:	686b      	ldr	r3, [r5, #4]
 8018ec8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018eca:	9300      	str	r3, [sp, #0]
 8018ecc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018ece:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018ed0:	6920      	ldr	r0, [r4, #16]
 8018ed2:	f7ff ff83 	bl	8018ddc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018ed6:	4440      	add	r0, r8
 8018ed8:	e7bd      	b.n	8018e56 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018eda:	bf00      	nop
 8018edc:	2000bbc0 	.word	0x2000bbc0

08018ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018ee0:	4b07      	ldr	r3, [pc, #28]	; (8018f00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018ee2:	b510      	push	{r4, lr}
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	2b01      	cmp	r3, #1
 8018ee8:	d108      	bne.n	8018efc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018eea:	4b06      	ldr	r3, [pc, #24]	; (8018f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018eec:	880c      	ldrh	r4, [r1, #0]
 8018eee:	881b      	ldrh	r3, [r3, #0]
 8018ef0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018ef4:	3b01      	subs	r3, #1
 8018ef6:	1b1b      	subs	r3, r3, r4
 8018ef8:	8003      	strh	r3, [r0, #0]
 8018efa:	800a      	strh	r2, [r1, #0]
 8018efc:	bd10      	pop	{r4, pc}
 8018efe:	bf00      	nop
 8018f00:	2000bb8c 	.word	0x2000bb8c
 8018f04:	2000bb90 	.word	0x2000bb90

08018f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018f08:	4b0a      	ldr	r3, [pc, #40]	; (8018f34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018f0a:	b510      	push	{r4, lr}
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	2b01      	cmp	r3, #1
 8018f10:	d10e      	bne.n	8018f30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018f12:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018f16:	8843      	ldrh	r3, [r0, #2]
 8018f18:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f1c:	18ca      	adds	r2, r1, r3
 8018f1e:	4b06      	ldr	r3, [pc, #24]	; (8018f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018f20:	8044      	strh	r4, [r0, #2]
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	1a9b      	subs	r3, r3, r2
 8018f26:	8003      	strh	r3, [r0, #0]
 8018f28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018f2c:	8081      	strh	r1, [r0, #4]
 8018f2e:	80c3      	strh	r3, [r0, #6]
 8018f30:	bd10      	pop	{r4, pc}
 8018f32:	bf00      	nop
 8018f34:	2000bb8c 	.word	0x2000bb8c
 8018f38:	2000bb88 	.word	0x2000bb88

08018f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018f3c:	4b07      	ldr	r3, [pc, #28]	; (8018f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018f3e:	b510      	push	{r4, lr}
 8018f40:	781b      	ldrb	r3, [r3, #0]
 8018f42:	2b01      	cmp	r3, #1
 8018f44:	d108      	bne.n	8018f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018f46:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018f4a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f4e:	8003      	strh	r3, [r0, #0]
 8018f50:	8893      	ldrh	r3, [r2, #4]
 8018f52:	3b01      	subs	r3, #1
 8018f54:	1b1b      	subs	r3, r3, r4
 8018f56:	800b      	strh	r3, [r1, #0]
 8018f58:	bd10      	pop	{r4, pc}
 8018f5a:	bf00      	nop
 8018f5c:	2000bb8c 	.word	0x2000bb8c

08018f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018f60:	4b08      	ldr	r3, [pc, #32]	; (8018f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018f62:	b513      	push	{r0, r1, r4, lr}
 8018f64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f68:	2400      	movs	r4, #0
 8018f6a:	4b07      	ldr	r3, [pc, #28]	; (8018f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018f6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f70:	466a      	mov	r2, sp
 8018f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f76:	9400      	str	r4, [sp, #0]
 8018f78:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f7c:	f7ff ffde 	bl	8018f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018f80:	b002      	add	sp, #8
 8018f82:	bd10      	pop	{r4, pc}
 8018f84:	2000bb88 	.word	0x2000bb88
 8018f88:	2000bb8a 	.word	0x2000bb8a

08018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018f8c:	4b0a      	ldr	r3, [pc, #40]	; (8018fb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018f8e:	460a      	mov	r2, r1
 8018f90:	b510      	push	{r4, lr}
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	2b01      	cmp	r3, #1
 8018f96:	d10d      	bne.n	8018fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018f98:	8881      	ldrh	r1, [r0, #4]
 8018f9a:	8803      	ldrh	r3, [r0, #0]
 8018f9c:	440b      	add	r3, r1
 8018f9e:	4601      	mov	r1, r0
 8018fa0:	3b01      	subs	r3, #1
 8018fa2:	f821 3b02 	strh.w	r3, [r1], #2
 8018fa6:	f7ff ffc9 	bl	8018f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018faa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018fae:	88c2      	ldrh	r2, [r0, #6]
 8018fb0:	80c3      	strh	r3, [r0, #6]
 8018fb2:	8082      	strh	r2, [r0, #4]
 8018fb4:	bd10      	pop	{r4, pc}
 8018fb6:	bf00      	nop
 8018fb8:	2000bb8c 	.word	0x2000bb8c

08018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018fbc:	4b09      	ldr	r3, [pc, #36]	; (8018fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018fbe:	b507      	push	{r0, r1, r2, lr}
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018fc6:	4b08      	ldr	r3, [pc, #32]	; (8018fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018fc8:	9100      	str	r1, [sp, #0]
 8018fca:	4669      	mov	r1, sp
 8018fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fd0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018fd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018fd8:	f7ff ffd8 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018fdc:	b003      	add	sp, #12
 8018fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fe2:	bf00      	nop
 8018fe4:	2000bb88 	.word	0x2000bb88
 8018fe8:	2000bb8a 	.word	0x2000bb8a

08018fec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018fec:	4b03      	ldr	r3, [pc, #12]	; (8018ffc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018fee:	6818      	ldr	r0, [r3, #0]
 8018ff0:	b110      	cbz	r0, 8018ff8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	699b      	ldr	r3, [r3, #24]
 8018ff6:	4718      	bx	r3
 8018ff8:	4770      	bx	lr
 8018ffa:	bf00      	nop
 8018ffc:	2000bc10 	.word	0x2000bc10

08019000 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019000:	4770      	bx	lr
	...

08019004 <_ZN8touchgfx11Application4drawEv>:
 8019004:	4b09      	ldr	r3, [pc, #36]	; (801902c <_ZN8touchgfx11Application4drawEv+0x28>)
 8019006:	b507      	push	{r0, r1, r2, lr}
 8019008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801900c:	2100      	movs	r1, #0
 801900e:	4b08      	ldr	r3, [pc, #32]	; (8019030 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019010:	9100      	str	r1, [sp, #0]
 8019012:	4669      	mov	r1, sp
 8019014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019018:	f8ad 2004 	strh.w	r2, [sp, #4]
 801901c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019020:	6803      	ldr	r3, [r0, #0]
 8019022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019024:	4798      	blx	r3
 8019026:	b003      	add	sp, #12
 8019028:	f85d fb04 	ldr.w	pc, [sp], #4
 801902c:	2000bb88 	.word	0x2000bb88
 8019030:	2000bb8a 	.word	0x2000bb8a

08019034 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019034:	4b03      	ldr	r3, [pc, #12]	; (8019044 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019036:	6818      	ldr	r0, [r3, #0]
 8019038:	b110      	cbz	r0, 8019040 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801903a:	6803      	ldr	r3, [r0, #0]
 801903c:	69db      	ldr	r3, [r3, #28]
 801903e:	4718      	bx	r3
 8019040:	4770      	bx	lr
 8019042:	bf00      	nop
 8019044:	2000bc10 	.word	0x2000bc10

08019048 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019048:	4b03      	ldr	r3, [pc, #12]	; (8019058 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801904a:	6818      	ldr	r0, [r3, #0]
 801904c:	b110      	cbz	r0, 8019054 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801904e:	6803      	ldr	r3, [r0, #0]
 8019050:	6a1b      	ldr	r3, [r3, #32]
 8019052:	4718      	bx	r3
 8019054:	4770      	bx	lr
 8019056:	bf00      	nop
 8019058:	2000bc10 	.word	0x2000bc10

0801905c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801905c:	4b03      	ldr	r3, [pc, #12]	; (801906c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801905e:	6818      	ldr	r0, [r3, #0]
 8019060:	b110      	cbz	r0, 8019068 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019066:	4718      	bx	r3
 8019068:	4770      	bx	lr
 801906a:	bf00      	nop
 801906c:	2000bc10 	.word	0x2000bc10

08019070 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019074:	4d3a      	ldr	r5, [pc, #232]	; (8019160 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8019076:	4604      	mov	r4, r0
 8019078:	6828      	ldr	r0, [r5, #0]
 801907a:	b140      	cbz	r0, 801908e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801907c:	7a03      	ldrb	r3, [r0, #8]
 801907e:	b933      	cbnz	r3, 801908e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019080:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8019084:	6803      	ldr	r3, [r0, #0]
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801908c:	4718      	bx	r3
 801908e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8019092:	b97b      	cbnz	r3, 80190b4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019094:	b170      	cbz	r0, 80190b4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019096:	7a03      	ldrb	r3, [r0, #8]
 8019098:	b163      	cbz	r3, 80190b4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801909a:	4b32      	ldr	r3, [pc, #200]	; (8019164 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801909c:	6818      	ldr	r0, [r3, #0]
 801909e:	b110      	cbz	r0, 80190a6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80190a0:	6803      	ldr	r3, [r0, #0]
 80190a2:	691b      	ldr	r3, [r3, #16]
 80190a4:	4798      	blx	r3
 80190a6:	6828      	ldr	r0, [r5, #0]
 80190a8:	6803      	ldr	r3, [r0, #0]
 80190aa:	68db      	ldr	r3, [r3, #12]
 80190ac:	4798      	blx	r3
 80190ae:	2301      	movs	r3, #1
 80190b0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80190b4:	2500      	movs	r5, #0
 80190b6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80190ba:	42a8      	cmp	r0, r5
 80190bc:	dd0c      	ble.n	80190d8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80190be:	1963      	adds	r3, r4, r5
 80190c0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80190c4:	b132      	cbz	r2, 80190d4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80190c6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80190ca:	4413      	add	r3, r2
 80190cc:	6858      	ldr	r0, [r3, #4]
 80190ce:	6803      	ldr	r3, [r0, #0]
 80190d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190d2:	4798      	blx	r3
 80190d4:	3501      	adds	r5, #1
 80190d6:	e7ee      	b.n	80190b6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80190d8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80190dc:	3801      	subs	r0, #1
 80190de:	f04f 0c00 	mov.w	ip, #0
 80190e2:	3678      	adds	r6, #120	; 0x78
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d033      	beq.n	8019150 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80190e8:	1823      	adds	r3, r4, r0
 80190ea:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80190ee:	bb6a      	cbnz	r2, 801914c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80190f0:	b281      	uxth	r1, r0
 80190f2:	1d25      	adds	r5, r4, #4
 80190f4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80190f8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80190fc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8019100:	4293      	cmp	r3, r2
 8019102:	dc0a      	bgt.n	801911a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8019104:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8019108:	4422      	add	r2, r4
 801910a:	18b1      	adds	r1, r6, r2
 801910c:	b289      	uxth	r1, r1
 801910e:	428b      	cmp	r3, r1
 8019110:	d919      	bls.n	8019146 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8019112:	7851      	ldrb	r1, [r2, #1]
 8019114:	f802 1b01 	strb.w	r1, [r2], #1
 8019118:	e7f7      	b.n	801910a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801911a:	682f      	ldr	r7, [r5, #0]
 801911c:	f105 0804 	add.w	r8, r5, #4
 8019120:	45b9      	cmp	r9, r7
 8019122:	d10d      	bne.n	8019140 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8019124:	4696      	mov	lr, r2
 8019126:	f1be 0f1e 	cmp.w	lr, #30
 801912a:	dc06      	bgt.n	801913a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801912c:	f10e 0e01 	add.w	lr, lr, #1
 8019130:	686f      	ldr	r7, [r5, #4]
 8019132:	4573      	cmp	r3, lr
 8019134:	f845 7b04 	str.w	r7, [r5], #4
 8019138:	dcf5      	bgt.n	8019126 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801913a:	3b01      	subs	r3, #1
 801913c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8019140:	3201      	adds	r2, #1
 8019142:	4645      	mov	r5, r8
 8019144:	e7da      	b.n	80190fc <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8019146:	4423      	add	r3, r4
 8019148:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801914c:	3801      	subs	r0, #1
 801914e:	e7c9      	b.n	80190e4 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8019150:	4b04      	ldr	r3, [pc, #16]	; (8019164 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8019152:	6818      	ldr	r0, [r3, #0]
 8019154:	b110      	cbz	r0, 801915c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8019156:	6803      	ldr	r3, [r0, #0]
 8019158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801915a:	e795      	b.n	8019088 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801915c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019160:	2000bc14 	.word	0x2000bc14
 8019164:	2000bc10 	.word	0x2000bc10

08019168 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019168:	b570      	push	{r4, r5, r6, lr}
 801916a:	4606      	mov	r6, r0
 801916c:	460c      	mov	r4, r1
 801916e:	b929      	cbnz	r1, 801917c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019170:	4b0c      	ldr	r3, [pc, #48]	; (80191a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8019172:	2164      	movs	r1, #100	; 0x64
 8019174:	4a0c      	ldr	r2, [pc, #48]	; (80191a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8019176:	480d      	ldr	r0, [pc, #52]	; (80191ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019178:	f00c fb20 	bl	80257bc <__assert_func>
 801917c:	2300      	movs	r3, #0
 801917e:	4d0c      	ldr	r5, [pc, #48]	; (80191b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019180:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8019184:	6828      	ldr	r0, [r5, #0]
 8019186:	b110      	cbz	r0, 801918e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019188:	6803      	ldr	r3, [r0, #0]
 801918a:	695b      	ldr	r3, [r3, #20]
 801918c:	4798      	blx	r3
 801918e:	602c      	str	r4, [r5, #0]
 8019190:	4620      	mov	r0, r4
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	4798      	blx	r3
 8019198:	6833      	ldr	r3, [r6, #0]
 801919a:	4630      	mov	r0, r6
 801919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191a2:	4718      	bx	r3
 80191a4:	080290ac 	.word	0x080290ac
 80191a8:	08029174 	.word	0x08029174
 80191ac:	080290b6 	.word	0x080290b6
 80191b0:	2000bc10 	.word	0x2000bc10

080191b4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80191b4:	b510      	push	{r4, lr}
 80191b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80191ba:	888a      	ldrh	r2, [r1, #4]
 80191bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80191c0:	4422      	add	r2, r4
 80191c2:	b212      	sxth	r2, r2
 80191c4:	4293      	cmp	r3, r2
 80191c6:	da15      	bge.n	80191f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191c8:	8882      	ldrh	r2, [r0, #4]
 80191ca:	4413      	add	r3, r2
 80191cc:	b21b      	sxth	r3, r3
 80191ce:	429c      	cmp	r4, r3
 80191d0:	da10      	bge.n	80191f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80191d6:	88c9      	ldrh	r1, [r1, #6]
 80191d8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80191dc:	4419      	add	r1, r3
 80191de:	b209      	sxth	r1, r1
 80191e0:	428a      	cmp	r2, r1
 80191e2:	da07      	bge.n	80191f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191e4:	88c0      	ldrh	r0, [r0, #6]
 80191e6:	4410      	add	r0, r2
 80191e8:	b200      	sxth	r0, r0
 80191ea:	4283      	cmp	r3, r0
 80191ec:	bfac      	ite	ge
 80191ee:	2000      	movge	r0, #0
 80191f0:	2001      	movlt	r0, #1
 80191f2:	bd10      	pop	{r4, pc}
 80191f4:	2000      	movs	r0, #0
 80191f6:	e7fc      	b.n	80191f2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080191f8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	f9b1 4000 	ldrsh.w	r4, [r1]
 80191fe:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019202:	42ac      	cmp	r4, r5
 8019204:	db18      	blt.n	8019238 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019206:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801920a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801920e:	429a      	cmp	r2, r3
 8019210:	db12      	blt.n	8019238 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019212:	8886      	ldrh	r6, [r0, #4]
 8019214:	4435      	add	r5, r6
 8019216:	888e      	ldrh	r6, [r1, #4]
 8019218:	4434      	add	r4, r6
 801921a:	b22d      	sxth	r5, r5
 801921c:	b224      	sxth	r4, r4
 801921e:	42a5      	cmp	r5, r4
 8019220:	db0a      	blt.n	8019238 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019222:	88c0      	ldrh	r0, [r0, #6]
 8019224:	4418      	add	r0, r3
 8019226:	88cb      	ldrh	r3, [r1, #6]
 8019228:	441a      	add	r2, r3
 801922a:	b200      	sxth	r0, r0
 801922c:	b212      	sxth	r2, r2
 801922e:	4290      	cmp	r0, r2
 8019230:	bfb4      	ite	lt
 8019232:	2000      	movlt	r0, #0
 8019234:	2001      	movge	r0, #1
 8019236:	bd70      	pop	{r4, r5, r6, pc}
 8019238:	2000      	movs	r0, #0
 801923a:	e7fc      	b.n	8019236 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801923c <_ZN8touchgfx11Application11getInstanceEv>:
 801923c:	4b01      	ldr	r3, [pc, #4]	; (8019244 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801923e:	6818      	ldr	r0, [r3, #0]
 8019240:	4770      	bx	lr
 8019242:	bf00      	nop
 8019244:	2000bc20 	.word	0x2000bc20

08019248 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019248:	2300      	movs	r3, #0
 801924a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801924e:	30a8      	adds	r0, #168	; 0xa8
 8019250:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019254:	f802 3b01 	strb.w	r3, [r2], #1
 8019258:	4282      	cmp	r2, r0
 801925a:	d1fb      	bne.n	8019254 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801925c:	4770      	bx	lr

0801925e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801925e:	4603      	mov	r3, r0
 8019260:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019264:	2200      	movs	r2, #0
 8019266:	801a      	strh	r2, [r3, #0]
 8019268:	3308      	adds	r3, #8
 801926a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801926e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019272:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019276:	428b      	cmp	r3, r1
 8019278:	d1f5      	bne.n	8019266 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801927a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801927e:	4770      	bx	lr

08019280 <_ZN8touchgfx11ApplicationC1Ev>:
 8019280:	b570      	push	{r4, r5, r6, lr}
 8019282:	4b16      	ldr	r3, [pc, #88]	; (80192dc <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8019284:	2500      	movs	r5, #0
 8019286:	4604      	mov	r4, r0
 8019288:	30a8      	adds	r0, #168	; 0xa8
 801928a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801928e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019292:	f7ff ffe4 	bl	801925e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019296:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801929a:	f7ff ffe0 	bl	801925e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801929e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80192a2:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80192a6:	490e      	ldr	r1, [pc, #56]	; (80192e0 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80192a8:	480e      	ldr	r0, [pc, #56]	; (80192e4 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80192aa:	f00a fd6d 	bl	8023d88 <CRC_Lock>
 80192ae:	4e0e      	ldr	r6, [pc, #56]	; (80192e8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80192b0:	4b0e      	ldr	r3, [pc, #56]	; (80192ec <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80192b2:	b158      	cbz	r0, 80192cc <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80192b4:	801d      	strh	r5, [r3, #0]
 80192b6:	2300      	movs	r3, #0
 80192b8:	4a0d      	ldr	r2, [pc, #52]	; (80192f0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80192ba:	4620      	mov	r0, r4
 80192bc:	6013      	str	r3, [r2, #0]
 80192be:	4a0d      	ldr	r2, [pc, #52]	; (80192f4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80192c0:	6033      	str	r3, [r6, #0]
 80192c2:	6013      	str	r3, [r2, #0]
 80192c4:	f7ff ffc0 	bl	8019248 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80192c8:	4620      	mov	r0, r4
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80192d0:	2002      	movs	r0, #2
 80192d2:	801a      	strh	r2, [r3, #0]
 80192d4:	6030      	str	r0, [r6, #0]
 80192d6:	f000 ffa9 	bl	801a22c <_ZN8touchgfx6Screen4drawEv>
 80192da:	e7ec      	b.n	80192b6 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80192dc:	08029140 	.word	0x08029140
 80192e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80192e4:	f407a5c2 	.word	0xf407a5c2
 80192e8:	2000bc10 	.word	0x2000bc10
 80192ec:	20000054 	.word	0x20000054
 80192f0:	2000bc20 	.word	0x2000bc20
 80192f4:	2000bc14 	.word	0x2000bc14

080192f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80192f8:	2300      	movs	r3, #0
 80192fa:	8003      	strh	r3, [r0, #0]
 80192fc:	8043      	strh	r3, [r0, #2]
 80192fe:	8083      	strh	r3, [r0, #4]
 8019300:	80c3      	strh	r3, [r0, #6]
 8019302:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019306:	4293      	cmp	r3, r2
 8019308:	b530      	push	{r4, r5, lr}
 801930a:	d912      	bls.n	8019332 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801930c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019310:	3b01      	subs	r3, #1
 8019312:	6825      	ldr	r5, [r4, #0]
 8019314:	b29b      	uxth	r3, r3
 8019316:	6005      	str	r5, [r0, #0]
 8019318:	4293      	cmp	r3, r2
 801931a:	6865      	ldr	r5, [r4, #4]
 801931c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8019320:	6045      	str	r5, [r0, #4]
 8019322:	d906      	bls.n	8019332 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019324:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019328:	681d      	ldr	r5, [r3, #0]
 801932a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801932e:	685d      	ldr	r5, [r3, #4]
 8019330:	6065      	str	r5, [r4, #4]
 8019332:	bd30      	pop	{r4, r5, pc}

08019334 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019336:	466b      	mov	r3, sp
 8019338:	4604      	mov	r4, r0
 801933a:	e883 0006 	stmia.w	r3, {r1, r2}
 801933e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8019342:	2a07      	cmp	r2, #7
 8019344:	d906      	bls.n	8019354 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019346:	4b09      	ldr	r3, [pc, #36]	; (801936c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019348:	f44f 7102 	mov.w	r1, #520	; 0x208
 801934c:	4a08      	ldr	r2, [pc, #32]	; (8019370 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801934e:	4809      	ldr	r0, [pc, #36]	; (8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019350:	f00c fa34 	bl	80257bc <__assert_func>
 8019354:	1c51      	adds	r1, r2, #1
 8019356:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801935a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801935e:	cb03      	ldmia	r3!, {r0, r1}
 8019360:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019364:	6069      	str	r1, [r5, #4]
 8019366:	b003      	add	sp, #12
 8019368:	bd30      	pop	{r4, r5, pc}
 801936a:	bf00      	nop
 801936c:	080290e0 	.word	0x080290e0
 8019370:	080291b8 	.word	0x080291b8
 8019374:	0802910f 	.word	0x0802910f

08019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801937c:	b089      	sub	sp, #36	; 0x24
 801937e:	4606      	mov	r6, r0
 8019380:	466c      	mov	r4, sp
 8019382:	4620      	mov	r0, r4
 8019384:	e884 0006 	stmia.w	r4, {r1, r2}
 8019388:	f7fc f9c6 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 801938c:	bbb0      	cbnz	r0, 80193fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801938e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019392:	b1fd      	cbz	r5, 80193d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019394:	3d01      	subs	r5, #1
 8019396:	af04      	add	r7, sp, #16
 8019398:	f04f 090a 	mov.w	r9, #10
 801939c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80193a0:	ab02      	add	r3, sp, #8
 80193a2:	fa1f f885 	uxth.w	r8, r5
 80193a6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80193aa:	6851      	ldr	r1, [r2, #4]
 80193ac:	c303      	stmia	r3!, {r0, r1}
 80193ae:	4621      	mov	r1, r4
 80193b0:	a802      	add	r0, sp, #8
 80193b2:	f7ff ff21 	bl	80191f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80193b6:	bb08      	cbnz	r0, 80193fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80193b8:	a902      	add	r1, sp, #8
 80193ba:	4620      	mov	r0, r4
 80193bc:	f7ff ff1c 	bl	80191f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80193c0:	b1f8      	cbz	r0, 8019402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80193c2:	4642      	mov	r2, r8
 80193c4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80193c8:	a806      	add	r0, sp, #24
 80193ca:	f7ff ff95 	bl	80192f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80193ce:	f115 35ff 	adds.w	r5, r5, #4294967295
 80193d2:	d2e3      	bcs.n	801939c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80193d4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80193d8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80193dc:	2b08      	cmp	r3, #8
 80193de:	d108      	bne.n	80193f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80193e0:	4629      	mov	r1, r5
 80193e2:	a806      	add	r0, sp, #24
 80193e4:	2207      	movs	r2, #7
 80193e6:	f7ff ff87 	bl	80192f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80193ea:	a906      	add	r1, sp, #24
 80193ec:	4620      	mov	r0, r4
 80193ee:	f7fd fb8e 	bl	8016b0e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80193f2:	4628      	mov	r0, r5
 80193f4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80193f8:	f7ff ff9c 	bl	8019334 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80193fc:	b009      	add	sp, #36	; 0x24
 80193fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019402:	4621      	mov	r1, r4
 8019404:	a802      	add	r0, sp, #8
 8019406:	f7ff fed5 	bl	80191b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801940a:	b150      	cbz	r0, 8019422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801940c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019410:	a806      	add	r0, sp, #24
 8019412:	4642      	mov	r2, r8
 8019414:	f7ff ff70 	bl	80192f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019418:	a902      	add	r1, sp, #8
 801941a:	4620      	mov	r0, r4
 801941c:	f7fd fb77 	bl	8016b0e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019420:	e7d5      	b.n	80193ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019426:	e887 0003 	stmia.w	r7, {r0, r1}
 801942a:	a902      	add	r1, sp, #8
 801942c:	4638      	mov	r0, r7
 801942e:	f7fd fb6e 	bl	8016b0e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019432:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019436:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801943a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801943e:	fb13 f302 	smulbb	r3, r3, r2
 8019442:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019446:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801944a:	fb11 f102 	smulbb	r1, r1, r2
 801944e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019452:	fb09 f303 	mul.w	r3, r9, r3
 8019456:	fb12 1100 	smlabb	r1, r2, r0, r1
 801945a:	220b      	movs	r2, #11
 801945c:	434a      	muls	r2, r1
 801945e:	4293      	cmp	r3, r2
 8019460:	dab5      	bge.n	80193ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019462:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019466:	a806      	add	r0, sp, #24
 8019468:	4642      	mov	r2, r8
 801946a:	f7ff ff45 	bl	80192f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801946e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019472:	e884 0003 	stmia.w	r4, {r0, r1}
 8019476:	e7aa      	b.n	80193ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019478 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019478:	4b1d      	ldr	r3, [pc, #116]	; (80194f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801947a:	b530      	push	{r4, r5, lr}
 801947c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019480:	b085      	sub	sp, #20
 8019482:	4b1c      	ldr	r3, [pc, #112]	; (80194f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019484:	460c      	mov	r4, r1
 8019486:	2100      	movs	r1, #0
 8019488:	4605      	mov	r5, r0
 801948a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801948e:	6820      	ldr	r0, [r4, #0]
 8019490:	9100      	str	r1, [sp, #0]
 8019492:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019496:	ab02      	add	r3, sp, #8
 8019498:	6861      	ldr	r1, [r4, #4]
 801949a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801949e:	c303      	stmia	r3!, {r0, r1}
 80194a0:	4669      	mov	r1, sp
 80194a2:	a802      	add	r0, sp, #8
 80194a4:	f7fc f8f4 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 80194a8:	ab02      	add	r3, sp, #8
 80194aa:	cb03      	ldmia	r3!, {r0, r1}
 80194ac:	4b12      	ldr	r3, [pc, #72]	; (80194f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80194ae:	6020      	str	r0, [r4, #0]
 80194b0:	6818      	ldr	r0, [r3, #0]
 80194b2:	6061      	str	r1, [r4, #4]
 80194b4:	b138      	cbz	r0, 80194c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80194b6:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80194ba:	b133      	cbz	r3, 80194ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80194bc:	6821      	ldr	r1, [r4, #0]
 80194be:	4628      	mov	r0, r5
 80194c0:	6862      	ldr	r2, [r4, #4]
 80194c2:	f7ff ff59 	bl	8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194c6:	b005      	add	sp, #20
 80194c8:	bd30      	pop	{r4, r5, pc}
 80194ca:	6803      	ldr	r3, [r0, #0]
 80194cc:	4621      	mov	r1, r4
 80194ce:	689b      	ldr	r3, [r3, #8]
 80194d0:	4798      	blx	r3
 80194d2:	4b0a      	ldr	r3, [pc, #40]	; (80194fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80194d4:	6818      	ldr	r0, [r3, #0]
 80194d6:	b118      	cbz	r0, 80194e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80194d8:	6803      	ldr	r3, [r0, #0]
 80194da:	4621      	mov	r1, r4
 80194dc:	689b      	ldr	r3, [r3, #8]
 80194de:	4798      	blx	r3
 80194e0:	4b07      	ldr	r3, [pc, #28]	; (8019500 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80194e2:	4621      	mov	r1, r4
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	6803      	ldr	r3, [r0, #0]
 80194e8:	695b      	ldr	r3, [r3, #20]
 80194ea:	4798      	blx	r3
 80194ec:	e7eb      	b.n	80194c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80194ee:	bf00      	nop
 80194f0:	2000bb88 	.word	0x2000bb88
 80194f4:	2000bb8a 	.word	0x2000bb8a
 80194f8:	2000bc10 	.word	0x2000bc10
 80194fc:	2000bc0c 	.word	0x2000bc0c
 8019500:	2000bb94 	.word	0x2000bb94

08019504 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019508:	4604      	mov	r4, r0
 801950a:	b09b      	sub	sp, #108	; 0x6c
 801950c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8019510:	b129      	cbz	r1, 801951e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019512:	2300      	movs	r3, #0
 8019514:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019518:	b01b      	add	sp, #108	; 0x6c
 801951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801951e:	4baf      	ldr	r3, [pc, #700]	; (80197dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	b33b      	cbz	r3, 8019574 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019524:	4dae      	ldr	r5, [pc, #696]	; (80197e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8019526:	4628      	mov	r0, r5
 8019528:	f7fc f8f6 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 801952c:	4606      	mov	r6, r0
 801952e:	bb08      	cbnz	r0, 8019574 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019530:	4628      	mov	r0, r5
 8019532:	f7ff fce9 	bl	8018f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019536:	6829      	ldr	r1, [r5, #0]
 8019538:	686a      	ldr	r2, [r5, #4]
 801953a:	4620      	mov	r0, r4
 801953c:	f7ff ff1c 	bl	8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019540:	802e      	strh	r6, [r5, #0]
 8019542:	806e      	strh	r6, [r5, #2]
 8019544:	80ae      	strh	r6, [r5, #4]
 8019546:	80ee      	strh	r6, [r5, #6]
 8019548:	4fa6      	ldr	r7, [pc, #664]	; (80197e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801954a:	a809      	add	r0, sp, #36	; 0x24
 801954c:	f7ff fe87 	bl	801925e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019550:	883d      	ldrh	r5, [r7, #0]
 8019552:	462e      	mov	r6, r5
 8019554:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019558:	42b3      	cmp	r3, r6
 801955a:	d910      	bls.n	801957e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801955c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019560:	3601      	adds	r6, #1
 8019562:	a809      	add	r0, sp, #36	; 0x24
 8019564:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019568:	b2b6      	uxth	r6, r6
 801956a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801956e:	f7ff fee1 	bl	8019334 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019572:	e7ef      	b.n	8019554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8019574:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019578:	2b00      	cmp	r3, #0
 801957a:	d1e5      	bne.n	8019548 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801957c:	e7cc      	b.n	8019518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801957e:	462e      	mov	r6, r5
 8019580:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019584:	42b3      	cmp	r3, r6
 8019586:	d90b      	bls.n	80195a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019588:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801958c:	3601      	adds	r6, #1
 801958e:	4620      	mov	r0, r4
 8019590:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019594:	b2b6      	uxth	r6, r6
 8019596:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801959a:	f7ff feed 	bl	8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801959e:	e7ef      	b.n	8019580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80195a0:	4e91      	ldr	r6, [pc, #580]	; (80197e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80195a2:	6833      	ldr	r3, [r6, #0]
 80195a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80195a8:	2b01      	cmp	r3, #1
 80195aa:	f040 8092 	bne.w	80196d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80195ae:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80195b2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80195b6:	f04f 0900 	mov.w	r9, #0
 80195ba:	33aa      	adds	r3, #170	; 0xaa
 80195bc:	42a8      	cmp	r0, r5
 80195be:	f103 0308 	add.w	r3, r3, #8
 80195c2:	dd0a      	ble.n	80195da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80195c4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80195c8:	3501      	adds	r5, #1
 80195ca:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80195ce:	440a      	add	r2, r1
 80195d0:	b212      	sxth	r2, r2
 80195d2:	4591      	cmp	r9, r2
 80195d4:	bfb8      	it	lt
 80195d6:	4691      	movlt	r9, r2
 80195d8:	e7f0      	b.n	80195bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80195da:	4b84      	ldr	r3, [pc, #528]	; (80197ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80195dc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80197f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80195e0:	881d      	ldrh	r5, [r3, #0]
 80195e2:	2300      	movs	r3, #0
 80195e4:	2d0f      	cmp	r5, #15
 80195e6:	bf8c      	ite	hi
 80195e8:	08ed      	lsrhi	r5, r5, #3
 80195ea:	2501      	movls	r5, #1
 80195ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80195f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80195f4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80195f8:	6830      	ldr	r0, [r6, #0]
 80195fa:	440b      	add	r3, r1
 80195fc:	6802      	ldr	r2, [r0, #0]
 80195fe:	b21b      	sxth	r3, r3
 8019600:	4599      	cmp	r9, r3
 8019602:	dd49      	ble.n	8019698 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8019604:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019608:	4798      	blx	r3
 801960a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801960e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019612:	4413      	add	r3, r2
 8019614:	b21b      	sxth	r3, r3
 8019616:	195a      	adds	r2, r3, r5
 8019618:	4290      	cmp	r0, r2
 801961a:	da07      	bge.n	801962c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801961c:	4581      	cmp	r9, r0
 801961e:	dd05      	ble.n	801962c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019620:	4298      	cmp	r0, r3
 8019622:	da33      	bge.n	801968c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019624:	2b00      	cmp	r3, #0
 8019626:	dd31      	ble.n	801968c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019628:	4648      	mov	r0, r9
 801962a:	e004      	b.n	8019636 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801962c:	4298      	cmp	r0, r3
 801962e:	dbfb      	blt.n	8019628 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8019630:	4548      	cmp	r0, r9
 8019632:	bfa8      	it	ge
 8019634:	4648      	movge	r0, r9
 8019636:	f9b8 2000 	ldrsh.w	r2, [r8]
 801963a:	2100      	movs	r1, #0
 801963c:	1ac0      	subs	r0, r0, r3
 801963e:	f8b7 a000 	ldrh.w	sl, [r7]
 8019642:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019646:	f8ad 3016 	strh.w	r3, [sp, #22]
 801964a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801964e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019652:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019656:	4553      	cmp	r3, sl
 8019658:	d9ca      	bls.n	80195f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801965a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801965e:	ab07      	add	r3, sp, #28
 8019660:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019664:	6851      	ldr	r1, [r2, #4]
 8019666:	c303      	stmia	r3!, {r0, r1}
 8019668:	a807      	add	r0, sp, #28
 801966a:	a905      	add	r1, sp, #20
 801966c:	f7fc f810 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8019670:	a807      	add	r0, sp, #28
 8019672:	f7fc f851 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019676:	b920      	cbnz	r0, 8019682 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	a907      	add	r1, sp, #28
 801967c:	4620      	mov	r0, r4
 801967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019680:	4798      	blx	r3
 8019682:	f10a 0a01 	add.w	sl, sl, #1
 8019686:	fa1f fa8a 	uxth.w	sl, sl
 801968a:	e7e2      	b.n	8019652 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801968c:	6830      	ldr	r0, [r6, #0]
 801968e:	2101      	movs	r1, #1
 8019690:	6803      	ldr	r3, [r0, #0]
 8019692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019694:	4798      	blx	r3
 8019696:	e7ab      	b.n	80195f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019698:	69d3      	ldr	r3, [r2, #28]
 801969a:	4798      	blx	r3
 801969c:	4b54      	ldr	r3, [pc, #336]	; (80197f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	f43f af39 	beq.w	8019518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80196a6:	2300      	movs	r3, #0
 80196a8:	883d      	ldrh	r5, [r7, #0]
 80196aa:	34ea      	adds	r4, #234	; 0xea
 80196ac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80196b0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80196b4:	42ab      	cmp	r3, r5
 80196b6:	f67f af2f 	bls.w	8019518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80196ba:	ab1a      	add	r3, sp, #104	; 0x68
 80196bc:	4620      	mov	r0, r4
 80196be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80196c2:	3501      	adds	r5, #1
 80196c4:	3b44      	subs	r3, #68	; 0x44
 80196c6:	b2ad      	uxth	r5, r5
 80196c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80196cc:	f7ff fe32 	bl	8019334 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80196d0:	e7ee      	b.n	80196b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80196d2:	2b02      	cmp	r3, #2
 80196d4:	d16a      	bne.n	80197ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80196d6:	f8df a120 	ldr.w	sl, [pc, #288]	; 80197f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80196da:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80196de:	42ab      	cmp	r3, r5
 80196e0:	d9dc      	bls.n	801969c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80196e2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80196e6:	ab03      	add	r3, sp, #12
 80196e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80196ec:	6851      	ldr	r1, [r2, #4]
 80196ee:	c303      	stmia	r3!, {r0, r1}
 80196f0:	f89a 3000 	ldrb.w	r3, [sl]
 80196f4:	2b01      	cmp	r3, #1
 80196f6:	d102      	bne.n	80196fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80196f8:	a803      	add	r0, sp, #12
 80196fa:	f7ff fc5f 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80196fe:	a803      	add	r0, sp, #12
 8019700:	f7fc f80a 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019704:	2800      	cmp	r0, #0
 8019706:	d14a      	bne.n	801979e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8019708:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801970c:	f10d 0914 	add.w	r9, sp, #20
 8019710:	f10d 081c 	add.w	r8, sp, #28
 8019714:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019718:	f8ad 3014 	strh.w	r3, [sp, #20]
 801971c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019724:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019728:	f8ad 3018 	strh.w	r3, [sp, #24]
 801972c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019730:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019734:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019738:	44dc      	add	ip, fp
 801973a:	6830      	ldr	r0, [r6, #0]
 801973c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019740:	ebac 0c02 	sub.w	ip, ip, r2
 8019744:	f8d0 e000 	ldr.w	lr, [r0]
 8019748:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801974c:	fa1f fc8c 	uxth.w	ip, ip
 8019750:	f8cd c000 	str.w	ip, [sp]
 8019754:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019758:	47d8      	blx	fp
 801975a:	f89a 3000 	ldrb.w	r3, [sl]
 801975e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019762:	2b01      	cmp	r3, #1
 8019764:	d11e      	bne.n	80197a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8019766:	e899 0003 	ldmia.w	r9, {r0, r1}
 801976a:	e888 0003 	stmia.w	r8, {r0, r1}
 801976e:	4640      	mov	r0, r8
 8019770:	f7ff fbca 	bl	8018f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019774:	6823      	ldr	r3, [r4, #0]
 8019776:	4641      	mov	r1, r8
 8019778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801977a:	4620      	mov	r0, r4
 801977c:	4798      	blx	r3
 801977e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019782:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019786:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801978a:	4413      	add	r3, r2
 801978c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019790:	440a      	add	r2, r1
 8019792:	b21b      	sxth	r3, r3
 8019794:	b212      	sxth	r2, r2
 8019796:	f8ad 3016 	strh.w	r3, [sp, #22]
 801979a:	4293      	cmp	r3, r2
 801979c:	dbc6      	blt.n	801972c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801979e:	3501      	adds	r5, #1
 80197a0:	b2ad      	uxth	r5, r5
 80197a2:	e79a      	b.n	80196da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80197a4:	6823      	ldr	r3, [r4, #0]
 80197a6:	4649      	mov	r1, r9
 80197a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197aa:	e7e6      	b.n	801977a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80197ac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80197b0:	42ab      	cmp	r3, r5
 80197b2:	f67f af73 	bls.w	801969c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80197b6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80197ba:	ab07      	add	r3, sp, #28
 80197bc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80197c0:	6851      	ldr	r1, [r2, #4]
 80197c2:	c303      	stmia	r3!, {r0, r1}
 80197c4:	a807      	add	r0, sp, #28
 80197c6:	f7fb ffa7 	bl	8015718 <_ZNK8touchgfx4Rect7isEmptyEv>
 80197ca:	b920      	cbnz	r0, 80197d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80197cc:	6823      	ldr	r3, [r4, #0]
 80197ce:	a907      	add	r1, sp, #28
 80197d0:	4620      	mov	r0, r4
 80197d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197d4:	4798      	blx	r3
 80197d6:	3501      	adds	r5, #1
 80197d8:	b2ad      	uxth	r5, r5
 80197da:	e7e7      	b.n	80197ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80197dc:	2000bc0c 	.word	0x2000bc0c
 80197e0:	2000bc18 	.word	0x2000bc18
 80197e4:	20000054 	.word	0x20000054
 80197e8:	2000bb94 	.word	0x2000bb94
 80197ec:	2000bb8a 	.word	0x2000bb8a
 80197f0:	2000bb92 	.word	0x2000bb92
 80197f4:	2000bb88 	.word	0x2000bb88
 80197f8:	2000bb8c 	.word	0x2000bb8c

080197fc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80197fc:	4b03      	ldr	r3, [pc, #12]	; (801980c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80197fe:	2200      	movs	r2, #0
 8019800:	801a      	strh	r2, [r3, #0]
 8019802:	805a      	strh	r2, [r3, #2]
 8019804:	809a      	strh	r2, [r3, #4]
 8019806:	80da      	strh	r2, [r3, #6]
 8019808:	4770      	bx	lr
 801980a:	bf00      	nop
 801980c:	2000bc18 	.word	0x2000bc18

08019810 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8019810:	2000      	movs	r0, #0
 8019812:	4770      	bx	lr

08019814 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8019814:	2000      	movs	r0, #0
 8019816:	4770      	bx	lr

08019818 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019818:	b508      	push	{r3, lr}
 801981a:	6803      	ldr	r3, [r0, #0]
 801981c:	68db      	ldr	r3, [r3, #12]
 801981e:	4798      	blx	r3
 8019820:	b128      	cbz	r0, 801982e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019822:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019826:	7a80      	ldrb	r0, [r0, #10]
 8019828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801982c:	4318      	orrs	r0, r3
 801982e:	bd08      	pop	{r3, pc}

08019830 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8019830:	b40e      	push	{r1, r2, r3}
 8019832:	b533      	push	{r0, r1, r4, r5, lr}
 8019834:	ab05      	add	r3, sp, #20
 8019836:	f853 2b04 	ldr.w	r2, [r3], #4
 801983a:	9301      	str	r3, [sp, #4]
 801983c:	4b0a      	ldr	r3, [pc, #40]	; (8019868 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801983e:	685c      	ldr	r4, [r3, #4]
 8019840:	1061      	asrs	r1, r4, #1
 8019842:	07e4      	lsls	r4, r4, #31
 8019844:	eb00 0501 	add.w	r5, r0, r1
 8019848:	bf46      	itte	mi
 801984a:	681b      	ldrmi	r3, [r3, #0]
 801984c:	5841      	ldrmi	r1, [r0, r1]
 801984e:	681c      	ldrpl	r4, [r3, #0]
 8019850:	4628      	mov	r0, r5
 8019852:	bf48      	it	mi
 8019854:	58cc      	ldrmi	r4, [r1, r3]
 8019856:	2100      	movs	r1, #0
 8019858:	9b01      	ldr	r3, [sp, #4]
 801985a:	47a0      	blx	r4
 801985c:	b002      	add	sp, #8
 801985e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019862:	b003      	add	sp, #12
 8019864:	4770      	bx	lr
 8019866:	bf00      	nop
 8019868:	20000028 	.word	0x20000028

0801986c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801986c:	b40c      	push	{r2, r3}
 801986e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019870:	ab06      	add	r3, sp, #24
 8019872:	f853 2b04 	ldr.w	r2, [r3], #4
 8019876:	9301      	str	r3, [sp, #4]
 8019878:	4b09      	ldr	r3, [pc, #36]	; (80198a0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801987a:	685d      	ldr	r5, [r3, #4]
 801987c:	106c      	asrs	r4, r5, #1
 801987e:	07ed      	lsls	r5, r5, #31
 8019880:	eb00 0604 	add.w	r6, r0, r4
 8019884:	bf45      	ittet	mi
 8019886:	681b      	ldrmi	r3, [r3, #0]
 8019888:	5900      	ldrmi	r0, [r0, r4]
 801988a:	681c      	ldrpl	r4, [r3, #0]
 801988c:	58c4      	ldrmi	r4, [r0, r3]
 801988e:	4630      	mov	r0, r6
 8019890:	9b01      	ldr	r3, [sp, #4]
 8019892:	47a0      	blx	r4
 8019894:	b002      	add	sp, #8
 8019896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801989a:	b002      	add	sp, #8
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	20000028 	.word	0x20000028

080198a4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80198a4:	b40e      	push	{r1, r2, r3}
 80198a6:	b530      	push	{r4, r5, lr}
 80198a8:	b098      	sub	sp, #96	; 0x60
 80198aa:	4604      	mov	r4, r0
 80198ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80198ae:	a802      	add	r0, sp, #8
 80198b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80198b4:	9301      	str	r3, [sp, #4]
 80198b6:	f001 fb03 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 80198ba:	6823      	ldr	r3, [r4, #0]
 80198bc:	4620      	mov	r0, r4
 80198be:	2401      	movs	r4, #1
 80198c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198c2:	4798      	blx	r3
 80198c4:	9a01      	ldr	r2, [sp, #4]
 80198c6:	4603      	mov	r3, r0
 80198c8:	4629      	mov	r1, r5
 80198ca:	a802      	add	r0, sp, #8
 80198cc:	f001 fb15 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80198d0:	a802      	add	r0, sp, #8
 80198d2:	f001 fb4b 	bl	801af6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80198d6:	b2a3      	uxth	r3, r4
 80198d8:	b138      	cbz	r0, 80198ea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80198da:	280a      	cmp	r0, #10
 80198dc:	a802      	add	r0, sp, #8
 80198de:	bf04      	itt	eq
 80198e0:	3301      	addeq	r3, #1
 80198e2:	b21c      	sxtheq	r4, r3
 80198e4:	f001 fb42 	bl	801af6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80198e8:	e7f5      	b.n	80198d6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80198ea:	4618      	mov	r0, r3
 80198ec:	b018      	add	sp, #96	; 0x60
 80198ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198f2:	b003      	add	sp, #12
 80198f4:	4770      	bx	lr
	...

080198f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80198f8:	b40e      	push	{r1, r2, r3}
 80198fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198fc:	b098      	sub	sp, #96	; 0x60
 80198fe:	4605      	mov	r5, r0
 8019900:	4f25      	ldr	r7, [pc, #148]	; (8019998 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8019902:	ab1d      	add	r3, sp, #116	; 0x74
 8019904:	a802      	add	r0, sp, #8
 8019906:	ae18      	add	r6, sp, #96	; 0x60
 8019908:	f853 4b04 	ldr.w	r4, [r3], #4
 801990c:	9300      	str	r3, [sp, #0]
 801990e:	f001 fad7 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8019912:	682b      	ldr	r3, [r5, #0]
 8019914:	4628      	mov	r0, r5
 8019916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019918:	4798      	blx	r3
 801991a:	4621      	mov	r1, r4
 801991c:	2400      	movs	r4, #0
 801991e:	4603      	mov	r3, r0
 8019920:	9a00      	ldr	r2, [sp, #0]
 8019922:	a802      	add	r0, sp, #8
 8019924:	f001 fae9 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019928:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801992c:	462a      	mov	r2, r5
 801992e:	4633      	mov	r3, r6
 8019930:	4621      	mov	r1, r4
 8019932:	a802      	add	r0, sp, #8
 8019934:	f001 fc46 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019938:	b340      	cbz	r0, 801998c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801993a:	280a      	cmp	r0, #10
 801993c:	d01f      	beq.n	801997e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801993e:	9901      	ldr	r1, [sp, #4]
 8019940:	b1e9      	cbz	r1, 801997e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019942:	7b4b      	ldrb	r3, [r1, #13]
 8019944:	f891 c008 	ldrb.w	ip, [r1, #8]
 8019948:	f013 0f40 	tst.w	r3, #64	; 0x40
 801994c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019950:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019954:	79c9      	ldrb	r1, [r1, #7]
 8019956:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801995a:	bf18      	it	ne
 801995c:	4638      	movne	r0, r7
 801995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019962:	bf08      	it	eq
 8019964:	2000      	moveq	r0, #0
 8019966:	88aa      	ldrh	r2, [r5, #4]
 8019968:	ea41 010e 	orr.w	r1, r1, lr
 801996c:	ea43 030c 	orr.w	r3, r3, ip
 8019970:	440a      	add	r2, r1
 8019972:	4303      	orrs	r3, r0
 8019974:	1ad3      	subs	r3, r2, r3
 8019976:	b29b      	uxth	r3, r3
 8019978:	42a3      	cmp	r3, r4
 801997a:	bfc8      	it	gt
 801997c:	b21c      	sxthgt	r4, r3
 801997e:	4633      	mov	r3, r6
 8019980:	462a      	mov	r2, r5
 8019982:	2100      	movs	r1, #0
 8019984:	a802      	add	r0, sp, #8
 8019986:	f001 fc1d 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801998a:	e7d5      	b.n	8019938 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801998c:	b2a0      	uxth	r0, r4
 801998e:	b018      	add	sp, #96	; 0x60
 8019990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019994:	b003      	add	sp, #12
 8019996:	4770      	bx	lr
 8019998:	fffffe00 	.word	0xfffffe00

0801999c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801999c:	b40e      	push	{r1, r2, r3}
 801999e:	b570      	push	{r4, r5, r6, lr}
 80199a0:	b099      	sub	sp, #100	; 0x64
 80199a2:	4604      	mov	r4, r0
 80199a4:	26ff      	movs	r6, #255	; 0xff
 80199a6:	ab1d      	add	r3, sp, #116	; 0x74
 80199a8:	a802      	add	r0, sp, #8
 80199aa:	f853 5b04 	ldr.w	r5, [r3], #4
 80199ae:	9300      	str	r3, [sp, #0]
 80199b0:	f001 fa86 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 80199b4:	6823      	ldr	r3, [r4, #0]
 80199b6:	4620      	mov	r0, r4
 80199b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199ba:	4798      	blx	r3
 80199bc:	4629      	mov	r1, r5
 80199be:	4603      	mov	r3, r0
 80199c0:	9a00      	ldr	r2, [sp, #0]
 80199c2:	a802      	add	r0, sp, #8
 80199c4:	ad18      	add	r5, sp, #96	; 0x60
 80199c6:	f001 fa98 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80199ca:	2100      	movs	r1, #0
 80199cc:	4622      	mov	r2, r4
 80199ce:	a802      	add	r0, sp, #8
 80199d0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80199d4:	462b      	mov	r3, r5
 80199d6:	f001 fbf5 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199da:	b190      	cbz	r0, 8019a02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80199dc:	280a      	cmp	r0, #10
 80199de:	d009      	beq.n	80199f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80199e0:	9a01      	ldr	r2, [sp, #4]
 80199e2:	b13a      	cbz	r2, 80199f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80199e4:	7923      	ldrb	r3, [r4, #4]
 80199e6:	7a12      	ldrb	r2, [r2, #8]
 80199e8:	1a9b      	subs	r3, r3, r2
 80199ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80199ee:	429e      	cmp	r6, r3
 80199f0:	bf28      	it	cs
 80199f2:	461e      	movcs	r6, r3
 80199f4:	462b      	mov	r3, r5
 80199f6:	4622      	mov	r2, r4
 80199f8:	2100      	movs	r1, #0
 80199fa:	a802      	add	r0, sp, #8
 80199fc:	f001 fbe2 	bl	801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a00:	e7eb      	b.n	80199da <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019a02:	4630      	mov	r0, r6
 8019a04:	b019      	add	sp, #100	; 0x64
 8019a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a0a:	b003      	add	sp, #12
 8019a0c:	4770      	bx	lr
	...

08019a10 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 8019a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a14:	b0b9      	sub	sp, #228	; 0xe4
 8019a16:	4604      	mov	r4, r0
 8019a18:	4615      	mov	r5, r2
 8019a1a:	4698      	mov	r8, r3
 8019a1c:	ae0c      	add	r6, sp, #48	; 0x30
 8019a1e:	4689      	mov	r9, r1
 8019a20:	af22      	add	r7, sp, #136	; 0x88
 8019a22:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8019ae0 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd0>
 8019a26:	4630      	mov	r0, r6
 8019a28:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8019ae4 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd4>
 8019a2c:	f001 fa48 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8019a30:	6823      	ldr	r3, [r4, #0]
 8019a32:	4620      	mov	r0, r4
 8019a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a36:	4798      	blx	r3
 8019a38:	4642      	mov	r2, r8
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	4630      	mov	r0, r6
 8019a40:	f001 fa5b 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a44:	4638      	mov	r0, r7
 8019a46:	f001 fa3b 	bl	801aec0 <_ZN8touchgfx12TextProviderC1Ev>
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a50:	4798      	blx	r3
 8019a52:	4629      	mov	r1, r5
 8019a54:	2500      	movs	r5, #0
 8019a56:	4603      	mov	r3, r0
 8019a58:	4642      	mov	r2, r8
 8019a5a:	4638      	mov	r0, r7
 8019a5c:	46a8      	mov	r8, r5
 8019a5e:	f001 fa4c 	bl	801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a62:	4649      	mov	r1, r9
 8019a64:	4630      	mov	r0, r6
 8019a66:	f001 fb6d 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019a6a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8019a6e:	f8da 3000 	ldr.w	r3, [sl]
 8019a72:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8019a76:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019a7a:	b122      	cbz	r2, 8019a86 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x76>
 8019a7c:	f8d3 c04c 	ldr.w	ip, [r3, #76]	; 0x4c
 8019a80:	f1bc 0f00 	cmp.w	ip, #0
 8019a84:	d101      	bne.n	8019a8a <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x7a>
 8019a86:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8019a8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019a8e:	aa0a      	add	r2, sp, #40	; 0x28
 8019a90:	9305      	str	r3, [sp, #20]
 8019a92:	ab03      	add	r3, sp, #12
 8019a94:	e9cd b80a 	strd	fp, r8, [sp, #40]	; 0x28
 8019a98:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8019a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019aa0:	4622      	mov	r2, r4
 8019aa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019aa6:	ab09      	add	r3, sp, #36	; 0x24
 8019aa8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8019aac:	4660      	mov	r0, ip
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	464b      	mov	r3, r9
 8019ab2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8019ab6:	f7fe f977 	bl	8017da8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8019aba:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019abe:	42ab      	cmp	r3, r5
 8019ac0:	bfc8      	it	gt
 8019ac2:	b29d      	uxthgt	r5, r3
 8019ac4:	b118      	cbz	r0, 8019ace <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xbe>
 8019ac6:	4649      	mov	r1, r9
 8019ac8:	4638      	mov	r0, r7
 8019aca:	f001 fb3b 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ace:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d1cb      	bne.n	8019a6e <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x5e>
 8019ad6:	4628      	mov	r0, r5
 8019ad8:	b039      	add	sp, #228	; 0xe4
 8019ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ade:	bf00      	nop
 8019ae0:	2000bb94 	.word	0x2000bb94
 8019ae4:	08017cf1 	.word	0x08017cf1

08019ae8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019ae8:	b513      	push	{r0, r1, r4, lr}
 8019aea:	1d01      	adds	r1, r0, #4
 8019aec:	4603      	mov	r3, r0
 8019aee:	466a      	mov	r2, sp
 8019af0:	c903      	ldmia	r1, {r0, r1}
 8019af2:	e882 0003 	stmia.w	r2, {r0, r1}
 8019af6:	2100      	movs	r1, #0
 8019af8:	4618      	mov	r0, r3
 8019afa:	9100      	str	r1, [sp, #0]
 8019afc:	6819      	ldr	r1, [r3, #0]
 8019afe:	690c      	ldr	r4, [r1, #16]
 8019b00:	4611      	mov	r1, r2
 8019b02:	47a0      	blx	r4
 8019b04:	b002      	add	sp, #8
 8019b06:	bd10      	pop	{r4, pc}

08019b08 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019b08:	b538      	push	{r3, r4, r5, lr}
 8019b0a:	680b      	ldr	r3, [r1, #0]
 8019b0c:	460c      	mov	r4, r1
 8019b0e:	4605      	mov	r5, r0
 8019b10:	68db      	ldr	r3, [r3, #12]
 8019b12:	4798      	blx	r3
 8019b14:	6823      	ldr	r3, [r4, #0]
 8019b16:	4620      	mov	r0, r4
 8019b18:	4629      	mov	r1, r5
 8019b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b1c:	4798      	blx	r3
 8019b1e:	4628      	mov	r0, r5
 8019b20:	bd38      	pop	{r3, r4, r5, pc}

08019b22 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019b22:	b410      	push	{r4}
 8019b24:	880a      	ldrh	r2, [r1, #0]
 8019b26:	8884      	ldrh	r4, [r0, #4]
 8019b28:	4422      	add	r2, r4
 8019b2a:	800a      	strh	r2, [r1, #0]
 8019b2c:	884a      	ldrh	r2, [r1, #2]
 8019b2e:	88c4      	ldrh	r4, [r0, #6]
 8019b30:	4422      	add	r2, r4
 8019b32:	804a      	strh	r2, [r1, #2]
 8019b34:	6940      	ldr	r0, [r0, #20]
 8019b36:	b120      	cbz	r0, 8019b42 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019b38:	6803      	ldr	r3, [r0, #0]
 8019b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b40:	4718      	bx	r3
 8019b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b46:	4770      	bx	lr

08019b48 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	b085      	sub	sp, #20
 8019b4e:	4604      	mov	r4, r0
 8019b50:	b901      	cbnz	r1, 8019b54 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019b52:	b1fa      	cbz	r2, 8019b94 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019b54:	1d27      	adds	r7, r4, #4
 8019b56:	466e      	mov	r6, sp
 8019b58:	ad02      	add	r5, sp, #8
 8019b5a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019b5e:	e886 0003 	stmia.w	r6, {r0, r1}
 8019b62:	88e1      	ldrh	r1, [r4, #6]
 8019b64:	4620      	mov	r0, r4
 8019b66:	440a      	add	r2, r1
 8019b68:	88a1      	ldrh	r1, [r4, #4]
 8019b6a:	4419      	add	r1, r3
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	b212      	sxth	r2, r2
 8019b70:	b209      	sxth	r1, r1
 8019b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b74:	4798      	blx	r3
 8019b76:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8019b7e:	6960      	ldr	r0, [r4, #20]
 8019b80:	b150      	cbz	r0, 8019b98 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019b82:	6803      	ldr	r3, [r0, #0]
 8019b84:	4631      	mov	r1, r6
 8019b86:	691b      	ldr	r3, [r3, #16]
 8019b88:	4798      	blx	r3
 8019b8a:	6960      	ldr	r0, [r4, #20]
 8019b8c:	6803      	ldr	r3, [r0, #0]
 8019b8e:	691b      	ldr	r3, [r3, #16]
 8019b90:	4629      	mov	r1, r5
 8019b92:	4798      	blx	r3
 8019b94:	b005      	add	sp, #20
 8019b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b98:	f7ff fb50 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8019b9c:	6803      	ldr	r3, [r0, #0]
 8019b9e:	4631      	mov	r1, r6
 8019ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ba2:	4798      	blx	r3
 8019ba4:	f7ff fb4a 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8019ba8:	6803      	ldr	r3, [r0, #0]
 8019baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bac:	e7f0      	b.n	8019b90 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019bae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019bae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bb0:	8882      	ldrh	r2, [r0, #4]
 8019bb2:	4605      	mov	r5, r0
 8019bb4:	880b      	ldrh	r3, [r1, #0]
 8019bb6:	460c      	mov	r4, r1
 8019bb8:	4413      	add	r3, r2
 8019bba:	800b      	strh	r3, [r1, #0]
 8019bbc:	884b      	ldrh	r3, [r1, #2]
 8019bbe:	88c2      	ldrh	r2, [r0, #6]
 8019bc0:	4413      	add	r3, r2
 8019bc2:	4602      	mov	r2, r0
 8019bc4:	804b      	strh	r3, [r1, #2]
 8019bc6:	466b      	mov	r3, sp
 8019bc8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019bcc:	6851      	ldr	r1, [r2, #4]
 8019bce:	c303      	stmia	r3!, {r0, r1}
 8019bd0:	4621      	mov	r1, r4
 8019bd2:	4668      	mov	r0, sp
 8019bd4:	f7fb fd5c 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8019bd8:	466b      	mov	r3, sp
 8019bda:	cb03      	ldmia	r3!, {r0, r1}
 8019bdc:	6020      	str	r0, [r4, #0]
 8019bde:	6061      	str	r1, [r4, #4]
 8019be0:	6968      	ldr	r0, [r5, #20]
 8019be2:	b128      	cbz	r0, 8019bf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019be4:	6803      	ldr	r3, [r0, #0]
 8019be6:	691b      	ldr	r3, [r3, #16]
 8019be8:	4621      	mov	r1, r4
 8019bea:	4798      	blx	r3
 8019bec:	b003      	add	sp, #12
 8019bee:	bd30      	pop	{r4, r5, pc}
 8019bf0:	f7ff fb24 	bl	801923c <_ZN8touchgfx11Application11getInstanceEv>
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bf8:	e7f6      	b.n	8019be8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019bfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019bfa:	b570      	push	{r4, r5, r6, lr}
 8019bfc:	8882      	ldrh	r2, [r0, #4]
 8019bfe:	460c      	mov	r4, r1
 8019c00:	880b      	ldrh	r3, [r1, #0]
 8019c02:	4605      	mov	r5, r0
 8019c04:	4413      	add	r3, r2
 8019c06:	800b      	strh	r3, [r1, #0]
 8019c08:	884b      	ldrh	r3, [r1, #2]
 8019c0a:	88c2      	ldrh	r2, [r0, #6]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	804b      	strh	r3, [r1, #2]
 8019c10:	1d01      	adds	r1, r0, #4
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7fb fd3c 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 8019c18:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c1c:	b153      	cbz	r3, 8019c34 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c1e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c22:	b13b      	cbz	r3, 8019c34 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c24:	6968      	ldr	r0, [r5, #20]
 8019c26:	b128      	cbz	r0, 8019c34 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019c28:	6803      	ldr	r3, [r0, #0]
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	6a1b      	ldr	r3, [r3, #32]
 8019c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c32:	4718      	bx	r3
 8019c34:	bd70      	pop	{r4, r5, r6, pc}

08019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019c36:	b510      	push	{r4, lr}
 8019c38:	2300      	movs	r3, #0
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	4608      	mov	r0, r1
 8019c3e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019c42:	8023      	strh	r3, [r4, #0]
 8019c44:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c48:	8063      	strh	r3, [r4, #2]
 8019c4a:	6803      	ldr	r3, [r0, #0]
 8019c4c:	80a1      	strh	r1, [r4, #4]
 8019c4e:	4621      	mov	r1, r4
 8019c50:	80e2      	strh	r2, [r4, #6]
 8019c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c54:	4798      	blx	r3
 8019c56:	4620      	mov	r0, r4
 8019c58:	bd10      	pop	{r4, pc}
	...

08019c5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019c5c:	b530      	push	{r4, r5, lr}
 8019c5e:	8083      	strh	r3, [r0, #4]
 8019c60:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019c64:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019c68:	7183      	strb	r3, [r0, #6]
 8019c6a:	79c3      	ldrb	r3, [r0, #7]
 8019c6c:	6101      	str	r1, [r0, #16]
 8019c6e:	f365 0306 	bfi	r3, r5, #0, #7
 8019c72:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019c76:	8282      	strh	r2, [r0, #20]
 8019c78:	f365 13c7 	bfi	r3, r5, #7, #1
 8019c7c:	71c3      	strb	r3, [r0, #7]
 8019c7e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019c82:	7203      	strb	r3, [r0, #8]
 8019c84:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019c88:	7243      	strb	r3, [r0, #9]
 8019c8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019c8e:	8143      	strh	r3, [r0, #10]
 8019c90:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019c94:	8183      	strh	r3, [r0, #12]
 8019c96:	4b01      	ldr	r3, [pc, #4]	; (8019c9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019c98:	6003      	str	r3, [r0, #0]
 8019c9a:	bd30      	pop	{r4, r5, pc}
 8019c9c:	080292e0 	.word	0x080292e0

08019ca0 <_ZNK8touchgfx9ConstFont4findEt>:
 8019ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ca2:	8a84      	ldrh	r4, [r0, #20]
 8019ca4:	2500      	movs	r5, #0
 8019ca6:	260e      	movs	r6, #14
 8019ca8:	3c01      	subs	r4, #1
 8019caa:	42a5      	cmp	r5, r4
 8019cac:	dc0c      	bgt.n	8019cc8 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019cae:	192a      	adds	r2, r5, r4
 8019cb0:	6903      	ldr	r3, [r0, #16]
 8019cb2:	1052      	asrs	r2, r2, #1
 8019cb4:	fb06 3302 	mla	r3, r6, r2, r3
 8019cb8:	889f      	ldrh	r7, [r3, #4]
 8019cba:	428f      	cmp	r7, r1
 8019cbc:	d901      	bls.n	8019cc2 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019cbe:	1e54      	subs	r4, r2, #1
 8019cc0:	e7f3      	b.n	8019caa <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019cc2:	d202      	bcs.n	8019cca <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019cc4:	1c55      	adds	r5, r2, #1
 8019cc6:	e7f0      	b.n	8019caa <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019cc8:	2300      	movs	r3, #0
 8019cca:	4618      	mov	r0, r3
 8019ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cd0:	4605      	mov	r5, r0
 8019cd2:	4617      	mov	r7, r2
 8019cd4:	461e      	mov	r6, r3
 8019cd6:	f7ff ffe3 	bl	8019ca0 <_ZNK8touchgfx9ConstFont4findEt>
 8019cda:	b9e0      	cbnz	r0, 8019d16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019cdc:	b911      	cbnz	r1, 8019ce4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019cde:	2400      	movs	r4, #0
 8019ce0:	4620      	mov	r0, r4
 8019ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ce4:	290a      	cmp	r1, #10
 8019ce6:	d0fa      	beq.n	8019cde <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019ce8:	682b      	ldr	r3, [r5, #0]
 8019cea:	4628      	mov	r0, r5
 8019cec:	691b      	ldr	r3, [r3, #16]
 8019cee:	4798      	blx	r3
 8019cf0:	4601      	mov	r1, r0
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	f7ff ffd4 	bl	8019ca0 <_ZNK8touchgfx9ConstFont4findEt>
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	2800      	cmp	r0, #0
 8019cfc:	d0ef      	beq.n	8019cde <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019cfe:	682b      	ldr	r3, [r5, #0]
 8019d00:	4621      	mov	r1, r4
 8019d02:	4628      	mov	r0, r5
 8019d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d06:	4798      	blx	r3
 8019d08:	6038      	str	r0, [r7, #0]
 8019d0a:	682b      	ldr	r3, [r5, #0]
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d10:	4798      	blx	r3
 8019d12:	7030      	strb	r0, [r6, #0]
 8019d14:	e7e4      	b.n	8019ce0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019d16:	4604      	mov	r4, r0
 8019d18:	e7f1      	b.n	8019cfe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019d1a <_ZN8touchgfx6memsetEPvhm>:
 8019d1a:	4402      	add	r2, r0
 8019d1c:	4290      	cmp	r0, r2
 8019d1e:	d002      	beq.n	8019d26 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019d20:	f800 1b01 	strb.w	r1, [r0], #1
 8019d24:	e7fa      	b.n	8019d1c <_ZN8touchgfx6memsetEPvhm+0x2>
 8019d26:	4770      	bx	lr

08019d28 <_ZN8touchgfx3clzEl>:
 8019d28:	b1e8      	cbz	r0, 8019d66 <_ZN8touchgfx3clzEl+0x3e>
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	bfb8      	it	lt
 8019d2e:	4240      	neglt	r0, r0
 8019d30:	0c03      	lsrs	r3, r0, #16
 8019d32:	041b      	lsls	r3, r3, #16
 8019d34:	b9ab      	cbnz	r3, 8019d62 <_ZN8touchgfx3clzEl+0x3a>
 8019d36:	0400      	lsls	r0, r0, #16
 8019d38:	2310      	movs	r3, #16
 8019d3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019d3e:	bf04      	itt	eq
 8019d40:	0200      	lsleq	r0, r0, #8
 8019d42:	3308      	addeq	r3, #8
 8019d44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019d48:	bf04      	itt	eq
 8019d4a:	0100      	lsleq	r0, r0, #4
 8019d4c:	3304      	addeq	r3, #4
 8019d4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019d52:	bf04      	itt	eq
 8019d54:	0080      	lsleq	r0, r0, #2
 8019d56:	3302      	addeq	r3, #2
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	bfa8      	it	ge
 8019d5c:	3301      	addge	r3, #1
 8019d5e:	1e58      	subs	r0, r3, #1
 8019d60:	4770      	bx	lr
 8019d62:	2300      	movs	r3, #0
 8019d64:	e7e9      	b.n	8019d3a <_ZN8touchgfx3clzEl+0x12>
 8019d66:	201f      	movs	r0, #31
 8019d68:	4770      	bx	lr

08019d6a <_ZN8touchgfx6muldivElllRl>:
 8019d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d6e:	4604      	mov	r4, r0
 8019d70:	4698      	mov	r8, r3
 8019d72:	2601      	movs	r6, #1
 8019d74:	f7ff ffd8 	bl	8019d28 <_ZN8touchgfx3clzEl>
 8019d78:	2c00      	cmp	r4, #0
 8019d7a:	fa04 f500 	lsl.w	r5, r4, r0
 8019d7e:	fa06 f600 	lsl.w	r6, r6, r0
 8019d82:	bfba      	itte	lt
 8019d84:	f04f 37ff 	movlt.w	r7, #4294967295
 8019d88:	4264      	neglt	r4, r4
 8019d8a:	2701      	movge	r7, #1
 8019d8c:	2900      	cmp	r1, #0
 8019d8e:	f106 36ff 	add.w	r6, r6, #4294967295
 8019d92:	bfbc      	itt	lt
 8019d94:	4249      	neglt	r1, r1
 8019d96:	427f      	neglt	r7, r7
 8019d98:	2a00      	cmp	r2, #0
 8019d9a:	fa41 fc00 	asr.w	ip, r1, r0
 8019d9e:	ea01 0106 	and.w	r1, r1, r6
 8019da2:	bfb8      	it	lt
 8019da4:	427f      	neglt	r7, r7
 8019da6:	fb04 f401 	mul.w	r4, r4, r1
 8019daa:	fb95 f3f2 	sdiv	r3, r5, r2
 8019dae:	fb02 5513 	mls	r5, r2, r3, r5
 8019db2:	bfb8      	it	lt
 8019db4:	4252      	neglt	r2, r2
 8019db6:	fb94 f0f2 	sdiv	r0, r4, r2
 8019dba:	fb02 4410 	mls	r4, r2, r0, r4
 8019dbe:	fb0c 4405 	mla	r4, ip, r5, r4
 8019dc2:	fb94 f1f2 	sdiv	r1, r4, r2
 8019dc6:	4408      	add	r0, r1
 8019dc8:	fb02 4211 	mls	r2, r2, r1, r4
 8019dcc:	fb0c 0003 	mla	r0, ip, r3, r0
 8019dd0:	f8c8 2000 	str.w	r2, [r8]
 8019dd4:	4378      	muls	r0, r7
 8019dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019dda <_ZN8touchgfx10ClickEventD1Ev>:
 8019dda:	4770      	bx	lr

08019ddc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019ddc:	2000      	movs	r0, #0
 8019dde:	4770      	bx	lr

08019de0 <_ZN8touchgfx9DragEventD1Ev>:
 8019de0:	4770      	bx	lr

08019de2 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019de2:	2001      	movs	r0, #1
 8019de4:	4770      	bx	lr

08019de6 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019de6:	2002      	movs	r0, #2
 8019de8:	4770      	bx	lr

08019dea <_ZN8touchgfx12GestureEventD1Ev>:
 8019dea:	4770      	bx	lr

08019dec <_ZN8touchgfx10ClickEventD0Ev>:
 8019dec:	b510      	push	{r4, lr}
 8019dee:	4604      	mov	r4, r0
 8019df0:	210c      	movs	r1, #12
 8019df2:	f00b fcb8 	bl	8025766 <_ZdlPvj>
 8019df6:	4620      	mov	r0, r4
 8019df8:	bd10      	pop	{r4, pc}

08019dfa <_ZN8touchgfx9DragEventD0Ev>:
 8019dfa:	b510      	push	{r4, lr}
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	2110      	movs	r1, #16
 8019e00:	f00b fcb1 	bl	8025766 <_ZdlPvj>
 8019e04:	4620      	mov	r0, r4
 8019e06:	bd10      	pop	{r4, pc}

08019e08 <_ZN8touchgfx12GestureEventD0Ev>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	210c      	movs	r1, #12
 8019e0e:	f00b fcaa 	bl	8025766 <_ZdlPvj>
 8019e12:	4620      	mov	r0, r4
 8019e14:	bd10      	pop	{r4, pc}
	...

08019e18 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019e18:	b530      	push	{r4, r5, lr}
 8019e1a:	460d      	mov	r5, r1
 8019e1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019e1e:	b087      	sub	sp, #28
 8019e20:	4604      	mov	r4, r0
 8019e22:	b301      	cbz	r1, 8019e66 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019e24:	a801      	add	r0, sp, #4
 8019e26:	f7ff ff06 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e2a:	892a      	ldrh	r2, [r5, #8]
 8019e2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019e30:	7928      	ldrb	r0, [r5, #4]
 8019e32:	1ad2      	subs	r2, r2, r3
 8019e34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019e36:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019e3a:	441a      	add	r2, r3
 8019e3c:	896b      	ldrh	r3, [r5, #10]
 8019e3e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019e42:	f88d 0010 	strb.w	r0, [sp, #16]
 8019e46:	1b5b      	subs	r3, r3, r5
 8019e48:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019e4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019e4c:	442b      	add	r3, r5
 8019e4e:	4d07      	ldr	r5, [pc, #28]	; (8019e6c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019e50:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019e54:	a903      	add	r1, sp, #12
 8019e56:	9503      	str	r5, [sp, #12]
 8019e58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e60:	6803      	ldr	r3, [r0, #0]
 8019e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e64:	4798      	blx	r3
 8019e66:	b007      	add	sp, #28
 8019e68:	bd30      	pop	{r4, r5, pc}
 8019e6a:	bf00      	nop
 8019e6c:	0802935c 	.word	0x0802935c

08019e70 <_ZNK8touchgfx4Rect9intersectEss>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019e76:	428b      	cmp	r3, r1
 8019e78:	dc10      	bgt.n	8019e9c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019e7a:	8884      	ldrh	r4, [r0, #4]
 8019e7c:	4423      	add	r3, r4
 8019e7e:	b21b      	sxth	r3, r3
 8019e80:	4299      	cmp	r1, r3
 8019e82:	da0b      	bge.n	8019e9c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019e84:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019e88:	4293      	cmp	r3, r2
 8019e8a:	dc07      	bgt.n	8019e9c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019e8c:	88c0      	ldrh	r0, [r0, #6]
 8019e8e:	4418      	add	r0, r3
 8019e90:	b200      	sxth	r0, r0
 8019e92:	4282      	cmp	r2, r0
 8019e94:	bfac      	ite	ge
 8019e96:	2000      	movge	r0, #0
 8019e98:	2001      	movlt	r0, #1
 8019e9a:	bd10      	pop	{r4, pc}
 8019e9c:	2000      	movs	r0, #0
 8019e9e:	e7fc      	b.n	8019e9a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ea2:	460c      	mov	r4, r1
 8019ea4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019ea6:	b089      	sub	sp, #36	; 0x24
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	2900      	cmp	r1, #0
 8019eac:	d054      	beq.n	8019f58 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019eae:	4668      	mov	r0, sp
 8019eb0:	f7ff fec1 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019eb4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019eb6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019eb8:	4668      	mov	r0, sp
 8019eba:	8922      	ldrh	r2, [r4, #8]
 8019ebc:	88e1      	ldrh	r1, [r4, #6]
 8019ebe:	443a      	add	r2, r7
 8019ec0:	4431      	add	r1, r6
 8019ec2:	b212      	sxth	r2, r2
 8019ec4:	b209      	sxth	r1, r1
 8019ec6:	f7ff ffd3 	bl	8019e70 <_ZNK8touchgfx4Rect9intersectEss>
 8019eca:	b1d0      	cbz	r0, 8019f02 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019ecc:	89a2      	ldrh	r2, [r4, #12]
 8019ece:	4668      	mov	r0, sp
 8019ed0:	8961      	ldrh	r1, [r4, #10]
 8019ed2:	443a      	add	r2, r7
 8019ed4:	4431      	add	r1, r6
 8019ed6:	b212      	sxth	r2, r2
 8019ed8:	b209      	sxth	r1, r1
 8019eda:	f7ff ffc9 	bl	8019e70 <_ZNK8touchgfx4Rect9intersectEss>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	b978      	cbnz	r0, 8019f02 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019ee2:	4a1e      	ldr	r2, [pc, #120]	; (8019f5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019ee4:	a904      	add	r1, sp, #16
 8019ee6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019ee8:	9204      	str	r2, [sp, #16]
 8019eea:	2202      	movs	r2, #2
 8019eec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ef0:	f88d 2014 	strb.w	r2, [sp, #20]
 8019ef4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ef8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019efc:	6803      	ldr	r3, [r0, #0]
 8019efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f00:	4798      	blx	r3
 8019f02:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019f04:	a802      	add	r0, sp, #8
 8019f06:	f7ff fe96 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f0a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019f0e:	88e0      	ldrh	r0, [r4, #6]
 8019f10:	8961      	ldrh	r1, [r4, #10]
 8019f12:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019f16:	1a80      	subs	r0, r0, r2
 8019f18:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019f1c:	1a89      	subs	r1, r1, r2
 8019f1e:	8923      	ldrh	r3, [r4, #8]
 8019f20:	4460      	add	r0, ip
 8019f22:	89a2      	ldrh	r2, [r4, #12]
 8019f24:	4461      	add	r1, ip
 8019f26:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019f28:	eba3 030e 	sub.w	r3, r3, lr
 8019f2c:	eba2 020e 	sub.w	r2, r2, lr
 8019f30:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019f34:	7927      	ldrb	r7, [r4, #4]
 8019f36:	4433      	add	r3, r6
 8019f38:	4432      	add	r2, r6
 8019f3a:	4c09      	ldr	r4, [pc, #36]	; (8019f60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019f3c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019f3e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019f42:	a904      	add	r1, sp, #16
 8019f44:	9404      	str	r4, [sp, #16]
 8019f46:	f88d 7014 	strb.w	r7, [sp, #20]
 8019f4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019f4e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019f52:	6803      	ldr	r3, [r0, #0]
 8019f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f56:	4798      	blx	r3
 8019f58:	b009      	add	sp, #36	; 0x24
 8019f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f5c:	08029334 	.word	0x08029334
 8019f60:	08029348 	.word	0x08029348

08019f64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f68:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019f6c:	b0a1      	sub	sp, #132	; 0x84
 8019f6e:	4604      	mov	r4, r0
 8019f70:	460d      	mov	r5, r1
 8019f72:	790b      	ldrb	r3, [r1, #4]
 8019f74:	f1b9 0f00 	cmp.w	r9, #0
 8019f78:	d00f      	beq.n	8019f9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	f040 80a2 	bne.w	801a0c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019f80:	b021      	add	sp, #132	; 0x84
 8019f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f86:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019f8a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019f8e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019f92:	1d20      	adds	r0, r4, #4
 8019f94:	f7fb faca 	bl	801552c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019f98:	e094      	b.n	801a0c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d1f0      	bne.n	8019f80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019f9e:	4b5f      	ldr	r3, [pc, #380]	; (801a11c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019fa6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019faa:	f1ba 0f03 	cmp.w	sl, #3
 8019fae:	ddea      	ble.n	8019f86 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019fb0:	f1ba 0f0c 	cmp.w	sl, #12
 8019fb4:	f04f 0303 	mov.w	r3, #3
 8019fb8:	f04f 0600 	mov.w	r6, #0
 8019fbc:	4958      	ldr	r1, [pc, #352]	; (801a120 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019fbe:	bfd8      	it	le
 8019fc0:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019fc4:	960a      	str	r6, [sp, #40]	; 0x28
 8019fc6:	bfd8      	it	le
 8019fc8:	fb92 f3f3 	sdivle	r3, r2, r3
 8019fcc:	9301      	str	r3, [sp, #4]
 8019fce:	4b55      	ldr	r3, [pc, #340]	; (801a124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019fd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fd4:	4b54      	ldr	r3, [pc, #336]	; (801a128 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019fd6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019fda:	2248      	movs	r2, #72	; 0x48
 8019fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fe0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019fe4:	ab0e      	add	r3, sp, #56	; 0x38
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f00b fc66 	bl	80258b8 <memcpy>
 8019fec:	f04f 32ff 	mov.w	r2, #4294967295
 8019ff0:	f8cd a008 	str.w	sl, [sp, #8]
 8019ff4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019ff8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019ffc:	46b3      	mov	fp, r6
 8019ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 801a002:	b29b      	uxth	r3, r3
 801a004:	9303      	str	r3, [sp, #12]
 801a006:	2300      	movs	r3, #0
 801a008:	9a03      	ldr	r2, [sp, #12]
 801a00a:	88ef      	ldrh	r7, [r5, #6]
 801a00c:	a80a      	add	r0, sp, #40	; 0x28
 801a00e:	9309      	str	r3, [sp, #36]	; 0x24
 801a010:	9b07      	ldr	r3, [sp, #28]
 801a012:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a016:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a01a:	fb13 f302 	smulbb	r3, r3, r2
 801a01e:	b29b      	uxth	r3, r3
 801a020:	9304      	str	r3, [sp, #16]
 801a022:	9b07      	ldr	r3, [sp, #28]
 801a024:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a028:	685b      	ldr	r3, [r3, #4]
 801a02a:	fb13 f302 	smulbb	r3, r3, r2
 801a02e:	b29b      	uxth	r3, r3
 801a030:	9305      	str	r3, [sp, #20]
 801a032:	9b04      	ldr	r3, [sp, #16]
 801a034:	441f      	add	r7, r3
 801a036:	9b05      	ldr	r3, [sp, #20]
 801a038:	4498      	add	r8, r3
 801a03a:	b23f      	sxth	r7, r7
 801a03c:	fa0f f888 	sxth.w	r8, r8
 801a040:	4639      	mov	r1, r7
 801a042:	4642      	mov	r2, r8
 801a044:	f7ff ff14 	bl	8019e70 <_ZNK8touchgfx4Rect9intersectEss>
 801a048:	b380      	cbz	r0, 801a0ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a04a:	4639      	mov	r1, r7
 801a04c:	ab09      	add	r3, sp, #36	; 0x24
 801a04e:	4642      	mov	r2, r8
 801a050:	1d20      	adds	r0, r4, #4
 801a052:	f7fb fa6b 	bl	801552c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a056:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a058:	b341      	cbz	r1, 801a0ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a05a:	4549      	cmp	r1, r9
 801a05c:	d026      	beq.n	801a0ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a05e:	a80c      	add	r0, sp, #48	; 0x30
 801a060:	f7ff fde9 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a064:	2002      	movs	r0, #2
 801a066:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a06a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a06e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a072:	fb92 f2f0 	sdiv	r2, r2, r0
 801a076:	440a      	add	r2, r1
 801a078:	1a99      	subs	r1, r3, r2
 801a07a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a07e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a082:	fb93 f3f0 	sdiv	r3, r3, r0
 801a086:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a08a:	4403      	add	r3, r0
 801a08c:	1ad3      	subs	r3, r2, r3
 801a08e:	9a06      	ldr	r2, [sp, #24]
 801a090:	435b      	muls	r3, r3
 801a092:	fb01 3301 	mla	r3, r1, r1, r3
 801a096:	4293      	cmp	r3, r2
 801a098:	d208      	bcs.n	801a0ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a09a:	9a04      	ldr	r2, [sp, #16]
 801a09c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a0a0:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a0a2:	9a05      	ldr	r2, [sp, #20]
 801a0a4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a0a8:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a0aa:	9306      	str	r3, [sp, #24]
 801a0ac:	f10b 0b02 	add.w	fp, fp, #2
 801a0b0:	f1bb 0f08 	cmp.w	fp, #8
 801a0b4:	dda7      	ble.n	801a006 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a0b6:	9b02      	ldr	r3, [sp, #8]
 801a0b8:	3601      	adds	r6, #1
 801a0ba:	4453      	add	r3, sl
 801a0bc:	9302      	str	r3, [sp, #8]
 801a0be:	9b01      	ldr	r3, [sp, #4]
 801a0c0:	42b3      	cmp	r3, r6
 801a0c2:	d199      	bne.n	8019ff8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a0c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a0c6:	2900      	cmp	r1, #0
 801a0c8:	f43f af5a 	beq.w	8019f80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a0cc:	a80c      	add	r0, sp, #48	; 0x30
 801a0ce:	2600      	movs	r6, #0
 801a0d0:	f7ff fdb1 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0d4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a0d8:	88ea      	ldrh	r2, [r5, #6]
 801a0da:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a0de:	1ad2      	subs	r2, r2, r3
 801a0e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a0e2:	7929      	ldrb	r1, [r5, #4]
 801a0e4:	441a      	add	r2, r3
 801a0e6:	892b      	ldrh	r3, [r5, #8]
 801a0e8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a0ec:	a90e      	add	r1, sp, #56	; 0x38
 801a0ee:	1a1b      	subs	r3, r3, r0
 801a0f0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a0f2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a0f6:	4403      	add	r3, r0
 801a0f8:	480c      	ldr	r0, [pc, #48]	; (801a12c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a0fa:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a0fe:	900e      	str	r0, [sp, #56]	; 0x38
 801a100:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a102:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a106:	6803      	ldr	r3, [r0, #0]
 801a108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a10a:	4798      	blx	r3
 801a10c:	792b      	ldrb	r3, [r5, #4]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	f43f af36 	beq.w	8019f80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a114:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a118:	e732      	b.n	8019f80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a11a:	bf00      	nop
 801a11c:	2000bb94 	.word	0x2000bb94
 801a120:	08026f08 	.word	0x08026f08
 801a124:	2000bb88 	.word	0x2000bb88
 801a128:	2000bb8a 	.word	0x2000bb8a
 801a12c:	08029334 	.word	0x08029334

0801a130 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a132:	4604      	mov	r4, r0
 801a134:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a138:	3201      	adds	r2, #1
 801a13a:	d112      	bne.n	801a162 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a13c:	2500      	movs	r5, #0
 801a13e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a142:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a146:	6803      	ldr	r3, [r0, #0]
 801a148:	9500      	str	r5, [sp, #0]
 801a14a:	466d      	mov	r5, sp
 801a14c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a150:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a154:	4629      	mov	r1, r5
 801a156:	6a1b      	ldr	r3, [r3, #32]
 801a158:	4798      	blx	r3
 801a15a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a15e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a162:	4620      	mov	r0, r4
 801a164:	b003      	add	sp, #12
 801a166:	bd30      	pop	{r4, r5, pc}

0801a168 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a168:	b513      	push	{r0, r1, r4, lr}
 801a16a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a16e:	4604      	mov	r4, r0
 801a170:	3301      	adds	r3, #1
 801a172:	d109      	bne.n	801a188 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a174:	4601      	mov	r1, r0
 801a176:	4668      	mov	r0, sp
 801a178:	f7ff fd5d 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a17c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a180:	8423      	strh	r3, [r4, #32]
 801a182:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a186:	8463      	strh	r3, [r4, #34]	; 0x22
 801a188:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a18c:	b002      	add	sp, #8
 801a18e:	bd10      	pop	{r4, pc}

0801a190 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a190:	b513      	push	{r0, r1, r4, lr}
 801a192:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a196:	4604      	mov	r4, r0
 801a198:	3301      	adds	r3, #1
 801a19a:	d109      	bne.n	801a1b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a19c:	4601      	mov	r1, r0
 801a19e:	4668      	mov	r0, sp
 801a1a0:	f7ff fd49 	bl	8019c36 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1a8:	8423      	strh	r3, [r4, #32]
 801a1aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1ae:	8463      	strh	r3, [r4, #34]	; 0x22
 801a1b0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a1b4:	b002      	add	sp, #8
 801a1b6:	bd10      	pop	{r4, pc}

0801a1b8 <_ZN8touchgfx6ScreenC1Ev>:
 801a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ba:	4605      	mov	r5, r0
 801a1bc:	4b17      	ldr	r3, [pc, #92]	; (801a21c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a1be:	2200      	movs	r2, #0
 801a1c0:	4917      	ldr	r1, [pc, #92]	; (801a220 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a1c2:	f845 3b04 	str.w	r3, [r5], #4
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	8102      	strh	r2, [r0, #8]
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a1d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a1d4:	4b13      	ldr	r3, [pc, #76]	; (801a224 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a1d6:	8142      	strh	r2, [r0, #10]
 801a1d8:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a1dc:	4b12      	ldr	r3, [pc, #72]	; (801a228 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a1de:	8182      	strh	r2, [r0, #12]
 801a1e0:	81c2      	strh	r2, [r0, #14]
 801a1e2:	8202      	strh	r2, [r0, #16]
 801a1e4:	8242      	strh	r2, [r0, #18]
 801a1e6:	8282      	strh	r2, [r0, #20]
 801a1e8:	82c2      	strh	r2, [r0, #22]
 801a1ea:	6202      	str	r2, [r0, #32]
 801a1ec:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a1f0:	6342      	str	r2, [r0, #52]	; 0x34
 801a1f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a1f6:	6041      	str	r1, [r0, #4]
 801a1f8:	4611      	mov	r1, r2
 801a1fa:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a1fe:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a202:	4628      	mov	r0, r5
 801a204:	f7f6 f927 	bl	8010456 <_ZN8touchgfx8Drawable5setXYEss>
 801a208:	4639      	mov	r1, r7
 801a20a:	4628      	mov	r0, r5
 801a20c:	f7f6 f941 	bl	8010492 <_ZN8touchgfx8Drawable8setWidthEs>
 801a210:	4628      	mov	r0, r5
 801a212:	4631      	mov	r1, r6
 801a214:	f7f6 f94c 	bl	80104b0 <_ZN8touchgfx8Drawable9setHeightEs>
 801a218:	4620      	mov	r0, r4
 801a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a21c:	08029370 	.word	0x08029370
 801a220:	08028044 	.word	0x08028044
 801a224:	2000bb88 	.word	0x2000bb88
 801a228:	2000bb8a 	.word	0x2000bb8a

0801a22c <_ZN8touchgfx6Screen4drawEv>:
 801a22c:	4b09      	ldr	r3, [pc, #36]	; (801a254 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a22e:	b507      	push	{r0, r1, r2, lr}
 801a230:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a234:	2100      	movs	r1, #0
 801a236:	4b08      	ldr	r3, [pc, #32]	; (801a258 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a238:	9100      	str	r1, [sp, #0]
 801a23a:	4669      	mov	r1, sp
 801a23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a240:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a244:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a248:	6803      	ldr	r3, [r0, #0]
 801a24a:	689b      	ldr	r3, [r3, #8]
 801a24c:	4798      	blx	r3
 801a24e:	b003      	add	sp, #12
 801a250:	f85d fb04 	ldr.w	pc, [sp], #4
 801a254:	2000bb88 	.word	0x2000bb88
 801a258:	2000bb8a 	.word	0x2000bb8a

0801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a260:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a264:	b089      	sub	sp, #36	; 0x24
 801a266:	4680      	mov	r8, r0
 801a268:	460c      	mov	r4, r1
 801a26a:	4615      	mov	r5, r2
 801a26c:	b16b      	cbz	r3, 801a28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a26e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a272:	b153      	cbz	r3, 801a28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a274:	4628      	mov	r0, r5
 801a276:	f7ff ff5b 	bl	801a130 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a27a:	4621      	mov	r1, r4
 801a27c:	f7fe ff9a 	bl	80191b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a280:	69eb      	ldr	r3, [r5, #28]
 801a282:	b928      	cbnz	r0, 801a290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801a284:	461d      	mov	r5, r3
 801a286:	2b00      	cmp	r3, #0
 801a288:	d1f4      	bne.n	801a274 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801a28a:	b009      	add	sp, #36	; 0x24
 801a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a290:	ae04      	add	r6, sp, #16
 801a292:	2b00      	cmp	r3, #0
 801a294:	d051      	beq.n	801a33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a296:	682b      	ldr	r3, [r5, #0]
 801a298:	4629      	mov	r1, r5
 801a29a:	a802      	add	r0, sp, #8
 801a29c:	68db      	ldr	r3, [r3, #12]
 801a29e:	4798      	blx	r3
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	f7ff ff61 	bl	801a168 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a2a6:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a2aa:	4407      	add	r7, r0
 801a2ac:	4628      	mov	r0, r5
 801a2ae:	f7ff ff6f 	bl	801a190 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a2b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a2b6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a2ba:	b23f      	sxth	r7, r7
 801a2bc:	4418      	add	r0, r3
 801a2be:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a2c2:	4621      	mov	r1, r4
 801a2c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2c8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a2cc:	4630      	mov	r0, r6
 801a2ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2d2:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a2d6:	f7fb f9db 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 801a2da:	4628      	mov	r0, r5
 801a2dc:	f7ff ff28 	bl	801a130 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a2e0:	ab06      	add	r3, sp, #24
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a2e8:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2ec:	4611      	mov	r1, r2
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7fb f9ce 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 801a2f4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a2f8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a2fc:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a300:	4299      	cmp	r1, r3
 801a302:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a306:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a30a:	d10b      	bne.n	801a324 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a30c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a310:	4552      	cmp	r2, sl
 801a312:	d107      	bne.n	801a324 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a314:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a318:	455a      	cmp	r2, fp
 801a31a:	d103      	bne.n	801a324 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a31c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a320:	454a      	cmp	r2, r9
 801a322:	d00a      	beq.n	801a33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a324:	f1bb 0f00 	cmp.w	fp, #0
 801a328:	d002      	beq.n	801a330 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801a32a:	f1b9 0f00 	cmp.w	r9, #0
 801a32e:	d12e      	bne.n	801a38e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801a330:	69ea      	ldr	r2, [r5, #28]
 801a332:	4621      	mov	r1, r4
 801a334:	4640      	mov	r0, r8
 801a336:	f7ff ff91 	bl	801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a33a:	4628      	mov	r0, r5
 801a33c:	f7ff fef8 	bl	801a130 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a340:	6861      	ldr	r1, [r4, #4]
 801a342:	4602      	mov	r2, r0
 801a344:	4633      	mov	r3, r6
 801a346:	6820      	ldr	r0, [r4, #0]
 801a348:	c303      	stmia	r3!, {r0, r1}
 801a34a:	4611      	mov	r1, r2
 801a34c:	4630      	mov	r0, r6
 801a34e:	f7fb f99f 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 801a352:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d097      	beq.n	801a28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a35a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d093      	beq.n	801a28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a362:	4628      	mov	r0, r5
 801a364:	f7ff ff00 	bl	801a168 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a368:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a36c:	1a18      	subs	r0, r3, r0
 801a36e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a372:	4628      	mov	r0, r5
 801a374:	f7ff ff0c 	bl	801a190 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a378:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a37c:	4631      	mov	r1, r6
 801a37e:	1a18      	subs	r0, r3, r0
 801a380:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a384:	4628      	mov	r0, r5
 801a386:	682b      	ldr	r3, [r5, #0]
 801a388:	689b      	ldr	r3, [r3, #8]
 801a38a:	4798      	blx	r3
 801a38c:	e77d      	b.n	801a28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a38e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a392:	fa1f f08a 	uxth.w	r0, sl
 801a396:	4552      	cmp	r2, sl
 801a398:	9000      	str	r0, [sp, #0]
 801a39a:	da12      	bge.n	801a3c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801a39c:	9301      	str	r3, [sp, #4]
 801a39e:	9b00      	ldr	r3, [sp, #0]
 801a3a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a3a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a3a8:	1a9a      	subs	r2, r3, r2
 801a3aa:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a3ae:	4631      	mov	r1, r6
 801a3b0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a3b4:	4640      	mov	r0, r8
 801a3b6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a3ba:	69ea      	ldr	r2, [r5, #28]
 801a3bc:	f7ff ff4e 	bl	801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3c0:	9b01      	ldr	r3, [sp, #4]
 801a3c2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a3c6:	b29f      	uxth	r7, r3
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	da0d      	bge.n	801a3e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801a3cc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a3d0:	1aba      	subs	r2, r7, r2
 801a3d2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a3d6:	4631      	mov	r1, r6
 801a3d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a3dc:	4640      	mov	r0, r8
 801a3de:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a3e2:	69ea      	ldr	r2, [r5, #28]
 801a3e4:	f7ff ff3a 	bl	801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3e8:	8822      	ldrh	r2, [r4, #0]
 801a3ea:	445f      	add	r7, fp
 801a3ec:	88a3      	ldrh	r3, [r4, #4]
 801a3ee:	b2bf      	uxth	r7, r7
 801a3f0:	4413      	add	r3, r2
 801a3f2:	b23a      	sxth	r2, r7
 801a3f4:	b29b      	uxth	r3, r3
 801a3f6:	b219      	sxth	r1, r3
 801a3f8:	4291      	cmp	r1, r2
 801a3fa:	dd0d      	ble.n	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801a3fc:	1bdb      	subs	r3, r3, r7
 801a3fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a402:	f8ad a012 	strh.w	sl, [sp, #18]
 801a406:	4631      	mov	r1, r6
 801a408:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a40c:	4640      	mov	r0, r8
 801a40e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a412:	69ea      	ldr	r2, [r5, #28]
 801a414:	f7ff ff22 	bl	801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a418:	88e2      	ldrh	r2, [r4, #6]
 801a41a:	8863      	ldrh	r3, [r4, #2]
 801a41c:	4413      	add	r3, r2
 801a41e:	9a00      	ldr	r2, [sp, #0]
 801a420:	444a      	add	r2, r9
 801a422:	b29b      	uxth	r3, r3
 801a424:	fa1f f982 	uxth.w	r9, r2
 801a428:	b219      	sxth	r1, r3
 801a42a:	fa0f f289 	sxth.w	r2, r9
 801a42e:	428a      	cmp	r2, r1
 801a430:	da83      	bge.n	801a33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a432:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a436:	eba3 0309 	sub.w	r3, r3, r9
 801a43a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a43e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a442:	4631      	mov	r1, r6
 801a444:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a448:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a44c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a450:	69ea      	ldr	r2, [r5, #28]
 801a452:	e76f      	b.n	801a334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801a454 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a456:	2300      	movs	r3, #0
 801a458:	aa02      	add	r2, sp, #8
 801a45a:	4604      	mov	r4, r0
 801a45c:	3004      	adds	r0, #4
 801a45e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a462:	460d      	mov	r5, r1
 801a464:	f7fb f9eb 	bl	801583e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a468:	9a01      	ldr	r2, [sp, #4]
 801a46a:	b11a      	cbz	r2, 801a474 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a46c:	4629      	mov	r1, r5
 801a46e:	4620      	mov	r0, r4
 801a470:	f7ff fef4 	bl	801a25c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a474:	b003      	add	sp, #12
 801a476:	bd30      	pop	{r4, r5, pc}

0801a478 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a47a:	4602      	mov	r2, r0
 801a47c:	4604      	mov	r4, r0
 801a47e:	460d      	mov	r5, r1
 801a480:	466b      	mov	r3, sp
 801a482:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a486:	6851      	ldr	r1, [r2, #4]
 801a488:	c303      	stmia	r3!, {r0, r1}
 801a48a:	4629      	mov	r1, r5
 801a48c:	4668      	mov	r0, sp
 801a48e:	f7fb f8ff 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 801a492:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a496:	4669      	mov	r1, sp
 801a498:	b123      	cbz	r3, 801a4a4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a49a:	4620      	mov	r0, r4
 801a49c:	f7ff ffda 	bl	801a454 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a4a0:	b003      	add	sp, #12
 801a4a2:	bd30      	pop	{r4, r5, pc}
 801a4a4:	1d20      	adds	r0, r4, #4
 801a4a6:	f7fb f991 	bl	80157cc <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a4aa:	e7f9      	b.n	801a4a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a4ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	680a      	ldr	r2, [r1, #0]
 801a4b0:	1d01      	adds	r1, r0, #4
 801a4b2:	6952      	ldr	r2, [r2, #20]
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	4710      	bx	r2

0801a4b8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a4b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a4bc:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a4c0:	4b03      	ldr	r3, [pc, #12]	; (801a4d0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a4c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a4c6:	bf08      	it	eq
 801a4c8:	2300      	moveq	r3, #0
 801a4ca:	4308      	orrs	r0, r1
 801a4cc:	4318      	orrs	r0, r3
 801a4ce:	4770      	bx	lr
 801a4d0:	fffffe00 	.word	0xfffffe00

0801a4d4 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a4d4:	7b43      	ldrb	r3, [r0, #13]
 801a4d6:	7201      	strb	r1, [r0, #8]
 801a4d8:	b289      	uxth	r1, r1
 801a4da:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a4de:	05ca      	lsls	r2, r1, #23
 801a4e0:	bf48      	it	mi
 801a4e2:	f043 0320 	orrmi.w	r3, r3, #32
 801a4e6:	7343      	strb	r3, [r0, #13]
 801a4e8:	058b      	lsls	r3, r1, #22
 801a4ea:	bf42      	ittt	mi
 801a4ec:	7b43      	ldrbmi	r3, [r0, #13]
 801a4ee:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a4f2:	7343      	strbmi	r3, [r0, #13]
 801a4f4:	4770      	bx	lr

0801a4f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a4f6:	b530      	push	{r4, r5, lr}
 801a4f8:	2500      	movs	r5, #0
 801a4fa:	2401      	movs	r4, #1
 801a4fc:	6843      	ldr	r3, [r0, #4]
 801a4fe:	b913      	cbnz	r3, 801a506 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a500:	6803      	ldr	r3, [r0, #0]
 801a502:	b1f3      	cbz	r3, 801a542 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a504:	6043      	str	r3, [r0, #4]
 801a506:	7c03      	ldrb	r3, [r0, #16]
 801a508:	b143      	cbz	r3, 801a51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a50a:	68c3      	ldr	r3, [r0, #12]
 801a50c:	b12b      	cbz	r3, 801a51a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a50e:	881a      	ldrh	r2, [r3, #0]
 801a510:	b11a      	cbz	r2, 801a51a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a512:	1c9a      	adds	r2, r3, #2
 801a514:	60c2      	str	r2, [r0, #12]
 801a516:	8818      	ldrh	r0, [r3, #0]
 801a518:	bd30      	pop	{r4, r5, pc}
 801a51a:	7405      	strb	r5, [r0, #16]
 801a51c:	6843      	ldr	r3, [r0, #4]
 801a51e:	8819      	ldrh	r1, [r3, #0]
 801a520:	b179      	cbz	r1, 801a542 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a522:	1c9a      	adds	r2, r3, #2
 801a524:	2902      	cmp	r1, #2
 801a526:	6042      	str	r2, [r0, #4]
 801a528:	d1f5      	bne.n	801a516 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a52a:	6883      	ldr	r3, [r0, #8]
 801a52c:	1d1a      	adds	r2, r3, #4
 801a52e:	6082      	str	r2, [r0, #8]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	60c3      	str	r3, [r0, #12]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d0e1      	beq.n	801a4fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a538:	881b      	ldrh	r3, [r3, #0]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d0de      	beq.n	801a4fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a53e:	7404      	strb	r4, [r0, #16]
 801a540:	e7dc      	b.n	801a4fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a542:	2000      	movs	r0, #0
 801a544:	e7e8      	b.n	801a518 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a546 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 801a546:	2301      	movs	r3, #1
 801a548:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 801a54c:	4770      	bx	lr

0801a54e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>:
 801a54e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a550:	f04f 0c0a 	mov.w	ip, #10
 801a554:	2500      	movs	r5, #0
 801a556:	2702      	movs	r7, #2
 801a558:	42ab      	cmp	r3, r5
 801a55a:	dd0f      	ble.n	801a57c <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2e>
 801a55c:	195c      	adds	r4, r3, r5
 801a55e:	fb94 f4f7 	sdiv	r4, r4, r7
 801a562:	fb0c f604 	mul.w	r6, ip, r4
 801a566:	1990      	adds	r0, r2, r6
 801a568:	5b96      	ldrh	r6, [r2, r6]
 801a56a:	428e      	cmp	r6, r1
 801a56c:	d203      	bcs.n	801a576 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x28>
 801a56e:	1c65      	adds	r5, r4, #1
 801a570:	461c      	mov	r4, r3
 801a572:	4623      	mov	r3, r4
 801a574:	e7f0      	b.n	801a558 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0xa>
 801a576:	d1fc      	bne.n	801a572 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x24>
 801a578:	3002      	adds	r0, #2
 801a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a57c:	2000      	movs	r0, #0
 801a57e:	e7fc      	b.n	801a57a <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2c>

0801a580 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>:
 801a580:	f46f 6cc4 	mvn.w	ip, #1568	; 0x620
 801a584:	460b      	mov	r3, r1
 801a586:	eb01 020c 	add.w	r2, r1, ip
 801a58a:	b410      	push	{r4}
 801a58c:	b294      	uxth	r4, r2
 801a58e:	2c19      	cmp	r4, #25
 801a590:	d805      	bhi.n	801a59e <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x1e>
 801a592:	480d      	ldr	r0, [pc, #52]	; (801a5c8 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x48>)
 801a594:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 801a598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a59c:	4770      	bx	lr
 801a59e:	f46f 64c8 	mvn.w	r4, #1600	; 0x640
 801a5a2:	190a      	adds	r2, r1, r4
 801a5a4:	b294      	uxth	r4, r2
 801a5a6:	2c09      	cmp	r4, #9
 801a5a8:	d801      	bhi.n	801a5ae <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x2e>
 801a5aa:	4808      	ldr	r0, [pc, #32]	; (801a5cc <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x4c>)
 801a5ac:	e7f2      	b.n	801a594 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x14>
 801a5ae:	f46f 62ce 	mvn.w	r2, #1648	; 0x670
 801a5b2:	4413      	add	r3, r2
 801a5b4:	2b62      	cmp	r3, #98	; 0x62
 801a5b6:	d805      	bhi.n	801a5c4 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x44>
 801a5b8:	2328      	movs	r3, #40	; 0x28
 801a5ba:	4a05      	ldr	r2, [pc, #20]	; (801a5d0 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x50>)
 801a5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5c0:	f7ff bfc5 	b.w	801a54e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	e7e7      	b.n	801a598 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x18>
 801a5c8:	0802a06c 	.word	0x0802a06c
 801a5cc:	0802a13c 	.word	0x0802a13c
 801a5d0:	0802940a 	.word	0x0802940a

0801a5d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5d6:	4605      	mov	r5, r0
 801a5d8:	4608      	mov	r0, r1
 801a5da:	b1f1      	cbz	r1, 801a61a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a5dc:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a5e0:	460b      	mov	r3, r1
 801a5e2:	f101 0708 	add.w	r7, r1, #8
 801a5e6:	4622      	mov	r2, r4
 801a5e8:	6818      	ldr	r0, [r3, #0]
 801a5ea:	3308      	adds	r3, #8
 801a5ec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a5f0:	4626      	mov	r6, r4
 801a5f2:	42bb      	cmp	r3, r7
 801a5f4:	c603      	stmia	r6!, {r0, r1}
 801a5f6:	4634      	mov	r4, r6
 801a5f8:	d1f6      	bne.n	801a5e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a5fa:	6818      	ldr	r0, [r3, #0]
 801a5fc:	6030      	str	r0, [r6, #0]
 801a5fe:	4610      	mov	r0, r2
 801a600:	889b      	ldrh	r3, [r3, #4]
 801a602:	80b3      	strh	r3, [r6, #4]
 801a604:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a608:	015b      	lsls	r3, r3, #5
 801a60a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a60e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a612:	430b      	orrs	r3, r1
 801a614:	425b      	negs	r3, r3
 801a616:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a61a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a61c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a61c:	b538      	push	{r3, r4, r5, lr}
 801a61e:	460c      	mov	r4, r1
 801a620:	6811      	ldr	r1, [r2, #0]
 801a622:	4610      	mov	r0, r2
 801a624:	68cd      	ldr	r5, [r1, #12]
 801a626:	4619      	mov	r1, r3
 801a628:	47a8      	blx	r5
 801a62a:	2800      	cmp	r0, #0
 801a62c:	bf08      	it	eq
 801a62e:	4620      	moveq	r0, r4
 801a630:	bd38      	pop	{r3, r4, r5, pc}

0801a632 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a632:	b570      	push	{r4, r5, r6, lr}
 801a634:	8810      	ldrh	r0, [r2, #0]
 801a636:	4298      	cmp	r0, r3
 801a638:	d817      	bhi.n	801a66a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a63a:	1e48      	subs	r0, r1, #1
 801a63c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a640:	4298      	cmp	r0, r3
 801a642:	d312      	bcc.n	801a66a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a644:	2400      	movs	r4, #0
 801a646:	428c      	cmp	r4, r1
 801a648:	d20f      	bcs.n	801a66a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a64a:	1860      	adds	r0, r4, r1
 801a64c:	1040      	asrs	r0, r0, #1
 801a64e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a652:	0085      	lsls	r5, r0, #2
 801a654:	42b3      	cmp	r3, r6
 801a656:	d902      	bls.n	801a65e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a658:	3001      	adds	r0, #1
 801a65a:	b284      	uxth	r4, r0
 801a65c:	e7f3      	b.n	801a646 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a65e:	d102      	bne.n	801a666 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a660:	442a      	add	r2, r5
 801a662:	8850      	ldrh	r0, [r2, #2]
 801a664:	bd70      	pop	{r4, r5, r6, pc}
 801a666:	b281      	uxth	r1, r0
 801a668:	e7ed      	b.n	801a646 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a66a:	2000      	movs	r0, #0
 801a66c:	e7fa      	b.n	801a664 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

0801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a670:	b510      	push	{r4, lr}
 801a672:	8ac3      	ldrh	r3, [r0, #22]
 801a674:	428b      	cmp	r3, r1
 801a676:	d805      	bhi.n	801a684 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a678:	4b07      	ldr	r3, [pc, #28]	; (801a698 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a67a:	21fd      	movs	r1, #253	; 0xfd
 801a67c:	4a07      	ldr	r2, [pc, #28]	; (801a69c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a67e:	4808      	ldr	r0, [pc, #32]	; (801a6a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a680:	f00b f89c 	bl	80257bc <__assert_func>
 801a684:	8a83      	ldrh	r3, [r0, #20]
 801a686:	240a      	movs	r4, #10
 801a688:	4419      	add	r1, r3
 801a68a:	fbb1 f3f4 	udiv	r3, r1, r4
 801a68e:	fb04 1113 	mls	r1, r4, r3, r1
 801a692:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a696:	bd10      	pop	{r4, pc}
 801a698:	080293bd 	.word	0x080293bd
 801a69c:	0802a56e 	.word	0x0802a56e
 801a6a0:	080293cb 	.word	0x080293cb

0801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a6a4:	b508      	push	{r3, lr}
 801a6a6:	8ac3      	ldrh	r3, [r0, #22]
 801a6a8:	428b      	cmp	r3, r1
 801a6aa:	d805      	bhi.n	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a6ac:	4b07      	ldr	r3, [pc, #28]	; (801a6cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a6ae:	21d3      	movs	r1, #211	; 0xd3
 801a6b0:	4a07      	ldr	r2, [pc, #28]	; (801a6d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a6b2:	4808      	ldr	r0, [pc, #32]	; (801a6d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a6b4:	f00b f882 	bl	80257bc <__assert_func>
 801a6b8:	8a83      	ldrh	r3, [r0, #20]
 801a6ba:	220a      	movs	r2, #10
 801a6bc:	4419      	add	r1, r3
 801a6be:	fbb1 f3f2 	udiv	r3, r1, r2
 801a6c2:	fb02 1113 	mls	r1, r2, r3, r1
 801a6c6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a6ca:	bd08      	pop	{r3, pc}
 801a6cc:	080293bd 	.word	0x080293bd
 801a6d0:	0802a2be 	.word	0x0802a2be
 801a6d4:	080293cb 	.word	0x080293cb

0801a6d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6dc:	4604      	mov	r4, r0
 801a6de:	4688      	mov	r8, r1
 801a6e0:	4615      	mov	r5, r2
 801a6e2:	b94a      	cbnz	r2, 801a6f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a6e4:	4691      	mov	r9, r2
 801a6e6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a6ea:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a6ee:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a6f2:	4648      	mov	r0, r9
 801a6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6f8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a6fc:	8892      	ldrh	r2, [r2, #4]
 801a6fe:	462b      	mov	r3, r5
 801a700:	f105 0c08 	add.w	ip, r5, #8
 801a704:	46b3      	mov	fp, r6
 801a706:	6818      	ldr	r0, [r3, #0]
 801a708:	3308      	adds	r3, #8
 801a70a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a70e:	4637      	mov	r7, r6
 801a710:	4563      	cmp	r3, ip
 801a712:	c703      	stmia	r7!, {r0, r1}
 801a714:	463e      	mov	r6, r7
 801a716:	d1f6      	bne.n	801a706 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a718:	6818      	ldr	r0, [r3, #0]
 801a71a:	46d9      	mov	r9, fp
 801a71c:	6038      	str	r0, [r7, #0]
 801a71e:	889b      	ldrh	r3, [r3, #4]
 801a720:	80bb      	strh	r3, [r7, #4]
 801a722:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a726:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a72a:	18d3      	adds	r3, r2, r3
 801a72c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a730:	b298      	uxth	r0, r3
 801a732:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a736:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a73a:	281d      	cmp	r0, #29
 801a73c:	ea4a 0a01 	orr.w	sl, sl, r1
 801a740:	fa1f f68a 	uxth.w	r6, sl
 801a744:	d842      	bhi.n	801a7cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a746:	2301      	movs	r3, #1
 801a748:	4950      	ldr	r1, [pc, #320]	; (801a88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a74a:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a74e:	4083      	lsls	r3, r0
 801a750:	420b      	tst	r3, r1
 801a752:	d114      	bne.n	801a77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a754:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a758:	d03c      	beq.n	801a7d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a75a:	fa1f fa8a 	uxth.w	sl, sl
 801a75e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a762:	4658      	mov	r0, fp
 801a764:	eba1 010a 	sub.w	r1, r1, sl
 801a768:	b209      	sxth	r1, r1
 801a76a:	f7ff feb3 	bl	801a4d4 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a76e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a772:	1b86      	subs	r6, r0, r6
 801a774:	eba6 0a0a 	sub.w	sl, r6, sl
 801a778:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a77c:	e7b9      	b.n	801a6f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a77e:	2100      	movs	r1, #0
 801a780:	f104 001a 	add.w	r0, r4, #26
 801a784:	f7ff ff8e 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a788:	f640 6333 	movw	r3, #3635	; 0xe33
 801a78c:	4601      	mov	r1, r0
 801a78e:	4298      	cmp	r0, r3
 801a790:	d10a      	bne.n	801a7a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a792:	f8d8 3000 	ldr.w	r3, [r8]
 801a796:	4640      	mov	r0, r8
 801a798:	68db      	ldr	r3, [r3, #12]
 801a79a:	4798      	blx	r3
 801a79c:	7b41      	ldrb	r1, [r0, #13]
 801a79e:	7a00      	ldrb	r0, [r0, #8]
 801a7a0:	f7ff fe8a 	bl	801a4b8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a7a4:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a7a8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a7ac:	4658      	mov	r0, fp
 801a7ae:	4431      	add	r1, r6
 801a7b0:	4451      	add	r1, sl
 801a7b2:	b209      	sxth	r1, r1
 801a7b4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a7b8:	f7ff fe8c 	bl	801a4d4 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a7bc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a7c0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a7c4:	1a9b      	subs	r3, r3, r2
 801a7c6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a7ca:	e792      	b.n	801a6f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7cc:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d005      	beq.n	801a7e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a7d4:	f022 0302 	bic.w	r3, r2, #2
 801a7d8:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a7dc:	428b      	cmp	r3, r1
 801a7de:	d119      	bne.n	801a814 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a7e0:	1e53      	subs	r3, r2, #1
 801a7e2:	4629      	mov	r1, r5
 801a7e4:	4642      	mov	r2, r8
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	f7ff ff17 	bl	801a61c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a7ee:	7b41      	ldrb	r1, [r0, #13]
 801a7f0:	7a00      	ldrb	r0, [r0, #8]
 801a7f2:	f7ff fe61 	bl	801a4b8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a7f6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a7fa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a7fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a802:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a806:	4313      	orrs	r3, r2
 801a808:	115a      	asrs	r2, r3, #5
 801a80a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a80e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a812:	e02e      	b.n	801a872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a814:	4639      	mov	r1, r7
 801a816:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a81a:	f7ff fe4d 	bl	801a4b8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a81e:	f640 6109 	movw	r1, #3593	; 0xe09
 801a822:	f022 0310 	bic.w	r3, r2, #16
 801a826:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a82a:	428b      	cmp	r3, r1
 801a82c:	d003      	beq.n	801a836 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a82e:	f640 6313 	movw	r3, #3603	; 0xe13
 801a832:	429a      	cmp	r2, r3
 801a834:	d127      	bne.n	801a886 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a836:	b27f      	sxtb	r7, r7
 801a838:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a83c:	4629      	mov	r1, r5
 801a83e:	4620      	mov	r0, r4
 801a840:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a844:	431f      	orrs	r7, r3
 801a846:	f640 6313 	movw	r3, #3603	; 0xe13
 801a84a:	429a      	cmp	r2, r3
 801a84c:	bf14      	ite	ne
 801a84e:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a852:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a856:	4642      	mov	r2, r8
 801a858:	bf18      	it	ne
 801a85a:	b29b      	uxthne	r3, r3
 801a85c:	f7ff fede 	bl	801a61c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a860:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a864:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a868:	7a83      	ldrb	r3, [r0, #10]
 801a86a:	4313      	orrs	r3, r2
 801a86c:	1aff      	subs	r7, r7, r3
 801a86e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a872:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a876:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a87a:	f7ff fe1d 	bl	801a4b8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a87e:	1b80      	subs	r0, r0, r6
 801a880:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a884:	e735      	b.n	801a6f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a886:	2300      	movs	r3, #0
 801a888:	e7c1      	b.n	801a80e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a88a:	bf00      	nop
 801a88c:	3fc00079 	.word	0x3fc00079

0801a890 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a890:	3a01      	subs	r2, #1
 801a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a896:	b292      	uxth	r2, r2
 801a898:	460c      	mov	r4, r1
 801a89a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a89e:	42b2      	cmp	r2, r6
 801a8a0:	d018      	beq.n	801a8d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a8a2:	8b01      	ldrh	r1, [r0, #24]
 801a8a4:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a8a8:	4291      	cmp	r1, r2
 801a8aa:	d805      	bhi.n	801a8b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a8ac:	4b13      	ldr	r3, [pc, #76]	; (801a8fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a8ae:	21d3      	movs	r1, #211	; 0xd3
 801a8b0:	4a13      	ldr	r2, [pc, #76]	; (801a900 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a8b2:	4814      	ldr	r0, [pc, #80]	; (801a904 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a8b4:	f00a ff82 	bl	80257bc <__assert_func>
 801a8b8:	8ac1      	ldrh	r1, [r0, #22]
 801a8ba:	4411      	add	r1, r2
 801a8bc:	3a01      	subs	r2, #1
 801a8be:	f001 0101 	and.w	r1, r1, #1
 801a8c2:	b292      	uxth	r2, r2
 801a8c4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a8c8:	8a49      	ldrh	r1, [r1, #18]
 801a8ca:	428d      	cmp	r5, r1
 801a8cc:	d0e7      	beq.n	801a89e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a8ce:	2000      	movs	r0, #0
 801a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8d4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a8d8:	2600      	movs	r6, #0
 801a8da:	f100 051a 	add.w	r5, r0, #26
 801a8de:	441f      	add	r7, r3
 801a8e0:	b2b1      	uxth	r1, r6
 801a8e2:	42b9      	cmp	r1, r7
 801a8e4:	da08      	bge.n	801a8f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a8e6:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	f7ff feda 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a8f0:	3601      	adds	r6, #1
 801a8f2:	4540      	cmp	r0, r8
 801a8f4:	d0f4      	beq.n	801a8e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a8f6:	e7ea      	b.n	801a8ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a8f8:	2001      	movs	r0, #1
 801a8fa:	e7e9      	b.n	801a8d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a8fc:	080293bd 	.word	0x080293bd
 801a900:	0802a6ce 	.word	0x0802a6ce
 801a904:	080293cb 	.word	0x080293cb

0801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a908:	b538      	push	{r3, r4, r5, lr}
 801a90a:	8ac3      	ldrh	r3, [r0, #22]
 801a90c:	428b      	cmp	r3, r1
 801a90e:	d205      	bcs.n	801a91c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a910:	4b08      	ldr	r3, [pc, #32]	; (801a934 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a912:	21d8      	movs	r1, #216	; 0xd8
 801a914:	4a08      	ldr	r2, [pc, #32]	; (801a938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a916:	4809      	ldr	r0, [pc, #36]	; (801a93c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a918:	f00a ff50 	bl	80257bc <__assert_func>
 801a91c:	8a82      	ldrh	r2, [r0, #20]
 801a91e:	250a      	movs	r5, #10
 801a920:	1a5b      	subs	r3, r3, r1
 801a922:	440a      	add	r2, r1
 801a924:	82c3      	strh	r3, [r0, #22]
 801a926:	fbb2 f4f5 	udiv	r4, r2, r5
 801a92a:	fb05 2214 	mls	r2, r5, r4, r2
 801a92e:	8282      	strh	r2, [r0, #20]
 801a930:	bd38      	pop	{r3, r4, r5, pc}
 801a932:	bf00      	nop
 801a934:	080293b1 	.word	0x080293b1
 801a938:	0802a4ea 	.word	0x0802a4ea
 801a93c:	080293cb 	.word	0x080293cb

0801a940 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 801a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a944:	f100 061a 	add.w	r6, r0, #26
 801a948:	b087      	sub	sp, #28
 801a94a:	4607      	mov	r7, r0
 801a94c:	460d      	mov	r5, r1
 801a94e:	4630      	mov	r0, r6
 801a950:	2100      	movs	r1, #0
 801a952:	f7ff fea7 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a956:	4604      	mov	r4, r0
 801a958:	2800      	cmp	r0, #0
 801a95a:	d03d      	beq.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a95c:	2d01      	cmp	r5, #1
 801a95e:	d112      	bne.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a960:	287f      	cmp	r0, #127	; 0x7f
 801a962:	d810      	bhi.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a964:	283e      	cmp	r0, #62	; 0x3e
 801a966:	f000 8229 	beq.w	801adbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x47c>
 801a96a:	d807      	bhi.n	801a97c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3c>
 801a96c:	2829      	cmp	r0, #41	; 0x29
 801a96e:	d037      	beq.n	801a9e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa0>
 801a970:	283c      	cmp	r0, #60	; 0x3c
 801a972:	d030      	beq.n	801a9d6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x96>
 801a974:	2828      	cmp	r0, #40	; 0x28
 801a976:	d106      	bne.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a978:	2429      	movs	r4, #41	; 0x29
 801a97a:	e02d      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a97c:	285d      	cmp	r0, #93	; 0x5d
 801a97e:	d033      	beq.n	801a9e8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa8>
 801a980:	d823      	bhi.n	801a9ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a>
 801a982:	285b      	cmp	r0, #91	; 0x5b
 801a984:	d02e      	beq.n	801a9e4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa4>
 801a986:	2101      	movs	r1, #1
 801a988:	4630      	mov	r0, r6
 801a98a:	f7ff fe8b 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a98e:	2102      	movs	r1, #2
 801a990:	4605      	mov	r5, r0
 801a992:	4630      	mov	r0, r6
 801a994:	f7ff fe86 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a998:	2c20      	cmp	r4, #32
 801a99a:	4680      	mov	r8, r0
 801a99c:	9000      	str	r0, [sp, #0]
 801a99e:	f040 820f 	bne.w	801adc0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x480>
 801a9a2:	f2a5 634c 	subw	r3, r5, #1612	; 0x64c
 801a9a6:	b29b      	uxth	r3, r3
 801a9a8:	2b04      	cmp	r3, #4
 801a9aa:	f240 6351 	movw	r3, #1617	; 0x651
 801a9ae:	d81f      	bhi.n	801a9f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb0>
 801a9b0:	4298      	cmp	r0, r3
 801a9b2:	d14c      	bne.n	801aa4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a9b4:	2102      	movs	r1, #2
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	f7ff ffa6 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a9bc:	f6a5 14ee 	subw	r4, r5, #2542	; 0x9ee
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	b2a4      	uxth	r4, r4
 801a9c4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a9c8:	e006      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9ca:	287b      	cmp	r0, #123	; 0x7b
 801a9cc:	d00e      	beq.n	801a9ec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xac>
 801a9ce:	287d      	cmp	r0, #125	; 0x7d
 801a9d0:	d1d9      	bne.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a9d2:	247b      	movs	r4, #123	; 0x7b
 801a9d4:	e000      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9d6:	243e      	movs	r4, #62	; 0x3e
 801a9d8:	4620      	mov	r0, r4
 801a9da:	b007      	add	sp, #28
 801a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e0:	2428      	movs	r4, #40	; 0x28
 801a9e2:	e7f9      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9e4:	245d      	movs	r4, #93	; 0x5d
 801a9e6:	e7f7      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9e8:	245b      	movs	r4, #91	; 0x5b
 801a9ea:	e7f5      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9ec:	247d      	movs	r4, #125	; 0x7d
 801a9ee:	e7f3      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a9f0:	429d      	cmp	r5, r3
 801a9f2:	d12c      	bne.n	801aa4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a9f4:	f5b0 6fce 	cmp.w	r0, #1648	; 0x670
 801a9f8:	d129      	bne.n	801aa4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a9fa:	2102      	movs	r1, #2
 801a9fc:	4630      	mov	r0, r6
 801a9fe:	f7ff ff83 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa02:	2301      	movs	r3, #1
 801aa04:	f64f 4463 	movw	r4, #64611	; 0xfc63
 801aa08:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa0c:	e7e4      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa0e:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801aa12:	4598      	cmp	r8, r3
 801aa14:	d12d      	bne.n	801aa72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa16:	2102      	movs	r1, #2
 801aa18:	4630      	mov	r0, r6
 801aa1a:	f7ff ff75 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa1e:	2301      	movs	r3, #1
 801aa20:	f64f 54f0 	movw	r4, #65008	; 0xfdf0
 801aa24:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa28:	e7d6      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa2a:	f240 6342 	movw	r3, #1602	; 0x642
 801aa2e:	429c      	cmp	r4, r3
 801aa30:	d11f      	bne.n	801aa72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa32:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801aa36:	4598      	cmp	r8, r3
 801aa38:	d11b      	bne.n	801aa72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa3a:	2102      	movs	r1, #2
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	f7ff ff63 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa42:	2301      	movs	r3, #1
 801aa44:	f64f 54f1 	movw	r4, #65009	; 0xfdf1
 801aa48:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa4c:	e7c4      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa4e:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801aa52:	b29b      	uxth	r3, r3
 801aa54:	2b07      	cmp	r3, #7
 801aa56:	d80c      	bhi.n	801aa72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801aa58:	f505 45f1 	add.w	r5, r5, #30848	; 0x7880
 801aa5c:	2101      	movs	r1, #1
 801aa5e:	4630      	mov	r0, r6
 801aa60:	f7ff ff52 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aa64:	356d      	adds	r5, #109	; 0x6d
 801aa66:	2301      	movs	r3, #1
 801aa68:	409d      	lsls	r5, r3
 801aa6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aa6e:	b2ac      	uxth	r4, r5
 801aa70:	e7b2      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa72:	f46f 61c4 	mvn.w	r1, #1568	; 0x620
 801aa76:	1863      	adds	r3, r4, r1
 801aa78:	b29b      	uxth	r3, r3
 801aa7a:	2b19      	cmp	r3, #25
 801aa7c:	d90b      	bls.n	801aa96 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801aa7e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801aa82:	18a3      	adds	r3, r4, r2
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	2b09      	cmp	r3, #9
 801aa88:	d905      	bls.n	801aa96 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801aa8a:	f46f 63ce 	mvn.w	r3, #1648	; 0x670
 801aa8e:	18e3      	adds	r3, r4, r3
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	2b62      	cmp	r3, #98	; 0x62
 801aa94:	d8a0      	bhi.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aa96:	2103      	movs	r1, #3
 801aa98:	4630      	mov	r0, r6
 801aa9a:	f7ff fe03 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aa9e:	f2a4 6327 	subw	r3, r4, #1575	; 0x627
 801aaa2:	4682      	mov	sl, r0
 801aaa4:	4683      	mov	fp, r0
 801aaa6:	b29b      	uxth	r3, r3
 801aaa8:	2b21      	cmp	r3, #33	; 0x21
 801aaaa:	d82c      	bhi.n	801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aaac:	f2a8 6327 	subw	r3, r8, #1575	; 0x627
 801aab0:	b29b      	uxth	r3, r3
 801aab2:	2b23      	cmp	r3, #35	; 0x23
 801aab4:	d827      	bhi.n	801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aab6:	f2a0 632f 	subw	r3, r0, #1583	; 0x62f
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	2b18      	cmp	r3, #24
 801aabe:	d822      	bhi.n	801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aac0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 801aac4:	4ab0      	ldr	r2, [pc, #704]	; (801ad88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>)
 801aac6:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801aaca:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801aace:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801aad2:	0089      	lsls	r1, r1, #2
 801aad4:	f5a1 4182 	sub.w	r1, r1, #16640	; 0x4100
 801aad8:	391a      	subs	r1, #26
 801aada:	4419      	add	r1, r3
 801aadc:	2308      	movs	r3, #8
 801aade:	4401      	add	r1, r0
 801aae0:	4638      	mov	r0, r7
 801aae2:	b289      	uxth	r1, r1
 801aae4:	f7ff fd33 	bl	801a54e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801aae8:	4681      	mov	r9, r0
 801aaea:	b160      	cbz	r0, 801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aaec:	8842      	ldrh	r2, [r0, #2]
 801aaee:	42aa      	cmp	r2, r5
 801aaf0:	d109      	bne.n	801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801aaf2:	2103      	movs	r1, #3
 801aaf4:	4630      	mov	r0, r6
 801aaf6:	f7ff ff07 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aafa:	2201      	movs	r2, #1
 801aafc:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 801ab00:	f8b9 4000 	ldrh.w	r4, [r9]
 801ab04:	e768      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ab06:	f5a4 63c5 	sub.w	r3, r4, #1576	; 0x628
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	2b22      	cmp	r3, #34	; 0x22
 801ab0e:	d823      	bhi.n	801ab58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab10:	f2a5 632c 	subw	r3, r5, #1580	; 0x62c
 801ab14:	b29b      	uxth	r3, r3
 801ab16:	2b24      	cmp	r3, #36	; 0x24
 801ab18:	d81e      	bhi.n	801ab58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab1a:	f2a8 632c 	subw	r3, r8, #1580	; 0x62c
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	2b25      	cmp	r3, #37	; 0x25
 801ab22:	d819      	bhi.n	801ab58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801ab24:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801ab28:	4a98      	ldr	r2, [pc, #608]	; (801ad8c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x44c>)
 801ab2a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 801ab2e:	4638      	mov	r0, r7
 801ab30:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ab34:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801ab38:	ebc4 1181 	rsb	r1, r4, r1, lsl #6
 801ab3c:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 801ab40:	f501 517e 	add.w	r1, r1, #16256	; 0x3f80
 801ab44:	311c      	adds	r1, #28
 801ab46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801ab4a:	2362      	movs	r3, #98	; 0x62
 801ab4c:	b289      	uxth	r1, r1
 801ab4e:	f7ff fcfe 	bl	801a54e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801ab52:	4681      	mov	r9, r0
 801ab54:	2800      	cmp	r0, #0
 801ab56:	d179      	bne.n	801ac4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 801ab58:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	2b0a      	cmp	r3, #10
 801ab60:	f240 8147 	bls.w	801adf2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b2>
 801ab64:	f240 6374 	movw	r3, #1652	; 0x674
 801ab68:	429d      	cmp	r5, r3
 801ab6a:	bf0b      	itete	eq
 801ab6c:	4643      	moveq	r3, r8
 801ab6e:	462b      	movne	r3, r5
 801ab70:	46d3      	moveq	fp, sl
 801ab72:	46c3      	movne	fp, r8
 801ab74:	9300      	str	r3, [sp, #0]
 801ab76:	bf0c      	ite	eq
 801ab78:	462b      	moveq	r3, r5
 801ab7a:	2300      	movne	r3, #0
 801ab7c:	9302      	str	r3, [sp, #8]
 801ab7e:	f2a4 6326 	subw	r3, r4, #1574	; 0x626
 801ab82:	b29b      	uxth	r3, r3
 801ab84:	2b24      	cmp	r3, #36	; 0x24
 801ab86:	d903      	bls.n	801ab90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x250>
 801ab88:	f04f 0800 	mov.w	r8, #0
 801ab8c:	46c1      	mov	r9, r8
 801ab8e:	e022      	b.n	801abd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801ab90:	9b00      	ldr	r3, [sp, #0]
 801ab92:	f2a3 6322 	subw	r3, r3, #1570	; 0x622
 801ab96:	b29b      	uxth	r3, r3
 801ab98:	2bb3      	cmp	r3, #179	; 0xb3
 801ab9a:	d8f5      	bhi.n	801ab88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801ab9c:	f240 6344 	movw	r3, #1604	; 0x644
 801aba0:	9a00      	ldr	r2, [sp, #0]
 801aba2:	429a      	cmp	r2, r3
 801aba4:	d103      	bne.n	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x26e>
 801aba6:	f240 6327 	movw	r3, #1575	; 0x627
 801abaa:	459b      	cmp	fp, r3
 801abac:	d0ec      	beq.n	801ab88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801abae:	f89d 1000 	ldrb.w	r1, [sp]
 801abb2:	23ab      	movs	r3, #171	; 0xab
 801abb4:	4a76      	ldr	r2, [pc, #472]	; (801ad90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x450>)
 801abb6:	4638      	mov	r0, r7
 801abb8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801abbc:	b289      	uxth	r1, r1
 801abbe:	f7ff fcc6 	bl	801a54e <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801abc2:	f1b0 0900 	subs.w	r9, r0, #0
 801abc6:	9b00      	ldr	r3, [sp, #0]
 801abc8:	bf1a      	itte	ne
 801abca:	f04f 0801 	movne.w	r8, #1
 801abce:	465b      	movne	r3, fp
 801abd0:	f04f 0800 	moveq.w	r8, #0
 801abd4:	9300      	str	r3, [sp, #0]
 801abd6:	9b00      	ldr	r3, [sp, #0]
 801abd8:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 801abdc:	f2a3 6222 	subw	r2, r3, #1570	; 0x622
 801abe0:	b292      	uxth	r2, r2
 801abe2:	2ab1      	cmp	r2, #177	; 0xb1
 801abe4:	bf94      	ite	ls
 801abe6:	2300      	movls	r3, #0
 801abe8:	2301      	movhi	r3, #1
 801abea:	2ab2      	cmp	r2, #178	; 0xb2
 801abec:	9301      	str	r3, [sp, #4]
 801abee:	f081 0301 	eor.w	r3, r1, #1
 801abf2:	bf34      	ite	cc
 801abf4:	f04f 0a02 	movcc.w	sl, #2
 801abf8:	f04f 0a00 	movcs.w	sl, #0
 801abfc:	9304      	str	r3, [sp, #16]
 801abfe:	449a      	add	sl, r3
 801ac00:	f1b9 0f00 	cmp.w	r9, #0
 801ac04:	f000 80a9 	beq.w	801ad5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41a>
 801ac08:	f839 201a 	ldrh.w	r2, [r9, sl, lsl #1]
 801ac0c:	2a00      	cmp	r2, #0
 801ac0e:	f040 8086 	bne.w	801ad1e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ac12:	f1b8 0f00 	cmp.w	r8, #0
 801ac16:	f000 8082 	beq.w	801ad1e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ac1a:	4641      	mov	r1, r8
 801ac1c:	4630      	mov	r0, r6
 801ac1e:	f7ff fd41 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac22:	f108 0b01 	add.w	fp, r8, #1
 801ac26:	f240 6274 	movw	r2, #1652	; 0x674
 801ac2a:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801ac2e:	b289      	uxth	r1, r1
 801ac30:	290a      	cmp	r1, #10
 801ac32:	d901      	bls.n	801ac38 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f8>
 801ac34:	4290      	cmp	r0, r2
 801ac36:	d110      	bne.n	801ac5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x31a>
 801ac38:	fa1f f18b 	uxth.w	r1, fp
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	9203      	str	r2, [sp, #12]
 801ac40:	f10b 0b01 	add.w	fp, fp, #1
 801ac44:	f7ff fd2e 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac48:	9a03      	ldr	r2, [sp, #12]
 801ac4a:	e7ee      	b.n	801ac2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2ea>
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	f8cd a000 	str.w	sl, [sp]
 801ac52:	f04f 0802 	mov.w	r8, #2
 801ac56:	9302      	str	r3, [sp, #8]
 801ac58:	e7bd      	b.n	801abd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801ac5a:	4601      	mov	r1, r0
 801ac5c:	4638      	mov	r0, r7
 801ac5e:	f7ff fc8f 	bl	801a580 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ac62:	9003      	str	r0, [sp, #12]
 801ac64:	fa1f f18b 	uxth.w	r1, fp
 801ac68:	4630      	mov	r0, r6
 801ac6a:	f7ff fd1b 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac6e:	f10b 0b01 	add.w	fp, fp, #1
 801ac72:	f240 6274 	movw	r2, #1652	; 0x674
 801ac76:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801ac7a:	b289      	uxth	r1, r1
 801ac7c:	290a      	cmp	r1, #10
 801ac7e:	d901      	bls.n	801ac84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x344>
 801ac80:	4290      	cmp	r0, r2
 801ac82:	d109      	bne.n	801ac98 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>
 801ac84:	fa1f f18b 	uxth.w	r1, fp
 801ac88:	4630      	mov	r0, r6
 801ac8a:	9205      	str	r2, [sp, #20]
 801ac8c:	f10b 0b01 	add.w	fp, fp, #1
 801ac90:	f7ff fd08 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ac94:	9a05      	ldr	r2, [sp, #20]
 801ac96:	e7ee      	b.n	801ac76 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x336>
 801ac98:	4601      	mov	r1, r0
 801ac9a:	4638      	mov	r0, r7
 801ac9c:	f7ff fc70 	bl	801a580 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801aca0:	9b03      	ldr	r3, [sp, #12]
 801aca2:	b133      	cbz	r3, 801acb2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801aca4:	88da      	ldrh	r2, [r3, #6]
 801aca6:	b122      	cbz	r2, 801acb2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801aca8:	b118      	cbz	r0, 801acb2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801acaa:	8842      	ldrh	r2, [r0, #2]
 801acac:	b9ea      	cbnz	r2, 801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acae:	88c2      	ldrh	r2, [r0, #6]
 801acb0:	b9da      	cbnz	r2, 801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acb2:	f1ba 0f02 	cmp.w	sl, #2
 801acb6:	d109      	bne.n	801accc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x38c>
 801acb8:	f8b9 2000 	ldrh.w	r2, [r9]
 801acbc:	b1aa      	cbz	r2, 801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acbe:	f240 6244 	movw	r2, #1604	; 0x644
 801acc2:	4294      	cmp	r4, r2
 801acc4:	d111      	bne.n	801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acc6:	2301      	movs	r3, #1
 801acc8:	9301      	str	r3, [sp, #4]
 801acca:	e069      	b.n	801ada0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801accc:	f1ba 0f03 	cmp.w	sl, #3
 801acd0:	d10b      	bne.n	801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acd2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801acd6:	b142      	cbz	r2, 801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801acd8:	f240 6244 	movw	r2, #1604	; 0x644
 801acdc:	4294      	cmp	r4, r2
 801acde:	d104      	bne.n	801acea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801ace0:	f240 6247 	movw	r2, #1607	; 0x647
 801ace4:	9b00      	ldr	r3, [sp, #0]
 801ace6:	4293      	cmp	r3, r2
 801ace8:	d146      	bne.n	801ad78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x438>
 801acea:	f2a5 6522 	subw	r5, r5, #1570	; 0x622
 801acee:	4621      	mov	r1, r4
 801acf0:	4638      	mov	r0, r7
 801acf2:	b2ad      	uxth	r5, r5
 801acf4:	f7ff fc44 	bl	801a580 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801acf8:	2db1      	cmp	r5, #177	; 0xb1
 801acfa:	bf8c      	ite	hi
 801acfc:	2200      	movhi	r2, #0
 801acfe:	2202      	movls	r2, #2
 801ad00:	b168      	cbz	r0, 801ad1e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad02:	9b04      	ldr	r3, [sp, #16]
 801ad04:	441a      	add	r2, r3
 801ad06:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
 801ad0a:	b141      	cbz	r1, 801ad1e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad0c:	2db1      	cmp	r5, #177	; 0xb1
 801ad0e:	4692      	mov	sl, r2
 801ad10:	4681      	mov	r9, r0
 801ad12:	f04f 0800 	mov.w	r8, #0
 801ad16:	bf94      	ite	ls
 801ad18:	2300      	movls	r3, #0
 801ad1a:	2301      	movhi	r3, #1
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	f1ba 0f02 	cmp.w	sl, #2
 801ad22:	d122      	bne.n	801ad6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x42a>
 801ad24:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801ad28:	2a00      	cmp	r2, #0
 801ad2a:	d0cc      	beq.n	801acc6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x386>
 801ad2c:	f839 301a 	ldrh.w	r3, [r9, sl, lsl #1]
 801ad30:	eb09 054a 	add.w	r5, r9, sl, lsl #1
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	f43f ae4f 	beq.w	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad3a:	9b01      	ldr	r3, [sp, #4]
 801ad3c:	4641      	mov	r1, r8
 801ad3e:	4630      	mov	r0, r6
 801ad40:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ad44:	f7ff fde0 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ad48:	9b02      	ldr	r3, [sp, #8]
 801ad4a:	b123      	cbz	r3, 801ad56 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x416>
 801ad4c:	461a      	mov	r2, r3
 801ad4e:	2101      	movs	r1, #1
 801ad50:	4630      	mov	r0, r6
 801ad52:	f7ff fc8d 	bl	801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801ad56:	882c      	ldrh	r4, [r5, #0]
 801ad58:	e63e      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad5a:	4621      	mov	r1, r4
 801ad5c:	4638      	mov	r0, r7
 801ad5e:	f7ff fc0f 	bl	801a580 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ad62:	4681      	mov	r9, r0
 801ad64:	2800      	cmp	r0, #0
 801ad66:	d1da      	bne.n	801ad1e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ad68:	e636      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ad6a:	f1ba 0f03 	cmp.w	sl, #3
 801ad6e:	d111      	bne.n	801ad94 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x454>
 801ad70:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801ad74:	2a00      	cmp	r2, #0
 801ad76:	d1d9      	bne.n	801ad2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ad78:	2301      	movs	r3, #1
 801ad7a:	9301      	str	r3, [sp, #4]
 801ad7c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801ad80:	b172      	cbz	r2, 801ada0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801ad82:	f04f 0a01 	mov.w	sl, #1
 801ad86:	e7d1      	b.n	801ad2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ad88:	0802a01c 	.word	0x0802a01c
 801ad8c:	08029c48 	.word	0x08029c48
 801ad90:	0802959a 	.word	0x0802959a
 801ad94:	f1ba 0f01 	cmp.w	sl, #1
 801ad98:	d0f0      	beq.n	801ad7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x43c>
 801ad9a:	f1ba 0f00 	cmp.w	sl, #0
 801ad9e:	d1c5      	bne.n	801ad2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ada0:	f8b9 2000 	ldrh.w	r2, [r9]
 801ada4:	b93a      	cbnz	r2, 801adb6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ada6:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 801adaa:	f11a 0a00 	adds.w	sl, sl, #0
 801adae:	bf18      	it	ne
 801adb0:	f04f 0a01 	movne.w	sl, #1
 801adb4:	e7ba      	b.n	801ad2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801adb6:	f04f 0a00 	mov.w	sl, #0
 801adba:	e7b7      	b.n	801ad2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801adbc:	243c      	movs	r4, #60	; 0x3c
 801adbe:	e60b      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801adc0:	f240 6344 	movw	r3, #1604	; 0x644
 801adc4:	429d      	cmp	r5, r3
 801adc6:	f47f ae54 	bne.w	801aa72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801adca:	f240 6335 	movw	r3, #1589	; 0x635
 801adce:	429c      	cmp	r4, r3
 801add0:	f47f ae2b 	bne.w	801aa2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xea>
 801add4:	f240 6349 	movw	r3, #1609	; 0x649
 801add8:	4598      	cmp	r8, r3
 801adda:	f47f ae18 	bne.w	801aa0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xce>
 801adde:	2102      	movs	r1, #2
 801ade0:	4630      	mov	r0, r6
 801ade2:	f7ff fd91 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ade6:	2301      	movs	r3, #1
 801ade8:	f64f 54f9 	movw	r4, #65017	; 0xfdf9
 801adec:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801adf0:	e5f2      	b.n	801a9d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801adf2:	9502      	str	r5, [sp, #8]
 801adf4:	e6c3      	b.n	801ab7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x23e>
 801adf6:	bf00      	nop

0801adf8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801adf8:	b538      	push	{r3, r4, r5, lr}
 801adfa:	8ac3      	ldrh	r3, [r0, #22]
 801adfc:	2b09      	cmp	r3, #9
 801adfe:	d905      	bls.n	801ae0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801ae00:	4b08      	ldr	r3, [pc, #32]	; (801ae24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801ae02:	21f7      	movs	r1, #247	; 0xf7
 801ae04:	4a08      	ldr	r2, [pc, #32]	; (801ae28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801ae06:	4809      	ldr	r0, [pc, #36]	; (801ae2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801ae08:	f00a fcd8 	bl	80257bc <__assert_func>
 801ae0c:	8a82      	ldrh	r2, [r0, #20]
 801ae0e:	250a      	movs	r5, #10
 801ae10:	441a      	add	r2, r3
 801ae12:	3301      	adds	r3, #1
 801ae14:	fbb2 f4f5 	udiv	r4, r2, r5
 801ae18:	fb05 2214 	mls	r2, r5, r4, r2
 801ae1c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801ae20:	82c3      	strh	r3, [r0, #22]
 801ae22:	bd38      	pop	{r3, r4, r5, pc}
 801ae24:	080293a5 	.word	0x080293a5
 801ae28:	0802a43b 	.word	0x0802a43b
 801ae2c:	080293cb 	.word	0x080293cb

0801ae30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ae30:	b538      	push	{r3, r4, r5, lr}
 801ae32:	4604      	mov	r4, r0
 801ae34:	f100 051a 	add.w	r5, r0, #26
 801ae38:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae3a:	2b0a      	cmp	r3, #10
 801ae3c:	d01c      	beq.n	801ae78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801ae3e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801ae40:	b962      	cbnz	r2, 801ae5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801ae42:	f104 051a 	add.w	r5, r4, #26
 801ae46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae48:	2b0a      	cmp	r3, #10
 801ae4a:	d015      	beq.n	801ae78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	f7ff fb52 	bl	801a4f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ae52:	4601      	mov	r1, r0
 801ae54:	4628      	mov	r0, r5
 801ae56:	f7ff ffcf 	bl	801adf8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801ae5a:	e7f4      	b.n	801ae46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801ae5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ae5e:	3a01      	subs	r2, #1
 801ae60:	4628      	mov	r0, r5
 801ae62:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801ae66:	3301      	adds	r3, #1
 801ae68:	f003 0301 	and.w	r3, r3, #1
 801ae6c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801ae6e:	8722      	strh	r2, [r4, #56]	; 0x38
 801ae70:	86e3      	strh	r3, [r4, #54]	; 0x36
 801ae72:	f7ff ffc1 	bl	801adf8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801ae76:	e7df      	b.n	801ae38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801ae78:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ae7c <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	b510      	push	{r4, lr}
 801ae80:	6043      	str	r3, [r0, #4]
 801ae82:	4604      	mov	r4, r0
 801ae84:	60c3      	str	r3, [r0, #12]
 801ae86:	7403      	strb	r3, [r0, #16]
 801ae88:	8603      	strh	r3, [r0, #48]	; 0x30
 801ae8a:	8303      	strh	r3, [r0, #24]
 801ae8c:	8703      	strh	r3, [r0, #56]	; 0x38
 801ae8e:	f7ff ffcf 	bl	801ae30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ae92:	4a0a      	ldr	r2, [pc, #40]	; (801aebc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801ae94:	6813      	ldr	r3, [r2, #0]
 801ae96:	4611      	mov	r1, r2
 801ae98:	b913      	cbnz	r3, 801aea0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801ae9a:	6852      	ldr	r2, [r2, #4]
 801ae9c:	07d0      	lsls	r0, r2, #31
 801ae9e:	d50b      	bpl.n	801aeb8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801aea0:	6849      	ldr	r1, [r1, #4]
 801aea2:	104a      	asrs	r2, r1, #1
 801aea4:	07c9      	lsls	r1, r1, #31
 801aea6:	eb04 0002 	add.w	r0, r4, r2
 801aeaa:	bf48      	it	mi
 801aeac:	58a2      	ldrmi	r2, [r4, r2]
 801aeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aeb2:	bf48      	it	mi
 801aeb4:	58d3      	ldrmi	r3, [r2, r3]
 801aeb6:	4718      	bx	r3
 801aeb8:	bd10      	pop	{r4, pc}
 801aeba:	bf00      	nop
 801aebc:	20000038 	.word	0x20000038

0801aec0 <_ZN8touchgfx12TextProviderC1Ev>:
 801aec0:	2300      	movs	r3, #0
 801aec2:	2201      	movs	r2, #1
 801aec4:	b510      	push	{r4, lr}
 801aec6:	4604      	mov	r4, r0
 801aec8:	60c3      	str	r3, [r0, #12]
 801aeca:	7403      	strb	r3, [r0, #16]
 801aecc:	82c3      	strh	r3, [r0, #22]
 801aece:	8303      	strh	r3, [r0, #24]
 801aed0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801aed2:	8603      	strh	r3, [r0, #48]	; 0x30
 801aed4:	86c3      	strh	r3, [r0, #54]	; 0x36
 801aed6:	8703      	strh	r3, [r0, #56]	; 0x38
 801aed8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801aeda:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801aede:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801aee2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801aee6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801aeea:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801aeee:	e9c0 3300 	strd	r3, r3, [r0]
 801aef2:	f7ff ffc3 	bl	801ae7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801aef6:	4620      	mov	r0, r4
 801aef8:	bd10      	pop	{r4, pc}

0801aefa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801aefa:	b410      	push	{r4}
 801aefc:	6082      	str	r2, [r0, #8]
 801aefe:	6001      	str	r1, [r0, #0]
 801af00:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af06:	f7ff bfb9 	b.w	801ae7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801af0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801af0c:	b508      	push	{r3, lr}
 801af0e:	88c2      	ldrh	r2, [r0, #6]
 801af10:	440a      	add	r2, r1
 801af12:	2a02      	cmp	r2, #2
 801af14:	dd05      	ble.n	801af22 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801af16:	4b06      	ldr	r3, [pc, #24]	; (801af30 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801af18:	21ec      	movs	r1, #236	; 0xec
 801af1a:	4a06      	ldr	r2, [pc, #24]	; (801af34 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801af1c:	4806      	ldr	r0, [pc, #24]	; (801af38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801af1e:	f00a fc4d 	bl	80257bc <__assert_func>
 801af22:	8883      	ldrh	r3, [r0, #4]
 801af24:	80c2      	strh	r2, [r0, #6]
 801af26:	1a59      	subs	r1, r3, r1
 801af28:	f001 0101 	and.w	r1, r1, #1
 801af2c:	8081      	strh	r1, [r0, #4]
 801af2e:	bd08      	pop	{r3, pc}
 801af30:	080293f7 	.word	0x080293f7
 801af34:	0802a647 	.word	0x0802a647
 801af38:	080293cb 	.word	0x080293cb

0801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801af3c:	b508      	push	{r3, lr}
 801af3e:	88c3      	ldrh	r3, [r0, #6]
 801af40:	428b      	cmp	r3, r1
 801af42:	d805      	bhi.n	801af50 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801af44:	4b06      	ldr	r3, [pc, #24]	; (801af60 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801af46:	21fd      	movs	r1, #253	; 0xfd
 801af48:	4a06      	ldr	r2, [pc, #24]	; (801af64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801af4a:	4807      	ldr	r0, [pc, #28]	; (801af68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801af4c:	f00a fc36 	bl	80257bc <__assert_func>
 801af50:	8883      	ldrh	r3, [r0, #4]
 801af52:	4419      	add	r1, r3
 801af54:	f001 0101 	and.w	r1, r1, #1
 801af58:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801af5c:	bd08      	pop	{r3, pc}
 801af5e:	bf00      	nop
 801af60:	080293bd 	.word	0x080293bd
 801af64:	0802a79f 	.word	0x0802a79f
 801af68:	080293cb 	.word	0x080293cb

0801af6c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af6c:	b570      	push	{r4, r5, r6, lr}
 801af6e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801af70:	4604      	mov	r4, r0
 801af72:	b92a      	cbnz	r2, 801af80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801af74:	4b12      	ldr	r3, [pc, #72]	; (801afc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801af76:	21de      	movs	r1, #222	; 0xde
 801af78:	4a12      	ldr	r2, [pc, #72]	; (801afc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801af7a:	4813      	ldr	r0, [pc, #76]	; (801afc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801af7c:	f00a fc1e 	bl	80257bc <__assert_func>
 801af80:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801af82:	260a      	movs	r6, #10
 801af84:	3a01      	subs	r2, #1
 801af86:	3412      	adds	r4, #18
 801af88:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801af8c:	3301      	adds	r3, #1
 801af8e:	8b4d      	ldrh	r5, [r1, #26]
 801af90:	8602      	strh	r2, [r0, #48]	; 0x30
 801af92:	fbb3 f1f6 	udiv	r1, r3, r6
 801af96:	fb06 3311 	mls	r3, r6, r1, r3
 801af9a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801af9c:	f7ff ff48 	bl	801ae30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801afa0:	88e3      	ldrh	r3, [r4, #6]
 801afa2:	2101      	movs	r1, #1
 801afa4:	2b02      	cmp	r3, #2
 801afa6:	bf04      	itt	eq
 801afa8:	2301      	moveq	r3, #1
 801afaa:	80e3      	strheq	r3, [r4, #6]
 801afac:	4620      	mov	r0, r4
 801afae:	f7ff ffad 	bl	801af0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801afb2:	4620      	mov	r0, r4
 801afb4:	462a      	mov	r2, r5
 801afb6:	2100      	movs	r1, #0
 801afb8:	f7ff ffc0 	bl	801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801afbc:	4628      	mov	r0, r5
 801afbe:	bd70      	pop	{r4, r5, r6, pc}
 801afc0:	0802939c 	.word	0x0802939c
 801afc4:	0802a390 	.word	0x0802a390
 801afc8:	080293cb 	.word	0x080293cb

0801afcc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801afcc:	428a      	cmp	r2, r1
 801afce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd2:	4604      	mov	r4, r0
 801afd4:	460e      	mov	r6, r1
 801afd6:	4615      	mov	r5, r2
 801afd8:	469a      	mov	sl, r3
 801afda:	d92b      	bls.n	801b034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801afdc:	1a57      	subs	r7, r2, r1
 801afde:	f04f 0800 	mov.w	r8, #0
 801afe2:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801afe6:	f04f 0b0a 	mov.w	fp, #10
 801afea:	b2bf      	uxth	r7, r7
 801afec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afee:	b92b      	cbnz	r3, 801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801aff0:	4b24      	ldr	r3, [pc, #144]	; (801b084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801aff2:	21e6      	movs	r1, #230	; 0xe6
 801aff4:	4a24      	ldr	r2, [pc, #144]	; (801b088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801aff6:	4825      	ldr	r0, [pc, #148]	; (801b08c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801aff8:	f00a fbe0 	bl	80257bc <__assert_func>
 801affc:	3b01      	subs	r3, #1
 801affe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b000:	2101      	movs	r1, #1
 801b002:	4648      	mov	r0, r9
 801b004:	b29b      	uxth	r3, r3
 801b006:	f108 0801 	add.w	r8, r8, #1
 801b00a:	441a      	add	r2, r3
 801b00c:	8623      	strh	r3, [r4, #48]	; 0x30
 801b00e:	fbb2 f3fb 	udiv	r3, r2, fp
 801b012:	fb0b 2313 	mls	r3, fp, r3, r2
 801b016:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b01a:	8b5a      	ldrh	r2, [r3, #26]
 801b01c:	9201      	str	r2, [sp, #4]
 801b01e:	f7ff ff75 	bl	801af0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b022:	9a01      	ldr	r2, [sp, #4]
 801b024:	2100      	movs	r1, #0
 801b026:	4648      	mov	r0, r9
 801b028:	f7ff ff88 	bl	801af3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b02c:	fa1f f388 	uxth.w	r3, r8
 801b030:	429f      	cmp	r7, r3
 801b032:	d8db      	bhi.n	801afec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801b034:	f104 071a 	add.w	r7, r4, #26
 801b038:	4631      	mov	r1, r6
 801b03a:	260a      	movs	r6, #10
 801b03c:	4638      	mov	r0, r7
 801b03e:	f7ff fc63 	bl	801a908 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801b042:	b1c5      	cbz	r5, 801b076 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b044:	3d01      	subs	r5, #1
 801b046:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b048:	b2ad      	uxth	r5, r5
 801b04a:	2b09      	cmp	r3, #9
 801b04c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801b050:	d903      	bls.n	801b05a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801b052:	4b0f      	ldr	r3, [pc, #60]	; (801b090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801b054:	21ec      	movs	r1, #236	; 0xec
 801b056:	4a0f      	ldr	r2, [pc, #60]	; (801b094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801b058:	e7cd      	b.n	801aff6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801b05a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801b05c:	3301      	adds	r3, #1
 801b05e:	3109      	adds	r1, #9
 801b060:	8623      	strh	r3, [r4, #48]	; 0x30
 801b062:	fbb1 f0f6 	udiv	r0, r1, r6
 801b066:	fb06 1110 	mls	r1, r6, r0, r1
 801b06a:	4638      	mov	r0, r7
 801b06c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801b06e:	2100      	movs	r1, #0
 801b070:	f7ff fafe 	bl	801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b074:	e7e5      	b.n	801b042 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801b076:	4620      	mov	r0, r4
 801b078:	b003      	add	sp, #12
 801b07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b07e:	f7ff bed7 	b.w	801ae30 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b082:	bf00      	nop
 801b084:	0802939c 	.word	0x0802939c
 801b088:	0802a214 	.word	0x0802a214
 801b08c:	080293cb 	.word	0x080293cb
 801b090:	080293f7 	.word	0x080293f7
 801b094:	0802a18c 	.word	0x0802a18c

0801b098 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09c:	4605      	mov	r5, r0
 801b09e:	4616      	mov	r6, r2
 801b0a0:	1c8c      	adds	r4, r1, #2
 801b0a2:	8809      	ldrh	r1, [r1, #0]
 801b0a4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0a8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0ac:	42b3      	cmp	r3, r6
 801b0ae:	d124      	bne.n	801b0fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0b0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0b4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0b8:	f001 070f 	and.w	r7, r1, #15
 801b0bc:	4652      	mov	r2, sl
 801b0be:	f8cd 8000 	str.w	r8, [sp]
 801b0c2:	464b      	mov	r3, r9
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f7ff fbe2 	bl	801a890 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b0cc:	4683      	mov	fp, r0
 801b0ce:	b168      	cbz	r0, 801b0ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b0d0:	eb0a 0109 	add.w	r1, sl, r9
 801b0d4:	463a      	mov	r2, r7
 801b0d6:	4628      	mov	r0, r5
 801b0d8:	4441      	add	r1, r8
 801b0da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b0de:	4649      	mov	r1, r9
 801b0e0:	f7ff ff74 	bl	801afcc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b0e4:	4658      	mov	r0, fp
 801b0e6:	b003      	add	sp, #12
 801b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ec:	eb07 010a 	add.w	r1, r7, sl
 801b0f0:	4449      	add	r1, r9
 801b0f2:	4441      	add	r1, r8
 801b0f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b0f8:	e7d2      	b.n	801b0a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b0fa:	f04f 0b00 	mov.w	fp, #0
 801b0fe:	e7f1      	b.n	801b0e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b104:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b106:	4604      	mov	r4, r0
 801b108:	260b      	movs	r6, #11
 801b10a:	f100 091a 	add.w	r9, r0, #26
 801b10e:	886f      	ldrh	r7, [r5, #2]
 801b110:	087f      	lsrs	r7, r7, #1
 801b112:	3e01      	subs	r6, #1
 801b114:	d013      	beq.n	801b13e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b116:	2100      	movs	r1, #0
 801b118:	4648      	mov	r0, r9
 801b11a:	f7ff fac3 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b11e:	462a      	mov	r2, r5
 801b120:	4680      	mov	r8, r0
 801b122:	4603      	mov	r3, r0
 801b124:	4639      	mov	r1, r7
 801b126:	4620      	mov	r0, r4
 801b128:	f7ff fa83 	bl	801a632 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b12c:	b138      	cbz	r0, 801b13e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b12e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b132:	4642      	mov	r2, r8
 801b134:	4620      	mov	r0, r4
 801b136:	f7ff ffaf 	bl	801b098 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b13a:	2800      	cmp	r0, #0
 801b13c:	d1e9      	bne.n	801b112 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801b13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801b144:	4b1e      	ldr	r3, [pc, #120]	; (801b1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801b146:	b570      	push	{r4, r5, r6, lr}
 801b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14c:	4604      	mov	r4, r0
 801b14e:	f003 0501 	and.w	r5, r3, #1
 801b152:	b902      	cbnz	r2, 801b156 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801b154:	b165      	cbz	r5, 801b170 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801b156:	105b      	asrs	r3, r3, #1
 801b158:	f104 061a 	add.w	r6, r4, #26
 801b15c:	18e0      	adds	r0, r4, r3
 801b15e:	b10d      	cbz	r5, 801b164 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801b160:	58e3      	ldr	r3, [r4, r3]
 801b162:	589a      	ldr	r2, [r3, r2]
 801b164:	4790      	blx	r2
 801b166:	2100      	movs	r1, #0
 801b168:	4602      	mov	r2, r0
 801b16a:	4630      	mov	r0, r6
 801b16c:	f7ff fa80 	bl	801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b172:	b303      	cbz	r3, 801b1b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b174:	f104 051a 	add.w	r5, r4, #26
 801b178:	2100      	movs	r1, #0
 801b17a:	4628      	mov	r0, r5
 801b17c:	f7ff fa92 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b180:	b1c8      	cbz	r0, 801b1b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b182:	4620      	mov	r0, r4
 801b184:	f7ff ffbc 	bl	801b100 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801b188:	2101      	movs	r1, #1
 801b18a:	4628      	mov	r0, r5
 801b18c:	f7ff fa8a 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b190:	f640 133f 	movw	r3, #2367	; 0x93f
 801b194:	4606      	mov	r6, r0
 801b196:	4298      	cmp	r0, r3
 801b198:	d10d      	bne.n	801b1b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801b19a:	2100      	movs	r1, #0
 801b19c:	4628      	mov	r0, r5
 801b19e:	f7ff fa81 	bl	801a6a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b1a2:	2101      	movs	r1, #1
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	4628      	mov	r0, r5
 801b1a8:	f7ff fa62 	bl	801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b1ac:	4632      	mov	r2, r6
 801b1ae:	2100      	movs	r1, #0
 801b1b0:	4628      	mov	r0, r5
 801b1b2:	f7ff fa5d 	bl	801a670 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1bc:	f7ff bed6 	b.w	801af6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b1c0:	20000040 	.word	0x20000040

0801b1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1c6:	4617      	mov	r7, r2
 801b1c8:	461e      	mov	r6, r3
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	f7ff ffba 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	4601      	mov	r1, r0
 801b1d6:	4638      	mov	r0, r7
 801b1d8:	68db      	ldr	r3, [r3, #12]
 801b1da:	4798      	blx	r3
 801b1dc:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b1e0:	4602      	mov	r2, r0
 801b1e2:	6030      	str	r0, [r6, #0]
 801b1e4:	b29b      	uxth	r3, r3
 801b1e6:	2b7f      	cmp	r3, #127	; 0x7f
 801b1e8:	d813      	bhi.n	801b212 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801b1ea:	4639      	mov	r1, r7
 801b1ec:	4628      	mov	r0, r5
 801b1ee:	f7ff fa73 	bl	801a6d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b1f2:	6030      	str	r0, [r6, #0]
 801b1f4:	6833      	ldr	r3, [r6, #0]
 801b1f6:	b143      	cbz	r3, 801b20a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b1f8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801b1fc:	7a9b      	ldrb	r3, [r3, #10]
 801b1fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b202:	4313      	orrs	r3, r2
 801b204:	bf0c      	ite	eq
 801b206:	2301      	moveq	r3, #1
 801b208:	2300      	movne	r3, #0
 801b20a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b20e:	4620      	mov	r0, r4
 801b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b212:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b216:	2b00      	cmp	r3, #0
 801b218:	d0ec      	beq.n	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b21a:	f640 1302 	movw	r3, #2306	; 0x902
 801b21e:	429c      	cmp	r4, r3
 801b220:	d1e8      	bne.n	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b222:	4601      	mov	r1, r0
 801b224:	4628      	mov	r0, r5
 801b226:	f7ff f9d5 	bl	801a5d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b22a:	e7e2      	b.n	801b1f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801b22c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b230:	4617      	mov	r7, r2
 801b232:	461e      	mov	r6, r3
 801b234:	4605      	mov	r5, r0
 801b236:	f7ff ff85 	bl	801b144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	4604      	mov	r4, r0
 801b23e:	4601      	mov	r1, r0
 801b240:	4638      	mov	r0, r7
 801b242:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801b246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b24a:	47c0      	blx	r8
 801b24c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b250:	4602      	mov	r2, r0
 801b252:	6030      	str	r0, [r6, #0]
 801b254:	b29b      	uxth	r3, r3
 801b256:	2b7f      	cmp	r3, #127	; 0x7f
 801b258:	d814      	bhi.n	801b284 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801b25a:	4639      	mov	r1, r7
 801b25c:	4628      	mov	r0, r5
 801b25e:	f7ff fa3b 	bl	801a6d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b262:	6030      	str	r0, [r6, #0]
 801b264:	6833      	ldr	r3, [r6, #0]
 801b266:	b143      	cbz	r3, 801b27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b268:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801b26c:	7a9b      	ldrb	r3, [r3, #10]
 801b26e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b272:	4313      	orrs	r3, r2
 801b274:	bf0c      	ite	eq
 801b276:	2301      	moveq	r3, #1
 801b278:	2300      	movne	r3, #0
 801b27a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b27e:	4620      	mov	r0, r4
 801b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b284:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d0eb      	beq.n	801b264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b28c:	f640 1302 	movw	r3, #2306	; 0x902
 801b290:	429c      	cmp	r4, r3
 801b292:	d1e7      	bne.n	801b264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b294:	4601      	mov	r1, r0
 801b296:	4628      	mov	r0, r5
 801b298:	f7ff f99c 	bl	801a5d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b29c:	e7e1      	b.n	801b262 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801b29e <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b29e:	4602      	mov	r2, r0
 801b2a0:	b148      	cbz	r0, 801b2b6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	b298      	uxth	r0, r3
 801b2a6:	3301      	adds	r3, #1
 801b2a8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b2ac:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b2b0:	2900      	cmp	r1, #0
 801b2b2:	d1f7      	bne.n	801b2a4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b2b4:	4770      	bx	lr
 801b2b6:	4770      	bx	lr

0801b2b8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801b2b8:	b140      	cbz	r0, 801b2cc <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801b2ba:	4602      	mov	r2, r0
 801b2bc:	1a13      	subs	r3, r2, r0
 801b2be:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b2c2:	b29b      	uxth	r3, r3
 801b2c4:	2900      	cmp	r1, #0
 801b2c6:	d1f9      	bne.n	801b2bc <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	4770      	bx	lr
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	e7fb      	b.n	801b2c8 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801b2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b2d0:	b530      	push	{r4, r5, lr}
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	b159      	cbz	r1, 801b2ee <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b2d6:	b148      	cbz	r0, 801b2ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b2d8:	2300      	movs	r3, #0
 801b2da:	b298      	uxth	r0, r3
 801b2dc:	4282      	cmp	r2, r0
 801b2de:	d905      	bls.n	801b2ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b2e0:	5ccd      	ldrb	r5, [r1, r3]
 801b2e2:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b2e6:	3301      	adds	r3, #1
 801b2e8:	2d00      	cmp	r5, #0
 801b2ea:	d1f6      	bne.n	801b2da <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b2ec:	bd30      	pop	{r4, r5, pc}
 801b2ee:	4608      	mov	r0, r1
 801b2f0:	e7fc      	b.n	801b2ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b2f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2f4:	468c      	mov	ip, r1
 801b2f6:	b08b      	sub	sp, #44	; 0x2c
 801b2f8:	2100      	movs	r1, #0
 801b2fa:	ae01      	add	r6, sp, #4
 801b2fc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b300:	211f      	movs	r1, #31
 801b302:	fbb0 f7f3 	udiv	r7, r0, r3
 801b306:	fb03 0517 	mls	r5, r3, r7, r0
 801b30a:	4638      	mov	r0, r7
 801b30c:	b2ec      	uxtb	r4, r5
 801b30e:	2d09      	cmp	r5, #9
 801b310:	bfd4      	ite	le
 801b312:	3430      	addle	r4, #48	; 0x30
 801b314:	3457      	addgt	r4, #87	; 0x57
 801b316:	b2e4      	uxtb	r4, r4
 801b318:	558c      	strb	r4, [r1, r6]
 801b31a:	1e4c      	subs	r4, r1, #1
 801b31c:	b92f      	cbnz	r7, 801b32a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b31e:	4431      	add	r1, r6
 801b320:	4660      	mov	r0, ip
 801b322:	f7ff ffd5 	bl	801b2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b326:	b00b      	add	sp, #44	; 0x2c
 801b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b32a:	4621      	mov	r1, r4
 801b32c:	e7e9      	b.n	801b302 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b32e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b32e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b330:	4607      	mov	r7, r0
 801b332:	b08b      	sub	sp, #44	; 0x2c
 801b334:	4608      	mov	r0, r1
 801b336:	b341      	cbz	r1, 801b38a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b338:	1e99      	subs	r1, r3, #2
 801b33a:	290e      	cmp	r1, #14
 801b33c:	d825      	bhi.n	801b38a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b33e:	2100      	movs	r1, #0
 801b340:	463c      	mov	r4, r7
 801b342:	261f      	movs	r6, #31
 801b344:	f10d 0c04 	add.w	ip, sp, #4
 801b348:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b34c:	1e71      	subs	r1, r6, #1
 801b34e:	fb94 fef3 	sdiv	lr, r4, r3
 801b352:	fb03 441e 	mls	r4, r3, lr, r4
 801b356:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b35a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b35e:	b2ec      	uxtb	r4, r5
 801b360:	2d09      	cmp	r5, #9
 801b362:	bfd4      	ite	le
 801b364:	3430      	addle	r4, #48	; 0x30
 801b366:	3457      	addgt	r4, #87	; 0x57
 801b368:	b2e4      	uxtb	r4, r4
 801b36a:	f80c 4006 	strb.w	r4, [ip, r6]
 801b36e:	4674      	mov	r4, lr
 801b370:	b96c      	cbnz	r4, 801b38e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b372:	2f00      	cmp	r7, #0
 801b374:	da05      	bge.n	801b382 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b376:	ab0a      	add	r3, sp, #40	; 0x28
 801b378:	4419      	add	r1, r3
 801b37a:	232d      	movs	r3, #45	; 0x2d
 801b37c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b380:	1eb1      	subs	r1, r6, #2
 801b382:	3101      	adds	r1, #1
 801b384:	4461      	add	r1, ip
 801b386:	f7ff ffa3 	bl	801b2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b38a:	b00b      	add	sp, #44	; 0x2c
 801b38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b38e:	460e      	mov	r6, r1
 801b390:	e7dc      	b.n	801b34c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b392 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801b392:	b510      	push	{r4, lr}
 801b394:	b158      	cbz	r0, 801b3ae <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b396:	1e82      	subs	r2, r0, #2
 801b398:	210a      	movs	r1, #10
 801b39a:	2000      	movs	r0, #0
 801b39c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b3a0:	3b30      	subs	r3, #48	; 0x30
 801b3a2:	b29c      	uxth	r4, r3
 801b3a4:	2c09      	cmp	r4, #9
 801b3a6:	d802      	bhi.n	801b3ae <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b3a8:	fb01 3000 	mla	r0, r1, r0, r3
 801b3ac:	e7f6      	b.n	801b39c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801b3ae:	bd10      	pop	{r4, pc}

0801b3b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b4:	b085      	sub	sp, #20
 801b3b6:	f8d0 8000 	ldr.w	r8, [r0]
 801b3ba:	468a      	mov	sl, r1
 801b3bc:	461c      	mov	r4, r3
 801b3be:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b3c2:	4681      	mov	r9, r0
 801b3c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b3c8:	4640      	mov	r0, r8
 801b3ca:	9203      	str	r2, [sp, #12]
 801b3cc:	9102      	str	r1, [sp, #8]
 801b3ce:	9301      	str	r3, [sp, #4]
 801b3d0:	f7ff ff65 	bl	801b29e <_ZN8touchgfx7Unicode6strlenEPKt>
 801b3d4:	9a03      	ldr	r2, [sp, #12]
 801b3d6:	f1ba 0f00 	cmp.w	sl, #0
 801b3da:	bf0c      	ite	eq
 801b3dc:	4684      	moveq	ip, r0
 801b3de:	f100 0c01 	addne.w	ip, r0, #1
 801b3e2:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801b3e6:	8812      	ldrh	r2, [r2, #0]
 801b3e8:	fa1f fc8c 	uxth.w	ip, ip
 801b3ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b3ee:	2a69      	cmp	r2, #105	; 0x69
 801b3f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b3f2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b3f4:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801b3f8:	d004      	beq.n	801b404 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b3fa:	d844      	bhi.n	801b486 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801b3fc:	2a58      	cmp	r2, #88	; 0x58
 801b3fe:	d001      	beq.n	801b404 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b400:	2a64      	cmp	r2, #100	; 0x64
 801b402:	d14b      	bne.n	801b49c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b404:	b1a4      	cbz	r4, 801b430 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b406:	b956      	cbnz	r6, 801b41e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b408:	2801      	cmp	r0, #1
 801b40a:	d108      	bne.n	801b41e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b40c:	f8b8 2000 	ldrh.w	r2, [r8]
 801b410:	2a30      	cmp	r2, #48	; 0x30
 801b412:	bf02      	ittt	eq
 801b414:	f108 0202 	addeq.w	r2, r8, #2
 801b418:	4630      	moveq	r0, r6
 801b41a:	f8c9 2000 	streq.w	r2, [r9]
 801b41e:	45b4      	cmp	ip, r6
 801b420:	da3e      	bge.n	801b4a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801b422:	b2b6      	uxth	r6, r6
 801b424:	eba6 040c 	sub.w	r4, r6, ip
 801b428:	46b4      	mov	ip, r6
 801b42a:	b2a4      	uxth	r4, r4
 801b42c:	f04f 0b00 	mov.w	fp, #0
 801b430:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b434:	3a01      	subs	r2, #1
 801b436:	b169      	cbz	r1, 801b454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b438:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b43a:	458c      	cmp	ip, r1
 801b43c:	da09      	bge.n	801b452 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b43e:	eba1 010c 	sub.w	r1, r1, ip
 801b442:	b289      	uxth	r1, r1
 801b444:	b933      	cbnz	r3, 801b454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b446:	f1bb 0f00 	cmp.w	fp, #0
 801b44a:	d02b      	beq.n	801b4a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b44c:	b350      	cbz	r0, 801b4a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b44e:	440c      	add	r4, r1
 801b450:	b2a4      	uxth	r4, r4
 801b452:	2100      	movs	r1, #0
 801b454:	682b      	ldr	r3, [r5, #0]
 801b456:	4293      	cmp	r3, r2
 801b458:	da07      	bge.n	801b46a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b45a:	f1ba 0f00 	cmp.w	sl, #0
 801b45e:	d004      	beq.n	801b46a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b460:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801b464:	682b      	ldr	r3, [r5, #0]
 801b466:	3301      	adds	r3, #1
 801b468:	602b      	str	r3, [r5, #0]
 801b46a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b46e:	b354      	cbz	r4, 801b4c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b470:	682e      	ldr	r6, [r5, #0]
 801b472:	3c01      	subs	r4, #1
 801b474:	42b2      	cmp	r2, r6
 801b476:	b2a4      	uxth	r4, r4
 801b478:	dd25      	ble.n	801b4c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b47a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b47e:	682b      	ldr	r3, [r5, #0]
 801b480:	3301      	adds	r3, #1
 801b482:	602b      	str	r3, [r5, #0]
 801b484:	e7f3      	b.n	801b46e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801b486:	2a73      	cmp	r2, #115	; 0x73
 801b488:	d003      	beq.n	801b492 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801b48a:	2a78      	cmp	r2, #120	; 0x78
 801b48c:	d0ba      	beq.n	801b404 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b48e:	2a6f      	cmp	r2, #111	; 0x6f
 801b490:	e7b7      	b.n	801b402 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801b492:	2c00      	cmp	r4, #0
 801b494:	d0cc      	beq.n	801b430 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b496:	42b0      	cmp	r0, r6
 801b498:	dd00      	ble.n	801b49c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b49a:	b2b0      	uxth	r0, r6
 801b49c:	2400      	movs	r4, #0
 801b49e:	e7c7      	b.n	801b430 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b4a0:	2400      	movs	r4, #0
 801b4a2:	e7c3      	b.n	801b42c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801b4a4:	2900      	cmp	r1, #0
 801b4a6:	d0d5      	beq.n	801b454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b4a8:	f04f 0c20 	mov.w	ip, #32
 801b4ac:	682e      	ldr	r6, [r5, #0]
 801b4ae:	2900      	cmp	r1, #0
 801b4b0:	d0d0      	beq.n	801b454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b4b2:	3901      	subs	r1, #1
 801b4b4:	4296      	cmp	r6, r2
 801b4b6:	b289      	uxth	r1, r1
 801b4b8:	dacb      	bge.n	801b452 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b4ba:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b4be:	682b      	ldr	r3, [r5, #0]
 801b4c0:	3301      	adds	r3, #1
 801b4c2:	602b      	str	r3, [r5, #0]
 801b4c4:	e7f2      	b.n	801b4ac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801b4c6:	b198      	cbz	r0, 801b4f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b4c8:	f8d9 3000 	ldr.w	r3, [r9]
 801b4cc:	881c      	ldrh	r4, [r3, #0]
 801b4ce:	b17c      	cbz	r4, 801b4f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b4d0:	682c      	ldr	r4, [r5, #0]
 801b4d2:	3801      	subs	r0, #1
 801b4d4:	42a2      	cmp	r2, r4
 801b4d6:	b280      	uxth	r0, r0
 801b4d8:	dd0a      	ble.n	801b4f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b4da:	1c9c      	adds	r4, r3, #2
 801b4dc:	f8c9 4000 	str.w	r4, [r9]
 801b4e0:	881c      	ldrh	r4, [r3, #0]
 801b4e2:	682b      	ldr	r3, [r5, #0]
 801b4e4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801b4e8:	682b      	ldr	r3, [r5, #0]
 801b4ea:	3301      	adds	r3, #1
 801b4ec:	602b      	str	r3, [r5, #0]
 801b4ee:	e7ea      	b.n	801b4c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b4f0:	2620      	movs	r6, #32
 801b4f2:	b151      	cbz	r1, 801b50a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b4f4:	6828      	ldr	r0, [r5, #0]
 801b4f6:	3901      	subs	r1, #1
 801b4f8:	4282      	cmp	r2, r0
 801b4fa:	b289      	uxth	r1, r1
 801b4fc:	dd05      	ble.n	801b50a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b4fe:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801b502:	682b      	ldr	r3, [r5, #0]
 801b504:	3301      	adds	r3, #1
 801b506:	602b      	str	r3, [r5, #0]
 801b508:	e7f3      	b.n	801b4f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801b50a:	b005      	add	sp, #20
 801b50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801b510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b514:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b516:	4604      	mov	r4, r0
 801b518:	f04f 0801 	mov.w	r8, #1
 801b51c:	2000      	movs	r0, #0
 801b51e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801b522:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801b526:	8008      	strh	r0, [r1, #0]
 801b528:	7010      	strb	r0, [r2, #0]
 801b52a:	7018      	strb	r0, [r3, #0]
 801b52c:	f88c 0000 	strb.w	r0, [ip]
 801b530:	f88e 0000 	strb.w	r0, [lr]
 801b534:	7030      	strb	r0, [r6, #0]
 801b536:	6820      	ldr	r0, [r4, #0]
 801b538:	8800      	ldrh	r0, [r0, #0]
 801b53a:	b190      	cbz	r0, 801b562 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b53c:	282b      	cmp	r0, #43	; 0x2b
 801b53e:	d001      	beq.n	801b544 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801b540:	2820      	cmp	r0, #32
 801b542:	d104      	bne.n	801b54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801b544:	8008      	strh	r0, [r1, #0]
 801b546:	6820      	ldr	r0, [r4, #0]
 801b548:	3002      	adds	r0, #2
 801b54a:	6020      	str	r0, [r4, #0]
 801b54c:	e7f3      	b.n	801b536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801b54e:	282d      	cmp	r0, #45	; 0x2d
 801b550:	d102      	bne.n	801b558 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801b552:	f882 8000 	strb.w	r8, [r2]
 801b556:	e7f6      	b.n	801b546 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b558:	2823      	cmp	r0, #35	; 0x23
 801b55a:	d102      	bne.n	801b562 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b55c:	f883 8000 	strb.w	r8, [r3]
 801b560:	e7f1      	b.n	801b546 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b562:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b566:	2b09      	cmp	r3, #9
 801b568:	d901      	bls.n	801b56e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801b56a:	282a      	cmp	r0, #42	; 0x2a
 801b56c:	d114      	bne.n	801b598 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b56e:	2201      	movs	r2, #1
 801b570:	f88e 2000 	strb.w	r2, [lr]
 801b574:	6823      	ldr	r3, [r4, #0]
 801b576:	8819      	ldrh	r1, [r3, #0]
 801b578:	2930      	cmp	r1, #48	; 0x30
 801b57a:	bf02      	ittt	eq
 801b57c:	3302      	addeq	r3, #2
 801b57e:	6023      	streq	r3, [r4, #0]
 801b580:	f88c 2000 	strbeq.w	r2, [ip]
 801b584:	6820      	ldr	r0, [r4, #0]
 801b586:	8803      	ldrh	r3, [r0, #0]
 801b588:	2b2a      	cmp	r3, #42	; 0x2a
 801b58a:	d11e      	bne.n	801b5ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801b58c:	f04f 33ff 	mov.w	r3, #4294967295
 801b590:	603b      	str	r3, [r7, #0]
 801b592:	6823      	ldr	r3, [r4, #0]
 801b594:	3302      	adds	r3, #2
 801b596:	6023      	str	r3, [r4, #0]
 801b598:	6823      	ldr	r3, [r4, #0]
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	2b2e      	cmp	r3, #46	; 0x2e
 801b59e:	d112      	bne.n	801b5c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	7033      	strb	r3, [r6, #0]
 801b5a4:	6823      	ldr	r3, [r4, #0]
 801b5a6:	1c98      	adds	r0, r3, #2
 801b5a8:	6020      	str	r0, [r4, #0]
 801b5aa:	885b      	ldrh	r3, [r3, #2]
 801b5ac:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ae:	d117      	bne.n	801b5e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801b5b4:	602b      	str	r3, [r5, #0]
 801b5b6:	6823      	ldr	r3, [r4, #0]
 801b5b8:	3302      	adds	r3, #2
 801b5ba:	6023      	str	r3, [r4, #0]
 801b5bc:	682b      	ldr	r3, [r5, #0]
 801b5be:	2b06      	cmp	r3, #6
 801b5c0:	bfa8      	it	ge
 801b5c2:	2306      	movge	r3, #6
 801b5c4:	602b      	str	r3, [r5, #0]
 801b5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ca:	f7ff fee2 	bl	801b392 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b5ce:	6038      	str	r0, [r7, #0]
 801b5d0:	6823      	ldr	r3, [r4, #0]
 801b5d2:	881a      	ldrh	r2, [r3, #0]
 801b5d4:	3a30      	subs	r2, #48	; 0x30
 801b5d6:	2a09      	cmp	r2, #9
 801b5d8:	d8de      	bhi.n	801b598 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b5da:	3302      	adds	r3, #2
 801b5dc:	6023      	str	r3, [r4, #0]
 801b5de:	e7f7      	b.n	801b5d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801b5e0:	f7ff fed7 	bl	801b392 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b5e4:	6028      	str	r0, [r5, #0]
 801b5e6:	6823      	ldr	r3, [r4, #0]
 801b5e8:	881a      	ldrh	r2, [r3, #0]
 801b5ea:	3a30      	subs	r2, #48	; 0x30
 801b5ec:	2a09      	cmp	r2, #9
 801b5ee:	d8e5      	bhi.n	801b5bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801b5f0:	3302      	adds	r3, #2
 801b5f2:	6023      	str	r3, [r4, #0]
 801b5f4:	e7f7      	b.n	801b5e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801b5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801b5f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5fa:	b0a2      	sub	sp, #136	; 0x88
 801b5fc:	2500      	movs	r5, #0
 801b5fe:	4606      	mov	r6, r0
 801b600:	460f      	mov	r7, r1
 801b602:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801b606:	9209      	str	r2, [sp, #36]	; 0x24
 801b608:	4629      	mov	r1, r5
 801b60a:	2242      	movs	r2, #66	; 0x42
 801b60c:	4640      	mov	r0, r8
 801b60e:	461c      	mov	r4, r3
 801b610:	950d      	str	r5, [sp, #52]	; 0x34
 801b612:	f7fe fb82 	bl	8019d1a <_ZN8touchgfx6memsetEPvhm>
 801b616:	b30e      	cbz	r6, 801b65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b61a:	b1f3      	cbz	r3, 801b65a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801b61c:	f107 3aff 	add.w	sl, r7, #4294967295
 801b620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b624:	8812      	ldrh	r2, [r2, #0]
 801b626:	2a00      	cmp	r2, #0
 801b628:	f000 80b3 	beq.w	801b792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b62c:	459a      	cmp	sl, r3
 801b62e:	f340 80b0 	ble.w	801b792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b632:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b638:	f8b9 2000 	ldrh.w	r2, [r9]
 801b63c:	2a00      	cmp	r2, #0
 801b63e:	d0ef      	beq.n	801b620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b640:	2a25      	cmp	r2, #37	; 0x25
 801b642:	f000 80aa 	beq.w	801b79a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801b646:	459a      	cmp	sl, r3
 801b648:	ddea      	ble.n	801b620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b64a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b64e:	f109 0202 	add.w	r2, r9, #2
 801b652:	3301      	adds	r3, #1
 801b654:	9209      	str	r2, [sp, #36]	; 0x24
 801b656:	930d      	str	r3, [sp, #52]	; 0x34
 801b658:	e7eb      	b.n	801b632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801b65a:	8033      	strh	r3, [r6, #0]
 801b65c:	4630      	mov	r0, r6
 801b65e:	b022      	add	sp, #136	; 0x88
 801b660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b664:	3b63      	subs	r3, #99	; 0x63
 801b666:	2b01      	cmp	r3, #1
 801b668:	f200 80df 	bhi.w	801b82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b66c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b670:	8813      	ldrh	r3, [r2, #0]
 801b672:	2b69      	cmp	r3, #105	; 0x69
 801b674:	d058      	beq.n	801b728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b676:	d81b      	bhi.n	801b6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801b678:	2b63      	cmp	r3, #99	; 0x63
 801b67a:	d02e      	beq.n	801b6da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801b67c:	2b64      	cmp	r3, #100	; 0x64
 801b67e:	d053      	beq.n	801b728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b680:	2b58      	cmp	r3, #88	; 0x58
 801b682:	d06f      	beq.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801b684:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801b688:	46a1      	mov	r9, r4
 801b68a:	e02d      	b.n	801b6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b68c:	2b73      	cmp	r3, #115	; 0x73
 801b68e:	d0ed      	beq.n	801b66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b690:	d803      	bhi.n	801b69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801b692:	2b6f      	cmp	r3, #111	; 0x6f
 801b694:	f040 80c9 	bne.w	801b82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b698:	e7e8      	b.n	801b66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b69a:	2b75      	cmp	r3, #117	; 0x75
 801b69c:	d0e6      	beq.n	801b66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b69e:	2b78      	cmp	r3, #120	; 0x78
 801b6a0:	e7f8      	b.n	801b694 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b6a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6a4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6aa:	3302      	adds	r3, #2
 801b6ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b6ae:	e7b7      	b.n	801b620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b6b0:	2b73      	cmp	r3, #115	; 0x73
 801b6b2:	d034      	beq.n	801b71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801b6b4:	d807      	bhi.n	801b6c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801b6b6:	2b6f      	cmp	r3, #111	; 0x6f
 801b6b8:	d1e4      	bne.n	801b684 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b6ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6bc:	f104 0904 	add.w	r9, r4, #4
 801b6c0:	2308      	movs	r3, #8
 801b6c2:	1aba      	subs	r2, r7, r2
 801b6c4:	e048      	b.n	801b758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b6c6:	2b75      	cmp	r3, #117	; 0x75
 801b6c8:	d041      	beq.n	801b74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801b6ca:	2b78      	cmp	r3, #120	; 0x78
 801b6cc:	d1da      	bne.n	801b684 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b6ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6d0:	f104 0904 	add.w	r9, r4, #4
 801b6d4:	2310      	movs	r3, #16
 801b6d6:	1aba      	subs	r2, r7, r2
 801b6d8:	e03e      	b.n	801b758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b6da:	7823      	ldrb	r3, [r4, #0]
 801b6dc:	f104 0904 	add.w	r9, r4, #4
 801b6e0:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b6e4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b6e8:	aa0d      	add	r2, sp, #52	; 0x34
 801b6ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b6ee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b6f2:	a810      	add	r0, sp, #64	; 0x40
 801b6f4:	9205      	str	r2, [sp, #20]
 801b6f6:	464c      	mov	r4, r9
 801b6f8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801b6fc:	9204      	str	r2, [sp, #16]
 801b6fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b700:	9203      	str	r2, [sp, #12]
 801b702:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801b706:	9202      	str	r2, [sp, #8]
 801b708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b70a:	9201      	str	r2, [sp, #4]
 801b70c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801b710:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801b714:	9200      	str	r2, [sp, #0]
 801b716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b718:	f7ff fe4a 	bl	801b3b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b71c:	e7c4      	b.n	801b6a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801b71e:	f104 0904 	add.w	r9, r4, #4
 801b722:	6823      	ldr	r3, [r4, #0]
 801b724:	9310      	str	r3, [sp, #64]	; 0x40
 801b726:	e7df      	b.n	801b6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b72a:	230a      	movs	r3, #10
 801b72c:	4641      	mov	r1, r8
 801b72e:	6820      	ldr	r0, [r4, #0]
 801b730:	1aba      	subs	r2, r7, r2
 801b732:	f104 0904 	add.w	r9, r4, #4
 801b736:	b292      	uxth	r2, r2
 801b738:	f7ff fdf9 	bl	801b32e <_ZN8touchgfx7Unicode4itoaElPtti>
 801b73c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b740:	2b2d      	cmp	r3, #45	; 0x2d
 801b742:	d1d1      	bne.n	801b6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b744:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b74a:	3302      	adds	r3, #2
 801b74c:	e7ea      	b.n	801b724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801b74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b750:	f104 0904 	add.w	r9, r4, #4
 801b754:	230a      	movs	r3, #10
 801b756:	1aba      	subs	r2, r7, r2
 801b758:	b292      	uxth	r2, r2
 801b75a:	4641      	mov	r1, r8
 801b75c:	6820      	ldr	r0, [r4, #0]
 801b75e:	f7ff fdc8 	bl	801b2f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b762:	e7c1      	b.n	801b6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b766:	2310      	movs	r3, #16
 801b768:	4641      	mov	r1, r8
 801b76a:	6820      	ldr	r0, [r4, #0]
 801b76c:	1aba      	subs	r2, r7, r2
 801b76e:	f104 0904 	add.w	r9, r4, #4
 801b772:	b292      	uxth	r2, r2
 801b774:	f7ff fdbd 	bl	801b2f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b778:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b77c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b780:	2b00      	cmp	r3, #0
 801b782:	d0b1      	beq.n	801b6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b784:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b788:	2919      	cmp	r1, #25
 801b78a:	d8f7      	bhi.n	801b77c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b78c:	3b20      	subs	r3, #32
 801b78e:	8013      	strh	r3, [r2, #0]
 801b790:	e7f4      	b.n	801b77c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b792:	2200      	movs	r2, #0
 801b794:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b798:	e760      	b.n	801b65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b79a:	459a      	cmp	sl, r3
 801b79c:	f77f af40 	ble.w	801b620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b7a0:	f109 0302 	add.w	r3, r9, #2
 801b7a4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801b7a8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801b7ac:	a809      	add	r0, sp, #36	; 0x24
 801b7ae:	9309      	str	r3, [sp, #36]	; 0x24
 801b7b0:	ab0f      	add	r3, sp, #60	; 0x3c
 801b7b2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801b7b6:	9304      	str	r3, [sp, #16]
 801b7b8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b7bc:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801b7c0:	9303      	str	r3, [sp, #12]
 801b7c2:	ab0e      	add	r3, sp, #56	; 0x38
 801b7c4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801b7c8:	9302      	str	r3, [sp, #8]
 801b7ca:	ab0c      	add	r3, sp, #48	; 0x30
 801b7cc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801b7d0:	9301      	str	r3, [sp, #4]
 801b7d2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b7d6:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801b7da:	9300      	str	r3, [sp, #0]
 801b7dc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b7e0:	950e      	str	r5, [sp, #56]	; 0x38
 801b7e2:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801b7e6:	950f      	str	r5, [sp, #60]	; 0x3c
 801b7e8:	f7ff fe92 	bl	801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	bfbf      	itttt	lt
 801b7f4:	6823      	ldrlt	r3, [r4, #0]
 801b7f6:	3404      	addlt	r4, #4
 801b7f8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b7fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b800:	2b00      	cmp	r3, #0
 801b802:	bfbf      	itttt	lt
 801b804:	6823      	ldrlt	r3, [r4, #0]
 801b806:	3404      	addlt	r4, #4
 801b808:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b80c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b80e:	8813      	ldrh	r3, [r2, #0]
 801b810:	2b69      	cmp	r3, #105	; 0x69
 801b812:	f43f af2b 	beq.w	801b66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b816:	f63f af39 	bhi.w	801b68c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801b81a:	2b58      	cmp	r3, #88	; 0x58
 801b81c:	f43f af26 	beq.w	801b66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b820:	f63f af20 	bhi.w	801b664 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801b824:	2b25      	cmp	r3, #37	; 0x25
 801b826:	f43f af3c 	beq.w	801b6a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801b82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b82c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b830:	f8b9 2000 	ldrh.w	r2, [r9]
 801b834:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b838:	3301      	adds	r3, #1
 801b83a:	930d      	str	r3, [sp, #52]	; 0x34
 801b83c:	e734      	b.n	801b6a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801b840 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b840:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b842:	4605      	mov	r5, r0
 801b844:	b0a1      	sub	sp, #132	; 0x84
 801b846:	4610      	mov	r0, r2
 801b848:	460e      	mov	r6, r1
 801b84a:	4614      	mov	r4, r2
 801b84c:	461f      	mov	r7, r3
 801b84e:	f7ff fd33 	bl	801b2b8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b852:	283f      	cmp	r0, #63	; 0x3f
 801b854:	d906      	bls.n	801b864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801b856:	4b0a      	ldr	r3, [pc, #40]	; (801b880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801b858:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801b85c:	4a09      	ldr	r2, [pc, #36]	; (801b884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801b85e:	480a      	ldr	r0, [pc, #40]	; (801b888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801b860:	f009 ffac 	bl	80257bc <__assert_func>
 801b864:	4621      	mov	r1, r4
 801b866:	2240      	movs	r2, #64	; 0x40
 801b868:	4668      	mov	r0, sp
 801b86a:	f7ff fd31 	bl	801b2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b86e:	463b      	mov	r3, r7
 801b870:	466a      	mov	r2, sp
 801b872:	4631      	mov	r1, r6
 801b874:	4628      	mov	r0, r5
 801b876:	f7ff febe 	bl	801b5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801b87a:	b021      	add	sp, #132	; 0x84
 801b87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b87e:	bf00      	nop
 801b880:	0802a877 	.word	0x0802a877
 801b884:	0802a949 	.word	0x0802a949
 801b888:	0802a894 	.word	0x0802a894

0801b88c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b88c:	b40c      	push	{r2, r3}
 801b88e:	b507      	push	{r0, r1, r2, lr}
 801b890:	ab04      	add	r3, sp, #16
 801b892:	f853 2b04 	ldr.w	r2, [r3], #4
 801b896:	9301      	str	r3, [sp, #4]
 801b898:	f7ff ffd2 	bl	801b840 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b89c:	b003      	add	sp, #12
 801b89e:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8a2:	b002      	add	sp, #8
 801b8a4:	4770      	bx	lr
	...

0801b8a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ac:	b0c3      	sub	sp, #268	; 0x10c
 801b8ae:	2400      	movs	r4, #0
 801b8b0:	4606      	mov	r6, r0
 801b8b2:	4689      	mov	r9, r1
 801b8b4:	af10      	add	r7, sp, #64	; 0x40
 801b8b6:	9209      	str	r2, [sp, #36]	; 0x24
 801b8b8:	4621      	mov	r1, r4
 801b8ba:	22c8      	movs	r2, #200	; 0xc8
 801b8bc:	4638      	mov	r0, r7
 801b8be:	469a      	mov	sl, r3
 801b8c0:	940c      	str	r4, [sp, #48]	; 0x30
 801b8c2:	f7fe fa2a 	bl	8019d1a <_ZN8touchgfx6memsetEPvhm>
 801b8c6:	b116      	cbz	r6, 801b8ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8ca:	b923      	cbnz	r3, 801b8d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801b8cc:	8033      	strh	r3, [r6, #0]
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	b043      	add	sp, #268	; 0x10c
 801b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d6:	f109 3bff 	add.w	fp, r9, #4294967295
 801b8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8de:	8812      	ldrh	r2, [r2, #0]
 801b8e0:	2a00      	cmp	r2, #0
 801b8e2:	f000 80d1 	beq.w	801ba88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b8e6:	459b      	cmp	fp, r3
 801b8e8:	f340 80ce 	ble.w	801ba88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b8ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8f0:	882a      	ldrh	r2, [r5, #0]
 801b8f2:	2a00      	cmp	r2, #0
 801b8f4:	d0f1      	beq.n	801b8da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b8f6:	2a25      	cmp	r2, #37	; 0x25
 801b8f8:	f000 80ca 	beq.w	801ba90 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801b8fc:	459b      	cmp	fp, r3
 801b8fe:	ddec      	ble.n	801b8da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b900:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b904:	3502      	adds	r5, #2
 801b906:	3301      	adds	r3, #1
 801b908:	9509      	str	r5, [sp, #36]	; 0x24
 801b90a:	930c      	str	r3, [sp, #48]	; 0x30
 801b90c:	e7ee      	b.n	801b8ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801b90e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b912:	3202      	adds	r2, #2
 801b914:	920c      	str	r2, [sp, #48]	; 0x30
 801b916:	e0ac      	b.n	801ba72 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801b918:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b91c:	970f      	str	r7, [sp, #60]	; 0x3c
 801b91e:	3401      	adds	r4, #1
 801b920:	edd3 7a00 	vldr	s15, [r3]
 801b924:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b928:	b923      	cbnz	r3, 801b934 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801b92a:	2301      	movs	r3, #1
 801b92c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b930:	2303      	movs	r3, #3
 801b932:	930e      	str	r3, [sp, #56]	; 0x38
 801b934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b938:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b93a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b93e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801bb3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b946:	bf42      	ittt	mi
 801b948:	232d      	movmi	r3, #45	; 0x2d
 801b94a:	eef1 7a67 	vnegmi.f32	s15, s15
 801b94e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b952:	2300      	movs	r3, #0
 801b954:	4298      	cmp	r0, r3
 801b956:	dd03      	ble.n	801b960 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801b958:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b95c:	3301      	adds	r3, #1
 801b95e:	e7f9      	b.n	801b954 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801b960:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b968:	eeb0 7a67 	vmov.f32	s14, s15
 801b96c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b974:	da26      	bge.n	801b9c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801b976:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b97a:	eba9 0202 	sub.w	r2, r9, r2
 801b97e:	2100      	movs	r1, #0
 801b980:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b984:	b28d      	uxth	r5, r1
 801b986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b98a:	db21      	blt.n	801b9d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b98c:	1a53      	subs	r3, r2, r1
 801b98e:	2b00      	cmp	r3, #0
 801b990:	dd1e      	ble.n	801b9d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b992:	2963      	cmp	r1, #99	; 0x63
 801b994:	d01b      	beq.n	801b9ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801b996:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b99a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b99e:	ee17 3a10 	vmov	r3, s14
 801b9a2:	2b09      	cmp	r3, #9
 801b9a4:	bfa8      	it	ge
 801b9a6:	2309      	movge	r3, #9
 801b9a8:	ee07 3a10 	vmov	s14, r3
 801b9ac:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801b9b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9b4:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801b9b8:	3101      	adds	r1, #1
 801b9ba:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b9be:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b9c2:	e7dd      	b.n	801b980 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801b9c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b9c8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b9cc:	e7ce      	b.n	801b96c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801b9ce:	460d      	mov	r5, r1
 801b9d0:	2a63      	cmp	r2, #99	; 0x63
 801b9d2:	bfd4      	ite	le
 801b9d4:	ebc5 0202 	rsble	r2, r5, r2
 801b9d8:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801b9dc:	2a00      	cmp	r2, #0
 801b9de:	dd4e      	ble.n	801ba7e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	f04f 0801 	mov.w	r8, #1
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	dd0e      	ble.n	801ba08 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801b9ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b9ee:	210a      	movs	r1, #10
 801b9f0:	3b01      	subs	r3, #1
 801b9f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b9f6:	ee17 ca10 	vmov	ip, s14
 801b9fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9fe:	fb01 c808 	mla	r8, r1, r8, ip
 801ba02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba06:	e7ee      	b.n	801b9e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba0e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801ba12:	bfac      	ite	ge
 801ba14:	1a18      	subge	r0, r3, r0
 801ba16:	4618      	movlt	r0, r3
 801ba18:	b292      	uxth	r2, r2
 801ba1a:	230a      	movs	r3, #10
 801ba1c:	900e      	str	r0, [sp, #56]	; 0x38
 801ba1e:	1979      	adds	r1, r7, r5
 801ba20:	4640      	mov	r0, r8
 801ba22:	f7ff fc84 	bl	801b32e <_ZN8touchgfx7Unicode4itoaElPtti>
 801ba26:	f1b8 0f01 	cmp.w	r8, #1
 801ba2a:	dc26      	bgt.n	801ba7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801ba2c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	bf0c      	ite	eq
 801ba34:	2300      	moveq	r3, #0
 801ba36:	232e      	movne	r3, #46	; 0x2e
 801ba38:	aa42      	add	r2, sp, #264	; 0x108
 801ba3a:	4415      	add	r5, r2
 801ba3c:	aa0c      	add	r2, sp, #48	; 0x30
 801ba3e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801ba42:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ba46:	a80f      	add	r0, sp, #60	; 0x3c
 801ba48:	9205      	str	r2, [sp, #20]
 801ba4a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801ba4e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801ba52:	9204      	str	r2, [sp, #16]
 801ba54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba56:	9203      	str	r2, [sp, #12]
 801ba58:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801ba5c:	9202      	str	r2, [sp, #8]
 801ba5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba60:	9201      	str	r2, [sp, #4]
 801ba62:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801ba66:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801ba6a:	9200      	str	r2, [sp, #0]
 801ba6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba6e:	f7ff fc9f 	bl	801b3b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ba72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba74:	3302      	adds	r3, #2
 801ba76:	9309      	str	r3, [sp, #36]	; 0x24
 801ba78:	e72f      	b.n	801b8da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ba7a:	232e      	movs	r3, #46	; 0x2e
 801ba7c:	e7dc      	b.n	801ba38 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801ba7e:	ab42      	add	r3, sp, #264	; 0x108
 801ba80:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801ba84:	2300      	movs	r3, #0
 801ba86:	e7d9      	b.n	801ba3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801ba88:	2200      	movs	r2, #0
 801ba8a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ba8e:	e71e      	b.n	801b8ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801ba90:	459b      	cmp	fp, r3
 801ba92:	f77f af22 	ble.w	801b8da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ba96:	2300      	movs	r3, #0
 801ba98:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801ba9c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801baa0:	a809      	add	r0, sp, #36	; 0x24
 801baa2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801baa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801baaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801baae:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801bab2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801bab6:	930d      	str	r3, [sp, #52]	; 0x34
 801bab8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801babc:	930e      	str	r3, [sp, #56]	; 0x38
 801babe:	1cab      	adds	r3, r5, #2
 801bac0:	9309      	str	r3, [sp, #36]	; 0x24
 801bac2:	ab0e      	add	r3, sp, #56	; 0x38
 801bac4:	9304      	str	r3, [sp, #16]
 801bac6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801baca:	9303      	str	r3, [sp, #12]
 801bacc:	ab0d      	add	r3, sp, #52	; 0x34
 801bace:	9302      	str	r3, [sp, #8]
 801bad0:	ab0b      	add	r3, sp, #44	; 0x2c
 801bad2:	9301      	str	r3, [sp, #4]
 801bad4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801bad8:	9300      	str	r3, [sp, #0]
 801bada:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801bade:	f7ff fd17 	bl	801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801bae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	da0b      	bge.n	801bb00 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801bae8:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801baec:	3401      	adds	r4, #1
 801baee:	edd3 7a00 	vldr	s15, [r3]
 801baf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801baf6:	ee17 3a90 	vmov	r3, s15
 801bafa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bafe:	930d      	str	r3, [sp, #52]	; 0x34
 801bb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	da0b      	bge.n	801bb1e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801bb06:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801bb0a:	3401      	adds	r4, #1
 801bb0c:	edd3 7a00 	vldr	s15, [r3]
 801bb10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb14:	ee17 3a90 	vmov	r3, s15
 801bb18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb1c:	930e      	str	r3, [sp, #56]	; 0x38
 801bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb22:	881b      	ldrh	r3, [r3, #0]
 801bb24:	2b25      	cmp	r3, #37	; 0x25
 801bb26:	f43f aef2 	beq.w	801b90e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801bb2a:	2b66      	cmp	r3, #102	; 0x66
 801bb2c:	f43f aef4 	beq.w	801b918 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801bb30:	9509      	str	r5, [sp, #36]	; 0x24
 801bb32:	882b      	ldrh	r3, [r5, #0]
 801bb34:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801bb38:	3201      	adds	r2, #1
 801bb3a:	e6eb      	b.n	801b914 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801bb3c:	3f000002 	.word	0x3f000002

0801bb40 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb42:	4605      	mov	r5, r0
 801bb44:	b0a1      	sub	sp, #132	; 0x84
 801bb46:	4610      	mov	r0, r2
 801bb48:	460e      	mov	r6, r1
 801bb4a:	4614      	mov	r4, r2
 801bb4c:	461f      	mov	r7, r3
 801bb4e:	f7ff fbb3 	bl	801b2b8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801bb52:	283f      	cmp	r0, #63	; 0x3f
 801bb54:	d906      	bls.n	801bb64 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801bb56:	4b0a      	ldr	r3, [pc, #40]	; (801bb80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801bb58:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801bb5c:	4a09      	ldr	r2, [pc, #36]	; (801bb84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801bb5e:	480a      	ldr	r0, [pc, #40]	; (801bb88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801bb60:	f009 fe2c 	bl	80257bc <__assert_func>
 801bb64:	4621      	mov	r1, r4
 801bb66:	2240      	movs	r2, #64	; 0x40
 801bb68:	4668      	mov	r0, sp
 801bb6a:	f7ff fbb1 	bl	801b2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bb6e:	463b      	mov	r3, r7
 801bb70:	466a      	mov	r2, sp
 801bb72:	4631      	mov	r1, r6
 801bb74:	4628      	mov	r0, r5
 801bb76:	f7ff fe97 	bl	801b8a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801bb7a:	b021      	add	sp, #132	; 0x84
 801bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb7e:	bf00      	nop
 801bb80:	0802a877 	.word	0x0802a877
 801bb84:	0802a8ba 	.word	0x0802a8ba
 801bb88:	0802a894 	.word	0x0802a894

0801bb8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bb8c:	4b01      	ldr	r3, [pc, #4]	; (801bb94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bb8e:	6018      	str	r0, [r3, #0]
 801bb90:	4770      	bx	lr
 801bb92:	bf00      	nop
 801bb94:	2000bc34 	.word	0x2000bc34

0801bb98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bb98:	4b07      	ldr	r3, [pc, #28]	; (801bbb8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801bb9a:	881a      	ldrh	r2, [r3, #0]
 801bb9c:	4282      	cmp	r2, r0
 801bb9e:	d809      	bhi.n	801bbb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bba0:	4b06      	ldr	r3, [pc, #24]	; (801bbbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801bba2:	881b      	ldrh	r3, [r3, #0]
 801bba4:	4413      	add	r3, r2
 801bba6:	4298      	cmp	r0, r3
 801bba8:	da04      	bge.n	801bbb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bbaa:	4b05      	ldr	r3, [pc, #20]	; (801bbc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bbb2:	4770      	bx	lr
 801bbb4:	2000      	movs	r0, #0
 801bbb6:	4770      	bx	lr
 801bbb8:	2000bc54 	.word	0x2000bc54
 801bbbc:	2000bc58 	.word	0x2000bc58
 801bbc0:	2000bc38 	.word	0x2000bc38

0801bbc4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbc8:	4d26      	ldr	r5, [pc, #152]	; (801bc64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bbca:	682b      	ldr	r3, [r5, #0]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d046      	beq.n	801bc5e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bbd0:	4a25      	ldr	r2, [pc, #148]	; (801bc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bbd2:	4f26      	ldr	r7, [pc, #152]	; (801bc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bbd4:	8810      	ldrh	r0, [r2, #0]
 801bbd6:	883c      	ldrh	r4, [r7, #0]
 801bbd8:	4e25      	ldr	r6, [pc, #148]	; (801bc70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bbda:	4420      	add	r0, r4
 801bbdc:	1c42      	adds	r2, r0, #1
 801bbde:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801bbe2:	f022 0201 	bic.w	r2, r2, #1
 801bbe6:	0412      	lsls	r2, r2, #16
 801bbe8:	0c12      	lsrs	r2, r2, #16
 801bbea:	0051      	lsls	r1, r2, #1
 801bbec:	220e      	movs	r2, #14
 801bbee:	eb08 0e01 	add.w	lr, r8, r1
 801bbf2:	fb02 fc04 	mul.w	ip, r2, r4
 801bbf6:	eb03 0208 	add.w	r2, r3, r8
 801bbfa:	4c1e      	ldr	r4, [pc, #120]	; (801bc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bbfc:	6022      	str	r2, [r4, #0]
 801bbfe:	eb03 020e 	add.w	r2, r3, lr
 801bc02:	44e6      	add	lr, ip
 801bc04:	6032      	str	r2, [r6, #0]
 801bc06:	4473      	add	r3, lr
 801bc08:	4a1b      	ldr	r2, [pc, #108]	; (801bc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc0a:	6013      	str	r3, [r2, #0]
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	4a1b      	ldr	r2, [pc, #108]	; (801bc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc10:	8013      	strh	r3, [r2, #0]
 801bc12:	4a1b      	ldr	r2, [pc, #108]	; (801bc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bc14:	6812      	ldr	r2, [r2, #0]
 801bc16:	eba2 0208 	sub.w	r2, r2, r8
 801bc1a:	1a52      	subs	r2, r2, r1
 801bc1c:	4919      	ldr	r1, [pc, #100]	; (801bc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bc1e:	eba2 020c 	sub.w	r2, r2, ip
 801bc22:	469c      	mov	ip, r3
 801bc24:	600a      	str	r2, [r1, #0]
 801bc26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc2a:	4a17      	ldr	r2, [pc, #92]	; (801bc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bc2c:	8013      	strh	r3, [r2, #0]
 801bc2e:	4283      	cmp	r3, r0
 801bc30:	d10d      	bne.n	801bc4e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801bc32:	883d      	ldrh	r5, [r7, #0]
 801bc34:	2300      	movs	r3, #0
 801bc36:	6830      	ldr	r0, [r6, #0]
 801bc38:	240e      	movs	r4, #14
 801bc3a:	429d      	cmp	r5, r3
 801bc3c:	d90f      	bls.n	801bc5e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bc3e:	fb04 0203 	mla	r2, r4, r3, r0
 801bc42:	3301      	adds	r3, #1
 801bc44:	7b11      	ldrb	r1, [r2, #12]
 801bc46:	f36f 1145 	bfc	r1, #5, #1
 801bc4a:	7311      	strb	r1, [r2, #12]
 801bc4c:	e7f5      	b.n	801bc3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801bc4e:	682a      	ldr	r2, [r5, #0]
 801bc50:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bc54:	6822      	ldr	r2, [r4, #0]
 801bc56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	e7e7      	b.n	801bc2e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801bc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc62:	bf00      	nop
 801bc64:	2000bc38 	.word	0x2000bc38
 801bc68:	2000bc54 	.word	0x2000bc54
 801bc6c:	2000bc58 	.word	0x2000bc58
 801bc70:	2000bc3c 	.word	0x2000bc3c
 801bc74:	2000bc4c 	.word	0x2000bc4c
 801bc78:	2000bc44 	.word	0x2000bc44
 801bc7c:	2000bc56 	.word	0x2000bc56
 801bc80:	2000bc40 	.word	0x2000bc40
 801bc84:	2000bc50 	.word	0x2000bc50
 801bc88:	2000bc48 	.word	0x2000bc48

0801bc8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bc8c:	4b10      	ldr	r3, [pc, #64]	; (801bcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bc8e:	b510      	push	{r4, lr}
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	b9db      	cbnz	r3, 801bccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bc94:	b1d1      	cbz	r1, 801bccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bc96:	4b0f      	ldr	r3, [pc, #60]	; (801bcd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bc98:	240e      	movs	r4, #14
 801bc9a:	801a      	strh	r2, [r3, #0]
 801bc9c:	b292      	uxth	r2, r2
 801bc9e:	4b0e      	ldr	r3, [pc, #56]	; (801bcd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bca0:	881b      	ldrh	r3, [r3, #0]
 801bca2:	4413      	add	r3, r2
 801bca4:	4362      	muls	r2, r4
 801bca6:	2406      	movs	r4, #6
 801bca8:	fb04 2203 	mla	r2, r4, r3, r2
 801bcac:	428a      	cmp	r2, r1
 801bcae:	d305      	bcc.n	801bcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bcb0:	4b0a      	ldr	r3, [pc, #40]	; (801bcdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bcb2:	2137      	movs	r1, #55	; 0x37
 801bcb4:	4a0a      	ldr	r2, [pc, #40]	; (801bce0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bcb6:	480b      	ldr	r0, [pc, #44]	; (801bce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bcb8:	f009 fd80 	bl	80257bc <__assert_func>
 801bcbc:	4b0a      	ldr	r3, [pc, #40]	; (801bce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bcbe:	6019      	str	r1, [r3, #0]
 801bcc0:	4b0a      	ldr	r3, [pc, #40]	; (801bcec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bcc2:	6018      	str	r0, [r3, #0]
 801bcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcc8:	f7ff bf7c 	b.w	801bbc4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bccc:	bd10      	pop	{r4, pc}
 801bcce:	bf00      	nop
 801bcd0:	2000bc44 	.word	0x2000bc44
 801bcd4:	2000bc58 	.word	0x2000bc58
 801bcd8:	2000bc54 	.word	0x2000bc54
 801bcdc:	0802aa2b 	.word	0x0802aa2b
 801bce0:	0802aa84 	.word	0x0802aa84
 801bce4:	0802aa06 	.word	0x0802aa06
 801bce8:	2000bc40 	.word	0x2000bc40
 801bcec:	2000bc38 	.word	0x2000bc38

0801bcf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bcf0:	b470      	push	{r4, r5, r6}
 801bcf2:	4c07      	ldr	r4, [pc, #28]	; (801bd10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bcf4:	4605      	mov	r5, r0
 801bcf6:	4610      	mov	r0, r2
 801bcf8:	9a03      	ldr	r2, [sp, #12]
 801bcfa:	6826      	ldr	r6, [r4, #0]
 801bcfc:	b936      	cbnz	r6, 801bd0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bcfe:	6025      	str	r5, [r4, #0]
 801bd00:	4c04      	ldr	r4, [pc, #16]	; (801bd14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bd02:	8021      	strh	r1, [r4, #0]
 801bd04:	4619      	mov	r1, r3
 801bd06:	bc70      	pop	{r4, r5, r6}
 801bd08:	f7ff bfc0 	b.w	801bc8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bd0c:	bc70      	pop	{r4, r5, r6}
 801bd0e:	4770      	bx	lr
 801bd10:	2000bc5c 	.word	0x2000bc5c
 801bd14:	2000bc54 	.word	0x2000bc54

0801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bd18:	b508      	push	{r3, lr}
 801bd1a:	4b14      	ldr	r3, [pc, #80]	; (801bd6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bd1c:	6819      	ldr	r1, [r3, #0]
 801bd1e:	b931      	cbnz	r1, 801bd2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bd20:	4b13      	ldr	r3, [pc, #76]	; (801bd70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bd22:	f240 21e6 	movw	r1, #742	; 0x2e6
 801bd26:	4a13      	ldr	r2, [pc, #76]	; (801bd74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bd28:	4813      	ldr	r0, [pc, #76]	; (801bd78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bd2a:	f009 fd47 	bl	80257bc <__assert_func>
 801bd2e:	4a13      	ldr	r2, [pc, #76]	; (801bd7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bd30:	8803      	ldrh	r3, [r0, #0]
 801bd32:	8812      	ldrh	r2, [r2, #0]
 801bd34:	4293      	cmp	r3, r2
 801bd36:	d204      	bcs.n	801bd42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bd38:	2214      	movs	r2, #20
 801bd3a:	fb02 1303 	mla	r3, r2, r3, r1
 801bd3e:	8918      	ldrh	r0, [r3, #8]
 801bd40:	bd08      	pop	{r3, pc}
 801bd42:	490f      	ldr	r1, [pc, #60]	; (801bd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bd44:	8809      	ldrh	r1, [r1, #0]
 801bd46:	4411      	add	r1, r2
 801bd48:	428b      	cmp	r3, r1
 801bd4a:	da06      	bge.n	801bd5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bd4c:	1a9b      	subs	r3, r3, r2
 801bd4e:	4a0d      	ldr	r2, [pc, #52]	; (801bd84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bd50:	210e      	movs	r1, #14
 801bd52:	6812      	ldr	r2, [r2, #0]
 801bd54:	fb01 2303 	mla	r3, r1, r3, r2
 801bd58:	e7f1      	b.n	801bd3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bd5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	bf0a      	itet	eq
 801bd62:	4b09      	ldreq	r3, [pc, #36]	; (801bd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bd64:	2000      	movne	r0, #0
 801bd66:	8818      	ldrheq	r0, [r3, #0]
 801bd68:	e7ea      	b.n	801bd40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bd6a:	bf00      	nop
 801bd6c:	2000bc5c 	.word	0x2000bc5c
 801bd70:	08027c5c 	.word	0x08027c5c
 801bd74:	0802ab31 	.word	0x0802ab31
 801bd78:	0802aa06 	.word	0x0802aa06
 801bd7c:	2000bc54 	.word	0x2000bc54
 801bd80:	2000bc58 	.word	0x2000bc58
 801bd84:	2000bc3c 	.word	0x2000bc3c
 801bd88:	2000bb88 	.word	0x2000bb88

0801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bd8c:	b508      	push	{r3, lr}
 801bd8e:	4b14      	ldr	r3, [pc, #80]	; (801bde0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bd90:	6819      	ldr	r1, [r3, #0]
 801bd92:	b931      	cbnz	r1, 801bda2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bd94:	4b13      	ldr	r3, [pc, #76]	; (801bde4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bd96:	f240 21fa 	movw	r1, #762	; 0x2fa
 801bd9a:	4a13      	ldr	r2, [pc, #76]	; (801bde8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bd9c:	4813      	ldr	r0, [pc, #76]	; (801bdec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bd9e:	f009 fd0d 	bl	80257bc <__assert_func>
 801bda2:	4a13      	ldr	r2, [pc, #76]	; (801bdf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bda4:	8803      	ldrh	r3, [r0, #0]
 801bda6:	8812      	ldrh	r2, [r2, #0]
 801bda8:	4293      	cmp	r3, r2
 801bdaa:	d204      	bcs.n	801bdb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bdac:	2214      	movs	r2, #20
 801bdae:	fb02 1303 	mla	r3, r2, r3, r1
 801bdb2:	8958      	ldrh	r0, [r3, #10]
 801bdb4:	bd08      	pop	{r3, pc}
 801bdb6:	490f      	ldr	r1, [pc, #60]	; (801bdf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bdb8:	8809      	ldrh	r1, [r1, #0]
 801bdba:	4411      	add	r1, r2
 801bdbc:	428b      	cmp	r3, r1
 801bdbe:	da06      	bge.n	801bdce <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bdc0:	1a9b      	subs	r3, r3, r2
 801bdc2:	4a0d      	ldr	r2, [pc, #52]	; (801bdf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bdc4:	210e      	movs	r1, #14
 801bdc6:	6812      	ldr	r2, [r2, #0]
 801bdc8:	fb01 2303 	mla	r3, r1, r3, r2
 801bdcc:	e7f1      	b.n	801bdb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bdce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bdd2:	4293      	cmp	r3, r2
 801bdd4:	bf0a      	itet	eq
 801bdd6:	4b09      	ldreq	r3, [pc, #36]	; (801bdfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bdd8:	2000      	movne	r0, #0
 801bdda:	8818      	ldrheq	r0, [r3, #0]
 801bddc:	e7ea      	b.n	801bdb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bdde:	bf00      	nop
 801bde0:	2000bc5c 	.word	0x2000bc5c
 801bde4:	08027c5c 	.word	0x08027c5c
 801bde8:	0802ab5d 	.word	0x0802ab5d
 801bdec:	0802aa06 	.word	0x0802aa06
 801bdf0:	2000bc54 	.word	0x2000bc54
 801bdf4:	2000bc58 	.word	0x2000bc58
 801bdf8:	2000bc3c 	.word	0x2000bc3c
 801bdfc:	2000bb8a 	.word	0x2000bb8a

0801be00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801be00:	4b23      	ldr	r3, [pc, #140]	; (801be90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801be02:	b510      	push	{r4, lr}
 801be04:	681c      	ldr	r4, [r3, #0]
 801be06:	b934      	cbnz	r4, 801be16 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801be08:	4b22      	ldr	r3, [pc, #136]	; (801be94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801be0a:	f240 310e 	movw	r1, #782	; 0x30e
 801be0e:	4a22      	ldr	r2, [pc, #136]	; (801be98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801be10:	4822      	ldr	r0, [pc, #136]	; (801be9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801be12:	f009 fcd3 	bl	80257bc <__assert_func>
 801be16:	4a22      	ldr	r2, [pc, #136]	; (801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801be18:	880b      	ldrh	r3, [r1, #0]
 801be1a:	8812      	ldrh	r2, [r2, #0]
 801be1c:	4293      	cmp	r3, r2
 801be1e:	d211      	bcs.n	801be44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801be20:	2214      	movs	r2, #20
 801be22:	fb02 4303 	mla	r3, r2, r3, r4
 801be26:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801be2a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801be2e:	8a1a      	ldrh	r2, [r3, #16]
 801be30:	8a5b      	ldrh	r3, [r3, #18]
 801be32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be36:	8004      	strh	r4, [r0, #0]
 801be38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be3c:	8041      	strh	r1, [r0, #2]
 801be3e:	8082      	strh	r2, [r0, #4]
 801be40:	80c3      	strh	r3, [r0, #6]
 801be42:	e00e      	b.n	801be62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801be44:	4917      	ldr	r1, [pc, #92]	; (801bea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801be46:	8809      	ldrh	r1, [r1, #0]
 801be48:	4411      	add	r1, r2
 801be4a:	428b      	cmp	r3, r1
 801be4c:	da0a      	bge.n	801be64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801be4e:	1a9b      	subs	r3, r3, r2
 801be50:	4a15      	ldr	r2, [pc, #84]	; (801bea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801be52:	210e      	movs	r1, #14
 801be54:	6812      	ldr	r2, [r2, #0]
 801be56:	fb01 2303 	mla	r3, r1, r3, r2
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	6002      	str	r2, [r0, #0]
 801be5e:	685a      	ldr	r2, [r3, #4]
 801be60:	6042      	str	r2, [r0, #4]
 801be62:	bd10      	pop	{r4, pc}
 801be64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be68:	4293      	cmp	r3, r2
 801be6a:	d10b      	bne.n	801be84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801be6c:	4b0f      	ldr	r3, [pc, #60]	; (801beac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801be6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801be72:	4b0f      	ldr	r3, [pc, #60]	; (801beb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801be74:	8081      	strh	r1, [r0, #4]
 801be76:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be7a:	2300      	movs	r3, #0
 801be7c:	80c2      	strh	r2, [r0, #6]
 801be7e:	8003      	strh	r3, [r0, #0]
 801be80:	8043      	strh	r3, [r0, #2]
 801be82:	e7ee      	b.n	801be62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801be84:	2300      	movs	r3, #0
 801be86:	8003      	strh	r3, [r0, #0]
 801be88:	8043      	strh	r3, [r0, #2]
 801be8a:	8083      	strh	r3, [r0, #4]
 801be8c:	e7d8      	b.n	801be40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801be8e:	bf00      	nop
 801be90:	2000bc5c 	.word	0x2000bc5c
 801be94:	08027c5c 	.word	0x08027c5c
 801be98:	0802aaca 	.word	0x0802aaca
 801be9c:	0802aa06 	.word	0x0802aa06
 801bea0:	2000bc54 	.word	0x2000bc54
 801bea4:	2000bc58 	.word	0x2000bc58
 801bea8:	2000bc3c 	.word	0x2000bc3c
 801beac:	2000bb88 	.word	0x2000bb88
 801beb0:	2000bb8a 	.word	0x2000bb8a

0801beb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801beb4:	4b18      	ldr	r3, [pc, #96]	; (801bf18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	b34b      	cbz	r3, 801bf0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801beba:	4a18      	ldr	r2, [pc, #96]	; (801bf1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bebc:	8800      	ldrh	r0, [r0, #0]
 801bebe:	8812      	ldrh	r2, [r2, #0]
 801bec0:	4290      	cmp	r0, r2
 801bec2:	d211      	bcs.n	801bee8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801bec4:	2214      	movs	r2, #20
 801bec6:	fb02 3300 	mla	r3, r2, r0, r3
 801beca:	8a1a      	ldrh	r2, [r3, #16]
 801becc:	8919      	ldrh	r1, [r3, #8]
 801bece:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bed2:	428a      	cmp	r2, r1
 801bed4:	db1d      	blt.n	801bf12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bed6:	8a58      	ldrh	r0, [r3, #18]
 801bed8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bedc:	895b      	ldrh	r3, [r3, #10]
 801bede:	4298      	cmp	r0, r3
 801bee0:	bfac      	ite	ge
 801bee2:	2000      	movge	r0, #0
 801bee4:	2001      	movlt	r0, #1
 801bee6:	4770      	bx	lr
 801bee8:	4b0d      	ldr	r3, [pc, #52]	; (801bf20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801beea:	881b      	ldrh	r3, [r3, #0]
 801beec:	4413      	add	r3, r2
 801beee:	4298      	cmp	r0, r3
 801bef0:	da0d      	bge.n	801bf0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bef2:	4b0c      	ldr	r3, [pc, #48]	; (801bf24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801bef4:	1a80      	subs	r0, r0, r2
 801bef6:	220e      	movs	r2, #14
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	fb02 3300 	mla	r3, r2, r0, r3
 801befe:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bf02:	891a      	ldrh	r2, [r3, #8]
 801bf04:	4291      	cmp	r1, r2
 801bf06:	db04      	blt.n	801bf12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bf08:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bf0c:	e7e6      	b.n	801bedc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801bf0e:	2000      	movs	r0, #0
 801bf10:	4770      	bx	lr
 801bf12:	2001      	movs	r0, #1
 801bf14:	4770      	bx	lr
 801bf16:	bf00      	nop
 801bf18:	2000bc5c 	.word	0x2000bc5c
 801bf1c:	2000bc54 	.word	0x2000bc54
 801bf20:	2000bc58 	.word	0x2000bc58
 801bf24:	2000bc3c 	.word	0x2000bc3c

0801bf28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bf28:	b508      	push	{r3, lr}
 801bf2a:	4b12      	ldr	r3, [pc, #72]	; (801bf74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bf2c:	6819      	ldr	r1, [r3, #0]
 801bf2e:	b931      	cbnz	r1, 801bf3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bf30:	4b11      	ldr	r3, [pc, #68]	; (801bf78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bf32:	f240 3132 	movw	r1, #818	; 0x332
 801bf36:	4a11      	ldr	r2, [pc, #68]	; (801bf7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bf38:	4811      	ldr	r0, [pc, #68]	; (801bf80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf3a:	f009 fc3f 	bl	80257bc <__assert_func>
 801bf3e:	8803      	ldrh	r3, [r0, #0]
 801bf40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf44:	4293      	cmp	r3, r2
 801bf46:	d012      	beq.n	801bf6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d103      	bne.n	801bf58 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bf50:	4b0c      	ldr	r3, [pc, #48]	; (801bf84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf56:	bd08      	pop	{r3, pc}
 801bf58:	4a0b      	ldr	r2, [pc, #44]	; (801bf88 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bf5a:	6812      	ldr	r2, [r2, #0]
 801bf5c:	b11a      	cbz	r2, 801bf66 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bf5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bf62:	2800      	cmp	r0, #0
 801bf64:	d1f7      	bne.n	801bf56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf66:	2214      	movs	r2, #20
 801bf68:	4353      	muls	r3, r2
 801bf6a:	58c8      	ldr	r0, [r1, r3]
 801bf6c:	e7f3      	b.n	801bf56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf6e:	2000      	movs	r0, #0
 801bf70:	e7f1      	b.n	801bf56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf72:	bf00      	nop
 801bf74:	2000bc5c 	.word	0x2000bc5c
 801bf78:	08027c5c 	.word	0x08027c5c
 801bf7c:	0802ab00 	.word	0x0802ab00
 801bf80:	0802aa06 	.word	0x0802aa06
 801bf84:	2000bb94 	.word	0x2000bb94
 801bf88:	2000bc38 	.word	0x2000bc38

0801bf8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bf8c:	8802      	ldrh	r2, [r0, #0]
 801bf8e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d840      	bhi.n	801c018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bf96:	4b21      	ldr	r3, [pc, #132]	; (801c01c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bf98:	881b      	ldrh	r3, [r3, #0]
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d220      	bcs.n	801bfe0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bf9e:	4b20      	ldr	r3, [pc, #128]	; (801c020 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bfa0:	6819      	ldr	r1, [r3, #0]
 801bfa2:	2314      	movs	r3, #20
 801bfa4:	fb03 1302 	mla	r3, r3, r2, r1
 801bfa8:	6858      	ldr	r0, [r3, #4]
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	d035      	beq.n	801c01a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfae:	491d      	ldr	r1, [pc, #116]	; (801c024 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bfb0:	6809      	ldr	r1, [r1, #0]
 801bfb2:	2900      	cmp	r1, #0
 801bfb4:	d031      	beq.n	801c01a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bfba:	b371      	cbz	r1, 801c01a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfbc:	895a      	ldrh	r2, [r3, #10]
 801bfbe:	8918      	ldrh	r0, [r3, #8]
 801bfc0:	4350      	muls	r0, r2
 801bfc2:	7c5a      	ldrb	r2, [r3, #17]
 801bfc4:	7cdb      	ldrb	r3, [r3, #19]
 801bfc6:	0952      	lsrs	r2, r2, #5
 801bfc8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bfcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bfd0:	2b0b      	cmp	r3, #11
 801bfd2:	bf18      	it	ne
 801bfd4:	0040      	lslne	r0, r0, #1
 801bfd6:	3003      	adds	r0, #3
 801bfd8:	f020 0003 	bic.w	r0, r0, #3
 801bfdc:	4408      	add	r0, r1
 801bfde:	4770      	bx	lr
 801bfe0:	4911      	ldr	r1, [pc, #68]	; (801c028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bfe2:	8809      	ldrh	r1, [r1, #0]
 801bfe4:	4419      	add	r1, r3
 801bfe6:	428a      	cmp	r2, r1
 801bfe8:	da16      	bge.n	801c018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bfea:	4910      	ldr	r1, [pc, #64]	; (801c02c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bfec:	1ad3      	subs	r3, r2, r3
 801bfee:	200e      	movs	r0, #14
 801bff0:	6809      	ldr	r1, [r1, #0]
 801bff2:	fb00 1303 	mla	r3, r0, r3, r1
 801bff6:	7b19      	ldrb	r1, [r3, #12]
 801bff8:	f001 011f 	and.w	r1, r1, #31
 801bffc:	290b      	cmp	r1, #11
 801bffe:	d10b      	bne.n	801c018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c000:	8919      	ldrh	r1, [r3, #8]
 801c002:	8958      	ldrh	r0, [r3, #10]
 801c004:	4b07      	ldr	r3, [pc, #28]	; (801c024 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c006:	4348      	muls	r0, r1
 801c008:	6819      	ldr	r1, [r3, #0]
 801c00a:	3003      	adds	r0, #3
 801c00c:	f020 0303 	bic.w	r3, r0, #3
 801c010:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c014:	4418      	add	r0, r3
 801c016:	4770      	bx	lr
 801c018:	2000      	movs	r0, #0
 801c01a:	4770      	bx	lr
 801c01c:	2000bc54 	.word	0x2000bc54
 801c020:	2000bc5c 	.word	0x2000bc5c
 801c024:	2000bc38 	.word	0x2000bc38
 801c028:	2000bc58 	.word	0x2000bc58
 801c02c:	2000bc3c 	.word	0x2000bc3c

0801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c030:	4b19      	ldr	r3, [pc, #100]	; (801c098 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c032:	6819      	ldr	r1, [r3, #0]
 801c034:	8803      	ldrh	r3, [r0, #0]
 801c036:	b1e9      	cbz	r1, 801c074 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c038:	4a18      	ldr	r2, [pc, #96]	; (801c09c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c03a:	8812      	ldrh	r2, [r2, #0]
 801c03c:	429a      	cmp	r2, r3
 801c03e:	d90a      	bls.n	801c056 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c040:	2214      	movs	r2, #20
 801c042:	fb02 1303 	mla	r3, r2, r3, r1
 801c046:	7c58      	ldrb	r0, [r3, #17]
 801c048:	0942      	lsrs	r2, r0, #5
 801c04a:	7cd8      	ldrb	r0, [r3, #19]
 801c04c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c050:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c054:	4770      	bx	lr
 801c056:	4912      	ldr	r1, [pc, #72]	; (801c0a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801c058:	8809      	ldrh	r1, [r1, #0]
 801c05a:	4411      	add	r1, r2
 801c05c:	428b      	cmp	r3, r1
 801c05e:	da09      	bge.n	801c074 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c060:	1a9b      	subs	r3, r3, r2
 801c062:	4a10      	ldr	r2, [pc, #64]	; (801c0a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c064:	210e      	movs	r1, #14
 801c066:	6812      	ldr	r2, [r2, #0]
 801c068:	fb01 2303 	mla	r3, r1, r3, r2
 801c06c:	7b18      	ldrb	r0, [r3, #12]
 801c06e:	f000 001f 	and.w	r0, r0, #31
 801c072:	4770      	bx	lr
 801c074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c078:	4293      	cmp	r3, r2
 801c07a:	d10a      	bne.n	801c092 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801c07c:	4b0a      	ldr	r3, [pc, #40]	; (801c0a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c084:	b10a      	cbz	r2, 801c08a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c086:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c088:	b900      	cbnz	r0, 801c08c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c08a:	6898      	ldr	r0, [r3, #8]
 801c08c:	6803      	ldr	r3, [r0, #0]
 801c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c090:	4718      	bx	r3
 801c092:	2000      	movs	r0, #0
 801c094:	4770      	bx	lr
 801c096:	bf00      	nop
 801c098:	2000bc5c 	.word	0x2000bc5c
 801c09c:	2000bc54 	.word	0x2000bc54
 801c0a0:	2000bc58 	.word	0x2000bc58
 801c0a4:	2000bc3c 	.word	0x2000bc3c
 801c0a8:	2000bb94 	.word	0x2000bb94

0801c0ac <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c0ac:	2018      	movs	r0, #24
 801c0ae:	4770      	bx	lr

0801c0b0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c0b0:	2001      	movs	r0, #1
 801c0b2:	4770      	bx	lr

0801c0b4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801c0b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c0b8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801c0bc:	4770      	bx	lr

0801c0be <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801c0be:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801c0c2:	4770      	bx	lr

0801c0c4 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801c0c4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c0c8:	4770      	bx	lr

0801c0ca <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801c0ca:	b2c8      	uxtb	r0, r1
 801c0cc:	4770      	bx	lr

0801c0ce <_ZN8touchgfx8LCD24bpp4initEv>:
 801c0ce:	4770      	bx	lr

0801c0d0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0d4:	b085      	sub	sp, #20
 801c0d6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c0d8:	9203      	str	r2, [sp, #12]
 801c0da:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c0de:	6878      	ldr	r0, [r7, #4]
 801c0e0:	9201      	str	r2, [sp, #4]
 801c0e2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801c0e4:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801c0e8:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801c0ec:	fa1f fc84 	uxth.w	ip, r4
 801c0f0:	43e4      	mvns	r4, r4
 801c0f2:	9100      	str	r1, [sp, #0]
 801c0f4:	b2e4      	uxtb	r4, r4
 801c0f6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c0fa:	fb00 2505 	mla	r5, r0, r5, r2
 801c0fe:	683a      	ldr	r2, [r7, #0]
 801c100:	6877      	ldr	r7, [r6, #4]
 801c102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c106:	3704      	adds	r7, #4
 801c108:	4415      	add	r5, r2
 801c10a:	6832      	ldr	r2, [r6, #0]
 801c10c:	9202      	str	r2, [sp, #8]
 801c10e:	9a00      	ldr	r2, [sp, #0]
 801c110:	2a00      	cmp	r2, #0
 801c112:	dc03      	bgt.n	801c11c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c114:	9a03      	ldr	r2, [sp, #12]
 801c116:	2a00      	cmp	r2, #0
 801c118:	f340 8116 	ble.w	801c348 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c11c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c11e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c122:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c124:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c128:	2b00      	cmp	r3, #0
 801c12a:	dd0f      	ble.n	801c14c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c12c:	1406      	asrs	r6, r0, #16
 801c12e:	d406      	bmi.n	801c13e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c130:	4546      	cmp	r6, r8
 801c132:	da04      	bge.n	801c13e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c134:	1416      	asrs	r6, r2, #16
 801c136:	d402      	bmi.n	801c13e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c138:	9901      	ldr	r1, [sp, #4]
 801c13a:	428e      	cmp	r6, r1
 801c13c:	db07      	blt.n	801c14e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c13e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c140:	3b01      	subs	r3, #1
 801c142:	3503      	adds	r5, #3
 801c144:	4408      	add	r0, r1
 801c146:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c148:	440a      	add	r2, r1
 801c14a:	e7ed      	b.n	801c128 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801c14c:	d011      	beq.n	801c172 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801c14e:	1e5e      	subs	r6, r3, #1
 801c150:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c152:	fb01 0e06 	mla	lr, r1, r6, r0
 801c156:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c15a:	d548      	bpl.n	801c1ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801c15c:	4699      	mov	r9, r3
 801c15e:	462e      	mov	r6, r5
 801c160:	f1b9 0f00 	cmp.w	r9, #0
 801c164:	f300 809e 	bgt.w	801c2a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801c168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c16c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c170:	441d      	add	r5, r3
 801c172:	9b00      	ldr	r3, [sp, #0]
 801c174:	2b00      	cmp	r3, #0
 801c176:	f340 80e7 	ble.w	801c348 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c17a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c180:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c184:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c188:	eef0 6a62 	vmov.f32	s13, s5
 801c18c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c190:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c194:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c198:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c19c:	eef0 6a43 	vmov.f32	s13, s6
 801c1a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1a4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c1a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1c0:	ee12 2a90 	vmov	r2, s5
 801c1c4:	eef0 2a47 	vmov.f32	s5, s14
 801c1c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1cc:	ee13 2a10 	vmov	r2, s6
 801c1d0:	9311      	str	r3, [sp, #68]	; 0x44
 801c1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1d4:	eeb0 3a67 	vmov.f32	s6, s15
 801c1d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1dc:	9312      	str	r3, [sp, #72]	; 0x48
 801c1de:	9b00      	ldr	r3, [sp, #0]
 801c1e0:	9a03      	ldr	r2, [sp, #12]
 801c1e2:	3b01      	subs	r3, #1
 801c1e4:	9300      	str	r3, [sp, #0]
 801c1e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1e8:	bf08      	it	eq
 801c1ea:	4613      	moveq	r3, r2
 801c1ec:	e78f      	b.n	801c10e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801c1ee:	45c6      	cmp	lr, r8
 801c1f0:	dab4      	bge.n	801c15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c1f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c1f4:	fb01 2606 	mla	r6, r1, r6, r2
 801c1f8:	1436      	asrs	r6, r6, #16
 801c1fa:	d4af      	bmi.n	801c15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c1fc:	9901      	ldr	r1, [sp, #4]
 801c1fe:	428e      	cmp	r6, r1
 801c200:	daac      	bge.n	801c15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c202:	1cee      	adds	r6, r5, #3
 801c204:	4699      	mov	r9, r3
 801c206:	f1b9 0f00 	cmp.w	r9, #0
 801c20a:	f106 0603 	add.w	r6, r6, #3
 801c20e:	ddab      	ble.n	801c168 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c210:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c214:	9902      	ldr	r1, [sp, #8]
 801c216:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c21a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c21e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c222:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c224:	fb1b fb04 	smulbb	fp, fp, r4
 801c228:	f109 39ff 	add.w	r9, r9, #4294967295
 801c22c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c230:	4408      	add	r0, r1
 801c232:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c234:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c238:	440a      	add	r2, r1
 801c23a:	eb07 0a0e 	add.w	sl, r7, lr
 801c23e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c242:	fb0e be0c 	mla	lr, lr, ip, fp
 801c246:	fa1f fe8e 	uxth.w	lr, lr
 801c24a:	f10e 0b01 	add.w	fp, lr, #1
 801c24e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c252:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c256:	fb1b fb04 	smulbb	fp, fp, r4
 801c25a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c25e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801c262:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c266:	fb0e be0c 	mla	lr, lr, ip, fp
 801c26a:	fa1f fe8e 	uxth.w	lr, lr
 801c26e:	f10e 0b01 	add.w	fp, lr, #1
 801c272:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c276:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c27a:	f806 ec05 	strb.w	lr, [r6, #-5]
 801c27e:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c282:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c286:	fb1a fa04 	smulbb	sl, sl, r4
 801c28a:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c28e:	fa1f fe8e 	uxth.w	lr, lr
 801c292:	f10e 0a01 	add.w	sl, lr, #1
 801c296:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c29a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c29e:	f806 ec04 	strb.w	lr, [r6, #-4]
 801c2a2:	e7b0      	b.n	801c206 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c2a4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2a8:	d446      	bmi.n	801c338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2aa:	45c2      	cmp	sl, r8
 801c2ac:	da44      	bge.n	801c338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2ae:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801c2b2:	d441      	bmi.n	801c338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2b4:	9901      	ldr	r1, [sp, #4]
 801c2b6:	458e      	cmp	lr, r1
 801c2b8:	da3e      	bge.n	801c338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c2ba:	9902      	ldr	r1, [sp, #8]
 801c2bc:	f896 b000 	ldrb.w	fp, [r6]
 801c2c0:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c2c4:	fb1b fb04 	smulbb	fp, fp, r4
 801c2c8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c2cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c2d0:	eb07 0a0e 	add.w	sl, r7, lr
 801c2d4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c2d8:	fb0e be0c 	mla	lr, lr, ip, fp
 801c2dc:	fa1f fe8e 	uxth.w	lr, lr
 801c2e0:	f10e 0b01 	add.w	fp, lr, #1
 801c2e4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c2ec:	fb1b fb04 	smulbb	fp, fp, r4
 801c2f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2f4:	f886 e000 	strb.w	lr, [r6]
 801c2f8:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c2fc:	fb0e be0c 	mla	lr, lr, ip, fp
 801c300:	fa1f fe8e 	uxth.w	lr, lr
 801c304:	f10e 0b01 	add.w	fp, lr, #1
 801c308:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c30c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c310:	f886 e001 	strb.w	lr, [r6, #1]
 801c314:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c318:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c31c:	fb1a fa04 	smulbb	sl, sl, r4
 801c320:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c324:	fa1f fe8e 	uxth.w	lr, lr
 801c328:	f10e 0a01 	add.w	sl, lr, #1
 801c32c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c330:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c334:	f886 e002 	strb.w	lr, [r6, #2]
 801c338:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c33a:	3603      	adds	r6, #3
 801c33c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c340:	4408      	add	r0, r1
 801c342:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c344:	440a      	add	r2, r1
 801c346:	e70b      	b.n	801c160 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c348:	b005      	add	sp, #20
 801c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c34e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c352:	b085      	sub	sp, #20
 801c354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c358:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c35a:	9203      	str	r2, [sp, #12]
 801c35c:	6870      	ldr	r0, [r6, #4]
 801c35e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c360:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c364:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c368:	9101      	str	r1, [sp, #4]
 801c36a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c36e:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c372:	fb00 2404 	mla	r4, r0, r4, r2
 801c376:	6832      	ldr	r2, [r6, #0]
 801c378:	686e      	ldr	r6, [r5, #4]
 801c37a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c37e:	3604      	adds	r6, #4
 801c380:	4414      	add	r4, r2
 801c382:	682a      	ldr	r2, [r5, #0]
 801c384:	9202      	str	r2, [sp, #8]
 801c386:	9a01      	ldr	r2, [sp, #4]
 801c388:	2a00      	cmp	r2, #0
 801c38a:	dc03      	bgt.n	801c394 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c38c:	9a03      	ldr	r2, [sp, #12]
 801c38e:	2a00      	cmp	r2, #0
 801c390:	f340 80b2 	ble.w	801c4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c396:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c39a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c39c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	dd0c      	ble.n	801c3be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c3a4:	1405      	asrs	r5, r0, #16
 801c3a6:	d405      	bmi.n	801c3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3a8:	4575      	cmp	r5, lr
 801c3aa:	da03      	bge.n	801c3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3ac:	1415      	asrs	r5, r2, #16
 801c3ae:	d401      	bmi.n	801c3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3b0:	4545      	cmp	r5, r8
 801c3b2:	db05      	blt.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c3b4:	4460      	add	r0, ip
 801c3b6:	443a      	add	r2, r7
 801c3b8:	3b01      	subs	r3, #1
 801c3ba:	3403      	adds	r4, #3
 801c3bc:	e7f0      	b.n	801c3a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c3be:	d03d      	beq.n	801c43c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c3c0:	1e5d      	subs	r5, r3, #1
 801c3c2:	fb0c 0905 	mla	r9, ip, r5, r0
 801c3c6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c3ca:	d42c      	bmi.n	801c426 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c3cc:	45f1      	cmp	r9, lr
 801c3ce:	da2a      	bge.n	801c426 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c3d0:	fb07 2505 	mla	r5, r7, r5, r2
 801c3d4:	142d      	asrs	r5, r5, #16
 801c3d6:	d426      	bmi.n	801c426 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c3d8:	4545      	cmp	r5, r8
 801c3da:	da24      	bge.n	801c426 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c3dc:	1ce5      	adds	r5, r4, #3
 801c3de:	469a      	mov	sl, r3
 801c3e0:	f1ba 0f00 	cmp.w	sl, #0
 801c3e4:	f105 0503 	add.w	r5, r5, #3
 801c3e8:	dd23      	ble.n	801c432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c3ea:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c3ee:	9902      	ldr	r1, [sp, #8]
 801c3f0:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c3f4:	443a      	add	r2, r7
 801c3f6:	fb0e 1909 	mla	r9, lr, r9, r1
 801c3fa:	4460      	add	r0, ip
 801c3fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c400:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c404:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c408:	eb06 0b09 	add.w	fp, r6, r9
 801c40c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c410:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c414:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c418:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c41c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c420:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c424:	e7dc      	b.n	801c3e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c426:	2500      	movs	r5, #0
 801c428:	eba3 0905 	sub.w	r9, r3, r5
 801c42c:	f1b9 0f00 	cmp.w	r9, #0
 801c430:	dc3c      	bgt.n	801c4ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c432:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c43a:	441c      	add	r4, r3
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	dd5a      	ble.n	801c4f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c442:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c448:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c44c:	eeb0 6a62 	vmov.f32	s12, s5
 801c450:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c454:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c458:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c45c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c460:	eeb0 6a43 	vmov.f32	s12, s6
 801c464:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c468:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c46c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c470:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c474:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c478:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c47c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c480:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c484:	ee12 2a90 	vmov	r2, s5
 801c488:	eef0 2a47 	vmov.f32	s5, s14
 801c48c:	fb92 fcf3 	sdiv	ip, r2, r3
 801c490:	ee13 2a10 	vmov	r2, s6
 801c494:	eeb0 3a67 	vmov.f32	s6, s15
 801c498:	fb92 f7f3 	sdiv	r7, r2, r3
 801c49c:	9b01      	ldr	r3, [sp, #4]
 801c49e:	9a03      	ldr	r2, [sp, #12]
 801c4a0:	3b01      	subs	r3, #1
 801c4a2:	9301      	str	r3, [sp, #4]
 801c4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4a6:	bf08      	it	eq
 801c4a8:	4613      	moveq	r3, r2
 801c4aa:	e76c      	b.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c4ac:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c4b0:	d41e      	bmi.n	801c4f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4b2:	45f2      	cmp	sl, lr
 801c4b4:	da1c      	bge.n	801c4f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4b6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c4ba:	d419      	bmi.n	801c4f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4bc:	45c1      	cmp	r9, r8
 801c4be:	da17      	bge.n	801c4f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4c0:	9902      	ldr	r1, [sp, #8]
 801c4c2:	fb0e 1909 	mla	r9, lr, r9, r1
 801c4c6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c4ca:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c4ce:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c4d2:	eb06 0a09 	add.w	sl, r6, r9
 801c4d6:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c4da:	f804 b009 	strb.w	fp, [r4, r9]
 801c4de:	44a1      	add	r9, r4
 801c4e0:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c4e4:	f889 b001 	strb.w	fp, [r9, #1]
 801c4e8:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c4ec:	f889 a002 	strb.w	sl, [r9, #2]
 801c4f0:	4460      	add	r0, ip
 801c4f2:	443a      	add	r2, r7
 801c4f4:	3501      	adds	r5, #1
 801c4f6:	e797      	b.n	801c428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c4f8:	b005      	add	sp, #20
 801c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c4fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c4fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c502:	b087      	sub	sp, #28
 801c504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c508:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c50a:	9204      	str	r2, [sp, #16]
 801c50c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c510:	6870      	ldr	r0, [r6, #4]
 801c512:	9205      	str	r2, [sp, #20]
 801c514:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c516:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c51a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c51e:	9101      	str	r1, [sp, #4]
 801c520:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c524:	fb00 2505 	mla	r5, r0, r5, r2
 801c528:	6832      	ldr	r2, [r6, #0]
 801c52a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c52e:	4415      	add	r5, r2
 801c530:	6822      	ldr	r2, [r4, #0]
 801c532:	9202      	str	r2, [sp, #8]
 801c534:	6862      	ldr	r2, [r4, #4]
 801c536:	3204      	adds	r2, #4
 801c538:	9203      	str	r2, [sp, #12]
 801c53a:	9a01      	ldr	r2, [sp, #4]
 801c53c:	2a00      	cmp	r2, #0
 801c53e:	dc03      	bgt.n	801c548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c540:	9a04      	ldr	r2, [sp, #16]
 801c542:	2a00      	cmp	r2, #0
 801c544:	f340 8124 	ble.w	801c790 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c548:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c54a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c550:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c554:	2b00      	cmp	r3, #0
 801c556:	dd0e      	ble.n	801c576 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c558:	1422      	asrs	r2, r4, #16
 801c55a:	d405      	bmi.n	801c568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c55c:	4572      	cmp	r2, lr
 801c55e:	da03      	bge.n	801c568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c560:	1402      	asrs	r2, r0, #16
 801c562:	d401      	bmi.n	801c568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c564:	4542      	cmp	r2, r8
 801c566:	db07      	blt.n	801c578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c56a:	3b01      	subs	r3, #1
 801c56c:	3503      	adds	r5, #3
 801c56e:	4414      	add	r4, r2
 801c570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c572:	4410      	add	r0, r2
 801c574:	e7ee      	b.n	801c554 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c576:	d010      	beq.n	801c59a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c578:	1e5a      	subs	r2, r3, #1
 801c57a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c57c:	fb06 4602 	mla	r6, r6, r2, r4
 801c580:	1436      	asrs	r6, r6, #16
 801c582:	d546      	bpl.n	801c612 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c584:	4699      	mov	r9, r3
 801c586:	462f      	mov	r7, r5
 801c588:	f1b9 0f00 	cmp.w	r9, #0
 801c58c:	f300 80a5 	bgt.w	801c6da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c598:	441d      	add	r5, r3
 801c59a:	9b01      	ldr	r3, [sp, #4]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	f340 80f7 	ble.w	801c790 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c5a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5ac:	eeb0 6a62 	vmov.f32	s12, s5
 801c5b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5bc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5c0:	eeb0 6a43 	vmov.f32	s12, s6
 801c5c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5c8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5e4:	ee12 2a90 	vmov	r2, s5
 801c5e8:	eef0 2a47 	vmov.f32	s5, s14
 801c5ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5f0:	ee13 2a10 	vmov	r2, s6
 801c5f4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5f8:	eeb0 3a67 	vmov.f32	s6, s15
 801c5fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c600:	9314      	str	r3, [sp, #80]	; 0x50
 801c602:	9b01      	ldr	r3, [sp, #4]
 801c604:	9a04      	ldr	r2, [sp, #16]
 801c606:	3b01      	subs	r3, #1
 801c608:	9301      	str	r3, [sp, #4]
 801c60a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c60c:	bf08      	it	eq
 801c60e:	4613      	moveq	r3, r2
 801c610:	e793      	b.n	801c53a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c612:	4576      	cmp	r6, lr
 801c614:	dab6      	bge.n	801c584 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c616:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c618:	fb06 0202 	mla	r2, r6, r2, r0
 801c61c:	1412      	asrs	r2, r2, #16
 801c61e:	d4b1      	bmi.n	801c584 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c620:	4542      	cmp	r2, r8
 801c622:	daaf      	bge.n	801c584 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c624:	1cef      	adds	r7, r5, #3
 801c626:	4699      	mov	r9, r3
 801c628:	f1b9 0f00 	cmp.w	r9, #0
 801c62c:	ddb0      	ble.n	801c590 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c62e:	9902      	ldr	r1, [sp, #8]
 801c630:	1402      	asrs	r2, r0, #16
 801c632:	1426      	asrs	r6, r4, #16
 801c634:	fb0e 1202 	mla	r2, lr, r2, r1
 801c638:	9903      	ldr	r1, [sp, #12]
 801c63a:	5d92      	ldrb	r2, [r2, r6]
 801c63c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c640:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c644:	d041      	beq.n	801c6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c646:	9a05      	ldr	r2, [sp, #20]
 801c648:	fa5f fb86 	uxtb.w	fp, r6
 801c64c:	fb02 fc0c 	mul.w	ip, r2, ip
 801c650:	f10c 0201 	add.w	r2, ip, #1
 801c654:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c658:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c65c:	1212      	asrs	r2, r2, #8
 801c65e:	fa1f fa82 	uxth.w	sl, r2
 801c662:	43d2      	mvns	r2, r2
 801c664:	fb1b fb0a 	smulbb	fp, fp, sl
 801c668:	b2d2      	uxtb	r2, r2
 801c66a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c66e:	fa1f fc8c 	uxth.w	ip, ip
 801c672:	f10c 0b01 	add.w	fp, ip, #1
 801c676:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c67a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c67e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c682:	fb1b fb0a 	smulbb	fp, fp, sl
 801c686:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c68a:	fb16 fa0a 	smulbb	sl, r6, sl
 801c68e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c692:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c696:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c69a:	fb06 aa02 	mla	sl, r6, r2, sl
 801c69e:	fb0c bc02 	mla	ip, ip, r2, fp
 801c6a2:	fa1f fa8a 	uxth.w	sl, sl
 801c6a6:	fa1f fc8c 	uxth.w	ip, ip
 801c6aa:	f10a 0601 	add.w	r6, sl, #1
 801c6ae:	f10c 0b01 	add.w	fp, ip, #1
 801c6b2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c6b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c6ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6be:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c6c2:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c6c6:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c6ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6cc:	3703      	adds	r7, #3
 801c6ce:	f109 39ff 	add.w	r9, r9, #4294967295
 801c6d2:	4414      	add	r4, r2
 801c6d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6d6:	4410      	add	r0, r2
 801c6d8:	e7a6      	b.n	801c628 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c6da:	1426      	asrs	r6, r4, #16
 801c6dc:	d450      	bmi.n	801c780 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c6de:	4576      	cmp	r6, lr
 801c6e0:	da4e      	bge.n	801c780 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c6e2:	1402      	asrs	r2, r0, #16
 801c6e4:	d44c      	bmi.n	801c780 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c6e6:	4542      	cmp	r2, r8
 801c6e8:	da4a      	bge.n	801c780 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c6ea:	9902      	ldr	r1, [sp, #8]
 801c6ec:	fb0e 1202 	mla	r2, lr, r2, r1
 801c6f0:	9903      	ldr	r1, [sp, #12]
 801c6f2:	5d92      	ldrb	r2, [r2, r6]
 801c6f4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c6f8:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c6fc:	d040      	beq.n	801c780 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c6fe:	9a05      	ldr	r2, [sp, #20]
 801c700:	fa5f fb86 	uxtb.w	fp, r6
 801c704:	fb02 fc0c 	mul.w	ip, r2, ip
 801c708:	f10c 0201 	add.w	r2, ip, #1
 801c70c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c710:	f897 c000 	ldrb.w	ip, [r7]
 801c714:	1212      	asrs	r2, r2, #8
 801c716:	fa1f fa82 	uxth.w	sl, r2
 801c71a:	43d2      	mvns	r2, r2
 801c71c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c720:	b2d2      	uxtb	r2, r2
 801c722:	fb0c bc02 	mla	ip, ip, r2, fp
 801c726:	fa1f fc8c 	uxth.w	ip, ip
 801c72a:	f10c 0b01 	add.w	fp, ip, #1
 801c72e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c732:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c736:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c73a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c73e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c742:	fb16 fa0a 	smulbb	sl, r6, sl
 801c746:	78be      	ldrb	r6, [r7, #2]
 801c748:	f887 c000 	strb.w	ip, [r7]
 801c74c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c750:	fb06 aa02 	mla	sl, r6, r2, sl
 801c754:	fb0c bc02 	mla	ip, ip, r2, fp
 801c758:	fa1f fa8a 	uxth.w	sl, sl
 801c75c:	fa1f fc8c 	uxth.w	ip, ip
 801c760:	f10a 0601 	add.w	r6, sl, #1
 801c764:	f10c 0b01 	add.w	fp, ip, #1
 801c768:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c76c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c770:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c774:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c778:	f887 a002 	strb.w	sl, [r7, #2]
 801c77c:	f887 c001 	strb.w	ip, [r7, #1]
 801c780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c782:	3703      	adds	r7, #3
 801c784:	f109 39ff 	add.w	r9, r9, #4294967295
 801c788:	4414      	add	r4, r2
 801c78a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c78c:	4410      	add	r0, r2
 801c78e:	e6fb      	b.n	801c588 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c790:	b007      	add	sp, #28
 801c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c796 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c79a:	b085      	sub	sp, #20
 801c79c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c7a2:	9203      	str	r2, [sp, #12]
 801c7a4:	6870      	ldr	r0, [r6, #4]
 801c7a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c7a8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c7ac:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c7b0:	9100      	str	r1, [sp, #0]
 801c7b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c7b6:	fb00 2404 	mla	r4, r0, r4, r2
 801c7ba:	6832      	ldr	r2, [r6, #0]
 801c7bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7c0:	4414      	add	r4, r2
 801c7c2:	682a      	ldr	r2, [r5, #0]
 801c7c4:	9201      	str	r2, [sp, #4]
 801c7c6:	686a      	ldr	r2, [r5, #4]
 801c7c8:	3204      	adds	r2, #4
 801c7ca:	9202      	str	r2, [sp, #8]
 801c7cc:	9a00      	ldr	r2, [sp, #0]
 801c7ce:	2a00      	cmp	r2, #0
 801c7d0:	dc03      	bgt.n	801c7da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c7d2:	9a03      	ldr	r2, [sp, #12]
 801c7d4:	2a00      	cmp	r2, #0
 801c7d6:	f340 8131 	ble.w	801ca3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c7da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c7dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c7e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c7e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	dd0e      	ble.n	801c808 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c7ea:	1405      	asrs	r5, r0, #16
 801c7ec:	d405      	bmi.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c7ee:	4575      	cmp	r5, lr
 801c7f0:	da03      	bge.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c7f2:	1415      	asrs	r5, r2, #16
 801c7f4:	d401      	bmi.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c7f6:	4545      	cmp	r5, r8
 801c7f8:	db07      	blt.n	801c80a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c7fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c7fc:	3b01      	subs	r3, #1
 801c7fe:	3403      	adds	r4, #3
 801c800:	4428      	add	r0, r5
 801c802:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c804:	442a      	add	r2, r5
 801c806:	e7ee      	b.n	801c7e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c808:	d06f      	beq.n	801c8ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c80a:	1e5d      	subs	r5, r3, #1
 801c80c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c80e:	fb06 0605 	mla	r6, r6, r5, r0
 801c812:	1436      	asrs	r6, r6, #16
 801c814:	d460      	bmi.n	801c8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c816:	4576      	cmp	r6, lr
 801c818:	da5e      	bge.n	801c8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c81a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c81c:	fb06 2505 	mla	r5, r6, r5, r2
 801c820:	142d      	asrs	r5, r5, #16
 801c822:	d459      	bmi.n	801c8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c824:	4545      	cmp	r5, r8
 801c826:	da57      	bge.n	801c8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c828:	1ce5      	adds	r5, r4, #3
 801c82a:	469a      	mov	sl, r3
 801c82c:	f1ba 0f00 	cmp.w	sl, #0
 801c830:	dd56      	ble.n	801c8e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c832:	9901      	ldr	r1, [sp, #4]
 801c834:	1416      	asrs	r6, r2, #16
 801c836:	1407      	asrs	r7, r0, #16
 801c838:	fb0e 1606 	mla	r6, lr, r6, r1
 801c83c:	9902      	ldr	r1, [sp, #8]
 801c83e:	5df6      	ldrb	r6, [r6, r7]
 801c840:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c844:	0e37      	lsrs	r7, r6, #24
 801c846:	2fff      	cmp	r7, #255	; 0xff
 801c848:	f000 80ef 	beq.w	801ca2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c84c:	fa5f fc87 	uxtb.w	ip, r7
 801c850:	b3d7      	cbz	r7, 801c8c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c852:	fa1f f78c 	uxth.w	r7, ip
 801c856:	ea6f 0c0c 	mvn.w	ip, ip
 801c85a:	fa5f fb86 	uxtb.w	fp, r6
 801c85e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c862:	fa5f fc8c 	uxtb.w	ip, ip
 801c866:	fb1b fb07 	smulbb	fp, fp, r7
 801c86a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c86e:	fa1f f989 	uxth.w	r9, r9
 801c872:	f109 0b01 	add.w	fp, r9, #1
 801c876:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c87a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c87e:	fb1b fb0c 	smulbb	fp, fp, ip
 801c882:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c886:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c88a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c88e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c892:	fb09 b907 	mla	r9, r9, r7, fp
 801c896:	fa1f f989 	uxth.w	r9, r9
 801c89a:	f109 0b01 	add.w	fp, r9, #1
 801c89e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8a6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c8aa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c8ae:	fb19 fc0c 	smulbb	ip, r9, ip
 801c8b2:	fb06 c607 	mla	r6, r6, r7, ip
 801c8b6:	b2b6      	uxth	r6, r6
 801c8b8:	f106 0c01 	add.w	ip, r6, #1
 801c8bc:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c8c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c8c4:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c8c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c8ca:	3503      	adds	r5, #3
 801c8cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8d0:	4408      	add	r0, r1
 801c8d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c8d4:	440a      	add	r2, r1
 801c8d6:	e7a9      	b.n	801c82c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c8d8:	2600      	movs	r6, #0
 801c8da:	1b9d      	subs	r5, r3, r6
 801c8dc:	2d00      	cmp	r5, #0
 801c8de:	dc40      	bgt.n	801c962 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c8e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8e8:	441c      	add	r4, r3
 801c8ea:	9b00      	ldr	r3, [sp, #0]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	f340 80a5 	ble.w	801ca3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c8f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c8fc:	eeb0 6a62 	vmov.f32	s12, s5
 801c900:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c904:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c908:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c90c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c910:	eeb0 6a43 	vmov.f32	s12, s6
 801c914:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c918:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c91c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c920:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c924:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c928:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c92c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c930:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c934:	ee12 2a90 	vmov	r2, s5
 801c938:	eef0 2a47 	vmov.f32	s5, s14
 801c93c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c940:	ee13 2a10 	vmov	r2, s6
 801c944:	9311      	str	r3, [sp, #68]	; 0x44
 801c946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c948:	eeb0 3a67 	vmov.f32	s6, s15
 801c94c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c950:	9312      	str	r3, [sp, #72]	; 0x48
 801c952:	9b00      	ldr	r3, [sp, #0]
 801c954:	9a03      	ldr	r2, [sp, #12]
 801c956:	3b01      	subs	r3, #1
 801c958:	9300      	str	r3, [sp, #0]
 801c95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c95c:	bf08      	it	eq
 801c95e:	4613      	moveq	r3, r2
 801c960:	e734      	b.n	801c7cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c962:	1407      	asrs	r7, r0, #16
 801c964:	d450      	bmi.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c966:	4577      	cmp	r7, lr
 801c968:	da4e      	bge.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c96a:	1415      	asrs	r5, r2, #16
 801c96c:	d44c      	bmi.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c96e:	4545      	cmp	r5, r8
 801c970:	da4a      	bge.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c972:	9901      	ldr	r1, [sp, #4]
 801c974:	fb0e 1505 	mla	r5, lr, r5, r1
 801c978:	9902      	ldr	r1, [sp, #8]
 801c97a:	5ded      	ldrb	r5, [r5, r7]
 801c97c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c980:	0e2f      	lsrs	r7, r5, #24
 801c982:	2fff      	cmp	r7, #255	; 0xff
 801c984:	d046      	beq.n	801ca14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c986:	fa5f f987 	uxtb.w	r9, r7
 801c98a:	b3ef      	cbz	r7, 801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c98c:	fa1f fc89 	uxth.w	ip, r9
 801c990:	ea6f 0909 	mvn.w	r9, r9
 801c994:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c998:	fa5f fb85 	uxtb.w	fp, r5
 801c99c:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c9a0:	fa5f f989 	uxtb.w	r9, r9
 801c9a4:	fb1b fb0c 	smulbb	fp, fp, ip
 801c9a8:	fb0a ba09 	mla	sl, sl, r9, fp
 801c9ac:	fa1f fa8a 	uxth.w	sl, sl
 801c9b0:	f10a 0b01 	add.w	fp, sl, #1
 801c9b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c9b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9bc:	f804 a007 	strb.w	sl, [r4, r7]
 801c9c0:	4427      	add	r7, r4
 801c9c2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c9c6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c9ca:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c9ce:	fb1b fb09 	smulbb	fp, fp, r9
 801c9d2:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c9d6:	fa1f fa8a 	uxth.w	sl, sl
 801c9da:	f10a 0b01 	add.w	fp, sl, #1
 801c9de:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c9e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9e6:	f887 a001 	strb.w	sl, [r7, #1]
 801c9ea:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c9ee:	fb1a f909 	smulbb	r9, sl, r9
 801c9f2:	fb05 950c 	mla	r5, r5, ip, r9
 801c9f6:	b2ad      	uxth	r5, r5
 801c9f8:	f105 0901 	add.w	r9, r5, #1
 801c9fc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca00:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca04:	f887 9002 	strb.w	r9, [r7, #2]
 801ca08:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca0a:	3601      	adds	r6, #1
 801ca0c:	4408      	add	r0, r1
 801ca0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ca10:	440a      	add	r2, r1
 801ca12:	e762      	b.n	801c8da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ca14:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca18:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801ca1c:	55e5      	strb	r5, [r4, r7]
 801ca1e:	4427      	add	r7, r4
 801ca20:	0c2d      	lsrs	r5, r5, #16
 801ca22:	f887 c001 	strb.w	ip, [r7, #1]
 801ca26:	70bd      	strb	r5, [r7, #2]
 801ca28:	e7ee      	b.n	801ca08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ca2a:	0a37      	lsrs	r7, r6, #8
 801ca2c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ca30:	0c36      	lsrs	r6, r6, #16
 801ca32:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ca36:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ca3a:	e745      	b.n	801c8c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801ca3c:	b005      	add	sp, #20
 801ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca46:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ca48:	9201      	str	r2, [sp, #4]
 801ca4a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ca4e:	6870      	ldr	r0, [r6, #4]
 801ca50:	9200      	str	r2, [sp, #0]
 801ca52:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801ca56:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801ca5a:	fa1f fc85 	uxth.w	ip, r5
 801ca5e:	43ed      	mvns	r5, r5
 801ca60:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca64:	b2ed      	uxtb	r5, r5
 801ca66:	fb00 2404 	mla	r4, r0, r4, r2
 801ca6a:	6832      	ldr	r2, [r6, #0]
 801ca6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca70:	4414      	add	r4, r2
 801ca72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ca74:	f8d2 8000 	ldr.w	r8, [r2]
 801ca78:	2900      	cmp	r1, #0
 801ca7a:	dc03      	bgt.n	801ca84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801ca7c:	9a01      	ldr	r2, [sp, #4]
 801ca7e:	2a00      	cmp	r2, #0
 801ca80:	f340 8104 	ble.w	801cc8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801ca84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca86:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ca8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	dd0f      	ble.n	801cab4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ca94:	1406      	asrs	r6, r0, #16
 801ca96:	d406      	bmi.n	801caa6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ca98:	4576      	cmp	r6, lr
 801ca9a:	da04      	bge.n	801caa6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ca9c:	1416      	asrs	r6, r2, #16
 801ca9e:	d402      	bmi.n	801caa6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801caa0:	9f00      	ldr	r7, [sp, #0]
 801caa2:	42be      	cmp	r6, r7
 801caa4:	db07      	blt.n	801cab6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801caa6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801caa8:	3b01      	subs	r3, #1
 801caaa:	3403      	adds	r4, #3
 801caac:	4430      	add	r0, r6
 801caae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cab0:	4432      	add	r2, r6
 801cab2:	e7ed      	b.n	801ca90 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801cab4:	d05f      	beq.n	801cb76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801cab6:	1e5e      	subs	r6, r3, #1
 801cab8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801caba:	fb07 0706 	mla	r7, r7, r6, r0
 801cabe:	143f      	asrs	r7, r7, #16
 801cac0:	d450      	bmi.n	801cb64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cac2:	4577      	cmp	r7, lr
 801cac4:	da4e      	bge.n	801cb64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cac6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cac8:	fb07 2606 	mla	r6, r7, r6, r2
 801cacc:	1436      	asrs	r6, r6, #16
 801cace:	d449      	bmi.n	801cb64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cad0:	9f00      	ldr	r7, [sp, #0]
 801cad2:	42be      	cmp	r6, r7
 801cad4:	da46      	bge.n	801cb64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cad6:	1ce6      	adds	r6, r4, #3
 801cad8:	4699      	mov	r9, r3
 801cada:	f1b9 0f00 	cmp.w	r9, #0
 801cade:	f106 0603 	add.w	r6, r6, #3
 801cae2:	dd43      	ble.n	801cb6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801cae4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cae8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801caec:	1417      	asrs	r7, r2, #16
 801caee:	f109 39ff 	add.w	r9, r9, #4294967295
 801caf2:	fb1b fb05 	smulbb	fp, fp, r5
 801caf6:	fb0e a707 	mla	r7, lr, r7, sl
 801cafa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cafe:	eb08 0a07 	add.w	sl, r8, r7
 801cb02:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb06:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb0a:	b2bf      	uxth	r7, r7
 801cb0c:	f107 0b01 	add.w	fp, r7, #1
 801cb10:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb14:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb18:	fb1b fb05 	smulbb	fp, fp, r5
 801cb1c:	123f      	asrs	r7, r7, #8
 801cb1e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cb22:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cb26:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb2a:	b2bf      	uxth	r7, r7
 801cb2c:	f107 0b01 	add.w	fp, r7, #1
 801cb30:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb34:	123f      	asrs	r7, r7, #8
 801cb36:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cb3a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cb3e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cb42:	fb1a fa05 	smulbb	sl, sl, r5
 801cb46:	fb07 a70c 	mla	r7, r7, ip, sl
 801cb4a:	b2bf      	uxth	r7, r7
 801cb4c:	f107 0a01 	add.w	sl, r7, #1
 801cb50:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cb54:	123f      	asrs	r7, r7, #8
 801cb56:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cb5a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb5c:	4438      	add	r0, r7
 801cb5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb60:	443a      	add	r2, r7
 801cb62:	e7ba      	b.n	801cada <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801cb64:	2700      	movs	r7, #0
 801cb66:	1bde      	subs	r6, r3, r7
 801cb68:	2e00      	cmp	r6, #0
 801cb6a:	dc3f      	bgt.n	801cbec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801cb6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb74:	441c      	add	r4, r3
 801cb76:	2900      	cmp	r1, #0
 801cb78:	f340 8088 	ble.w	801cc8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801cb7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb86:	3901      	subs	r1, #1
 801cb88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb8c:	eef0 6a62 	vmov.f32	s13, s5
 801cb90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cb94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb9c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cba0:	eef0 6a43 	vmov.f32	s13, s6
 801cba4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cba8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cbac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbc4:	ee12 2a90 	vmov	r2, s5
 801cbc8:	eef0 2a47 	vmov.f32	s5, s14
 801cbcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbd0:	ee13 2a10 	vmov	r2, s6
 801cbd4:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbd8:	eeb0 3a67 	vmov.f32	s6, s15
 801cbdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbe0:	9a01      	ldr	r2, [sp, #4]
 801cbe2:	9310      	str	r3, [sp, #64]	; 0x40
 801cbe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbe6:	bf08      	it	eq
 801cbe8:	4613      	moveq	r3, r2
 801cbea:	e745      	b.n	801ca78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801cbec:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cbf0:	d446      	bmi.n	801cc80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cbf2:	45f2      	cmp	sl, lr
 801cbf4:	da44      	bge.n	801cc80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cbf6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801cbfa:	d441      	bmi.n	801cc80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cbfc:	9e00      	ldr	r6, [sp, #0]
 801cbfe:	45b1      	cmp	r9, r6
 801cc00:	da3e      	bge.n	801cc80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc02:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc06:	fb0e a909 	mla	r9, lr, r9, sl
 801cc0a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cc0e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc12:	fb1b fb05 	smulbb	fp, fp, r5
 801cc16:	eb08 0a09 	add.w	sl, r8, r9
 801cc1a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cc1e:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc22:	fa1f f989 	uxth.w	r9, r9
 801cc26:	f109 0b01 	add.w	fp, r9, #1
 801cc2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc32:	f804 9006 	strb.w	r9, [r4, r6]
 801cc36:	4426      	add	r6, r4
 801cc38:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cc3c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc40:	fb1b fb05 	smulbb	fp, fp, r5
 801cc44:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc48:	fa1f f989 	uxth.w	r9, r9
 801cc4c:	f109 0b01 	add.w	fp, r9, #1
 801cc50:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc54:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc58:	f886 9001 	strb.w	r9, [r6, #1]
 801cc5c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc60:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cc64:	fb1a fa05 	smulbb	sl, sl, r5
 801cc68:	fb09 a90c 	mla	r9, r9, ip, sl
 801cc6c:	fa1f f989 	uxth.w	r9, r9
 801cc70:	f109 0a01 	add.w	sl, r9, #1
 801cc74:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cc78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc7c:	f886 9002 	strb.w	r9, [r6, #2]
 801cc80:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cc82:	3701      	adds	r7, #1
 801cc84:	4430      	add	r0, r6
 801cc86:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cc88:	4432      	add	r2, r6
 801cc8a:	e76c      	b.n	801cb66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801cc8c:	b003      	add	sp, #12
 801cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cc92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cc98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cc9c:	9201      	str	r2, [sp, #4]
 801cc9e:	6868      	ldr	r0, [r5, #4]
 801cca0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801cca4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801cca8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ccac:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801ccb0:	fb00 2404 	mla	r4, r0, r4, r2
 801ccb4:	682a      	ldr	r2, [r5, #0]
 801ccb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ccba:	4414      	add	r4, r2
 801ccbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ccbe:	f8d2 9000 	ldr.w	r9, [r2]
 801ccc2:	2900      	cmp	r1, #0
 801ccc4:	dc03      	bgt.n	801ccce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ccc6:	9a01      	ldr	r2, [sp, #4]
 801ccc8:	2a00      	cmp	r2, #0
 801ccca:	f340 80a8 	ble.w	801ce1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ccce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ccd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccd6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	dd0c      	ble.n	801ccf8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ccde:	1405      	asrs	r5, r0, #16
 801cce0:	d405      	bmi.n	801ccee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cce2:	4565      	cmp	r5, ip
 801cce4:	da03      	bge.n	801ccee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cce6:	1415      	asrs	r5, r2, #16
 801cce8:	d401      	bmi.n	801ccee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801ccea:	4575      	cmp	r5, lr
 801ccec:	db05      	blt.n	801ccfa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ccee:	4438      	add	r0, r7
 801ccf0:	4432      	add	r2, r6
 801ccf2:	3b01      	subs	r3, #1
 801ccf4:	3403      	adds	r4, #3
 801ccf6:	e7f0      	b.n	801ccda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801ccf8:	d03a      	beq.n	801cd70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801ccfa:	1e5d      	subs	r5, r3, #1
 801ccfc:	fb07 0805 	mla	r8, r7, r5, r0
 801cd00:	ea5f 4828 	movs.w	r8, r8, asr #16
 801cd04:	d429      	bmi.n	801cd5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd06:	45e0      	cmp	r8, ip
 801cd08:	da27      	bge.n	801cd5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd0a:	fb06 2505 	mla	r5, r6, r5, r2
 801cd0e:	142d      	asrs	r5, r5, #16
 801cd10:	d423      	bmi.n	801cd5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd12:	4575      	cmp	r5, lr
 801cd14:	da21      	bge.n	801cd5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd16:	f104 0803 	add.w	r8, r4, #3
 801cd1a:	469a      	mov	sl, r3
 801cd1c:	f1ba 0f00 	cmp.w	sl, #0
 801cd20:	f108 0803 	add.w	r8, r8, #3
 801cd24:	dd1f      	ble.n	801cd66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cd26:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd2e:	1415      	asrs	r5, r2, #16
 801cd30:	4438      	add	r0, r7
 801cd32:	4432      	add	r2, r6
 801cd34:	fb0c b505 	mla	r5, ip, r5, fp
 801cd38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd3c:	eb09 0b05 	add.w	fp, r9, r5
 801cd40:	f819 5005 	ldrb.w	r5, [r9, r5]
 801cd44:	f808 5c06 	strb.w	r5, [r8, #-6]
 801cd48:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801cd4c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801cd50:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801cd54:	f808 5c04 	strb.w	r5, [r8, #-4]
 801cd58:	e7e0      	b.n	801cd1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cd5a:	2500      	movs	r5, #0
 801cd5c:	eba3 0805 	sub.w	r8, r3, r5
 801cd60:	f1b8 0f00 	cmp.w	r8, #0
 801cd64:	dc38      	bgt.n	801cdd8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801cd66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd6e:	441c      	add	r4, r3
 801cd70:	2900      	cmp	r1, #0
 801cd72:	dd54      	ble.n	801ce1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cd74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd7e:	3901      	subs	r1, #1
 801cd80:	eeb0 6a62 	vmov.f32	s12, s5
 801cd84:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cd88:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd90:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cd94:	eeb0 6a43 	vmov.f32	s12, s6
 801cd98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd9c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cda0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cda4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cda8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdb8:	ee12 2a90 	vmov	r2, s5
 801cdbc:	eef0 2a47 	vmov.f32	s5, s14
 801cdc0:	fb92 f7f3 	sdiv	r7, r2, r3
 801cdc4:	ee13 2a10 	vmov	r2, s6
 801cdc8:	eeb0 3a67 	vmov.f32	s6, s15
 801cdcc:	fb92 f6f3 	sdiv	r6, r2, r3
 801cdd0:	9a01      	ldr	r2, [sp, #4]
 801cdd2:	bf08      	it	eq
 801cdd4:	4613      	moveq	r3, r2
 801cdd6:	e774      	b.n	801ccc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cdd8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cddc:	d41b      	bmi.n	801ce16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cdde:	45e2      	cmp	sl, ip
 801cde0:	da19      	bge.n	801ce16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cde2:	ea5f 4822 	movs.w	r8, r2, asr #16
 801cde6:	d416      	bmi.n	801ce16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cde8:	45f0      	cmp	r8, lr
 801cdea:	da14      	bge.n	801ce16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cdec:	fb0c a808 	mla	r8, ip, r8, sl
 801cdf0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cdf4:	f819 b008 	ldrb.w	fp, [r9, r8]
 801cdf8:	eb09 0a08 	add.w	sl, r9, r8
 801cdfc:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801ce00:	f804 b008 	strb.w	fp, [r4, r8]
 801ce04:	44a0      	add	r8, r4
 801ce06:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ce0a:	f888 b001 	strb.w	fp, [r8, #1]
 801ce0e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ce12:	f888 a002 	strb.w	sl, [r8, #2]
 801ce16:	4438      	add	r0, r7
 801ce18:	4432      	add	r2, r6
 801ce1a:	3501      	adds	r5, #1
 801ce1c:	e79e      	b.n	801cd5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801ce1e:	b003      	add	sp, #12
 801ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce28:	b085      	sub	sp, #20
 801ce2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce30:	9202      	str	r2, [sp, #8]
 801ce32:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ce36:	6860      	ldr	r0, [r4, #4]
 801ce38:	9203      	str	r2, [sp, #12]
 801ce3a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ce3e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ce42:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce46:	fb00 2505 	mla	r5, r0, r5, r2
 801ce4a:	6822      	ldr	r2, [r4, #0]
 801ce4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce50:	4415      	add	r5, r2
 801ce52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce54:	6812      	ldr	r2, [r2, #0]
 801ce56:	9201      	str	r2, [sp, #4]
 801ce58:	2900      	cmp	r1, #0
 801ce5a:	dc03      	bgt.n	801ce64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ce5c:	9a02      	ldr	r2, [sp, #8]
 801ce5e:	2a00      	cmp	r2, #0
 801ce60:	f340 811c 	ble.w	801d09c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ce64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce66:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ce6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce6c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	dd0e      	ble.n	801ce92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ce74:	1422      	asrs	r2, r4, #16
 801ce76:	d405      	bmi.n	801ce84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ce78:	4572      	cmp	r2, lr
 801ce7a:	da03      	bge.n	801ce84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ce7c:	1402      	asrs	r2, r0, #16
 801ce7e:	d401      	bmi.n	801ce84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ce80:	4542      	cmp	r2, r8
 801ce82:	db07      	blt.n	801ce94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ce84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce86:	3b01      	subs	r3, #1
 801ce88:	3503      	adds	r5, #3
 801ce8a:	4414      	add	r4, r2
 801ce8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce8e:	4410      	add	r0, r2
 801ce90:	e7ee      	b.n	801ce70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ce92:	d072      	beq.n	801cf7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801ce94:	1e5a      	subs	r2, r3, #1
 801ce96:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ce98:	fb06 4602 	mla	r6, r6, r2, r4
 801ce9c:	1436      	asrs	r6, r6, #16
 801ce9e:	d461      	bmi.n	801cf64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cea0:	4576      	cmp	r6, lr
 801cea2:	da5f      	bge.n	801cf64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cea4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cea6:	fb06 0202 	mla	r2, r6, r2, r0
 801ceaa:	1412      	asrs	r2, r2, #16
 801ceac:	d45a      	bmi.n	801cf64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ceae:	4542      	cmp	r2, r8
 801ceb0:	da58      	bge.n	801cf64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ceb2:	1cef      	adds	r7, r5, #3
 801ceb4:	4699      	mov	r9, r3
 801ceb6:	f1b9 0f00 	cmp.w	r9, #0
 801ceba:	dd59      	ble.n	801cf70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cebc:	1426      	asrs	r6, r4, #16
 801cebe:	1402      	asrs	r2, r0, #16
 801cec0:	fb0e 6202 	mla	r2, lr, r2, r6
 801cec4:	9e01      	ldr	r6, [sp, #4]
 801cec6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ceca:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cece:	d041      	beq.n	801cf54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801ced0:	9a03      	ldr	r2, [sp, #12]
 801ced2:	fa5f fb86 	uxtb.w	fp, r6
 801ced6:	fb02 fc0c 	mul.w	ip, r2, ip
 801ceda:	f10c 0201 	add.w	r2, ip, #1
 801cede:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cee2:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cee6:	1212      	asrs	r2, r2, #8
 801cee8:	fa1f fa82 	uxth.w	sl, r2
 801ceec:	43d2      	mvns	r2, r2
 801ceee:	fb1b fb0a 	smulbb	fp, fp, sl
 801cef2:	b2d2      	uxtb	r2, r2
 801cef4:	fb0c bc02 	mla	ip, ip, r2, fp
 801cef8:	fa1f fc8c 	uxth.w	ip, ip
 801cefc:	f10c 0b01 	add.w	fp, ip, #1
 801cf00:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf04:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cf08:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cf0c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf10:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf14:	fb16 fa0a 	smulbb	sl, r6, sl
 801cf18:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cf1c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cf20:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cf24:	fb06 aa02 	mla	sl, r6, r2, sl
 801cf28:	fb0c bc02 	mla	ip, ip, r2, fp
 801cf2c:	fa1f fa8a 	uxth.w	sl, sl
 801cf30:	fa1f fc8c 	uxth.w	ip, ip
 801cf34:	f10a 0601 	add.w	r6, sl, #1
 801cf38:	f10c 0b01 	add.w	fp, ip, #1
 801cf3c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cf40:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf44:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf4c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cf50:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cf54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cf56:	3703      	adds	r7, #3
 801cf58:	f109 39ff 	add.w	r9, r9, #4294967295
 801cf5c:	4414      	add	r4, r2
 801cf5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf60:	4410      	add	r0, r2
 801cf62:	e7a8      	b.n	801ceb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cf64:	f04f 0c00 	mov.w	ip, #0
 801cf68:	eba3 020c 	sub.w	r2, r3, ip
 801cf6c:	2a00      	cmp	r2, #0
 801cf6e:	dc3d      	bgt.n	801cfec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cf70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf78:	441d      	add	r5, r3
 801cf7a:	2900      	cmp	r1, #0
 801cf7c:	f340 808e 	ble.w	801d09c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cf80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf8a:	3901      	subs	r1, #1
 801cf8c:	eeb0 6a62 	vmov.f32	s12, s5
 801cf90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf9c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cfa0:	eeb0 6a43 	vmov.f32	s12, s6
 801cfa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfa8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cfac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cfc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cfc4:	ee12 2a90 	vmov	r2, s5
 801cfc8:	eef0 2a47 	vmov.f32	s5, s14
 801cfcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfd0:	ee13 2a10 	vmov	r2, s6
 801cfd4:	9311      	str	r3, [sp, #68]	; 0x44
 801cfd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfd8:	eeb0 3a67 	vmov.f32	s6, s15
 801cfdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfe0:	9a02      	ldr	r2, [sp, #8]
 801cfe2:	9312      	str	r3, [sp, #72]	; 0x48
 801cfe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfe6:	bf08      	it	eq
 801cfe8:	4613      	moveq	r3, r2
 801cfea:	e735      	b.n	801ce58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801cfec:	1426      	asrs	r6, r4, #16
 801cfee:	d44e      	bmi.n	801d08e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cff0:	4576      	cmp	r6, lr
 801cff2:	da4c      	bge.n	801d08e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cff4:	1402      	asrs	r2, r0, #16
 801cff6:	d44a      	bmi.n	801d08e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cff8:	4542      	cmp	r2, r8
 801cffa:	da48      	bge.n	801d08e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cffc:	fb0e 6202 	mla	r2, lr, r2, r6
 801d000:	9e01      	ldr	r6, [sp, #4]
 801d002:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d006:	0e3a      	lsrs	r2, r7, #24
 801d008:	d041      	beq.n	801d08e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d00a:	9e03      	ldr	r6, [sp, #12]
 801d00c:	fa5f fb87 	uxtb.w	fp, r7
 801d010:	4372      	muls	r2, r6
 801d012:	1c56      	adds	r6, r2, #1
 801d014:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d018:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801d01c:	1212      	asrs	r2, r2, #8
 801d01e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d022:	fa1f fa82 	uxth.w	sl, r2
 801d026:	43d2      	mvns	r2, r2
 801d028:	fb1b fb0a 	smulbb	fp, fp, sl
 801d02c:	b2d2      	uxtb	r2, r2
 801d02e:	fb09 b902 	mla	r9, r9, r2, fp
 801d032:	fa1f f989 	uxth.w	r9, r9
 801d036:	f109 0b01 	add.w	fp, r9, #1
 801d03a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d03e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d042:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d046:	fb1b fb0a 	smulbb	fp, fp, sl
 801d04a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d04e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d052:	f805 9006 	strb.w	r9, [r5, r6]
 801d056:	442e      	add	r6, r5
 801d058:	78b7      	ldrb	r7, [r6, #2]
 801d05a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d05e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d062:	fb09 b902 	mla	r9, r9, r2, fp
 801d066:	fa1f fa8a 	uxth.w	sl, sl
 801d06a:	fa1f f989 	uxth.w	r9, r9
 801d06e:	f10a 0701 	add.w	r7, sl, #1
 801d072:	f109 0b01 	add.w	fp, r9, #1
 801d076:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d07a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d07e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d082:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d086:	f886 a002 	strb.w	sl, [r6, #2]
 801d08a:	f886 9001 	strb.w	r9, [r6, #1]
 801d08e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d090:	f10c 0c01 	add.w	ip, ip, #1
 801d094:	4414      	add	r4, r2
 801d096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d098:	4410      	add	r0, r2
 801d09a:	e765      	b.n	801cf68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801d09c:	b005      	add	sp, #20
 801d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a6:	b085      	sub	sp, #20
 801d0a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d0ae:	9203      	str	r2, [sp, #12]
 801d0b0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d0b4:	6860      	ldr	r0, [r4, #4]
 801d0b6:	9201      	str	r2, [sp, #4]
 801d0b8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d0bc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d0c0:	fb00 2505 	mla	r5, r0, r5, r2
 801d0c4:	6822      	ldr	r2, [r4, #0]
 801d0c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0ca:	4415      	add	r5, r2
 801d0cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d0ce:	6812      	ldr	r2, [r2, #0]
 801d0d0:	9202      	str	r2, [sp, #8]
 801d0d2:	2900      	cmp	r1, #0
 801d0d4:	dc03      	bgt.n	801d0de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d0d6:	9a03      	ldr	r2, [sp, #12]
 801d0d8:	2a00      	cmp	r2, #0
 801d0da:	f340 8122 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0e0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d0e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	dd0f      	ble.n	801d10e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d0ee:	1422      	asrs	r2, r4, #16
 801d0f0:	d406      	bmi.n	801d100 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d0f2:	4572      	cmp	r2, lr
 801d0f4:	da04      	bge.n	801d100 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d0f6:	1402      	asrs	r2, r0, #16
 801d0f8:	d402      	bmi.n	801d100 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d0fa:	9e01      	ldr	r6, [sp, #4]
 801d0fc:	42b2      	cmp	r2, r6
 801d0fe:	db07      	blt.n	801d110 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d100:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d102:	3b01      	subs	r3, #1
 801d104:	3503      	adds	r5, #3
 801d106:	4414      	add	r4, r2
 801d108:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d10a:	4410      	add	r0, r2
 801d10c:	e7ed      	b.n	801d0ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801d10e:	d06e      	beq.n	801d1ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801d110:	1e5a      	subs	r2, r3, #1
 801d112:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d114:	fb06 4602 	mla	r6, r6, r2, r4
 801d118:	1436      	asrs	r6, r6, #16
 801d11a:	d45d      	bmi.n	801d1d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d11c:	4576      	cmp	r6, lr
 801d11e:	da5b      	bge.n	801d1d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d120:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d122:	fb06 0202 	mla	r2, r6, r2, r0
 801d126:	1412      	asrs	r2, r2, #16
 801d128:	d456      	bmi.n	801d1d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d12a:	9e01      	ldr	r6, [sp, #4]
 801d12c:	42b2      	cmp	r2, r6
 801d12e:	da53      	bge.n	801d1d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d130:	1cee      	adds	r6, r5, #3
 801d132:	469a      	mov	sl, r3
 801d134:	f1ba 0f00 	cmp.w	sl, #0
 801d138:	dd54      	ble.n	801d1e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d13a:	1427      	asrs	r7, r4, #16
 801d13c:	1402      	asrs	r2, r0, #16
 801d13e:	fb0e 7202 	mla	r2, lr, r2, r7
 801d142:	9f02      	ldr	r7, [sp, #8]
 801d144:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d148:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801d14c:	d03c      	beq.n	801d1c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d14e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d152:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d156:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d15a:	fa5f f28c 	uxtb.w	r2, ip
 801d15e:	b2ff      	uxtb	r7, r7
 801d160:	f000 80d8 	beq.w	801d314 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d164:	fa1f f882 	uxth.w	r8, r2
 801d168:	43d2      	mvns	r2, r2
 801d16a:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d16e:	fb17 f708 	smulbb	r7, r7, r8
 801d172:	b2d2      	uxtb	r2, r2
 801d174:	fb19 f908 	smulbb	r9, r9, r8
 801d178:	fb0c 7702 	mla	r7, ip, r2, r7
 801d17c:	fb1b f808 	smulbb	r8, fp, r8
 801d180:	b2bf      	uxth	r7, r7
 801d182:	f107 0c01 	add.w	ip, r7, #1
 801d186:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d18a:	123f      	asrs	r7, r7, #8
 801d18c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d190:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d194:	fb07 9902 	mla	r9, r7, r2, r9
 801d198:	fa1f f989 	uxth.w	r9, r9
 801d19c:	f109 0701 	add.w	r7, r9, #1
 801d1a0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1a4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1a8:	fb07 8802 	mla	r8, r7, r2, r8
 801d1ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1b0:	fa1f f888 	uxth.w	r8, r8
 801d1b4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d1b8:	f108 0201 	add.w	r2, r8, #1
 801d1bc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d1c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d1c4:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d1c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1ca:	3603      	adds	r6, #3
 801d1cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1d0:	4414      	add	r4, r2
 801d1d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1d4:	4410      	add	r0, r2
 801d1d6:	e7ad      	b.n	801d134 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d1d8:	f04f 0c00 	mov.w	ip, #0
 801d1dc:	eba3 020c 	sub.w	r2, r3, ip
 801d1e0:	2a00      	cmp	r2, #0
 801d1e2:	dc3d      	bgt.n	801d260 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801d1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1ec:	441d      	add	r5, r3
 801d1ee:	2900      	cmp	r1, #0
 801d1f0:	f340 8097 	ble.w	801d322 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d1f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1fe:	3901      	subs	r1, #1
 801d200:	eeb0 6a62 	vmov.f32	s12, s5
 801d204:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d208:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d20c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d210:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d214:	eeb0 6a43 	vmov.f32	s12, s6
 801d218:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d21c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d220:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d224:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d228:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d22c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d230:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d234:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d238:	ee12 2a90 	vmov	r2, s5
 801d23c:	eef0 2a47 	vmov.f32	s5, s14
 801d240:	fb92 f3f3 	sdiv	r3, r2, r3
 801d244:	ee13 2a10 	vmov	r2, s6
 801d248:	9311      	str	r3, [sp, #68]	; 0x44
 801d24a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d24c:	eeb0 3a67 	vmov.f32	s6, s15
 801d250:	fb92 f3f3 	sdiv	r3, r2, r3
 801d254:	9a03      	ldr	r2, [sp, #12]
 801d256:	9312      	str	r3, [sp, #72]	; 0x48
 801d258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d25a:	bf08      	it	eq
 801d25c:	4613      	moveq	r3, r2
 801d25e:	e738      	b.n	801d0d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d260:	1426      	asrs	r6, r4, #16
 801d262:	d448      	bmi.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d264:	4576      	cmp	r6, lr
 801d266:	da46      	bge.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d268:	1402      	asrs	r2, r0, #16
 801d26a:	d444      	bmi.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d26c:	9f01      	ldr	r7, [sp, #4]
 801d26e:	42ba      	cmp	r2, r7
 801d270:	da41      	bge.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d272:	fb0e 6202 	mla	r2, lr, r2, r6
 801d276:	9e02      	ldr	r6, [sp, #8]
 801d278:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d27c:	0e3a      	lsrs	r2, r7, #24
 801d27e:	d03a      	beq.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d280:	2aff      	cmp	r2, #255	; 0xff
 801d282:	b2d6      	uxtb	r6, r2
 801d284:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d288:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d28c:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801d290:	b2ff      	uxtb	r7, r7
 801d292:	d037      	beq.n	801d304 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d294:	fa1f f986 	uxth.w	r9, r6
 801d298:	4462      	add	r2, ip
 801d29a:	43f6      	mvns	r6, r6
 801d29c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d2a0:	fb17 f709 	smulbb	r7, r7, r9
 801d2a4:	fb1a fa09 	smulbb	sl, sl, r9
 801d2a8:	b2f6      	uxtb	r6, r6
 801d2aa:	fb1b f909 	smulbb	r9, fp, r9
 801d2ae:	fb08 7706 	mla	r7, r8, r6, r7
 801d2b2:	b2bf      	uxth	r7, r7
 801d2b4:	f107 0801 	add.w	r8, r7, #1
 801d2b8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d2bc:	123f      	asrs	r7, r7, #8
 801d2be:	54af      	strb	r7, [r5, r2]
 801d2c0:	442a      	add	r2, r5
 801d2c2:	7857      	ldrb	r7, [r2, #1]
 801d2c4:	fb07 aa06 	mla	sl, r7, r6, sl
 801d2c8:	fa1f fa8a 	uxth.w	sl, sl
 801d2cc:	f10a 0701 	add.w	r7, sl, #1
 801d2d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2d4:	7897      	ldrb	r7, [r2, #2]
 801d2d6:	fb07 9906 	mla	r9, r7, r6, r9
 801d2da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d2de:	fa1f f989 	uxth.w	r9, r9
 801d2e2:	f882 a001 	strb.w	sl, [r2, #1]
 801d2e6:	f109 0601 	add.w	r6, r9, #1
 801d2ea:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d2ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d2f2:	f882 9002 	strb.w	r9, [r2, #2]
 801d2f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d2f8:	f10c 0c01 	add.w	ip, ip, #1
 801d2fc:	4414      	add	r4, r2
 801d2fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d300:	4410      	add	r0, r2
 801d302:	e76b      	b.n	801d1dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801d304:	4462      	add	r2, ip
 801d306:	54af      	strb	r7, [r5, r2]
 801d308:	442a      	add	r2, r5
 801d30a:	f882 a001 	strb.w	sl, [r2, #1]
 801d30e:	f882 b002 	strb.w	fp, [r2, #2]
 801d312:	e7f0      	b.n	801d2f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d314:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d318:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d31c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d320:	e752      	b.n	801d1c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d322:	b005      	add	sp, #20
 801d324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d328 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d32c:	b087      	sub	sp, #28
 801d32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d332:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d334:	9204      	str	r2, [sp, #16]
 801d336:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d33a:	6860      	ldr	r0, [r4, #4]
 801d33c:	9205      	str	r2, [sp, #20]
 801d33e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d342:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d346:	9101      	str	r1, [sp, #4]
 801d348:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d34c:	fb00 2505 	mla	r5, r0, r5, r2
 801d350:	6822      	ldr	r2, [r4, #0]
 801d352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d356:	4415      	add	r5, r2
 801d358:	f10e 0201 	add.w	r2, lr, #1
 801d35c:	f022 0201 	bic.w	r2, r2, #1
 801d360:	9202      	str	r2, [sp, #8]
 801d362:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d364:	6812      	ldr	r2, [r2, #0]
 801d366:	9203      	str	r2, [sp, #12]
 801d368:	9a01      	ldr	r2, [sp, #4]
 801d36a:	2a00      	cmp	r2, #0
 801d36c:	dc03      	bgt.n	801d376 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d36e:	9a04      	ldr	r2, [sp, #16]
 801d370:	2a00      	cmp	r2, #0
 801d372:	f340 8132 	ble.w	801d5da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d376:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d378:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d37e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d382:	2b00      	cmp	r3, #0
 801d384:	dd0e      	ble.n	801d3a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d386:	1422      	asrs	r2, r4, #16
 801d388:	d405      	bmi.n	801d396 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d38a:	4596      	cmp	lr, r2
 801d38c:	dd03      	ble.n	801d396 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d38e:	1402      	asrs	r2, r0, #16
 801d390:	d401      	bmi.n	801d396 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d392:	4542      	cmp	r2, r8
 801d394:	db07      	blt.n	801d3a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d398:	3b01      	subs	r3, #1
 801d39a:	3503      	adds	r5, #3
 801d39c:	4414      	add	r4, r2
 801d39e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3a0:	4410      	add	r0, r2
 801d3a2:	e7ee      	b.n	801d382 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d3a4:	d010      	beq.n	801d3c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d3a6:	1e5a      	subs	r2, r3, #1
 801d3a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d3aa:	fb06 4602 	mla	r6, r6, r2, r4
 801d3ae:	1436      	asrs	r6, r6, #16
 801d3b0:	d546      	bpl.n	801d440 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d3b2:	4699      	mov	r9, r3
 801d3b4:	462e      	mov	r6, r5
 801d3b6:	f1b9 0f00 	cmp.w	r9, #0
 801d3ba:	f300 80ac 	bgt.w	801d516 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d3be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3c6:	441d      	add	r5, r3
 801d3c8:	9b01      	ldr	r3, [sp, #4]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f340 8105 	ble.w	801d5da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d3d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3da:	eeb0 6a62 	vmov.f32	s12, s5
 801d3de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3ea:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d3ee:	eeb0 6a43 	vmov.f32	s12, s6
 801d3f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3f6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d3fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d402:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d40a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d40e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d412:	ee12 2a90 	vmov	r2, s5
 801d416:	eef0 2a47 	vmov.f32	s5, s14
 801d41a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d41e:	ee13 2a10 	vmov	r2, s6
 801d422:	9313      	str	r3, [sp, #76]	; 0x4c
 801d424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d426:	eeb0 3a67 	vmov.f32	s6, s15
 801d42a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d42e:	9314      	str	r3, [sp, #80]	; 0x50
 801d430:	9b01      	ldr	r3, [sp, #4]
 801d432:	9a04      	ldr	r2, [sp, #16]
 801d434:	3b01      	subs	r3, #1
 801d436:	9301      	str	r3, [sp, #4]
 801d438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d43a:	bf08      	it	eq
 801d43c:	4613      	moveq	r3, r2
 801d43e:	e793      	b.n	801d368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d440:	45b6      	cmp	lr, r6
 801d442:	ddb6      	ble.n	801d3b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d444:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d446:	fb06 0202 	mla	r2, r6, r2, r0
 801d44a:	1412      	asrs	r2, r2, #16
 801d44c:	d4b1      	bmi.n	801d3b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d44e:	4542      	cmp	r2, r8
 801d450:	daaf      	bge.n	801d3b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d452:	1cee      	adds	r6, r5, #3
 801d454:	4699      	mov	r9, r3
 801d456:	f1b9 0f00 	cmp.w	r9, #0
 801d45a:	ddb0      	ble.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d45c:	1422      	asrs	r2, r4, #16
 801d45e:	9902      	ldr	r1, [sp, #8]
 801d460:	1407      	asrs	r7, r0, #16
 801d462:	fb01 2707 	mla	r7, r1, r7, r2
 801d466:	9903      	ldr	r1, [sp, #12]
 801d468:	087a      	lsrs	r2, r7, #1
 801d46a:	5c8a      	ldrb	r2, [r1, r2]
 801d46c:	07f9      	lsls	r1, r7, #31
 801d46e:	bf54      	ite	pl
 801d470:	f002 020f 	andpl.w	r2, r2, #15
 801d474:	1112      	asrmi	r2, r2, #4
 801d476:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d47a:	b2d2      	uxtb	r2, r2
 801d47c:	2a00      	cmp	r2, #0
 801d47e:	d042      	beq.n	801d506 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d480:	4957      	ldr	r1, [pc, #348]	; (801d5e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d482:	680f      	ldr	r7, [r1, #0]
 801d484:	9905      	ldr	r1, [sp, #20]
 801d486:	fa5f fb87 	uxtb.w	fp, r7
 801d48a:	434a      	muls	r2, r1
 801d48c:	f102 0c01 	add.w	ip, r2, #1
 801d490:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d494:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d498:	1212      	asrs	r2, r2, #8
 801d49a:	fa1f fa82 	uxth.w	sl, r2
 801d49e:	43d2      	mvns	r2, r2
 801d4a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4a4:	b2d2      	uxtb	r2, r2
 801d4a6:	fb0c bc02 	mla	ip, ip, r2, fp
 801d4aa:	fa1f fc8c 	uxth.w	ip, ip
 801d4ae:	f10c 0b01 	add.w	fp, ip, #1
 801d4b2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d4b6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d4ba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d4be:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4c6:	fb17 fa0a 	smulbb	sl, r7, sl
 801d4ca:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d4ce:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d4d2:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d4d6:	fb07 aa02 	mla	sl, r7, r2, sl
 801d4da:	fb0c bc02 	mla	ip, ip, r2, fp
 801d4de:	fa1f fa8a 	uxth.w	sl, sl
 801d4e2:	fa1f fc8c 	uxth.w	ip, ip
 801d4e6:	f10a 0701 	add.w	r7, sl, #1
 801d4ea:	f10c 0b01 	add.w	fp, ip, #1
 801d4ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d4f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4fa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4fe:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d502:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d508:	3603      	adds	r6, #3
 801d50a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d50e:	4414      	add	r4, r2
 801d510:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d512:	4410      	add	r0, r2
 801d514:	e79f      	b.n	801d456 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d516:	1422      	asrs	r2, r4, #16
 801d518:	d457      	bmi.n	801d5ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d51a:	4596      	cmp	lr, r2
 801d51c:	dd55      	ble.n	801d5ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d51e:	1407      	asrs	r7, r0, #16
 801d520:	d453      	bmi.n	801d5ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d522:	4547      	cmp	r7, r8
 801d524:	da51      	bge.n	801d5ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d526:	9902      	ldr	r1, [sp, #8]
 801d528:	fb07 2701 	mla	r7, r7, r1, r2
 801d52c:	9903      	ldr	r1, [sp, #12]
 801d52e:	087a      	lsrs	r2, r7, #1
 801d530:	07ff      	lsls	r7, r7, #31
 801d532:	5c8a      	ldrb	r2, [r1, r2]
 801d534:	bf54      	ite	pl
 801d536:	f002 020f 	andpl.w	r2, r2, #15
 801d53a:	1112      	asrmi	r2, r2, #4
 801d53c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d540:	b2d2      	uxtb	r2, r2
 801d542:	2a00      	cmp	r2, #0
 801d544:	d041      	beq.n	801d5ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d546:	4926      	ldr	r1, [pc, #152]	; (801d5e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d548:	680f      	ldr	r7, [r1, #0]
 801d54a:	9905      	ldr	r1, [sp, #20]
 801d54c:	fa5f fb87 	uxtb.w	fp, r7
 801d550:	434a      	muls	r2, r1
 801d552:	f102 0c01 	add.w	ip, r2, #1
 801d556:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d55a:	f896 c000 	ldrb.w	ip, [r6]
 801d55e:	1212      	asrs	r2, r2, #8
 801d560:	fa1f fa82 	uxth.w	sl, r2
 801d564:	43d2      	mvns	r2, r2
 801d566:	fb1b fb0a 	smulbb	fp, fp, sl
 801d56a:	b2d2      	uxtb	r2, r2
 801d56c:	fb0c bc02 	mla	ip, ip, r2, fp
 801d570:	fa1f fc8c 	uxth.w	ip, ip
 801d574:	f10c 0b01 	add.w	fp, ip, #1
 801d578:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d57c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d580:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d584:	fb1b fb0a 	smulbb	fp, fp, sl
 801d588:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d58c:	fb17 fa0a 	smulbb	sl, r7, sl
 801d590:	78b7      	ldrb	r7, [r6, #2]
 801d592:	f886 c000 	strb.w	ip, [r6]
 801d596:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d59a:	fb07 aa02 	mla	sl, r7, r2, sl
 801d59e:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5a2:	fa1f fa8a 	uxth.w	sl, sl
 801d5a6:	fa1f fc8c 	uxth.w	ip, ip
 801d5aa:	f10a 0701 	add.w	r7, sl, #1
 801d5ae:	f10c 0b01 	add.w	fp, ip, #1
 801d5b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d5be:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5c2:	f886 a002 	strb.w	sl, [r6, #2]
 801d5c6:	f886 c001 	strb.w	ip, [r6, #1]
 801d5ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5cc:	3603      	adds	r6, #3
 801d5ce:	f109 39ff 	add.w	r9, r9, #4294967295
 801d5d2:	4414      	add	r4, r2
 801d5d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5d6:	4410      	add	r0, r2
 801d5d8:	e6ed      	b.n	801d3b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d5da:	b007      	add	sp, #28
 801d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5e0:	2000bbbc 	.word	0x2000bbbc

0801d5e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e8:	b087      	sub	sp, #28
 801d5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d5f0:	9205      	str	r2, [sp, #20]
 801d5f2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d5f6:	6860      	ldr	r0, [r4, #4]
 801d5f8:	9202      	str	r2, [sp, #8]
 801d5fa:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d5fe:	9101      	str	r1, [sp, #4]
 801d600:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d604:	fb00 2606 	mla	r6, r0, r6, r2
 801d608:	6822      	ldr	r2, [r4, #0]
 801d60a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d60e:	4416      	add	r6, r2
 801d610:	f108 0201 	add.w	r2, r8, #1
 801d614:	f022 0201 	bic.w	r2, r2, #1
 801d618:	9203      	str	r2, [sp, #12]
 801d61a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d61c:	6812      	ldr	r2, [r2, #0]
 801d61e:	9204      	str	r2, [sp, #16]
 801d620:	9a01      	ldr	r2, [sp, #4]
 801d622:	2a00      	cmp	r2, #0
 801d624:	dc03      	bgt.n	801d62e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d626:	9a05      	ldr	r2, [sp, #20]
 801d628:	2a00      	cmp	r2, #0
 801d62a:	f340 813a 	ble.w	801d8a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d630:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d636:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	dd0f      	ble.n	801d65e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d63e:	142a      	asrs	r2, r5, #16
 801d640:	d406      	bmi.n	801d650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d642:	4590      	cmp	r8, r2
 801d644:	dd04      	ble.n	801d650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d646:	1422      	asrs	r2, r4, #16
 801d648:	d402      	bmi.n	801d650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d64a:	9802      	ldr	r0, [sp, #8]
 801d64c:	4282      	cmp	r2, r0
 801d64e:	db07      	blt.n	801d660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d652:	3b01      	subs	r3, #1
 801d654:	3603      	adds	r6, #3
 801d656:	4415      	add	r5, r2
 801d658:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d65a:	4414      	add	r4, r2
 801d65c:	e7ed      	b.n	801d63a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d65e:	d073      	beq.n	801d748 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d660:	1e5a      	subs	r2, r3, #1
 801d662:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d664:	fb00 5002 	mla	r0, r0, r2, r5
 801d668:	1400      	asrs	r0, r0, #16
 801d66a:	d464      	bmi.n	801d736 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d66c:	4580      	cmp	r8, r0
 801d66e:	dd62      	ble.n	801d736 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d670:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d672:	fb00 4202 	mla	r2, r0, r2, r4
 801d676:	1412      	asrs	r2, r2, #16
 801d678:	d45d      	bmi.n	801d736 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d67a:	9802      	ldr	r0, [sp, #8]
 801d67c:	4282      	cmp	r2, r0
 801d67e:	da5a      	bge.n	801d736 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d680:	1cf0      	adds	r0, r6, #3
 801d682:	469a      	mov	sl, r3
 801d684:	f1ba 0f00 	cmp.w	sl, #0
 801d688:	dd59      	ble.n	801d73e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d68a:	142a      	asrs	r2, r5, #16
 801d68c:	9903      	ldr	r1, [sp, #12]
 801d68e:	1427      	asrs	r7, r4, #16
 801d690:	fb01 2707 	mla	r7, r1, r7, r2
 801d694:	9904      	ldr	r1, [sp, #16]
 801d696:	087a      	lsrs	r2, r7, #1
 801d698:	5c8a      	ldrb	r2, [r1, r2]
 801d69a:	07f9      	lsls	r1, r7, #31
 801d69c:	bf54      	ite	pl
 801d69e:	f002 020f 	andpl.w	r2, r2, #15
 801d6a2:	1112      	asrmi	r2, r2, #4
 801d6a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6a8:	b2d2      	uxtb	r2, r2
 801d6aa:	2a00      	cmp	r2, #0
 801d6ac:	d03b      	beq.n	801d726 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d6ae:	497e      	ldr	r1, [pc, #504]	; (801d8a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d6b0:	2aff      	cmp	r2, #255	; 0xff
 801d6b2:	680f      	ldr	r7, [r1, #0]
 801d6b4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d6b8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d6bc:	b2ff      	uxtb	r7, r7
 801d6be:	f000 80e9 	beq.w	801d894 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6c2:	fa1f fe82 	uxth.w	lr, r2
 801d6c6:	43d2      	mvns	r2, r2
 801d6c8:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d6cc:	fb17 f70e 	smulbb	r7, r7, lr
 801d6d0:	b2d2      	uxtb	r2, r2
 801d6d2:	fb19 f90e 	smulbb	r9, r9, lr
 801d6d6:	fb0c 7702 	mla	r7, ip, r2, r7
 801d6da:	fb1b fe0e 	smulbb	lr, fp, lr
 801d6de:	b2bf      	uxth	r7, r7
 801d6e0:	f107 0c01 	add.w	ip, r7, #1
 801d6e4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d6e8:	123f      	asrs	r7, r7, #8
 801d6ea:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d6ee:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d6f2:	fb07 9902 	mla	r9, r7, r2, r9
 801d6f6:	fa1f f989 	uxth.w	r9, r9
 801d6fa:	f109 0701 	add.w	r7, r9, #1
 801d6fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d702:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d706:	fb07 ee02 	mla	lr, r7, r2, lr
 801d70a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d70e:	fa1f fe8e 	uxth.w	lr, lr
 801d712:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d716:	f10e 0201 	add.w	r2, lr, #1
 801d71a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d71e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d722:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d726:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d728:	3003      	adds	r0, #3
 801d72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d72e:	4415      	add	r5, r2
 801d730:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d732:	4414      	add	r4, r2
 801d734:	e7a6      	b.n	801d684 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d736:	2700      	movs	r7, #0
 801d738:	1bda      	subs	r2, r3, r7
 801d73a:	2a00      	cmp	r2, #0
 801d73c:	dc40      	bgt.n	801d7c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d73e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d746:	441e      	add	r6, r3
 801d748:	9b01      	ldr	r3, [sp, #4]
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	f340 80a9 	ble.w	801d8a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d750:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d756:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d75a:	eeb0 6a62 	vmov.f32	s12, s5
 801d75e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d762:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d766:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d76a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d76e:	eeb0 6a43 	vmov.f32	s12, s6
 801d772:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d776:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d77a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d77e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d782:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d786:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d78a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d78e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d792:	ee12 2a90 	vmov	r2, s5
 801d796:	eef0 2a47 	vmov.f32	s5, s14
 801d79a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d79e:	ee13 2a10 	vmov	r2, s6
 801d7a2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7a6:	eeb0 3a67 	vmov.f32	s6, s15
 801d7aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7ae:	9314      	str	r3, [sp, #80]	; 0x50
 801d7b0:	9b01      	ldr	r3, [sp, #4]
 801d7b2:	9a05      	ldr	r2, [sp, #20]
 801d7b4:	3b01      	subs	r3, #1
 801d7b6:	9301      	str	r3, [sp, #4]
 801d7b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7ba:	bf08      	it	eq
 801d7bc:	4613      	moveq	r3, r2
 801d7be:	e72f      	b.n	801d620 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d7c0:	142a      	asrs	r2, r5, #16
 801d7c2:	d458      	bmi.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7c4:	4590      	cmp	r8, r2
 801d7c6:	dd56      	ble.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7c8:	1420      	asrs	r0, r4, #16
 801d7ca:	d454      	bmi.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7cc:	9902      	ldr	r1, [sp, #8]
 801d7ce:	4288      	cmp	r0, r1
 801d7d0:	da51      	bge.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7d2:	9903      	ldr	r1, [sp, #12]
 801d7d4:	fb00 2001 	mla	r0, r0, r1, r2
 801d7d8:	9904      	ldr	r1, [sp, #16]
 801d7da:	0842      	lsrs	r2, r0, #1
 801d7dc:	07c0      	lsls	r0, r0, #31
 801d7de:	5c8a      	ldrb	r2, [r1, r2]
 801d7e0:	bf54      	ite	pl
 801d7e2:	f002 020f 	andpl.w	r2, r2, #15
 801d7e6:	1112      	asrmi	r2, r2, #4
 801d7e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d7ec:	b2d2      	uxtb	r2, r2
 801d7ee:	2a00      	cmp	r2, #0
 801d7f0:	d041      	beq.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d7f2:	492d      	ldr	r1, [pc, #180]	; (801d8a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d7f4:	2aff      	cmp	r2, #255	; 0xff
 801d7f6:	6808      	ldr	r0, [r1, #0]
 801d7f8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d7fc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d800:	fa5f fc80 	uxtb.w	ip, r0
 801d804:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d808:	d03b      	beq.n	801d882 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d80a:	fa1f f982 	uxth.w	r9, r2
 801d80e:	4438      	add	r0, r7
 801d810:	43d2      	mvns	r2, r2
 801d812:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d816:	fb1c fc09 	smulbb	ip, ip, r9
 801d81a:	fb1a fa09 	smulbb	sl, sl, r9
 801d81e:	b2d2      	uxtb	r2, r2
 801d820:	fb1b f909 	smulbb	r9, fp, r9
 801d824:	fb0e cc02 	mla	ip, lr, r2, ip
 801d828:	fa1f fc8c 	uxth.w	ip, ip
 801d82c:	f10c 0e01 	add.w	lr, ip, #1
 801d830:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d834:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d838:	f806 c000 	strb.w	ip, [r6, r0]
 801d83c:	4430      	add	r0, r6
 801d83e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d842:	fb0c aa02 	mla	sl, ip, r2, sl
 801d846:	fa1f fa8a 	uxth.w	sl, sl
 801d84a:	f10a 0c01 	add.w	ip, sl, #1
 801d84e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d852:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d856:	fb0c 9902 	mla	r9, ip, r2, r9
 801d85a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d85e:	fa1f f989 	uxth.w	r9, r9
 801d862:	f880 a001 	strb.w	sl, [r0, #1]
 801d866:	f109 0201 	add.w	r2, r9, #1
 801d86a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d86e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d872:	f880 9002 	strb.w	r9, [r0, #2]
 801d876:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d878:	3701      	adds	r7, #1
 801d87a:	4415      	add	r5, r2
 801d87c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d87e:	4414      	add	r4, r2
 801d880:	e75a      	b.n	801d738 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d882:	4438      	add	r0, r7
 801d884:	f806 c000 	strb.w	ip, [r6, r0]
 801d888:	4430      	add	r0, r6
 801d88a:	f880 a001 	strb.w	sl, [r0, #1]
 801d88e:	f880 b002 	strb.w	fp, [r0, #2]
 801d892:	e7f0      	b.n	801d876 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d894:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d898:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d89c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d8a0:	e741      	b.n	801d726 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d8a2:	b007      	add	sp, #28
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8a8:	2000bbbc 	.word	0x2000bbbc

0801d8ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d8ac:	4770      	bx	lr

0801d8ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d8ae:	4770      	bx	lr

0801d8b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d8b0:	4770      	bx	lr

0801d8b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d8b2:	4770      	bx	lr

0801d8b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d8b4:	4770      	bx	lr

0801d8b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d8b6:	4770      	bx	lr

0801d8b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d8b8:	4770      	bx	lr

0801d8ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d8ba:	4770      	bx	lr

0801d8bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d8bc:	4770      	bx	lr

0801d8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d8be:	4770      	bx	lr

0801d8c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d8c0:	4770      	bx	lr

0801d8c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d8c2:	4770      	bx	lr

0801d8c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d8c4:	4770      	bx	lr

0801d8c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d8c6:	4770      	bx	lr

0801d8c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d8c8:	4770      	bx	lr

0801d8ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d8ca:	4770      	bx	lr

0801d8cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d8cc:	4770      	bx	lr

0801d8ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d8ce:	4770      	bx	lr

0801d8d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d8d0:	4770      	bx	lr

0801d8d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d8d2:	4770      	bx	lr

0801d8d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d8d4:	2bff      	cmp	r3, #255	; 0xff
 801d8d6:	b508      	push	{r3, lr}
 801d8d8:	d04f      	beq.n	801d97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d8da:	2a2c      	cmp	r2, #44	; 0x2c
 801d8dc:	d032      	beq.n	801d944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d8de:	d80f      	bhi.n	801d900 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d8e0:	2a08      	cmp	r2, #8
 801d8e2:	d046      	beq.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d8e4:	d805      	bhi.n	801d8f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d8e6:	2a04      	cmp	r2, #4
 801d8e8:	d041      	beq.n	801d96e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d8ea:	2a05      	cmp	r2, #5
 801d8ec:	d03d      	beq.n	801d96a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d8ee:	2000      	movs	r0, #0
 801d8f0:	e027      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d8f2:	2a0a      	cmp	r2, #10
 801d8f4:	d03d      	beq.n	801d972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d8f6:	d301      	bcc.n	801d8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d8f8:	2a0b      	cmp	r2, #11
 801d8fa:	d1f8      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d8fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d8fe:	e020      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d900:	2a30      	cmp	r2, #48	; 0x30
 801d902:	d038      	beq.n	801d976 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d904:	d808      	bhi.n	801d918 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d906:	2a2e      	cmp	r2, #46	; 0x2e
 801d908:	684b      	ldr	r3, [r1, #4]
 801d90a:	d029      	beq.n	801d960 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d90c:	d90b      	bls.n	801d926 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d90e:	781b      	ldrb	r3, [r3, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d1ec      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d914:	6a00      	ldr	r0, [r0, #32]
 801d916:	e014      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d918:	2a32      	cmp	r2, #50	; 0x32
 801d91a:	d02c      	beq.n	801d976 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d91c:	d301      	bcc.n	801d922 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d91e:	2a33      	cmp	r2, #51	; 0x33
 801d920:	d1e5      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d922:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d924:	e00d      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d926:	781b      	ldrb	r3, [r3, #0]
 801d928:	2b01      	cmp	r3, #1
 801d92a:	d009      	beq.n	801d940 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d92c:	d3f2      	bcc.n	801d914 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d92e:	2b02      	cmp	r3, #2
 801d930:	d1dd      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d932:	4b39      	ldr	r3, [pc, #228]	; (801da18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d934:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801d938:	4a38      	ldr	r2, [pc, #224]	; (801da1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d93a:	4839      	ldr	r0, [pc, #228]	; (801da20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d93c:	f007 ff3e 	bl	80257bc <__assert_func>
 801d940:	6900      	ldr	r0, [r0, #16]
 801d942:	bd08      	pop	{r3, pc}
 801d944:	684b      	ldr	r3, [r1, #4]
 801d946:	781b      	ldrb	r3, [r3, #0]
 801d948:	2b01      	cmp	r3, #1
 801d94a:	d007      	beq.n	801d95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d94c:	d30b      	bcc.n	801d966 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d94e:	2b02      	cmp	r3, #2
 801d950:	d1cd      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d952:	4b31      	ldr	r3, [pc, #196]	; (801da18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d954:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801d958:	4a30      	ldr	r2, [pc, #192]	; (801da1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d95a:	e7ee      	b.n	801d93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d95c:	6880      	ldr	r0, [r0, #8]
 801d95e:	e7f0      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d960:	781b      	ldrb	r3, [r3, #0]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d1c3      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d966:	6980      	ldr	r0, [r0, #24]
 801d968:	e7eb      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d96a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d96c:	e7e9      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d96e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d970:	e7e7      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d972:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d974:	e7e5      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d976:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d978:	e7e3      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d97a:	2a2c      	cmp	r2, #44	; 0x2c
 801d97c:	d030      	beq.n	801d9e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d97e:	d80f      	bhi.n	801d9a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d980:	2a08      	cmp	r2, #8
 801d982:	d044      	beq.n	801da0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d984:	d805      	bhi.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d986:	2a04      	cmp	r2, #4
 801d988:	d03f      	beq.n	801da0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d98a:	2a05      	cmp	r2, #5
 801d98c:	d1af      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d98e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d990:	e7d7      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d992:	2a0a      	cmp	r2, #10
 801d994:	d03b      	beq.n	801da0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d996:	d301      	bcc.n	801d99c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d998:	2a0b      	cmp	r2, #11
 801d99a:	d1a8      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d99c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d99e:	e7d0      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9a0:	2a30      	cmp	r2, #48	; 0x30
 801d9a2:	d036      	beq.n	801da12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9a4:	d808      	bhi.n	801d9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d9a6:	2a2e      	cmp	r2, #46	; 0x2e
 801d9a8:	684b      	ldr	r3, [r1, #4]
 801d9aa:	d028      	beq.n	801d9fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d9ac:	d90b      	bls.n	801d9c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d9ae:	781b      	ldrb	r3, [r3, #0]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d19c      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d9b6:	e7c4      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9b8:	2a32      	cmp	r2, #50	; 0x32
 801d9ba:	d02a      	beq.n	801da12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9bc:	d301      	bcc.n	801d9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d9be:	2a33      	cmp	r2, #51	; 0x33
 801d9c0:	d195      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d9c4:	e7bd      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c6:	781b      	ldrb	r3, [r3, #0]
 801d9c8:	2b01      	cmp	r3, #1
 801d9ca:	d007      	beq.n	801d9dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d9cc:	d3f2      	bcc.n	801d9b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d9ce:	2b02      	cmp	r3, #2
 801d9d0:	d18d      	bne.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9d2:	4b11      	ldr	r3, [pc, #68]	; (801da18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d9d4:	f240 31e1 	movw	r1, #993	; 0x3e1
 801d9d8:	4a10      	ldr	r2, [pc, #64]	; (801da1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d9da:	e7ae      	b.n	801d93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d9dc:	6940      	ldr	r0, [r0, #20]
 801d9de:	e7b0      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9e0:	684b      	ldr	r3, [r1, #4]
 801d9e2:	781b      	ldrb	r3, [r3, #0]
 801d9e4:	2b01      	cmp	r3, #1
 801d9e6:	d008      	beq.n	801d9fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d9e8:	d30d      	bcc.n	801da06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d9ea:	2b02      	cmp	r3, #2
 801d9ec:	f47f af7f 	bne.w	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9f0:	4b09      	ldr	r3, [pc, #36]	; (801da18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d9f2:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801d9f6:	4a09      	ldr	r2, [pc, #36]	; (801da1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d9f8:	e79f      	b.n	801d93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d9fa:	68c0      	ldr	r0, [r0, #12]
 801d9fc:	e7a1      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9fe:	781b      	ldrb	r3, [r3, #0]
 801da00:	2b00      	cmp	r3, #0
 801da02:	f47f af74 	bne.w	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da06:	69c0      	ldr	r0, [r0, #28]
 801da08:	e79b      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801da0c:	e799      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da0e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da10:	e797      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da12:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801da14:	e795      	b.n	801d942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da16:	bf00      	nop
 801da18:	0802ad19 	.word	0x0802ad19
 801da1c:	0802b4cf 	.word	0x0802b4cf
 801da20:	0802ad65 	.word	0x0802ad65

0801da24 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801da24:	b508      	push	{r3, lr}
 801da26:	4b06      	ldr	r3, [pc, #24]	; (801da40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801da28:	8818      	ldrh	r0, [r3, #0]
 801da2a:	b928      	cbnz	r0, 801da38 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801da2c:	4b05      	ldr	r3, [pc, #20]	; (801da44 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801da2e:	21d7      	movs	r1, #215	; 0xd7
 801da30:	4a05      	ldr	r2, [pc, #20]	; (801da48 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801da32:	4806      	ldr	r0, [pc, #24]	; (801da4c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801da34:	f007 fec2 	bl	80257bc <__assert_func>
 801da38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da3c:	b280      	uxth	r0, r0
 801da3e:	bd08      	pop	{r3, pc}
 801da40:	2000bb8e 	.word	0x2000bb8e
 801da44:	0802afb4 	.word	0x0802afb4
 801da48:	0802b494 	.word	0x0802b494
 801da4c:	0802aff6 	.word	0x0802aff6

0801da50 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da54:	4616      	mov	r6, r2
 801da56:	b087      	sub	sp, #28
 801da58:	461f      	mov	r7, r3
 801da5a:	b33b      	cbz	r3, 801daac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da5c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801da60:	b323      	cbz	r3, 801daac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da62:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801da66:	b30b      	cbz	r3, 801daac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da68:	6808      	ldr	r0, [r1, #0]
 801da6a:	ab04      	add	r3, sp, #16
 801da6c:	6849      	ldr	r1, [r1, #4]
 801da6e:	4c5a      	ldr	r4, [pc, #360]	; (801dbd8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801da70:	c303      	stmia	r3!, {r0, r1}
 801da72:	a804      	add	r0, sp, #16
 801da74:	f7fb faa2 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da78:	6820      	ldr	r0, [r4, #0]
 801da7a:	6803      	ldr	r3, [r0, #0]
 801da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da7e:	4798      	blx	r3
 801da80:	2fff      	cmp	r7, #255	; 0xff
 801da82:	4623      	mov	r3, r4
 801da84:	d015      	beq.n	801dab2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801da86:	f010 0f08 	tst.w	r0, #8
 801da8a:	d015      	beq.n	801dab8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801da8c:	6818      	ldr	r0, [r3, #0]
 801da8e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801da92:	6801      	ldr	r1, [r0, #0]
 801da94:	9401      	str	r4, [sp, #4]
 801da96:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801da9a:	9702      	str	r7, [sp, #8]
 801da9c:	9400      	str	r4, [sp, #0]
 801da9e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801daa2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801daa4:	4631      	mov	r1, r6
 801daa6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801daaa:	47a0      	blx	r4
 801daac:	b007      	add	sp, #28
 801daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dab2:	f010 0f02 	tst.w	r0, #2
 801dab6:	e7e8      	b.n	801da8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801dab8:	6818      	ldr	r0, [r3, #0]
 801daba:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801dabe:	6803      	ldr	r3, [r0, #0]
 801dac0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801dac4:	6a1b      	ldr	r3, [r3, #32]
 801dac6:	4798      	blx	r3
 801dac8:	4944      	ldr	r1, [pc, #272]	; (801dbdc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801daca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dace:	2fff      	cmp	r7, #255	; 0xff
 801dad0:	f8b1 c000 	ldrh.w	ip, [r1]
 801dad4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801dad8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dadc:	4688      	mov	r8, r1
 801dade:	fb0c 2303 	mla	r3, ip, r3, r2
 801dae2:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801dae6:	b2f2      	uxtb	r2, r6
 801dae8:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801daec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daf0:	4418      	add	r0, r3
 801daf2:	d112      	bne.n	801db1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801daf4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801daf8:	2100      	movs	r1, #0
 801dafa:	42a9      	cmp	r1, r5
 801dafc:	da66      	bge.n	801dbcc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801dafe:	4603      	mov	r3, r0
 801db00:	2700      	movs	r7, #0
 801db02:	42a7      	cmp	r7, r4
 801db04:	f103 0303 	add.w	r3, r3, #3
 801db08:	da57      	bge.n	801dbba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801db0a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801db0e:	3701      	adds	r7, #1
 801db10:	f803 ec02 	strb.w	lr, [r3, #-2]
 801db14:	f803 cc01 	strb.w	ip, [r3, #-1]
 801db18:	e7f3      	b.n	801db02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801db1a:	b2bb      	uxth	r3, r7
 801db1c:	f04f 0800 	mov.w	r8, #0
 801db20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db24:	fb0c fc03 	mul.w	ip, ip, r3
 801db28:	fb0e fe03 	mul.w	lr, lr, r3
 801db2c:	435a      	muls	r2, r3
 801db2e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801db32:	460f      	mov	r7, r1
 801db34:	b29b      	uxth	r3, r3
 801db36:	45a8      	cmp	r8, r5
 801db38:	da48      	bge.n	801dbcc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801db3a:	4601      	mov	r1, r0
 801db3c:	f04f 0a00 	mov.w	sl, #0
 801db40:	45a2      	cmp	sl, r4
 801db42:	f101 0103 	add.w	r1, r1, #3
 801db46:	da2f      	bge.n	801dba8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801db48:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801db4c:	f10a 0a01 	add.w	sl, sl, #1
 801db50:	fb19 f903 	smulbb	r9, r9, r3
 801db54:	4491      	add	r9, r2
 801db56:	fa1f f989 	uxth.w	r9, r9
 801db5a:	f109 0b01 	add.w	fp, r9, #1
 801db5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db66:	f801 9c03 	strb.w	r9, [r1, #-3]
 801db6a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801db6e:	fb19 f903 	smulbb	r9, r9, r3
 801db72:	44f1      	add	r9, lr
 801db74:	fa1f f989 	uxth.w	r9, r9
 801db78:	f109 0b01 	add.w	fp, r9, #1
 801db7c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db80:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db84:	f801 9c02 	strb.w	r9, [r1, #-2]
 801db88:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801db8c:	fb19 f903 	smulbb	r9, r9, r3
 801db90:	44e1      	add	r9, ip
 801db92:	fa1f f989 	uxth.w	r9, r9
 801db96:	f109 0b01 	add.w	fp, r9, #1
 801db9a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dba2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801dba6:	e7cb      	b.n	801db40 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801dba8:	8839      	ldrh	r1, [r7, #0]
 801dbaa:	f108 0801 	add.w	r8, r8, #1
 801dbae:	1b09      	subs	r1, r1, r4
 801dbb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dbb4:	4431      	add	r1, r6
 801dbb6:	4408      	add	r0, r1
 801dbb8:	e7bd      	b.n	801db36 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801dbba:	f8b8 3000 	ldrh.w	r3, [r8]
 801dbbe:	3101      	adds	r1, #1
 801dbc0:	1b1b      	subs	r3, r3, r4
 801dbc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbc6:	4433      	add	r3, r6
 801dbc8:	4418      	add	r0, r3
 801dbca:	e796      	b.n	801dafa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801dbcc:	4b02      	ldr	r3, [pc, #8]	; (801dbd8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801dbce:	6818      	ldr	r0, [r3, #0]
 801dbd0:	6803      	ldr	r3, [r0, #0]
 801dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbd4:	4798      	blx	r3
 801dbd6:	e769      	b.n	801daac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dbd8:	2000bb94 	.word	0x2000bb94
 801dbdc:	2000bb8e 	.word	0x2000bb8e

0801dbe0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe4:	b08d      	sub	sp, #52	; 0x34
 801dbe6:	460c      	mov	r4, r1
 801dbe8:	4617      	mov	r7, r2
 801dbea:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801dbee:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801dbf2:	2e00      	cmp	r6, #0
 801dbf4:	d04a      	beq.n	801dc8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dbf6:	6810      	ldr	r0, [r2, #0]
 801dbf8:	ad08      	add	r5, sp, #32
 801dbfa:	6851      	ldr	r1, [r2, #4]
 801dbfc:	c503      	stmia	r5!, {r0, r1}
 801dbfe:	6818      	ldr	r0, [r3, #0]
 801dc00:	ad0a      	add	r5, sp, #40	; 0x28
 801dc02:	6859      	ldr	r1, [r3, #4]
 801dc04:	c503      	stmia	r5!, {r0, r1}
 801dc06:	a808      	add	r0, sp, #32
 801dc08:	f7fb f9d8 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc0c:	4639      	mov	r1, r7
 801dc0e:	a80a      	add	r0, sp, #40	; 0x28
 801dc10:	4f59      	ldr	r7, [pc, #356]	; (801dd78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801dc12:	f7fb f9bb 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc16:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc1a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dc1e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dc22:	6838      	ldr	r0, [r7, #0]
 801dc24:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc28:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801dc2c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801dc30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc34:	440c      	add	r4, r1
 801dc36:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dc3a:	440a      	add	r2, r1
 801dc3c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dc40:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dc44:	4413      	add	r3, r2
 801dc46:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dc4a:	6803      	ldr	r3, [r0, #0]
 801dc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc4e:	4798      	blx	r3
 801dc50:	2eff      	cmp	r6, #255	; 0xff
 801dc52:	f000 8089 	beq.w	801dd68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801dc56:	0743      	lsls	r3, r0, #29
 801dc58:	d405      	bmi.n	801dc66 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801dc5a:	f1b9 0f00 	cmp.w	r9, #0
 801dc5e:	d018      	beq.n	801dc92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dc60:	f010 0f10 	tst.w	r0, #16
 801dc64:	d015      	beq.n	801dc92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dc66:	6838      	ldr	r0, [r7, #0]
 801dc68:	b2ad      	uxth	r5, r5
 801dc6a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dc6e:	6801      	ldr	r1, [r0, #0]
 801dc70:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801dc74:	9500      	str	r5, [sp, #0]
 801dc76:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801dc7a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801dc7e:	9602      	str	r6, [sp, #8]
 801dc80:	fa1f f688 	uxth.w	r6, r8
 801dc84:	9601      	str	r6, [sp, #4]
 801dc86:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801dc88:	4621      	mov	r1, r4
 801dc8a:	47a8      	blx	r5
 801dc8c:	b00d      	add	sp, #52	; 0x34
 801dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc92:	6838      	ldr	r0, [r7, #0]
 801dc94:	6803      	ldr	r3, [r0, #0]
 801dc96:	6a1b      	ldr	r3, [r3, #32]
 801dc98:	4798      	blx	r3
 801dc9a:	4a38      	ldr	r2, [pc, #224]	; (801dd7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801dc9c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801dca0:	2eff      	cmp	r6, #255	; 0xff
 801dca2:	8813      	ldrh	r3, [r2, #0]
 801dca4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801dca8:	fb0c 1303 	mla	r3, ip, r3, r1
 801dcac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801dcb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcb4:	4418      	add	r0, r3
 801dcb6:	d032      	beq.n	801dd1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801dcb8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801dcbc:	f04f 0c00 	mov.w	ip, #0
 801dcc0:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801dcc4:	9306      	str	r3, [sp, #24]
 801dcc6:	45c4      	cmp	ip, r8
 801dcc8:	da49      	bge.n	801dd5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dcca:	4686      	mov	lr, r0
 801dccc:	46a1      	mov	r9, r4
 801dcce:	eba9 0304 	sub.w	r3, r9, r4
 801dcd2:	428b      	cmp	r3, r1
 801dcd4:	da13      	bge.n	801dcfe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801dcd6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801dcda:	f89e b000 	ldrb.w	fp, [lr]
 801dcde:	9307      	str	r3, [sp, #28]
 801dce0:	9b06      	ldr	r3, [sp, #24]
 801dce2:	fb1b fb03 	smulbb	fp, fp, r3
 801dce6:	9b07      	ldr	r3, [sp, #28]
 801dce8:	fb03 b306 	mla	r3, r3, r6, fp
 801dcec:	b29b      	uxth	r3, r3
 801dcee:	f103 0b01 	add.w	fp, r3, #1
 801dcf2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801dcf6:	121b      	asrs	r3, r3, #8
 801dcf8:	f80e 3b01 	strb.w	r3, [lr], #1
 801dcfc:	e7e7      	b.n	801dcce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801dcfe:	8813      	ldrh	r3, [r2, #0]
 801dd00:	f10c 0c01 	add.w	ip, ip, #1
 801dd04:	1b5b      	subs	r3, r3, r5
 801dd06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd0a:	4453      	add	r3, sl
 801dd0c:	4418      	add	r0, r3
 801dd0e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd12:	1b5b      	subs	r3, r3, r5
 801dd14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd18:	4453      	add	r3, sl
 801dd1a:	441c      	add	r4, r3
 801dd1c:	e7d3      	b.n	801dcc6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801dd1e:	2600      	movs	r6, #0
 801dd20:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801dd24:	4546      	cmp	r6, r8
 801dd26:	da1a      	bge.n	801dd5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dd28:	f100 3eff 	add.w	lr, r0, #4294967295
 801dd2c:	4623      	mov	r3, r4
 801dd2e:	eba3 0904 	sub.w	r9, r3, r4
 801dd32:	4589      	cmp	r9, r1
 801dd34:	da04      	bge.n	801dd40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801dd36:	f813 9b01 	ldrb.w	r9, [r3], #1
 801dd3a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801dd3e:	e7f6      	b.n	801dd2e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801dd40:	8813      	ldrh	r3, [r2, #0]
 801dd42:	3601      	adds	r6, #1
 801dd44:	1b5b      	subs	r3, r3, r5
 801dd46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd4a:	4463      	add	r3, ip
 801dd4c:	4418      	add	r0, r3
 801dd4e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd52:	1b5b      	subs	r3, r3, r5
 801dd54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd58:	4463      	add	r3, ip
 801dd5a:	441c      	add	r4, r3
 801dd5c:	e7e2      	b.n	801dd24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801dd5e:	6838      	ldr	r0, [r7, #0]
 801dd60:	6803      	ldr	r3, [r0, #0]
 801dd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd64:	4798      	blx	r3
 801dd66:	e791      	b.n	801dc8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dd68:	f1b9 0f00 	cmp.w	r9, #0
 801dd6c:	f47f af78 	bne.w	801dc60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801dd70:	f010 0f01 	tst.w	r0, #1
 801dd74:	e776      	b.n	801dc64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801dd76:	bf00      	nop
 801dd78:	2000bb94 	.word	0x2000bb94
 801dd7c:	2000bb8e 	.word	0x2000bb8e

0801dd80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dd80:	b510      	push	{r4, lr}
 801dd82:	4604      	mov	r4, r0
 801dd84:	2104      	movs	r1, #4
 801dd86:	f007 fcee 	bl	8025766 <_ZdlPvj>
 801dd8a:	4620      	mov	r0, r4
 801dd8c:	bd10      	pop	{r4, pc}

0801dd8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dd8e:	b510      	push	{r4, lr}
 801dd90:	4604      	mov	r4, r0
 801dd92:	2104      	movs	r1, #4
 801dd94:	f007 fce7 	bl	8025766 <_ZdlPvj>
 801dd98:	4620      	mov	r0, r4
 801dd9a:	bd10      	pop	{r4, pc}

0801dd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dd9c:	b510      	push	{r4, lr}
 801dd9e:	4604      	mov	r4, r0
 801dda0:	2104      	movs	r1, #4
 801dda2:	f007 fce0 	bl	8025766 <_ZdlPvj>
 801dda6:	4620      	mov	r0, r4
 801dda8:	bd10      	pop	{r4, pc}

0801ddaa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ddaa:	b510      	push	{r4, lr}
 801ddac:	4604      	mov	r4, r0
 801ddae:	2104      	movs	r1, #4
 801ddb0:	f007 fcd9 	bl	8025766 <_ZdlPvj>
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	bd10      	pop	{r4, pc}

0801ddb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ddb8:	b510      	push	{r4, lr}
 801ddba:	4604      	mov	r4, r0
 801ddbc:	2104      	movs	r1, #4
 801ddbe:	f007 fcd2 	bl	8025766 <_ZdlPvj>
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	bd10      	pop	{r4, pc}

0801ddc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ddc6:	b510      	push	{r4, lr}
 801ddc8:	4604      	mov	r4, r0
 801ddca:	2104      	movs	r1, #4
 801ddcc:	f007 fccb 	bl	8025766 <_ZdlPvj>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	bd10      	pop	{r4, pc}

0801ddd4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ddd4:	b510      	push	{r4, lr}
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	2104      	movs	r1, #4
 801ddda:	f007 fcc4 	bl	8025766 <_ZdlPvj>
 801ddde:	4620      	mov	r0, r4
 801dde0:	bd10      	pop	{r4, pc}

0801dde2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dde2:	b510      	push	{r4, lr}
 801dde4:	4604      	mov	r4, r0
 801dde6:	2104      	movs	r1, #4
 801dde8:	f007 fcbd 	bl	8025766 <_ZdlPvj>
 801ddec:	4620      	mov	r0, r4
 801ddee:	bd10      	pop	{r4, pc}

0801ddf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ddf0:	b510      	push	{r4, lr}
 801ddf2:	4604      	mov	r4, r0
 801ddf4:	2104      	movs	r1, #4
 801ddf6:	f007 fcb6 	bl	8025766 <_ZdlPvj>
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	bd10      	pop	{r4, pc}

0801ddfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ddfe:	b510      	push	{r4, lr}
 801de00:	4604      	mov	r4, r0
 801de02:	2104      	movs	r1, #4
 801de04:	f007 fcaf 	bl	8025766 <_ZdlPvj>
 801de08:	4620      	mov	r0, r4
 801de0a:	bd10      	pop	{r4, pc}

0801de0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de0c:	b510      	push	{r4, lr}
 801de0e:	4604      	mov	r4, r0
 801de10:	2104      	movs	r1, #4
 801de12:	f007 fca8 	bl	8025766 <_ZdlPvj>
 801de16:	4620      	mov	r0, r4
 801de18:	bd10      	pop	{r4, pc}

0801de1a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de1a:	b510      	push	{r4, lr}
 801de1c:	4604      	mov	r4, r0
 801de1e:	2104      	movs	r1, #4
 801de20:	f007 fca1 	bl	8025766 <_ZdlPvj>
 801de24:	4620      	mov	r0, r4
 801de26:	bd10      	pop	{r4, pc}

0801de28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de28:	b510      	push	{r4, lr}
 801de2a:	4604      	mov	r4, r0
 801de2c:	2104      	movs	r1, #4
 801de2e:	f007 fc9a 	bl	8025766 <_ZdlPvj>
 801de32:	4620      	mov	r0, r4
 801de34:	bd10      	pop	{r4, pc}

0801de36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de36:	b510      	push	{r4, lr}
 801de38:	4604      	mov	r4, r0
 801de3a:	2104      	movs	r1, #4
 801de3c:	f007 fc93 	bl	8025766 <_ZdlPvj>
 801de40:	4620      	mov	r0, r4
 801de42:	bd10      	pop	{r4, pc}

0801de44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de44:	b510      	push	{r4, lr}
 801de46:	4604      	mov	r4, r0
 801de48:	2104      	movs	r1, #4
 801de4a:	f007 fc8c 	bl	8025766 <_ZdlPvj>
 801de4e:	4620      	mov	r0, r4
 801de50:	bd10      	pop	{r4, pc}

0801de52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de52:	b510      	push	{r4, lr}
 801de54:	4604      	mov	r4, r0
 801de56:	2104      	movs	r1, #4
 801de58:	f007 fc85 	bl	8025766 <_ZdlPvj>
 801de5c:	4620      	mov	r0, r4
 801de5e:	bd10      	pop	{r4, pc}

0801de60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801de60:	b510      	push	{r4, lr}
 801de62:	4604      	mov	r4, r0
 801de64:	2104      	movs	r1, #4
 801de66:	f007 fc7e 	bl	8025766 <_ZdlPvj>
 801de6a:	4620      	mov	r0, r4
 801de6c:	bd10      	pop	{r4, pc}

0801de6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801de6e:	b510      	push	{r4, lr}
 801de70:	4604      	mov	r4, r0
 801de72:	2104      	movs	r1, #4
 801de74:	f007 fc77 	bl	8025766 <_ZdlPvj>
 801de78:	4620      	mov	r0, r4
 801de7a:	bd10      	pop	{r4, pc}

0801de7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801de7c:	b510      	push	{r4, lr}
 801de7e:	4604      	mov	r4, r0
 801de80:	2104      	movs	r1, #4
 801de82:	f007 fc70 	bl	8025766 <_ZdlPvj>
 801de86:	4620      	mov	r0, r4
 801de88:	bd10      	pop	{r4, pc}

0801de8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801de8a:	b510      	push	{r4, lr}
 801de8c:	4604      	mov	r4, r0
 801de8e:	2104      	movs	r1, #4
 801de90:	f007 fc69 	bl	8025766 <_ZdlPvj>
 801de94:	4620      	mov	r0, r4
 801de96:	bd10      	pop	{r4, pc}

0801de98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de9c:	4d9e      	ldr	r5, [pc, #632]	; (801e118 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801de9e:	4690      	mov	r8, r2
 801dea0:	b08f      	sub	sp, #60	; 0x3c
 801dea2:	4604      	mov	r4, r0
 801dea4:	682a      	ldr	r2, [r5, #0]
 801dea6:	4689      	mov	r9, r1
 801dea8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801deac:	2a02      	cmp	r2, #2
 801deae:	d106      	bne.n	801debe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801deb0:	4b9a      	ldr	r3, [pc, #616]	; (801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801deb2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801deb6:	4a9a      	ldr	r2, [pc, #616]	; (801e120 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801deb8:	489a      	ldr	r0, [pc, #616]	; (801e124 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801deba:	f007 fc7f 	bl	80257bc <__assert_func>
 801debe:	ae0e      	add	r6, sp, #56	; 0x38
 801dec0:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801dec4:	4630      	mov	r0, r6
 801dec6:	f7fe f8b3 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801deca:	6823      	ldr	r3, [r4, #0]
 801decc:	4607      	mov	r7, r0
 801dece:	4620      	mov	r0, r4
 801ded0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ded2:	4798      	blx	r3
 801ded4:	4287      	cmp	r7, r0
 801ded6:	d004      	beq.n	801dee2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801ded8:	4b93      	ldr	r3, [pc, #588]	; (801e128 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801deda:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801dede:	4a90      	ldr	r2, [pc, #576]	; (801e120 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dee0:	e7ea      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dee2:	4630      	mov	r0, r6
 801dee4:	f7fe f820 	bl	801bf28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dee8:	4607      	mov	r7, r0
 801deea:	b920      	cbnz	r0, 801def6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801deec:	4b8f      	ldr	r3, [pc, #572]	; (801e12c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801deee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801def2:	4a8b      	ldr	r2, [pc, #556]	; (801e120 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801def4:	e7e0      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801def6:	f8d8 0000 	ldr.w	r0, [r8]
 801defa:	ab06      	add	r3, sp, #24
 801defc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801df00:	f9b8 a000 	ldrsh.w	sl, [r8]
 801df04:	c303      	stmia	r3!, {r0, r1}
 801df06:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801df0a:	ab08      	add	r3, sp, #32
 801df0c:	f8d9 0000 	ldr.w	r0, [r9]
 801df10:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801df14:	c303      	stmia	r3!, {r0, r1}
 801df16:	4630      	mov	r0, r6
 801df18:	f7fd fefe 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df1c:	4680      	mov	r8, r0
 801df1e:	4630      	mov	r0, r6
 801df20:	4e83      	ldr	r6, [pc, #524]	; (801e130 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801df22:	f7fd ff33 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df26:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801df2a:	f10d 0920 	add.w	r9, sp, #32
 801df2e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801df32:	a806      	add	r0, sp, #24
 801df34:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801df38:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801df3c:	f7fb f83e 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df40:	4648      	mov	r0, r9
 801df42:	f7fb f83b 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df46:	a80a      	add	r0, sp, #40	; 0x28
 801df48:	f7fb f838 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df4c:	4b79      	ldr	r3, [pc, #484]	; (801e134 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801df4e:	2100      	movs	r1, #0
 801df50:	f9b6 2000 	ldrsh.w	r2, [r6]
 801df54:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df58:	4648      	mov	r0, r9
 801df5a:	910c      	str	r1, [sp, #48]	; 0x30
 801df5c:	a90c      	add	r1, sp, #48	; 0x30
 801df5e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801df62:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801df66:	f7f7 fb93 	bl	8015690 <_ZN8touchgfx4RectaNERKS0_>
 801df6a:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801df6e:	9602      	str	r6, [sp, #8]
 801df70:	f1bc 0f00 	cmp.w	ip, #0
 801df74:	f000 80a4 	beq.w	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801df78:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801df7c:	2e00      	cmp	r6, #0
 801df7e:	f000 809f 	beq.w	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801df82:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801df86:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801df8a:	4288      	cmp	r0, r1
 801df8c:	db36      	blt.n	801dffc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801df8e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801df92:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801df96:	429a      	cmp	r2, r3
 801df98:	db30      	blt.n	801dffc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801df9a:	4460      	add	r0, ip
 801df9c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dfa0:	4461      	add	r1, ip
 801dfa2:	b200      	sxth	r0, r0
 801dfa4:	b209      	sxth	r1, r1
 801dfa6:	4288      	cmp	r0, r1
 801dfa8:	dc28      	bgt.n	801dffc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfaa:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dfae:	4432      	add	r2, r6
 801dfb0:	440b      	add	r3, r1
 801dfb2:	b212      	sxth	r2, r2
 801dfb4:	b21b      	sxth	r3, r3
 801dfb6:	429a      	cmp	r2, r3
 801dfb8:	dc20      	bgt.n	801dffc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfba:	6823      	ldr	r3, [r4, #0]
 801dfbc:	4620      	mov	r0, r4
 801dfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dfc0:	4798      	blx	r3
 801dfc2:	4682      	mov	sl, r0
 801dfc4:	6828      	ldr	r0, [r5, #0]
 801dfc6:	6803      	ldr	r3, [r0, #0]
 801dfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dfca:	4798      	blx	r3
 801dfcc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dfd0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dfd4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dfd8:	9303      	str	r3, [sp, #12]
 801dfda:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dfde:	1a9b      	subs	r3, r3, r2
 801dfe0:	b29b      	uxth	r3, r3
 801dfe2:	b21c      	sxth	r4, r3
 801dfe4:	2c00      	cmp	r4, #0
 801dfe6:	dc0e      	bgt.n	801e006 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dfe8:	b134      	cbz	r4, 801dff8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dfea:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dfee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dff2:	4413      	add	r3, r2
 801dff4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801dff8:	463c      	mov	r4, r7
 801dffa:	e00b      	b.n	801e014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801dffc:	4b4e      	ldr	r3, [pc, #312]	; (801e138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801dffe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e002:	4a47      	ldr	r2, [pc, #284]	; (801e120 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e004:	e758      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e006:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e00a:	ebab 0303 	sub.w	r3, fp, r3
 801e00e:	443c      	add	r4, r7
 801e010:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e014:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e018:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e01c:	1a9b      	subs	r3, r3, r2
 801e01e:	b29b      	uxth	r3, r3
 801e020:	b219      	sxth	r1, r3
 801e022:	2900      	cmp	r1, #0
 801e024:	dd50      	ble.n	801e0c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801e026:	9a03      	ldr	r2, [sp, #12]
 801e028:	fb02 4401 	mla	r4, r2, r1, r4
 801e02c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e030:	1ad3      	subs	r3, r2, r3
 801e032:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e036:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e03a:	f1bc 0f00 	cmp.w	ip, #0
 801e03e:	dd3f      	ble.n	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e040:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e044:	2e00      	cmp	r6, #0
 801e046:	dd3b      	ble.n	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e048:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e04c:	2203      	movs	r2, #3
 801e04e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e052:	fb0a f801 	mul.w	r8, sl, r1
 801e056:	fb13 8802 	smlabb	r8, r3, r2, r8
 801e05a:	9a02      	ldr	r2, [sp, #8]
 801e05c:	4480      	add	r8, r0
 801e05e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e062:	8812      	ldrh	r2, [r2, #0]
 801e064:	4584      	cmp	ip, r0
 801e066:	eba2 0303 	sub.w	r3, r2, r3
 801e06a:	bfa8      	it	ge
 801e06c:	4684      	movge	ip, r0
 801e06e:	459c      	cmp	ip, r3
 801e070:	bfa8      	it	ge
 801e072:	469c      	movge	ip, r3
 801e074:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801e078:	429e      	cmp	r6, r3
 801e07a:	bfa8      	it	ge
 801e07c:	461e      	movge	r6, r3
 801e07e:	4b2d      	ldr	r3, [pc, #180]	; (801e134 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e080:	881b      	ldrh	r3, [r3, #0]
 801e082:	1a59      	subs	r1, r3, r1
 801e084:	4633      	mov	r3, r6
 801e086:	428e      	cmp	r6, r1
 801e088:	bfa8      	it	ge
 801e08a:	460b      	movge	r3, r1
 801e08c:	4562      	cmp	r2, ip
 801e08e:	9302      	str	r3, [sp, #8]
 801e090:	d12d      	bne.n	801e0ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e092:	455a      	cmp	r2, fp
 801e094:	d12b      	bne.n	801e0ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e096:	6828      	ldr	r0, [r5, #0]
 801e098:	6803      	ldr	r3, [r0, #0]
 801e09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e09c:	4798      	blx	r3
 801e09e:	07c3      	lsls	r3, r0, #31
 801e0a0:	d51b      	bpl.n	801e0da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801e0a2:	6828      	ldr	r0, [r5, #0]
 801e0a4:	9b02      	ldr	r3, [sp, #8]
 801e0a6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e0aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e0ae:	6803      	ldr	r3, [r0, #0]
 801e0b0:	f8cd b000 	str.w	fp, [sp]
 801e0b4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801e0b6:	4623      	mov	r3, r4
 801e0b8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e0bc:	47a8      	blx	r5
 801e0be:	4607      	mov	r7, r0
 801e0c0:	4638      	mov	r0, r7
 801e0c2:	b00f      	add	sp, #60	; 0x3c
 801e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0c8:	bf1f      	itttt	ne
 801e0ca:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e0ce:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e0d2:	189b      	addne	r3, r3, r2
 801e0d4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e0d8:	e7ad      	b.n	801e036 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801e0da:	6828      	ldr	r0, [r5, #0]
 801e0dc:	4642      	mov	r2, r8
 801e0de:	4621      	mov	r1, r4
 801e0e0:	6803      	ldr	r3, [r0, #0]
 801e0e2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801e0e4:	9b02      	ldr	r3, [sp, #8]
 801e0e6:	fb03 f30a 	mul.w	r3, r3, sl
 801e0ea:	47a8      	blx	r5
 801e0ec:	e7e8      	b.n	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e0ee:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801e0f2:	f04f 0900 	mov.w	r9, #0
 801e0f6:	9b02      	ldr	r3, [sp, #8]
 801e0f8:	454b      	cmp	r3, r9
 801e0fa:	dde1      	ble.n	801e0c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e0fc:	6828      	ldr	r0, [r5, #0]
 801e0fe:	4642      	mov	r2, r8
 801e100:	4621      	mov	r1, r4
 801e102:	44d0      	add	r8, sl
 801e104:	6803      	ldr	r3, [r0, #0]
 801e106:	f109 0901 	add.w	r9, r9, #1
 801e10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e10c:	461e      	mov	r6, r3
 801e10e:	465b      	mov	r3, fp
 801e110:	47b0      	blx	r6
 801e112:	9b03      	ldr	r3, [sp, #12]
 801e114:	441c      	add	r4, r3
 801e116:	e7ee      	b.n	801e0f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801e118:	2000bb94 	.word	0x2000bb94
 801e11c:	0802ad97 	.word	0x0802ad97
 801e120:	0802b579 	.word	0x0802b579
 801e124:	0802ad65 	.word	0x0802ad65
 801e128:	0802ae4b 	.word	0x0802ae4b
 801e12c:	0802aea0 	.word	0x0802aea0
 801e130:	2000bb8e 	.word	0x2000bb8e
 801e134:	2000bb90 	.word	0x2000bb90
 801e138:	0802aede 	.word	0x0802aede

0801e13c <_ZN8touchgfx8LCD24bppC1Ev>:
 801e13c:	4a0b      	ldr	r2, [pc, #44]	; (801e16c <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801e13e:	6002      	str	r2, [r0, #0]
 801e140:	2200      	movs	r2, #0
 801e142:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e146:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e14a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e14e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e152:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e156:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e15a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e15e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e162:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e166:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e16a:	4770      	bx	lr
 801e16c:	0802b1c4 	.word	0x0802b1c4

0801e170 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e174:	b093      	sub	sp, #76	; 0x4c
 801e176:	880c      	ldrh	r4, [r1, #0]
 801e178:	4605      	mov	r5, r0
 801e17a:	460f      	mov	r7, r1
 801e17c:	4691      	mov	r9, r2
 801e17e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801e182:	b12c      	cbz	r4, 801e190 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e184:	4b71      	ldr	r3, [pc, #452]	; (801e34c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e186:	2167      	movs	r1, #103	; 0x67
 801e188:	4a71      	ldr	r2, [pc, #452]	; (801e350 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e18a:	4872      	ldr	r0, [pc, #456]	; (801e354 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e18c:	f007 fb16 	bl	80257bc <__assert_func>
 801e190:	6810      	ldr	r0, [r2, #0]
 801e192:	ae0e      	add	r6, sp, #56	; 0x38
 801e194:	6851      	ldr	r1, [r2, #4]
 801e196:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e35c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801e19a:	c603      	stmia	r6!, {r0, r1}
 801e19c:	6818      	ldr	r0, [r3, #0]
 801e19e:	ae10      	add	r6, sp, #64	; 0x40
 801e1a0:	6859      	ldr	r1, [r3, #4]
 801e1a2:	c603      	stmia	r6!, {r0, r1}
 801e1a4:	a80e      	add	r0, sp, #56	; 0x38
 801e1a6:	f7fa ff09 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1aa:	4649      	mov	r1, r9
 801e1ac:	a810      	add	r0, sp, #64	; 0x40
 801e1ae:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e358 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801e1b2:	f7fa feeb 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e1b6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e1ba:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e1be:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e1c2:	f8d9 0000 	ldr.w	r0, [r9]
 801e1c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1ca:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801e1ce:	440d      	add	r5, r1
 801e1d0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e1d4:	440a      	add	r2, r1
 801e1d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e1da:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e1de:	4413      	add	r3, r2
 801e1e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e1e4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801e1e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e1ea:	6803      	ldr	r3, [r0, #0]
 801e1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1f0:	4798      	blx	r3
 801e1f2:	2801      	cmp	r0, #1
 801e1f4:	d11e      	bne.n	801e234 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801e1f6:	220b      	movs	r2, #11
 801e1f8:	9008      	str	r0, [sp, #32]
 801e1fa:	b2b6      	uxth	r6, r6
 801e1fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e200:	9207      	str	r2, [sp, #28]
 801e202:	4629      	mov	r1, r5
 801e204:	f8ba 2000 	ldrh.w	r2, [sl]
 801e208:	f8cd 8010 	str.w	r8, [sp, #16]
 801e20c:	9601      	str	r6, [sp, #4]
 801e20e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e212:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e216:	9203      	str	r2, [sp, #12]
 801e218:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e21c:	9202      	str	r2, [sp, #8]
 801e21e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e222:	9200      	str	r2, [sp, #0]
 801e224:	463a      	mov	r2, r7
 801e226:	f8d9 0000 	ldr.w	r0, [r9]
 801e22a:	f7f7 fe7f 	bl	8015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e22e:	b013      	add	sp, #76	; 0x4c
 801e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e234:	f8d9 0000 	ldr.w	r0, [r9]
 801e238:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801e23c:	6803      	ldr	r3, [r0, #0]
 801e23e:	6a1b      	ldr	r3, [r3, #32]
 801e240:	4798      	blx	r3
 801e242:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e246:	f8ba 3000 	ldrh.w	r3, [sl]
 801e24a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e24e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e252:	fb01 2303 	mla	r3, r1, r3, r2
 801e256:	4621      	mov	r1, r4
 801e258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e25c:	4418      	add	r0, r3
 801e25e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801e262:	930c      	str	r3, [sp, #48]	; 0x30
 801e264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e266:	4299      	cmp	r1, r3
 801e268:	da6a      	bge.n	801e340 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e26a:	1cc2      	adds	r2, r0, #3
 801e26c:	46aa      	mov	sl, r5
 801e26e:	ebaa 0305 	sub.w	r3, sl, r5
 801e272:	429e      	cmp	r6, r3
 801e274:	dd55      	ble.n	801e322 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e276:	2404      	movs	r4, #4
 801e278:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801e27c:	fb14 4303 	smlabb	r3, r4, r3, r4
 801e280:	eb07 0e03 	add.w	lr, r7, r3
 801e284:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801e288:	b184      	cbz	r4, 801e2ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e28a:	2cff      	cmp	r4, #255	; 0xff
 801e28c:	f817 b003 	ldrb.w	fp, [r7, r3]
 801e290:	d10e      	bne.n	801e2b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e292:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e296:	d10b      	bne.n	801e2b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e298:	f802 bc03 	strb.w	fp, [r2, #-3]
 801e29c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801e2a0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801e2a4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801e2a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e2ac:	3203      	adds	r2, #3
 801e2ae:	e7de      	b.n	801e26e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e2b0:	fb08 f404 	mul.w	r4, r8, r4
 801e2b4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801e2b8:	1c63      	adds	r3, r4, #1
 801e2ba:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e2be:	121b      	asrs	r3, r3, #8
 801e2c0:	b29c      	uxth	r4, r3
 801e2c2:	43db      	mvns	r3, r3
 801e2c4:	fb1b fb04 	smulbb	fp, fp, r4
 801e2c8:	b2db      	uxtb	r3, r3
 801e2ca:	fb0c bc03 	mla	ip, ip, r3, fp
 801e2ce:	fa1f fc8c 	uxth.w	ip, ip
 801e2d2:	f10c 0b01 	add.w	fp, ip, #1
 801e2d6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e2da:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801e2de:	fb1b fb03 	smulbb	fp, fp, r3
 801e2e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e2e6:	f802 cc03 	strb.w	ip, [r2, #-3]
 801e2ea:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e2ee:	fb0c bc04 	mla	ip, ip, r4, fp
 801e2f2:	fa1f fc8c 	uxth.w	ip, ip
 801e2f6:	f10c 0b01 	add.w	fp, ip, #1
 801e2fa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e2fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e302:	f802 cc02 	strb.w	ip, [r2, #-2]
 801e306:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801e30a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801e30e:	fb1c f303 	smulbb	r3, ip, r3
 801e312:	fb0e 3304 	mla	r3, lr, r4, r3
 801e316:	b29b      	uxth	r3, r3
 801e318:	1c5c      	adds	r4, r3, #1
 801e31a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e31e:	121b      	asrs	r3, r3, #8
 801e320:	e7c2      	b.n	801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e324:	3101      	adds	r1, #1
 801e326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e328:	881b      	ldrh	r3, [r3, #0]
 801e32a:	1b9b      	subs	r3, r3, r6
 801e32c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e330:	4413      	add	r3, r2
 801e332:	4418      	add	r0, r3
 801e334:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e338:	1b9b      	subs	r3, r3, r6
 801e33a:	444b      	add	r3, r9
 801e33c:	441d      	add	r5, r3
 801e33e:	e791      	b.n	801e264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e340:	4b05      	ldr	r3, [pc, #20]	; (801e358 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e342:	6818      	ldr	r0, [r3, #0]
 801e344:	6803      	ldr	r3, [r0, #0]
 801e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e348:	4798      	blx	r3
 801e34a:	e770      	b.n	801e22e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e34c:	0802acc9 	.word	0x0802acc9
 801e350:	0802b39b 	.word	0x0802b39b
 801e354:	0802ad65 	.word	0x0802ad65
 801e358:	2000bb94 	.word	0x2000bb94
 801e35c:	2000bb8e 	.word	0x2000bb8e

0801e360 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e364:	4614      	mov	r4, r2
 801e366:	880a      	ldrh	r2, [r1, #0]
 801e368:	b091      	sub	sp, #68	; 0x44
 801e36a:	4680      	mov	r8, r0
 801e36c:	2a01      	cmp	r2, #1
 801e36e:	460e      	mov	r6, r1
 801e370:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e374:	d005      	beq.n	801e382 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e376:	4b6d      	ldr	r3, [pc, #436]	; (801e52c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e378:	21b5      	movs	r1, #181	; 0xb5
 801e37a:	4a6d      	ldr	r2, [pc, #436]	; (801e530 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e37c:	486d      	ldr	r0, [pc, #436]	; (801e534 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e37e:	f007 fa1d 	bl	80257bc <__assert_func>
 801e382:	6820      	ldr	r0, [r4, #0]
 801e384:	ad0c      	add	r5, sp, #48	; 0x30
 801e386:	6861      	ldr	r1, [r4, #4]
 801e388:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e538 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e38c:	c503      	stmia	r5!, {r0, r1}
 801e38e:	6818      	ldr	r0, [r3, #0]
 801e390:	ad0e      	add	r5, sp, #56	; 0x38
 801e392:	6859      	ldr	r1, [r3, #4]
 801e394:	c503      	stmia	r5!, {r0, r1}
 801e396:	a80c      	add	r0, sp, #48	; 0x30
 801e398:	f7fa fe10 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e39c:	4621      	mov	r1, r4
 801e39e:	a80e      	add	r0, sp, #56	; 0x38
 801e3a0:	f7fa fdf4 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e3a4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e3a8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e3ac:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e3b0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e3b4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e3b8:	eb08 0401 	add.w	r4, r8, r1
 801e3bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e3c0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e53c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e3c4:	440a      	add	r2, r1
 801e3c6:	f8d8 0000 	ldr.w	r0, [r8]
 801e3ca:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e3ce:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e3d2:	4413      	add	r3, r2
 801e3d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e3d8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e3dc:	930a      	str	r3, [sp, #40]	; 0x28
 801e3de:	6803      	ldr	r3, [r0, #0]
 801e3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e3e4:	4798      	blx	r3
 801e3e6:	2801      	cmp	r0, #1
 801e3e8:	d11e      	bne.n	801e428 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e3ea:	220b      	movs	r2, #11
 801e3ec:	9008      	str	r0, [sp, #32]
 801e3ee:	b2ad      	uxth	r5, r5
 801e3f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e3f4:	9207      	str	r2, [sp, #28]
 801e3f6:	4621      	mov	r1, r4
 801e3f8:	f8b9 2000 	ldrh.w	r2, [r9]
 801e3fc:	9501      	str	r5, [sp, #4]
 801e3fe:	9206      	str	r2, [sp, #24]
 801e400:	2200      	movs	r2, #0
 801e402:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e406:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e40a:	9203      	str	r2, [sp, #12]
 801e40c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e410:	9202      	str	r2, [sp, #8]
 801e412:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e416:	9200      	str	r2, [sp, #0]
 801e418:	4632      	mov	r2, r6
 801e41a:	f8d8 0000 	ldr.w	r0, [r8]
 801e41e:	f7f7 fd85 	bl	8015f2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e422:	b011      	add	sp, #68	; 0x44
 801e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e428:	f8d8 0000 	ldr.w	r0, [r8]
 801e42c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e430:	6803      	ldr	r3, [r0, #0]
 801e432:	6a1b      	ldr	r3, [r3, #32]
 801e434:	4798      	blx	r3
 801e436:	f8b9 3000 	ldrh.w	r3, [r9]
 801e43a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e43e:	f04f 0e00 	mov.w	lr, #0
 801e442:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e446:	fa1f f987 	uxth.w	r9, r7
 801e44a:	fb01 2303 	mla	r3, r1, r3, r2
 801e44e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e456:	b289      	uxth	r1, r1
 801e458:	4418      	add	r0, r3
 801e45a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e45e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e462:	459e      	cmp	lr, r3
 801e464:	da5c      	bge.n	801e520 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e466:	1cc3      	adds	r3, r0, #3
 801e468:	46a2      	mov	sl, r4
 801e46a:	ebaa 0204 	sub.w	r2, sl, r4
 801e46e:	4295      	cmp	r5, r2
 801e470:	dd46      	ble.n	801e500 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e472:	f04f 0c03 	mov.w	ip, #3
 801e476:	f04f 0b04 	mov.w	fp, #4
 801e47a:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e47e:	2fff      	cmp	r7, #255	; 0xff
 801e480:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e484:	eb06 0c02 	add.w	ip, r6, r2
 801e488:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e48c:	d02f      	beq.n	801e4ee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e48e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e492:	fb12 f201 	smulbb	r2, r2, r1
 801e496:	fb0b 2209 	mla	r2, fp, r9, r2
 801e49a:	b292      	uxth	r2, r2
 801e49c:	f102 0b01 	add.w	fp, r2, #1
 801e4a0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e4a4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e4a8:	fb1b fb01 	smulbb	fp, fp, r1
 801e4ac:	1212      	asrs	r2, r2, #8
 801e4ae:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e4b2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e4b6:	fb02 b209 	mla	r2, r2, r9, fp
 801e4ba:	b292      	uxth	r2, r2
 801e4bc:	f102 0b01 	add.w	fp, r2, #1
 801e4c0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e4c4:	1212      	asrs	r2, r2, #8
 801e4c6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e4ca:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e4ce:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e4d2:	fb1c fc01 	smulbb	ip, ip, r1
 801e4d6:	fb02 c209 	mla	r2, r2, r9, ip
 801e4da:	b292      	uxth	r2, r2
 801e4dc:	f102 0c01 	add.w	ip, r2, #1
 801e4e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e4e4:	1212      	asrs	r2, r2, #8
 801e4e6:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e4ea:	3303      	adds	r3, #3
 801e4ec:	e7bd      	b.n	801e46a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e4ee:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e4f2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e4f6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e4fa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e4fe:	e7f2      	b.n	801e4e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e500:	4b0d      	ldr	r3, [pc, #52]	; (801e538 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e502:	f10e 0e01 	add.w	lr, lr, #1
 801e506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e508:	881b      	ldrh	r3, [r3, #0]
 801e50a:	1b5b      	subs	r3, r3, r5
 801e50c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e510:	4413      	add	r3, r2
 801e512:	4418      	add	r0, r3
 801e514:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e518:	1b5b      	subs	r3, r3, r5
 801e51a:	4443      	add	r3, r8
 801e51c:	441c      	add	r4, r3
 801e51e:	e79f      	b.n	801e460 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e520:	4b06      	ldr	r3, [pc, #24]	; (801e53c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e522:	6818      	ldr	r0, [r3, #0]
 801e524:	6803      	ldr	r3, [r0, #0]
 801e526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e528:	4798      	blx	r3
 801e52a:	e77a      	b.n	801e422 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e52c:	0802abd5 	.word	0x0802abd5
 801e530:	0802b28e 	.word	0x0802b28e
 801e534:	0802ad65 	.word	0x0802ad65
 801e538:	2000bb8e 	.word	0x2000bb8e
 801e53c:	2000bb94 	.word	0x2000bb94

0801e540 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e540:	b570      	push	{r4, r5, r6, lr}
 801e542:	780d      	ldrb	r5, [r1, #0]
 801e544:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e548:	2d01      	cmp	r5, #1
 801e54a:	d00d      	beq.n	801e568 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e54c:	d307      	bcc.n	801e55e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e54e:	2d02      	cmp	r5, #2
 801e550:	d10f      	bne.n	801e572 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e552:	4b08      	ldr	r3, [pc, #32]	; (801e574 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e554:	215a      	movs	r1, #90	; 0x5a
 801e556:	4a08      	ldr	r2, [pc, #32]	; (801e578 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e558:	4808      	ldr	r0, [pc, #32]	; (801e57c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e55a:	f007 f92f 	bl	80257bc <__assert_func>
 801e55e:	9404      	str	r4, [sp, #16]
 801e560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e564:	f7ff be04 	b.w	801e170 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e568:	9404      	str	r4, [sp, #16]
 801e56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e56e:	f7ff bef7 	b.w	801e360 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e572:	bd70      	pop	{r4, r5, r6, pc}
 801e574:	0802ab8a 	.word	0x0802ab8a
 801e578:	0802b20c 	.word	0x0802b20c
 801e57c:	0802ad65 	.word	0x0802ad65

0801e580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e584:	b08b      	sub	sp, #44	; 0x2c
 801e586:	460c      	mov	r4, r1
 801e588:	4680      	mov	r8, r0
 801e58a:	469a      	mov	sl, r3
 801e58c:	6808      	ldr	r0, [r1, #0]
 801e58e:	ab06      	add	r3, sp, #24
 801e590:	6849      	ldr	r1, [r1, #4]
 801e592:	c303      	stmia	r3!, {r0, r1}
 801e594:	6810      	ldr	r0, [r2, #0]
 801e596:	ab08      	add	r3, sp, #32
 801e598:	6851      	ldr	r1, [r2, #4]
 801e59a:	c303      	stmia	r3!, {r0, r1}
 801e59c:	a806      	add	r0, sp, #24
 801e59e:	f7fa fd0d 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e5a2:	4621      	mov	r1, r4
 801e5a4:	a808      	add	r0, sp, #32
 801e5a6:	4c61      	ldr	r4, [pc, #388]	; (801e72c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e5a8:	f7fa fcf0 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e5ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e5b0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e5b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e5b8:	6820      	ldr	r0, [r4, #0]
 801e5ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e5be:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e5c2:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e5c6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e5ca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e5ce:	440a      	add	r2, r1
 801e5d0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e5d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e5d8:	4413      	add	r3, r2
 801e5da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e5de:	6803      	ldr	r3, [r0, #0]
 801e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e5e2:	4798      	blx	r3
 801e5e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e5e8:	d118      	bne.n	801e61c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e5ea:	f010 0f20 	tst.w	r0, #32
 801e5ee:	6820      	ldr	r0, [r4, #0]
 801e5f0:	d017      	beq.n	801e622 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e5f2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e5f6:	b2bf      	uxth	r7, r7
 801e5f8:	6801      	ldr	r1, [r0, #0]
 801e5fa:	9402      	str	r4, [sp, #8]
 801e5fc:	fa1f f489 	uxth.w	r4, r9
 801e600:	f8cd a00c 	str.w	sl, [sp, #12]
 801e604:	9401      	str	r4, [sp, #4]
 801e606:	9700      	str	r7, [sp, #0]
 801e608:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e60c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e60e:	4641      	mov	r1, r8
 801e610:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e614:	47a0      	blx	r4
 801e616:	b00b      	add	sp, #44	; 0x2c
 801e618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e61c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e620:	e7e5      	b.n	801e5ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e622:	6803      	ldr	r3, [r0, #0]
 801e624:	6a1b      	ldr	r3, [r3, #32]
 801e626:	4798      	blx	r3
 801e628:	4b41      	ldr	r3, [pc, #260]	; (801e730 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e62a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e62e:	f04f 0c00 	mov.w	ip, #0
 801e632:	881a      	ldrh	r2, [r3, #0]
 801e634:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e638:	fb04 1202 	mla	r2, r4, r2, r1
 801e63c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e640:	4410      	add	r0, r2
 801e642:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e646:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e64a:	0092      	lsls	r2, r2, #2
 801e64c:	9105      	str	r1, [sp, #20]
 801e64e:	9204      	str	r2, [sp, #16]
 801e650:	45cc      	cmp	ip, r9
 801e652:	da65      	bge.n	801e720 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e654:	1cc4      	adds	r4, r0, #3
 801e656:	f108 0504 	add.w	r5, r8, #4
 801e65a:	f04f 0e00 	mov.w	lr, #0
 801e65e:	45be      	cmp	lr, r7
 801e660:	da4d      	bge.n	801e6fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e662:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e666:	b181      	cbz	r1, 801e68a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e668:	29ff      	cmp	r1, #255	; 0xff
 801e66a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e66e:	d111      	bne.n	801e694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e670:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e674:	d10e      	bne.n	801e694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e676:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e67a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e67e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e682:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e686:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e68a:	f10e 0e01 	add.w	lr, lr, #1
 801e68e:	3403      	adds	r4, #3
 801e690:	3504      	adds	r5, #4
 801e692:	e7e4      	b.n	801e65e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e694:	fb0a f101 	mul.w	r1, sl, r1
 801e698:	1c4a      	adds	r2, r1, #1
 801e69a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e69e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e6a2:	1212      	asrs	r2, r2, #8
 801e6a4:	b296      	uxth	r6, r2
 801e6a6:	43d2      	mvns	r2, r2
 801e6a8:	fb1b fb06 	smulbb	fp, fp, r6
 801e6ac:	b2d2      	uxtb	r2, r2
 801e6ae:	fb01 b102 	mla	r1, r1, r2, fp
 801e6b2:	b289      	uxth	r1, r1
 801e6b4:	f101 0b01 	add.w	fp, r1, #1
 801e6b8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e6bc:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e6c0:	fb1b fb02 	smulbb	fp, fp, r2
 801e6c4:	1209      	asrs	r1, r1, #8
 801e6c6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e6ca:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e6ce:	fb01 b106 	mla	r1, r1, r6, fp
 801e6d2:	b289      	uxth	r1, r1
 801e6d4:	f101 0b01 	add.w	fp, r1, #1
 801e6d8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e6dc:	1209      	asrs	r1, r1, #8
 801e6de:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e6e2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e6e6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e6ea:	fb11 f202 	smulbb	r2, r1, r2
 801e6ee:	fb0b 2206 	mla	r2, fp, r6, r2
 801e6f2:	b292      	uxth	r2, r2
 801e6f4:	1c56      	adds	r6, r2, #1
 801e6f6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e6fa:	1212      	asrs	r2, r2, #8
 801e6fc:	e7c3      	b.n	801e686 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e6fe:	881a      	ldrh	r2, [r3, #0]
 801e700:	f10c 0c01 	add.w	ip, ip, #1
 801e704:	9905      	ldr	r1, [sp, #20]
 801e706:	1bd2      	subs	r2, r2, r7
 801e708:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e70c:	440a      	add	r2, r1
 801e70e:	9904      	ldr	r1, [sp, #16]
 801e710:	4410      	add	r0, r2
 801e712:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e716:	1bd2      	subs	r2, r2, r7
 801e718:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e71c:	4490      	add	r8, r2
 801e71e:	e797      	b.n	801e650 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e720:	4b02      	ldr	r3, [pc, #8]	; (801e72c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e722:	6818      	ldr	r0, [r3, #0]
 801e724:	6803      	ldr	r3, [r0, #0]
 801e726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e728:	4798      	blx	r3
 801e72a:	e774      	b.n	801e616 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e72c:	2000bb94 	.word	0x2000bb94
 801e730:	2000bb8e 	.word	0x2000bb8e

0801e734 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e738:	b085      	sub	sp, #20
 801e73a:	4606      	mov	r6, r0
 801e73c:	460c      	mov	r4, r1
 801e73e:	4691      	mov	r9, r2
 801e740:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e744:	4698      	mov	r8, r3
 801e746:	b385      	cbz	r5, 801e7aa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e748:	4608      	mov	r0, r1
 801e74a:	f7fd fae5 	bl	801bd18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e74e:	4607      	mov	r7, r0
 801e750:	4620      	mov	r0, r4
 801e752:	f7fd fb1b 	bl	801bd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e756:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e75a:	4620      	mov	r0, r4
 801e75c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e760:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e764:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e768:	f7fd fc62 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e76c:	2801      	cmp	r0, #1
 801e76e:	d00f      	beq.n	801e790 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e770:	4620      	mov	r0, r4
 801e772:	f7fd fc5d 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e776:	2802      	cmp	r0, #2
 801e778:	d00a      	beq.n	801e790 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e77a:	4620      	mov	r0, r4
 801e77c:	f7fd fc58 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e780:	280b      	cmp	r0, #11
 801e782:	d005      	beq.n	801e790 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e784:	4b1b      	ldr	r3, [pc, #108]	; (801e7f4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e786:	2142      	movs	r1, #66	; 0x42
 801e788:	4a1b      	ldr	r2, [pc, #108]	; (801e7f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e78a:	481c      	ldr	r0, [pc, #112]	; (801e7fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801e78c:	f007 f816 	bl	80257bc <__assert_func>
 801e790:	4620      	mov	r0, r4
 801e792:	f7fd fc4d 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e796:	2802      	cmp	r0, #2
 801e798:	4620      	mov	r0, r4
 801e79a:	d109      	bne.n	801e7b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801e79c:	f7fd fbc4 	bl	801bf28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7a0:	462b      	mov	r3, r5
 801e7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7a4:	a902      	add	r1, sp, #8
 801e7a6:	f7ff feeb 	bl	801e580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e7aa:	b005      	add	sp, #20
 801e7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7b0:	f7fd fc3e 	bl	801c030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7b4:	280b      	cmp	r0, #11
 801e7b6:	d10e      	bne.n	801e7d6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801e7b8:	4620      	mov	r0, r4
 801e7ba:	f7fd fbb5 	bl	801bf28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7be:	4606      	mov	r6, r0
 801e7c0:	4620      	mov	r0, r4
 801e7c2:	f7fd fbe3 	bl	801bf8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e7c6:	9500      	str	r5, [sp, #0]
 801e7c8:	4601      	mov	r1, r0
 801e7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7cc:	aa02      	add	r2, sp, #8
 801e7ce:	4630      	mov	r0, r6
 801e7d0:	f7ff feb6 	bl	801e540 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e7d4:	e7e9      	b.n	801e7aa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e7d6:	6833      	ldr	r3, [r6, #0]
 801e7d8:	4620      	mov	r0, r4
 801e7da:	691f      	ldr	r7, [r3, #16]
 801e7dc:	f7fd fba4 	bl	801bf28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	4601      	mov	r1, r0
 801e7e4:	aa02      	add	r2, sp, #8
 801e7e6:	4630      	mov	r0, r6
 801e7e8:	e9cd 5300 	strd	r5, r3, [sp]
 801e7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7ee:	47b8      	blx	r7
 801e7f0:	e7db      	b.n	801e7aa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e7f2:	bf00      	nop
 801e7f4:	0802ac23 	.word	0x0802ac23
 801e7f8:	0802b317 	.word	0x0802b317
 801e7fc:	0802ad65 	.word	0x0802ad65

0801e800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e800:	b570      	push	{r4, r5, r6, lr}
 801e802:	9d04      	ldr	r5, [sp, #16]
 801e804:	460c      	mov	r4, r1
 801e806:	4619      	mov	r1, r3
 801e808:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e80c:	2a0c      	cmp	r2, #12
 801e80e:	d826      	bhi.n	801e85e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e810:	e8df f002 	tbb	[pc, r2]
 801e814:	200e1407 	.word	0x200e1407
 801e818:	20202020 	.word	0x20202020
 801e81c:	20202020 	.word	0x20202020
 801e820:	20          	.byte	0x20
 801e821:	00          	.byte	0x00
 801e822:	4b0f      	ldr	r3, [pc, #60]	; (801e860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e824:	f240 117f 	movw	r1, #383	; 0x17f
 801e828:	4a0e      	ldr	r2, [pc, #56]	; (801e864 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e82a:	480f      	ldr	r0, [pc, #60]	; (801e868 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e82c:	f006 ffc6 	bl	80257bc <__assert_func>
 801e830:	462a      	mov	r2, r5
 801e832:	4620      	mov	r0, r4
 801e834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e838:	f7ff bea2 	b.w	801e580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e83c:	6802      	ldr	r2, [r0, #0]
 801e83e:	2600      	movs	r6, #0
 801e840:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e844:	6916      	ldr	r6, [r2, #16]
 801e846:	462b      	mov	r3, r5
 801e848:	460a      	mov	r2, r1
 801e84a:	4621      	mov	r1, r4
 801e84c:	46b4      	mov	ip, r6
 801e84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e852:	4760      	bx	ip
 801e854:	4b05      	ldr	r3, [pc, #20]	; (801e86c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e856:	f240 1191 	movw	r1, #401	; 0x191
 801e85a:	4a02      	ldr	r2, [pc, #8]	; (801e864 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e85c:	e7e5      	b.n	801e82a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e85e:	bd70      	pop	{r4, r5, r6, pc}
 801e860:	0802af3e 	.word	0x0802af3e
 801e864:	0802b5ff 	.word	0x0802b5ff
 801e868:	0802ad65 	.word	0x0802ad65
 801e86c:	0802af7f 	.word	0x0802af7f

0801e870 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e870:	b158      	cbz	r0, 801e88a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e872:	2902      	cmp	r1, #2
 801e874:	d00f      	beq.n	801e896 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e876:	2903      	cmp	r1, #3
 801e878:	d010      	beq.n	801e89c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e87a:	2901      	cmp	r1, #1
 801e87c:	d101      	bne.n	801e882 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e87e:	2001      	movs	r0, #1
 801e880:	4770      	bx	lr
 801e882:	4b08      	ldr	r3, [pc, #32]	; (801e8a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e884:	8819      	ldrh	r1, [r3, #0]
 801e886:	4248      	negs	r0, r1
 801e888:	4770      	bx	lr
 801e88a:	2902      	cmp	r1, #2
 801e88c:	d006      	beq.n	801e89c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e88e:	2903      	cmp	r1, #3
 801e890:	d0f7      	beq.n	801e882 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e892:	2901      	cmp	r1, #1
 801e894:	d1f3      	bne.n	801e87e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e896:	4b03      	ldr	r3, [pc, #12]	; (801e8a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e898:	8818      	ldrh	r0, [r3, #0]
 801e89a:	4770      	bx	lr
 801e89c:	f04f 30ff 	mov.w	r0, #4294967295
 801e8a0:	4770      	bx	lr
 801e8a2:	bf00      	nop
 801e8a4:	2000bb8e 	.word	0x2000bb8e

0801e8a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e8a8:	b170      	cbz	r0, 801e8c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e8aa:	2902      	cmp	r1, #2
 801e8ac:	d012      	beq.n	801e8d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e8ae:	2903      	cmp	r1, #3
 801e8b0:	d006      	beq.n	801e8c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e8b2:	2901      	cmp	r1, #1
 801e8b4:	d001      	beq.n	801e8ba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e8b6:	2001      	movs	r0, #1
 801e8b8:	4770      	bx	lr
 801e8ba:	4b08      	ldr	r3, [pc, #32]	; (801e8dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8bc:	8818      	ldrh	r0, [r3, #0]
 801e8be:	4770      	bx	lr
 801e8c0:	4b06      	ldr	r3, [pc, #24]	; (801e8dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8c2:	8818      	ldrh	r0, [r3, #0]
 801e8c4:	4240      	negs	r0, r0
 801e8c6:	4770      	bx	lr
 801e8c8:	2902      	cmp	r1, #2
 801e8ca:	d0f9      	beq.n	801e8c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e8cc:	2903      	cmp	r1, #3
 801e8ce:	d0f2      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e8d0:	2901      	cmp	r1, #1
 801e8d2:	d1f2      	bne.n	801e8ba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8d8:	4770      	bx	lr
 801e8da:	bf00      	nop
 801e8dc:	2000bb8e 	.word	0x2000bb8e

0801e8e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e4:	b095      	sub	sp, #84	; 0x54
 801e8e6:	9109      	str	r1, [sp, #36]	; 0x24
 801e8e8:	a910      	add	r1, sp, #64	; 0x40
 801e8ea:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801e8ee:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801e8f2:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e8f6:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e8fa:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e8fe:	e881 000c 	stmia.w	r1, {r2, r3}
 801e902:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e906:	9306      	str	r3, [sp, #24]
 801e908:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e90c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e910:	930e      	str	r3, [sp, #56]	; 0x38
 801e912:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e916:	798f      	ldrb	r7, [r1, #6]
 801e918:	930a      	str	r3, [sp, #40]	; 0x28
 801e91a:	7b4b      	ldrb	r3, [r1, #13]
 801e91c:	0158      	lsls	r0, r3, #5
 801e91e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e922:	4338      	orrs	r0, r7
 801e924:	9008      	str	r0, [sp, #32]
 801e926:	f000 8174 	beq.w	801ec12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e92a:	011b      	lsls	r3, r3, #4
 801e92c:	79c8      	ldrb	r0, [r1, #7]
 801e92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e932:	4303      	orrs	r3, r0
 801e934:	9307      	str	r3, [sp, #28]
 801e936:	f000 816c 	beq.w	801ec12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e93a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e93e:	b29b      	uxth	r3, r3
 801e940:	2e00      	cmp	r6, #0
 801e942:	f000 8112 	beq.w	801eb6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801e946:	1af6      	subs	r6, r6, r3
 801e948:	b2b6      	uxth	r6, r6
 801e94a:	0433      	lsls	r3, r6, #16
 801e94c:	d502      	bpl.n	801e954 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e94e:	1bad      	subs	r5, r5, r6
 801e950:	2600      	movs	r6, #0
 801e952:	b22d      	sxth	r5, r5
 801e954:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e958:	a810      	add	r0, sp, #64	; 0x40
 801e95a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e95e:	428d      	cmp	r5, r1
 801e960:	b28b      	uxth	r3, r1
 801e962:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801e966:	bfbf      	itttt	lt
 801e968:	18f6      	addlt	r6, r6, r3
 801e96a:	1b75      	sublt	r5, r6, r5
 801e96c:	b2ae      	uxthlt	r6, r5
 801e96e:	460d      	movlt	r5, r1
 801e970:	8891      	ldrh	r1, [r2, #4]
 801e972:	440b      	add	r3, r1
 801e974:	4629      	mov	r1, r5
 801e976:	b21b      	sxth	r3, r3
 801e978:	930d      	str	r3, [sp, #52]	; 0x34
 801e97a:	88d3      	ldrh	r3, [r2, #6]
 801e97c:	9a06      	ldr	r2, [sp, #24]
 801e97e:	449a      	add	sl, r3
 801e980:	fa0f f38a 	sxth.w	r3, sl
 801e984:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801e988:	930c      	str	r3, [sp, #48]	; 0x30
 801e98a:	4bb8      	ldr	r3, [pc, #736]	; (801ec6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e98c:	f893 b000 	ldrb.w	fp, [r3]
 801e990:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e994:	f1dc 0300 	rsbs	r3, ip, #0
 801e998:	eb43 030c 	adc.w	r3, r3, ip
 801e99c:	930b      	str	r3, [sp, #44]	; 0x2c
 801e99e:	464b      	mov	r3, r9
 801e9a0:	f7fa f9e6 	bl	8018d70 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e9a4:	4629      	mov	r1, r5
 801e9a6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e9aa:	464b      	mov	r3, r9
 801e9ac:	9a06      	ldr	r2, [sp, #24]
 801e9ae:	a810      	add	r0, sp, #64	; 0x40
 801e9b0:	f7fa f9f6 	bl	8018da0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e9b4:	a914      	add	r1, sp, #80	; 0x50
 801e9b6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e9ba:	a813      	add	r0, sp, #76	; 0x4c
 801e9bc:	f7fa fad0 	bl	8018f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e9c0:	f1b9 0f00 	cmp.w	r9, #0
 801e9c4:	f040 80d4 	bne.w	801eb70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801e9c8:	f1bb 0f01 	cmp.w	fp, #1
 801e9cc:	f040 80d8 	bne.w	801eb80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801e9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	f040 8122 	bne.w	801ec1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801e9d8:	4ba5      	ldr	r3, [pc, #660]	; (801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e9da:	6818      	ldr	r0, [r3, #0]
 801e9dc:	6803      	ldr	r3, [r0, #0]
 801e9de:	6a1b      	ldr	r3, [r3, #32]
 801e9e0:	4798      	blx	r3
 801e9e2:	4aa4      	ldr	r2, [pc, #656]	; (801ec74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e9e4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e9e8:	8811      	ldrh	r1, [r2, #0]
 801e9ea:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e9ee:	fb01 2303 	mla	r3, r1, r3, r2
 801e9f2:	2201      	movs	r2, #1
 801e9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9f8:	4590      	cmp	r8, r2
 801e9fa:	4403      	add	r3, r0
 801e9fc:	9307      	str	r3, [sp, #28]
 801e9fe:	fa02 f308 	lsl.w	r3, r2, r8
 801ea02:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea06:	b2db      	uxtb	r3, r3
 801ea08:	930f      	str	r3, [sp, #60]	; 0x3c
 801ea0a:	f000 8109 	beq.w	801ec20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801ea0e:	f1b8 0f02 	cmp.w	r8, #2
 801ea12:	f000 813e 	beq.w	801ec92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ea16:	f1b8 0f04 	cmp.w	r8, #4
 801ea1a:	f000 8132 	beq.w	801ec82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801ea1e:	b906      	cbnz	r6, 801ea22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801ea20:	b174      	cbz	r4, 801ea40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801ea22:	fb17 6304 	smlabb	r3, r7, r4, r6
 801ea26:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ea28:	ebaa 0a04 	sub.w	sl, sl, r4
 801ea2c:	fb13 f308 	smulbb	r3, r3, r8
 801ea30:	fa1f fa8a 	uxth.w	sl, sl
 801ea34:	b29b      	uxth	r3, r3
 801ea36:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801ea3a:	f003 0407 	and.w	r4, r3, #7
 801ea3e:	9124      	str	r1, [sp, #144]	; 0x90
 801ea40:	4649      	mov	r1, r9
 801ea42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea44:	f7ff ff14 	bl	801e870 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ea48:	4649      	mov	r1, r9
 801ea4a:	4683      	mov	fp, r0
 801ea4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea4e:	f7ff ff2b 	bl	801e8a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ea52:	9906      	ldr	r1, [sp, #24]
 801ea54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea56:	1bad      	subs	r5, r5, r6
 801ea58:	1a5b      	subs	r3, r3, r1
 801ea5a:	459a      	cmp	sl, r3
 801ea5c:	bfa8      	it	ge
 801ea5e:	469a      	movge	sl, r3
 801ea60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea62:	1b5d      	subs	r5, r3, r5
 801ea64:	9b08      	ldr	r3, [sp, #32]
 801ea66:	429d      	cmp	r5, r3
 801ea68:	bfd4      	ite	le
 801ea6a:	ebc6 0605 	rsble	r6, r6, r5
 801ea6e:	ebc6 0603 	rsbgt	r6, r6, r3
 801ea72:	1bbf      	subs	r7, r7, r6
 801ea74:	fb0b 0016 	mls	r0, fp, r6, r0
 801ea78:	fb08 f307 	mul.w	r3, r8, r7
 801ea7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea80:	9308      	str	r3, [sp, #32]
 801ea82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ea84:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ea88:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ea8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea90:	930c      	str	r3, [sp, #48]	; 0x30
 801ea92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ea94:	b2db      	uxtb	r3, r3
 801ea96:	930d      	str	r3, [sp, #52]	; 0x34
 801ea98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea9a:	7819      	ldrb	r1, [r3, #0]
 801ea9c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801eaa0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801eaa4:	4121      	asrs	r1, r4
 801eaa6:	9306      	str	r3, [sp, #24]
 801eaa8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801eaac:	b2c9      	uxtb	r1, r1
 801eaae:	f1ba 0f00 	cmp.w	sl, #0
 801eab2:	f340 80d1 	ble.w	801ec58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801eab6:	46b6      	mov	lr, r6
 801eab8:	9807      	ldr	r0, [sp, #28]
 801eaba:	f1be 0f00 	cmp.w	lr, #0
 801eabe:	f340 80b8 	ble.w	801ec32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801eac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eac4:	400b      	ands	r3, r1
 801eac6:	d03e      	beq.n	801eb46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801eac8:	fb13 f302 	smulbb	r3, r3, r2
 801eacc:	2bfe      	cmp	r3, #254	; 0xfe
 801eace:	dd03      	ble.n	801ead8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801ead0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ead2:	2dff      	cmp	r5, #255	; 0xff
 801ead4:	f000 80a6 	beq.w	801ec24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ead8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eada:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801eadc:	fb15 f303 	smulbb	r3, r5, r3
 801eae0:	b29b      	uxth	r3, r3
 801eae2:	1c5d      	adds	r5, r3, #1
 801eae4:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801eae8:	7805      	ldrb	r5, [r0, #0]
 801eaea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eaee:	fa1f fc83 	uxth.w	ip, r3
 801eaf2:	43db      	mvns	r3, r3
 801eaf4:	fb17 f90c 	smulbb	r9, r7, ip
 801eaf8:	b2db      	uxtb	r3, r3
 801eafa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eafc:	fb05 9503 	mla	r5, r5, r3, r9
 801eb00:	b2ad      	uxth	r5, r5
 801eb02:	f105 0901 	add.w	r9, r5, #1
 801eb06:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801eb0a:	fb17 f90c 	smulbb	r9, r7, ip
 801eb0e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb10:	122d      	asrs	r5, r5, #8
 801eb12:	fb17 fc0c 	smulbb	ip, r7, ip
 801eb16:	7005      	strb	r5, [r0, #0]
 801eb18:	7845      	ldrb	r5, [r0, #1]
 801eb1a:	fb05 9503 	mla	r5, r5, r3, r9
 801eb1e:	b2ad      	uxth	r5, r5
 801eb20:	f105 0901 	add.w	r9, r5, #1
 801eb24:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801eb28:	122d      	asrs	r5, r5, #8
 801eb2a:	7045      	strb	r5, [r0, #1]
 801eb2c:	7885      	ldrb	r5, [r0, #2]
 801eb2e:	fb05 cc03 	mla	ip, r5, r3, ip
 801eb32:	fa1f fc8c 	uxth.w	ip, ip
 801eb36:	f10c 0301 	add.w	r3, ip, #1
 801eb3a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eb3e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eb42:	f880 c002 	strb.w	ip, [r0, #2]
 801eb46:	4444      	add	r4, r8
 801eb48:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eb4c:	b2a4      	uxth	r4, r4
 801eb4e:	2c07      	cmp	r4, #7
 801eb50:	bf89      	itett	hi
 801eb52:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801eb54:	fa41 f108 	asrls.w	r1, r1, r8
 801eb58:	2400      	movhi	r4, #0
 801eb5a:	7859      	ldrbhi	r1, [r3, #1]
 801eb5c:	bf8a      	itet	hi
 801eb5e:	3301      	addhi	r3, #1
 801eb60:	b2c9      	uxtbls	r1, r1
 801eb62:	9324      	strhi	r3, [sp, #144]	; 0x90
 801eb64:	9b06      	ldr	r3, [sp, #24]
 801eb66:	4418      	add	r0, r3
 801eb68:	e7a7      	b.n	801eaba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801eb6a:	441d      	add	r5, r3
 801eb6c:	b22d      	sxth	r5, r5
 801eb6e:	e6f1      	b.n	801e954 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eb70:	f1b9 0f01 	cmp.w	r9, #1
 801eb74:	f47f af2c 	bne.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb78:	f1bb 0f01 	cmp.w	fp, #1
 801eb7c:	f47f af28 	bne.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb80:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801eb84:	f8db 0000 	ldr.w	r0, [fp]
 801eb88:	6803      	ldr	r3, [r0, #0]
 801eb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb8c:	4798      	blx	r3
 801eb8e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801eb92:	465a      	mov	r2, fp
 801eb94:	d006      	beq.n	801eba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801eb96:	f1b8 0f04 	cmp.w	r8, #4
 801eb9a:	d13d      	bne.n	801ec18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801eb9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb9e:	3300      	adds	r3, #0
 801eba0:	bf18      	it	ne
 801eba2:	2301      	movne	r3, #1
 801eba4:	05c0      	lsls	r0, r0, #23
 801eba6:	d567      	bpl.n	801ec78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801eba8:	f1b8 0f08 	cmp.w	r8, #8
 801ebac:	d164      	bne.n	801ec78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	bf0c      	ite	eq
 801ebb2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ebb6:	2180      	movne	r1, #128	; 0x80
 801ebb8:	2e00      	cmp	r6, #0
 801ebba:	f47f af09 	bne.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebbe:	2c00      	cmp	r4, #0
 801ebc0:	f47f af06 	bne.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebc4:	9b08      	ldr	r3, [sp, #32]
 801ebc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ebc8:	442b      	add	r3, r5
 801ebca:	4283      	cmp	r3, r0
 801ebcc:	f73f af00 	bgt.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebd0:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801ebd4:	4403      	add	r3, r0
 801ebd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ebd8:	4283      	cmp	r3, r0
 801ebda:	f73f aef9 	bgt.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebde:	f1b8 0f08 	cmp.w	r8, #8
 801ebe2:	6810      	ldr	r0, [r2, #0]
 801ebe4:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801ebe8:	bf18      	it	ne
 801ebea:	3701      	addne	r7, #1
 801ebec:	6804      	ldr	r4, [r0, #0]
 801ebee:	9105      	str	r1, [sp, #20]
 801ebf0:	bf18      	it	ne
 801ebf2:	f027 0701 	bicne.w	r7, r7, #1
 801ebf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ebf8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ebfc:	bf18      	it	ne
 801ebfe:	b2bf      	uxthne	r7, r7
 801ec00:	9104      	str	r1, [sp, #16]
 801ec02:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ec04:	e9cd 7a00 	strd	r7, sl, [sp]
 801ec08:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ec0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ec0e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801ec10:	47a0      	blx	r4
 801ec12:	b015      	add	sp, #84	; 0x54
 801ec14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec18:	2300      	movs	r3, #0
 801ec1a:	e7c3      	b.n	801eba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ec1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec1e:	e6e0      	b.n	801e9e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801ec20:	22ff      	movs	r2, #255	; 0xff
 801ec22:	e6fc      	b.n	801ea1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ec24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec26:	7003      	strb	r3, [r0, #0]
 801ec28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec2a:	7043      	strb	r3, [r0, #1]
 801ec2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec2e:	7083      	strb	r3, [r0, #2]
 801ec30:	e789      	b.n	801eb46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ec32:	9b08      	ldr	r3, [sp, #32]
 801ec34:	b153      	cbz	r3, 801ec4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801ec36:	441c      	add	r4, r3
 801ec38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec3a:	b2a4      	uxth	r4, r4
 801ec3c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ec40:	f004 0407 	and.w	r4, r4, #7
 801ec44:	7819      	ldrb	r1, [r3, #0]
 801ec46:	9324      	str	r3, [sp, #144]	; 0x90
 801ec48:	4121      	asrs	r1, r4
 801ec4a:	b2c9      	uxtb	r1, r1
 801ec4c:	9b07      	ldr	r3, [sp, #28]
 801ec4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec52:	445b      	add	r3, fp
 801ec54:	9307      	str	r3, [sp, #28]
 801ec56:	e72a      	b.n	801eaae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801ec58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	d1d9      	bne.n	801ec12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ec5e:	4b04      	ldr	r3, [pc, #16]	; (801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ec60:	6818      	ldr	r0, [r3, #0]
 801ec62:	6803      	ldr	r3, [r0, #0]
 801ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec66:	4798      	blx	r3
 801ec68:	e7d3      	b.n	801ec12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ec6a:	bf00      	nop
 801ec6c:	2000bb8c 	.word	0x2000bb8c
 801ec70:	2000bb94 	.word	0x2000bb94
 801ec74:	2000bb8e 	.word	0x2000bb8e
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	f43f aea9 	beq.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec7e:	2180      	movs	r1, #128	; 0x80
 801ec80:	e79a      	b.n	801ebb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801ec82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec84:	b11b      	cbz	r3, 801ec8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ec86:	07fb      	lsls	r3, r7, #31
 801ec88:	d501      	bpl.n	801ec8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ec8a:	3701      	adds	r7, #1
 801ec8c:	b2bf      	uxth	r7, r7
 801ec8e:	2211      	movs	r2, #17
 801ec90:	e6c5      	b.n	801ea1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ec92:	2255      	movs	r2, #85	; 0x55
 801ec94:	e6c3      	b.n	801ea1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ec96:	bf00      	nop

0801ec98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ec98:	b538      	push	{r3, r4, r5, lr}
 801ec9a:	4c15      	ldr	r4, [pc, #84]	; (801ecf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ec9c:	4605      	mov	r5, r0
 801ec9e:	7823      	ldrb	r3, [r4, #0]
 801eca0:	f3bf 8f5b 	dmb	ish
 801eca4:	07da      	lsls	r2, r3, #31
 801eca6:	d40b      	bmi.n	801ecc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801eca8:	4620      	mov	r0, r4
 801ecaa:	f006 fd5e 	bl	802576a <__cxa_guard_acquire>
 801ecae:	b138      	cbz	r0, 801ecc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	f006 fd66 	bl	8025782 <__cxa_guard_release>
 801ecb6:	4a0f      	ldr	r2, [pc, #60]	; (801ecf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ecb8:	490f      	ldr	r1, [pc, #60]	; (801ecf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ecba:	4810      	ldr	r0, [pc, #64]	; (801ecfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ecbc:	f006 fd4b 	bl	8025756 <__aeabi_atexit>
 801ecc0:	4c0f      	ldr	r4, [pc, #60]	; (801ed00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ecc2:	7823      	ldrb	r3, [r4, #0]
 801ecc4:	f3bf 8f5b 	dmb	ish
 801ecc8:	07db      	lsls	r3, r3, #31
 801ecca:	d40b      	bmi.n	801ece4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801eccc:	4620      	mov	r0, r4
 801ecce:	f006 fd4c 	bl	802576a <__cxa_guard_acquire>
 801ecd2:	b138      	cbz	r0, 801ece4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ecd4:	4620      	mov	r0, r4
 801ecd6:	f006 fd54 	bl	8025782 <__cxa_guard_release>
 801ecda:	4a06      	ldr	r2, [pc, #24]	; (801ecf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ecdc:	4909      	ldr	r1, [pc, #36]	; (801ed04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ecde:	480a      	ldr	r0, [pc, #40]	; (801ed08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ece0:	f006 fd39 	bl	8025756 <__aeabi_atexit>
 801ece4:	4b05      	ldr	r3, [pc, #20]	; (801ecfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ece6:	612b      	str	r3, [r5, #16]
 801ece8:	4b07      	ldr	r3, [pc, #28]	; (801ed08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ecea:	616b      	str	r3, [r5, #20]
 801ecec:	bd38      	pop	{r3, r4, r5, pc}
 801ecee:	bf00      	nop
 801ecf0:	2000bca0 	.word	0x2000bca0
 801ecf4:	20000000 	.word	0x20000000
 801ecf8:	0801d8cf 	.word	0x0801d8cf
 801ecfc:	20000098 	.word	0x20000098
 801ed00:	2000bca4 	.word	0x2000bca4
 801ed04:	0801d8cd 	.word	0x0801d8cd
 801ed08:	2000009c 	.word	0x2000009c

0801ed0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ed0c:	b538      	push	{r3, r4, r5, lr}
 801ed0e:	4c15      	ldr	r4, [pc, #84]	; (801ed64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ed10:	4605      	mov	r5, r0
 801ed12:	7823      	ldrb	r3, [r4, #0]
 801ed14:	f3bf 8f5b 	dmb	ish
 801ed18:	07da      	lsls	r2, r3, #31
 801ed1a:	d40b      	bmi.n	801ed34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	f006 fd24 	bl	802576a <__cxa_guard_acquire>
 801ed22:	b138      	cbz	r0, 801ed34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed24:	4620      	mov	r0, r4
 801ed26:	f006 fd2c 	bl	8025782 <__cxa_guard_release>
 801ed2a:	4a0f      	ldr	r2, [pc, #60]	; (801ed68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed2c:	490f      	ldr	r1, [pc, #60]	; (801ed6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ed2e:	4810      	ldr	r0, [pc, #64]	; (801ed70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ed30:	f006 fd11 	bl	8025756 <__aeabi_atexit>
 801ed34:	4c0f      	ldr	r4, [pc, #60]	; (801ed74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ed36:	7823      	ldrb	r3, [r4, #0]
 801ed38:	f3bf 8f5b 	dmb	ish
 801ed3c:	07db      	lsls	r3, r3, #31
 801ed3e:	d40b      	bmi.n	801ed58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed40:	4620      	mov	r0, r4
 801ed42:	f006 fd12 	bl	802576a <__cxa_guard_acquire>
 801ed46:	b138      	cbz	r0, 801ed58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed48:	4620      	mov	r0, r4
 801ed4a:	f006 fd1a 	bl	8025782 <__cxa_guard_release>
 801ed4e:	4a06      	ldr	r2, [pc, #24]	; (801ed68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed50:	4909      	ldr	r1, [pc, #36]	; (801ed78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ed52:	480a      	ldr	r0, [pc, #40]	; (801ed7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ed54:	f006 fcff 	bl	8025756 <__aeabi_atexit>
 801ed58:	4b05      	ldr	r3, [pc, #20]	; (801ed70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ed5a:	60ab      	str	r3, [r5, #8]
 801ed5c:	4b07      	ldr	r3, [pc, #28]	; (801ed7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ed5e:	60eb      	str	r3, [r5, #12]
 801ed60:	bd38      	pop	{r3, r4, r5, pc}
 801ed62:	bf00      	nop
 801ed64:	2000bc80 	.word	0x2000bc80
 801ed68:	20000000 	.word	0x20000000
 801ed6c:	0801d8d3 	.word	0x0801d8d3
 801ed70:	20000078 	.word	0x20000078
 801ed74:	2000bc84 	.word	0x2000bc84
 801ed78:	0801d8d1 	.word	0x0801d8d1
 801ed7c:	2000007c 	.word	0x2000007c

0801ed80 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ed80:	b510      	push	{r4, lr}
 801ed82:	4604      	mov	r4, r0
 801ed84:	f7ff ff88 	bl	801ec98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ed88:	4620      	mov	r0, r4
 801ed8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed8e:	f7ff bfbd 	b.w	801ed0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ed94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ed94:	b538      	push	{r3, r4, r5, lr}
 801ed96:	4c15      	ldr	r4, [pc, #84]	; (801edec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ed98:	4605      	mov	r5, r0
 801ed9a:	7823      	ldrb	r3, [r4, #0]
 801ed9c:	f3bf 8f5b 	dmb	ish
 801eda0:	07da      	lsls	r2, r3, #31
 801eda2:	d40b      	bmi.n	801edbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eda4:	4620      	mov	r0, r4
 801eda6:	f006 fce0 	bl	802576a <__cxa_guard_acquire>
 801edaa:	b138      	cbz	r0, 801edbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801edac:	4620      	mov	r0, r4
 801edae:	f006 fce8 	bl	8025782 <__cxa_guard_release>
 801edb2:	4a0f      	ldr	r2, [pc, #60]	; (801edf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801edb4:	490f      	ldr	r1, [pc, #60]	; (801edf4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801edb6:	4810      	ldr	r0, [pc, #64]	; (801edf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801edb8:	f006 fccd 	bl	8025756 <__aeabi_atexit>
 801edbc:	4c0f      	ldr	r4, [pc, #60]	; (801edfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801edbe:	7823      	ldrb	r3, [r4, #0]
 801edc0:	f3bf 8f5b 	dmb	ish
 801edc4:	07db      	lsls	r3, r3, #31
 801edc6:	d40b      	bmi.n	801ede0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801edc8:	4620      	mov	r0, r4
 801edca:	f006 fcce 	bl	802576a <__cxa_guard_acquire>
 801edce:	b138      	cbz	r0, 801ede0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801edd0:	4620      	mov	r0, r4
 801edd2:	f006 fcd6 	bl	8025782 <__cxa_guard_release>
 801edd6:	4a06      	ldr	r2, [pc, #24]	; (801edf0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801edd8:	4909      	ldr	r1, [pc, #36]	; (801ee00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801edda:	480a      	ldr	r0, [pc, #40]	; (801ee04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801eddc:	f006 fcbb 	bl	8025756 <__aeabi_atexit>
 801ede0:	4b05      	ldr	r3, [pc, #20]	; (801edf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ede2:	622b      	str	r3, [r5, #32]
 801ede4:	4b07      	ldr	r3, [pc, #28]	; (801ee04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ede6:	626b      	str	r3, [r5, #36]	; 0x24
 801ede8:	bd38      	pop	{r3, r4, r5, pc}
 801edea:	bf00      	nop
 801edec:	2000bca8 	.word	0x2000bca8
 801edf0:	20000000 	.word	0x20000000
 801edf4:	0801d8c7 	.word	0x0801d8c7
 801edf8:	200000a0 	.word	0x200000a0
 801edfc:	2000bcac 	.word	0x2000bcac
 801ee00:	0801d8c5 	.word	0x0801d8c5
 801ee04:	200000a4 	.word	0x200000a4

0801ee08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ee08:	b538      	push	{r3, r4, r5, lr}
 801ee0a:	4c15      	ldr	r4, [pc, #84]	; (801ee60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ee0c:	4605      	mov	r5, r0
 801ee0e:	7823      	ldrb	r3, [r4, #0]
 801ee10:	f3bf 8f5b 	dmb	ish
 801ee14:	07da      	lsls	r2, r3, #31
 801ee16:	d40b      	bmi.n	801ee30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee18:	4620      	mov	r0, r4
 801ee1a:	f006 fca6 	bl	802576a <__cxa_guard_acquire>
 801ee1e:	b138      	cbz	r0, 801ee30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee20:	4620      	mov	r0, r4
 801ee22:	f006 fcae 	bl	8025782 <__cxa_guard_release>
 801ee26:	4a0f      	ldr	r2, [pc, #60]	; (801ee64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee28:	490f      	ldr	r1, [pc, #60]	; (801ee68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ee2a:	4810      	ldr	r0, [pc, #64]	; (801ee6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ee2c:	f006 fc93 	bl	8025756 <__aeabi_atexit>
 801ee30:	4c0f      	ldr	r4, [pc, #60]	; (801ee70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ee32:	7823      	ldrb	r3, [r4, #0]
 801ee34:	f3bf 8f5b 	dmb	ish
 801ee38:	07db      	lsls	r3, r3, #31
 801ee3a:	d40b      	bmi.n	801ee54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	f006 fc94 	bl	802576a <__cxa_guard_acquire>
 801ee42:	b138      	cbz	r0, 801ee54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee44:	4620      	mov	r0, r4
 801ee46:	f006 fc9c 	bl	8025782 <__cxa_guard_release>
 801ee4a:	4a06      	ldr	r2, [pc, #24]	; (801ee64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee4c:	4909      	ldr	r1, [pc, #36]	; (801ee74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ee4e:	480a      	ldr	r0, [pc, #40]	; (801ee78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ee50:	f006 fc81 	bl	8025756 <__aeabi_atexit>
 801ee54:	4b05      	ldr	r3, [pc, #20]	; (801ee6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ee56:	61ab      	str	r3, [r5, #24]
 801ee58:	4b07      	ldr	r3, [pc, #28]	; (801ee78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ee5a:	61eb      	str	r3, [r5, #28]
 801ee5c:	bd38      	pop	{r3, r4, r5, pc}
 801ee5e:	bf00      	nop
 801ee60:	2000bc88 	.word	0x2000bc88
 801ee64:	20000000 	.word	0x20000000
 801ee68:	0801d8cb 	.word	0x0801d8cb
 801ee6c:	20000080 	.word	0x20000080
 801ee70:	2000bc8c 	.word	0x2000bc8c
 801ee74:	0801d8c9 	.word	0x0801d8c9
 801ee78:	20000084 	.word	0x20000084

0801ee7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ee7c:	b510      	push	{r4, lr}
 801ee7e:	4604      	mov	r4, r0
 801ee80:	f7ff ff88 	bl	801ed94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ee84:	4620      	mov	r0, r4
 801ee86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee8a:	f7ff bfbd 	b.w	801ee08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ee90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801ee90:	b538      	push	{r3, r4, r5, lr}
 801ee92:	4c15      	ldr	r4, [pc, #84]	; (801eee8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801ee94:	4605      	mov	r5, r0
 801ee96:	7823      	ldrb	r3, [r4, #0]
 801ee98:	f3bf 8f5b 	dmb	ish
 801ee9c:	07da      	lsls	r2, r3, #31
 801ee9e:	d40b      	bmi.n	801eeb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eea0:	4620      	mov	r0, r4
 801eea2:	f006 fc62 	bl	802576a <__cxa_guard_acquire>
 801eea6:	b138      	cbz	r0, 801eeb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eea8:	4620      	mov	r0, r4
 801eeaa:	f006 fc6a 	bl	8025782 <__cxa_guard_release>
 801eeae:	4a0f      	ldr	r2, [pc, #60]	; (801eeec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eeb0:	490f      	ldr	r1, [pc, #60]	; (801eef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801eeb2:	4810      	ldr	r0, [pc, #64]	; (801eef4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eeb4:	f006 fc4f 	bl	8025756 <__aeabi_atexit>
 801eeb8:	4c0f      	ldr	r4, [pc, #60]	; (801eef8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801eeba:	7823      	ldrb	r3, [r4, #0]
 801eebc:	f3bf 8f5b 	dmb	ish
 801eec0:	07db      	lsls	r3, r3, #31
 801eec2:	d40b      	bmi.n	801eedc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eec4:	4620      	mov	r0, r4
 801eec6:	f006 fc50 	bl	802576a <__cxa_guard_acquire>
 801eeca:	b138      	cbz	r0, 801eedc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eecc:	4620      	mov	r0, r4
 801eece:	f006 fc58 	bl	8025782 <__cxa_guard_release>
 801eed2:	4a06      	ldr	r2, [pc, #24]	; (801eeec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eed4:	4909      	ldr	r1, [pc, #36]	; (801eefc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801eed6:	480a      	ldr	r0, [pc, #40]	; (801ef00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eed8:	f006 fc3d 	bl	8025756 <__aeabi_atexit>
 801eedc:	4b05      	ldr	r3, [pc, #20]	; (801eef4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eede:	632b      	str	r3, [r5, #48]	; 0x30
 801eee0:	4b07      	ldr	r3, [pc, #28]	; (801ef00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eee2:	636b      	str	r3, [r5, #52]	; 0x34
 801eee4:	bd38      	pop	{r3, r4, r5, pc}
 801eee6:	bf00      	nop
 801eee8:	2000bc90 	.word	0x2000bc90
 801eeec:	20000000 	.word	0x20000000
 801eef0:	0801d8bf 	.word	0x0801d8bf
 801eef4:	20000088 	.word	0x20000088
 801eef8:	2000bc94 	.word	0x2000bc94
 801eefc:	0801d8bd 	.word	0x0801d8bd
 801ef00:	2000008c 	.word	0x2000008c

0801ef04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ef04:	b538      	push	{r3, r4, r5, lr}
 801ef06:	4c15      	ldr	r4, [pc, #84]	; (801ef5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ef08:	4605      	mov	r5, r0
 801ef0a:	7823      	ldrb	r3, [r4, #0]
 801ef0c:	f3bf 8f5b 	dmb	ish
 801ef10:	07da      	lsls	r2, r3, #31
 801ef12:	d40b      	bmi.n	801ef2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef14:	4620      	mov	r0, r4
 801ef16:	f006 fc28 	bl	802576a <__cxa_guard_acquire>
 801ef1a:	b138      	cbz	r0, 801ef2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	f006 fc30 	bl	8025782 <__cxa_guard_release>
 801ef22:	4a0f      	ldr	r2, [pc, #60]	; (801ef60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef24:	490f      	ldr	r1, [pc, #60]	; (801ef64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ef26:	4810      	ldr	r0, [pc, #64]	; (801ef68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef28:	f006 fc15 	bl	8025756 <__aeabi_atexit>
 801ef2c:	4c0f      	ldr	r4, [pc, #60]	; (801ef6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ef2e:	7823      	ldrb	r3, [r4, #0]
 801ef30:	f3bf 8f5b 	dmb	ish
 801ef34:	07db      	lsls	r3, r3, #31
 801ef36:	d40b      	bmi.n	801ef50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef38:	4620      	mov	r0, r4
 801ef3a:	f006 fc16 	bl	802576a <__cxa_guard_acquire>
 801ef3e:	b138      	cbz	r0, 801ef50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef40:	4620      	mov	r0, r4
 801ef42:	f006 fc1e 	bl	8025782 <__cxa_guard_release>
 801ef46:	4a06      	ldr	r2, [pc, #24]	; (801ef60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef48:	4909      	ldr	r1, [pc, #36]	; (801ef70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ef4a:	480a      	ldr	r0, [pc, #40]	; (801ef74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ef4c:	f006 fc03 	bl	8025756 <__aeabi_atexit>
 801ef50:	4b05      	ldr	r3, [pc, #20]	; (801ef68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef52:	62ab      	str	r3, [r5, #40]	; 0x28
 801ef54:	4b07      	ldr	r3, [pc, #28]	; (801ef74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ef56:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ef58:	bd38      	pop	{r3, r4, r5, pc}
 801ef5a:	bf00      	nop
 801ef5c:	2000bc68 	.word	0x2000bc68
 801ef60:	20000000 	.word	0x20000000
 801ef64:	0801d8c3 	.word	0x0801d8c3
 801ef68:	20000060 	.word	0x20000060
 801ef6c:	2000bc6c 	.word	0x2000bc6c
 801ef70:	0801d8c1 	.word	0x0801d8c1
 801ef74:	20000064 	.word	0x20000064

0801ef78 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ef78:	b510      	push	{r4, lr}
 801ef7a:	4604      	mov	r4, r0
 801ef7c:	f7ff ff88 	bl	801ee90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ef80:	4620      	mov	r0, r4
 801ef82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef86:	f7ff bfbd 	b.w	801ef04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ef8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ef8c:	b538      	push	{r3, r4, r5, lr}
 801ef8e:	4c15      	ldr	r4, [pc, #84]	; (801efe4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ef90:	4605      	mov	r5, r0
 801ef92:	7823      	ldrb	r3, [r4, #0]
 801ef94:	f3bf 8f5b 	dmb	ish
 801ef98:	07da      	lsls	r2, r3, #31
 801ef9a:	d40b      	bmi.n	801efb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	f006 fbe4 	bl	802576a <__cxa_guard_acquire>
 801efa2:	b138      	cbz	r0, 801efb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801efa4:	4620      	mov	r0, r4
 801efa6:	f006 fbec 	bl	8025782 <__cxa_guard_release>
 801efaa:	4a0f      	ldr	r2, [pc, #60]	; (801efe8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801efac:	490f      	ldr	r1, [pc, #60]	; (801efec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801efae:	4810      	ldr	r0, [pc, #64]	; (801eff0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801efb0:	f006 fbd1 	bl	8025756 <__aeabi_atexit>
 801efb4:	4c0f      	ldr	r4, [pc, #60]	; (801eff4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801efb6:	7823      	ldrb	r3, [r4, #0]
 801efb8:	f3bf 8f5b 	dmb	ish
 801efbc:	07db      	lsls	r3, r3, #31
 801efbe:	d40b      	bmi.n	801efd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801efc0:	4620      	mov	r0, r4
 801efc2:	f006 fbd2 	bl	802576a <__cxa_guard_acquire>
 801efc6:	b138      	cbz	r0, 801efd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801efc8:	4620      	mov	r0, r4
 801efca:	f006 fbda 	bl	8025782 <__cxa_guard_release>
 801efce:	4a06      	ldr	r2, [pc, #24]	; (801efe8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801efd0:	4909      	ldr	r1, [pc, #36]	; (801eff8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801efd2:	480a      	ldr	r0, [pc, #40]	; (801effc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801efd4:	f006 fbbf 	bl	8025756 <__aeabi_atexit>
 801efd8:	4b05      	ldr	r3, [pc, #20]	; (801eff0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801efda:	642b      	str	r3, [r5, #64]	; 0x40
 801efdc:	4b07      	ldr	r3, [pc, #28]	; (801effc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801efde:	646b      	str	r3, [r5, #68]	; 0x44
 801efe0:	bd38      	pop	{r3, r4, r5, pc}
 801efe2:	bf00      	nop
 801efe4:	2000bc98 	.word	0x2000bc98
 801efe8:	20000000 	.word	0x20000000
 801efec:	0801d8b7 	.word	0x0801d8b7
 801eff0:	20000090 	.word	0x20000090
 801eff4:	2000bc9c 	.word	0x2000bc9c
 801eff8:	0801d8b5 	.word	0x0801d8b5
 801effc:	20000094 	.word	0x20000094

0801f000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f000:	b538      	push	{r3, r4, r5, lr}
 801f002:	4c15      	ldr	r4, [pc, #84]	; (801f058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f004:	4605      	mov	r5, r0
 801f006:	7823      	ldrb	r3, [r4, #0]
 801f008:	f3bf 8f5b 	dmb	ish
 801f00c:	07da      	lsls	r2, r3, #31
 801f00e:	d40b      	bmi.n	801f028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f010:	4620      	mov	r0, r4
 801f012:	f006 fbaa 	bl	802576a <__cxa_guard_acquire>
 801f016:	b138      	cbz	r0, 801f028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f018:	4620      	mov	r0, r4
 801f01a:	f006 fbb2 	bl	8025782 <__cxa_guard_release>
 801f01e:	4a0f      	ldr	r2, [pc, #60]	; (801f05c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f020:	490f      	ldr	r1, [pc, #60]	; (801f060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f022:	4810      	ldr	r0, [pc, #64]	; (801f064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f024:	f006 fb97 	bl	8025756 <__aeabi_atexit>
 801f028:	4c0f      	ldr	r4, [pc, #60]	; (801f068 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f02a:	7823      	ldrb	r3, [r4, #0]
 801f02c:	f3bf 8f5b 	dmb	ish
 801f030:	07db      	lsls	r3, r3, #31
 801f032:	d40b      	bmi.n	801f04c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f034:	4620      	mov	r0, r4
 801f036:	f006 fb98 	bl	802576a <__cxa_guard_acquire>
 801f03a:	b138      	cbz	r0, 801f04c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f03c:	4620      	mov	r0, r4
 801f03e:	f006 fba0 	bl	8025782 <__cxa_guard_release>
 801f042:	4a06      	ldr	r2, [pc, #24]	; (801f05c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f044:	4909      	ldr	r1, [pc, #36]	; (801f06c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f046:	480a      	ldr	r0, [pc, #40]	; (801f070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f048:	f006 fb85 	bl	8025756 <__aeabi_atexit>
 801f04c:	4b05      	ldr	r3, [pc, #20]	; (801f064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f04e:	63ab      	str	r3, [r5, #56]	; 0x38
 801f050:	4b07      	ldr	r3, [pc, #28]	; (801f070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f052:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f054:	bd38      	pop	{r3, r4, r5, pc}
 801f056:	bf00      	nop
 801f058:	2000bc78 	.word	0x2000bc78
 801f05c:	20000000 	.word	0x20000000
 801f060:	0801d8bb 	.word	0x0801d8bb
 801f064:	20000070 	.word	0x20000070
 801f068:	2000bc7c 	.word	0x2000bc7c
 801f06c:	0801d8b9 	.word	0x0801d8b9
 801f070:	20000074 	.word	0x20000074

0801f074 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f074:	b510      	push	{r4, lr}
 801f076:	4604      	mov	r4, r0
 801f078:	f7ff ff88 	bl	801ef8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f07c:	4620      	mov	r0, r4
 801f07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f082:	f7ff bfbd 	b.w	801f000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f088:	b538      	push	{r3, r4, r5, lr}
 801f08a:	4c15      	ldr	r4, [pc, #84]	; (801f0e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f08c:	4605      	mov	r5, r0
 801f08e:	7823      	ldrb	r3, [r4, #0]
 801f090:	f3bf 8f5b 	dmb	ish
 801f094:	07da      	lsls	r2, r3, #31
 801f096:	d40b      	bmi.n	801f0b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f098:	4620      	mov	r0, r4
 801f09a:	f006 fb66 	bl	802576a <__cxa_guard_acquire>
 801f09e:	b138      	cbz	r0, 801f0b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f0a0:	4620      	mov	r0, r4
 801f0a2:	f006 fb6e 	bl	8025782 <__cxa_guard_release>
 801f0a6:	4a0f      	ldr	r2, [pc, #60]	; (801f0e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f0a8:	490f      	ldr	r1, [pc, #60]	; (801f0e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f0aa:	4810      	ldr	r0, [pc, #64]	; (801f0ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f0ac:	f006 fb53 	bl	8025756 <__aeabi_atexit>
 801f0b0:	4c0f      	ldr	r4, [pc, #60]	; (801f0f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f0b2:	7823      	ldrb	r3, [r4, #0]
 801f0b4:	f3bf 8f5b 	dmb	ish
 801f0b8:	07db      	lsls	r3, r3, #31
 801f0ba:	d40b      	bmi.n	801f0d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f0bc:	4620      	mov	r0, r4
 801f0be:	f006 fb54 	bl	802576a <__cxa_guard_acquire>
 801f0c2:	b138      	cbz	r0, 801f0d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	f006 fb5c 	bl	8025782 <__cxa_guard_release>
 801f0ca:	4a06      	ldr	r2, [pc, #24]	; (801f0e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f0cc:	4909      	ldr	r1, [pc, #36]	; (801f0f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f0ce:	480a      	ldr	r0, [pc, #40]	; (801f0f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f0d0:	f006 fb41 	bl	8025756 <__aeabi_atexit>
 801f0d4:	4b05      	ldr	r3, [pc, #20]	; (801f0ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f0d6:	652b      	str	r3, [r5, #80]	; 0x50
 801f0d8:	4b07      	ldr	r3, [pc, #28]	; (801f0f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f0da:	656b      	str	r3, [r5, #84]	; 0x54
 801f0dc:	bd38      	pop	{r3, r4, r5, pc}
 801f0de:	bf00      	nop
 801f0e0:	2000bc70 	.word	0x2000bc70
 801f0e4:	20000000 	.word	0x20000000
 801f0e8:	0801d8af 	.word	0x0801d8af
 801f0ec:	20000068 	.word	0x20000068
 801f0f0:	2000bc74 	.word	0x2000bc74
 801f0f4:	0801d8ad 	.word	0x0801d8ad
 801f0f8:	2000006c 	.word	0x2000006c

0801f0fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f0fc:	b538      	push	{r3, r4, r5, lr}
 801f0fe:	4c15      	ldr	r4, [pc, #84]	; (801f154 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f100:	4605      	mov	r5, r0
 801f102:	7823      	ldrb	r3, [r4, #0]
 801f104:	f3bf 8f5b 	dmb	ish
 801f108:	07da      	lsls	r2, r3, #31
 801f10a:	d40b      	bmi.n	801f124 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f10c:	4620      	mov	r0, r4
 801f10e:	f006 fb2c 	bl	802576a <__cxa_guard_acquire>
 801f112:	b138      	cbz	r0, 801f124 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f114:	4620      	mov	r0, r4
 801f116:	f006 fb34 	bl	8025782 <__cxa_guard_release>
 801f11a:	4a0f      	ldr	r2, [pc, #60]	; (801f158 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f11c:	490f      	ldr	r1, [pc, #60]	; (801f15c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f11e:	4810      	ldr	r0, [pc, #64]	; (801f160 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f120:	f006 fb19 	bl	8025756 <__aeabi_atexit>
 801f124:	4c0f      	ldr	r4, [pc, #60]	; (801f164 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f126:	7823      	ldrb	r3, [r4, #0]
 801f128:	f3bf 8f5b 	dmb	ish
 801f12c:	07db      	lsls	r3, r3, #31
 801f12e:	d40b      	bmi.n	801f148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f130:	4620      	mov	r0, r4
 801f132:	f006 fb1a 	bl	802576a <__cxa_guard_acquire>
 801f136:	b138      	cbz	r0, 801f148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f138:	4620      	mov	r0, r4
 801f13a:	f006 fb22 	bl	8025782 <__cxa_guard_release>
 801f13e:	4a06      	ldr	r2, [pc, #24]	; (801f158 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f140:	4909      	ldr	r1, [pc, #36]	; (801f168 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f142:	480a      	ldr	r0, [pc, #40]	; (801f16c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f144:	f006 fb07 	bl	8025756 <__aeabi_atexit>
 801f148:	4b05      	ldr	r3, [pc, #20]	; (801f160 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f14a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f14c:	4b07      	ldr	r3, [pc, #28]	; (801f16c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f14e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f150:	bd38      	pop	{r3, r4, r5, pc}
 801f152:	bf00      	nop
 801f154:	2000bc60 	.word	0x2000bc60
 801f158:	20000000 	.word	0x20000000
 801f15c:	0801d8b3 	.word	0x0801d8b3
 801f160:	20000058 	.word	0x20000058
 801f164:	2000bc64 	.word	0x2000bc64
 801f168:	0801d8b1 	.word	0x0801d8b1
 801f16c:	2000005c 	.word	0x2000005c

0801f170 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f170:	b510      	push	{r4, lr}
 801f172:	4604      	mov	r4, r0
 801f174:	f7ff ff88 	bl	801f088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f178:	4620      	mov	r0, r4
 801f17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f17e:	f7ff bfbd 	b.w	801f0fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f182 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f182:	b510      	push	{r4, lr}
 801f184:	4604      	mov	r4, r0
 801f186:	f7ff fff3 	bl	801f170 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f18a:	4620      	mov	r0, r4
 801f18c:	f7ff ff72 	bl	801f074 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f190:	4620      	mov	r0, r4
 801f192:	f7ff fe73 	bl	801ee7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f196:	4620      	mov	r0, r4
 801f198:	f7ff fdf2 	bl	801ed80 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f19c:	4620      	mov	r0, r4
 801f19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1a2:	f7ff bee9 	b.w	801ef78 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1ac:	b087      	sub	sp, #28
 801f1ae:	7888      	ldrb	r0, [r1, #2]
 801f1b0:	4616      	mov	r6, r2
 801f1b2:	9001      	str	r0, [sp, #4]
 801f1b4:	7848      	ldrb	r0, [r1, #1]
 801f1b6:	9100      	str	r1, [sp, #0]
 801f1b8:	9002      	str	r0, [sp, #8]
 801f1ba:	7808      	ldrb	r0, [r1, #0]
 801f1bc:	9901      	ldr	r1, [sp, #4]
 801f1be:	9003      	str	r0, [sp, #12]
 801f1c0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f1c4:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f1c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f1cc:	9902      	ldr	r1, [sp, #8]
 801f1ce:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f1d2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f1d6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f1da:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f1de:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f1e2:	9005      	str	r0, [sp, #20]
 801f1e4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f1e8:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f1ec:	2d00      	cmp	r5, #0
 801f1ee:	eb06 080a 	add.w	r8, r6, sl
 801f1f2:	db4a      	blt.n	801f28a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f1f4:	45a9      	cmp	r9, r5
 801f1f6:	dd48      	ble.n	801f28a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f1f8:	f1bc 0f00 	cmp.w	ip, #0
 801f1fc:	db43      	blt.n	801f286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f1fe:	45e6      	cmp	lr, ip
 801f200:	dd41      	ble.n	801f286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f202:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f206:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f20a:	441e      	add	r6, r3
 801f20c:	f11c 0001 	adds.w	r0, ip, #1
 801f210:	d43e      	bmi.n	801f290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f212:	4586      	cmp	lr, r0
 801f214:	dd3c      	ble.n	801f290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f216:	2a00      	cmp	r2, #0
 801f218:	d03a      	beq.n	801f290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f21a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f21e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f222:	4418      	add	r0, r3
 801f224:	3501      	adds	r5, #1
 801f226:	d437      	bmi.n	801f298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f228:	45a9      	cmp	r9, r5
 801f22a:	dd35      	ble.n	801f298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f22c:	b3a4      	cbz	r4, 801f298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f22e:	f1bc 0f00 	cmp.w	ip, #0
 801f232:	db2f      	blt.n	801f294 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f234:	45e6      	cmp	lr, ip
 801f236:	dd2d      	ble.n	801f294 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f238:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f23c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f240:	441d      	add	r5, r3
 801f242:	f11c 0c01 	adds.w	ip, ip, #1
 801f246:	d42a      	bmi.n	801f29e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f248:	45e6      	cmp	lr, ip
 801f24a:	dd28      	ble.n	801f29e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f24c:	b33a      	cbz	r2, 801f29e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f24e:	44c6      	add	lr, r8
 801f250:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f254:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f258:	4463      	add	r3, ip
 801f25a:	ea6f 0c07 	mvn.w	ip, r7
 801f25e:	2a0f      	cmp	r2, #15
 801f260:	f896 a000 	ldrb.w	sl, [r6]
 801f264:	fa5f fc8c 	uxtb.w	ip, ip
 801f268:	f890 b000 	ldrb.w	fp, [r0]
 801f26c:	f895 9000 	ldrb.w	r9, [r5]
 801f270:	7819      	ldrb	r1, [r3, #0]
 801f272:	d801      	bhi.n	801f278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f274:	2c0f      	cmp	r4, #15
 801f276:	d914      	bls.n	801f2a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f278:	4b40      	ldr	r3, [pc, #256]	; (801f37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f27a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f27e:	4a40      	ldr	r2, [pc, #256]	; (801f380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f280:	4840      	ldr	r0, [pc, #256]	; (801f384 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f282:	f006 fa9b 	bl	80257bc <__assert_func>
 801f286:	ae05      	add	r6, sp, #20
 801f288:	e7c0      	b.n	801f20c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f28a:	a805      	add	r0, sp, #20
 801f28c:	4606      	mov	r6, r0
 801f28e:	e7c9      	b.n	801f224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f290:	a805      	add	r0, sp, #20
 801f292:	e7c7      	b.n	801f224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f294:	ad05      	add	r5, sp, #20
 801f296:	e7d4      	b.n	801f242 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f298:	ab05      	add	r3, sp, #20
 801f29a:	461d      	mov	r5, r3
 801f29c:	e7dd      	b.n	801f25a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f29e:	ab05      	add	r3, sp, #20
 801f2a0:	e7db      	b.n	801f25a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f2a2:	b292      	uxth	r2, r2
 801f2a4:	b2a4      	uxth	r4, r4
 801f2a6:	fa1f fc8c 	uxth.w	ip, ip
 801f2aa:	fb02 f804 	mul.w	r8, r2, r4
 801f2ae:	0112      	lsls	r2, r2, #4
 801f2b0:	b2bf      	uxth	r7, r7
 801f2b2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f2b6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f2ba:	eba2 0208 	sub.w	r2, r2, r8
 801f2be:	b2a4      	uxth	r4, r4
 801f2c0:	b292      	uxth	r2, r2
 801f2c2:	ebae 0e04 	sub.w	lr, lr, r4
 801f2c6:	fb02 fb0b 	mul.w	fp, r2, fp
 801f2ca:	fa1f fe8e 	uxth.w	lr, lr
 801f2ce:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f2d2:	fb04 aa09 	mla	sl, r4, r9, sl
 801f2d6:	fb08 aa01 	mla	sl, r8, r1, sl
 801f2da:	9903      	ldr	r1, [sp, #12]
 801f2dc:	fb11 f90c 	smulbb	r9, r1, ip
 801f2e0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f2e4:	9900      	ldr	r1, [sp, #0]
 801f2e6:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f2ea:	fa1f fa8a 	uxth.w	sl, sl
 801f2ee:	f10a 0901 	add.w	r9, sl, #1
 801f2f2:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f2f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f2fa:	f881 a000 	strb.w	sl, [r1]
 801f2fe:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f302:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f306:	fb02 fa0a 	mul.w	sl, r2, sl
 801f30a:	9902      	ldr	r1, [sp, #8]
 801f30c:	fb0e aa09 	mla	sl, lr, r9, sl
 801f310:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f314:	fb04 aa09 	mla	sl, r4, r9, sl
 801f318:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f31c:	fb08 a909 	mla	r9, r8, r9, sl
 801f320:	fb11 fa0c 	smulbb	sl, r1, ip
 801f324:	9900      	ldr	r1, [sp, #0]
 801f326:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f32a:	fb09 a907 	mla	r9, r9, r7, sl
 801f32e:	fa1f f989 	uxth.w	r9, r9
 801f332:	f109 0a01 	add.w	sl, r9, #1
 801f336:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f33a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f33e:	f881 9001 	strb.w	r9, [r1, #1]
 801f342:	7880      	ldrb	r0, [r0, #2]
 801f344:	78b6      	ldrb	r6, [r6, #2]
 801f346:	4342      	muls	r2, r0
 801f348:	78a8      	ldrb	r0, [r5, #2]
 801f34a:	789b      	ldrb	r3, [r3, #2]
 801f34c:	fb0e 2206 	mla	r2, lr, r6, r2
 801f350:	fb04 2400 	mla	r4, r4, r0, r2
 801f354:	fb08 4803 	mla	r8, r8, r3, r4
 801f358:	9b01      	ldr	r3, [sp, #4]
 801f35a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f35e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f362:	fb08 c707 	mla	r7, r8, r7, ip
 801f366:	b2bf      	uxth	r7, r7
 801f368:	f107 0c01 	add.w	ip, r7, #1
 801f36c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f370:	123f      	asrs	r7, r7, #8
 801f372:	708f      	strb	r7, [r1, #2]
 801f374:	b007      	add	sp, #28
 801f376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f37a:	bf00      	nop
 801f37c:	0802af2d 	.word	0x0802af2d
 801f380:	0802b426 	.word	0x0802b426
 801f384:	0802aff6 	.word	0x0802aff6

0801f388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f38c:	ed2d 8b08 	vpush	{d8-d11}
 801f390:	b095      	sub	sp, #84	; 0x54
 801f392:	eeb0 aa40 	vmov.f32	s20, s0
 801f396:	eef0 9a60 	vmov.f32	s19, s1
 801f39a:	930a      	str	r3, [sp, #40]	; 0x28
 801f39c:	eeb0 9a41 	vmov.f32	s18, s2
 801f3a0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f3a4:	eeb0 8a62 	vmov.f32	s16, s5
 801f3a8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f3aa:	eef0 8a43 	vmov.f32	s17, s6
 801f3ae:	930c      	str	r3, [sp, #48]	; 0x30
 801f3b0:	eef0 ba44 	vmov.f32	s23, s8
 801f3b4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f3b8:	eeb0 ba64 	vmov.f32	s22, s9
 801f3bc:	9013      	str	r0, [sp, #76]	; 0x4c
 801f3be:	eef0 aa45 	vmov.f32	s21, s10
 801f3c2:	9310      	str	r3, [sp, #64]	; 0x40
 801f3c4:	6860      	ldr	r0, [r4, #4]
 801f3c6:	910f      	str	r1, [sp, #60]	; 0x3c
 801f3c8:	9212      	str	r2, [sp, #72]	; 0x48
 801f3ca:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f3cc:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f3d0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f3d4:	fb00 1303 	mla	r3, r0, r3, r1
 801f3d8:	6821      	ldr	r1, [r4, #0]
 801f3da:	6854      	ldr	r4, [r2, #4]
 801f3dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3e0:	18cb      	adds	r3, r1, r3
 801f3e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3e4:	6813      	ldr	r3, [r2, #0]
 801f3e6:	930e      	str	r3, [sp, #56]	; 0x38
 801f3e8:	1d23      	adds	r3, r4, #4
 801f3ea:	9309      	str	r3, [sp, #36]	; 0x24
 801f3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3ee:	43db      	mvns	r3, r3
 801f3f0:	b2db      	uxtb	r3, r3
 801f3f2:	930d      	str	r3, [sp, #52]	; 0x34
 801f3f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	dc03      	bgt.n	801f402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	f340 823c 	ble.w	801f87a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f404:	2b00      	cmp	r3, #0
 801f406:	f340 8115 	ble.w	801f634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f40a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f40c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f40e:	1412      	asrs	r2, r2, #16
 801f410:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f414:	d431      	bmi.n	801f47a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f416:	1c51      	adds	r1, r2, #1
 801f418:	428d      	cmp	r5, r1
 801f41a:	dd31      	ble.n	801f480 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	db2f      	blt.n	801f480 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f420:	1c59      	adds	r1, r3, #1
 801f422:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f424:	4288      	cmp	r0, r1
 801f426:	dd2b      	ble.n	801f480 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f42a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f42c:	3b01      	subs	r3, #1
 801f42e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f430:	fb02 1203 	mla	r2, r2, r3, r1
 801f434:	1412      	asrs	r2, r2, #16
 801f436:	d42d      	bmi.n	801f494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f438:	3201      	adds	r2, #1
 801f43a:	4295      	cmp	r5, r2
 801f43c:	dd2a      	ble.n	801f494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f43e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f440:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f442:	fb02 1303 	mla	r3, r2, r3, r1
 801f446:	141b      	asrs	r3, r3, #16
 801f448:	d424      	bmi.n	801f494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f44a:	3301      	adds	r3, #1
 801f44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f44e:	429a      	cmp	r2, r3
 801f450:	dd20      	ble.n	801f494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f454:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f458:	f103 0c03 	add.w	ip, r3, #3
 801f45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f45e:	9311      	str	r3, [sp, #68]	; 0x44
 801f460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f462:	2b00      	cmp	r3, #0
 801f464:	f300 814f 	bgt.w	801f706 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f46c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f470:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f474:	441a      	add	r2, r3
 801f476:	920b      	str	r2, [sp, #44]	; 0x2c
 801f478:	e0de      	b.n	801f638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f47a:	1c51      	adds	r1, r2, #1
 801f47c:	f040 80cb 	bne.w	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f480:	42aa      	cmp	r2, r5
 801f482:	f280 80c8 	bge.w	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f486:	1c5f      	adds	r7, r3, #1
 801f488:	f2c0 80c5 	blt.w	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f48e:	4293      	cmp	r3, r2
 801f490:	f280 80c1 	bge.w	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f496:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f498:	9311      	str	r3, [sp, #68]	; 0x44
 801f49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	dde3      	ble.n	801f468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f4a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f4a2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f4a4:	141a      	asrs	r2, r3, #16
 801f4a6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f4a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f4aa:	1400      	asrs	r0, r0, #16
 801f4ac:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f4b0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f4b4:	f100 810e 	bmi.w	801f6d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f4b8:	1c46      	adds	r6, r0, #1
 801f4ba:	42b5      	cmp	r5, r6
 801f4bc:	f340 810c 	ble.w	801f6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f4c0:	2a00      	cmp	r2, #0
 801f4c2:	f2c0 8109 	blt.w	801f6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f4c6:	1c56      	adds	r6, r2, #1
 801f4c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f4ca:	42b4      	cmp	r4, r6
 801f4cc:	f340 8104 	ble.w	801f6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f4d0:	fb02 0005 	mla	r0, r2, r5, r0
 801f4d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f4d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4d8:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f4dc:	4402      	add	r2, r0
 801f4de:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f4e4:	eb00 080e 	add.w	r8, r0, lr
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f000 80e4 	beq.w	801f6b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f4ee:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f4f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f4f6:	4484      	add	ip, r0
 801f4f8:	2900      	cmp	r1, #0
 801f4fa:	f000 80e5 	beq.w	801f6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f4fe:	1950      	adds	r0, r2, r5
 801f500:	5d52      	ldrb	r2, [r2, r5]
 801f502:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f504:	7840      	ldrb	r0, [r0, #1]
 801f506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f50a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f50e:	4422      	add	r2, r4
 801f510:	4420      	add	r0, r4
 801f512:	b29b      	uxth	r3, r3
 801f514:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f516:	b289      	uxth	r1, r1
 801f518:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f51c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f520:	fb03 fa01 	mul.w	sl, r3, r1
 801f524:	011b      	lsls	r3, r3, #4
 801f526:	f89c e000 	ldrb.w	lr, [ip]
 801f52a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f52e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f532:	eba3 030a 	sub.w	r3, r3, sl
 801f536:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f538:	b289      	uxth	r1, r1
 801f53a:	b29b      	uxth	r3, r3
 801f53c:	eba9 0901 	sub.w	r9, r9, r1
 801f540:	fb03 fe0e 	mul.w	lr, r3, lr
 801f544:	fa1f f989 	uxth.w	r9, r9
 801f548:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f54c:	f892 b000 	ldrb.w	fp, [r2]
 801f550:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f554:	f890 b000 	ldrb.w	fp, [r0]
 801f558:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f55c:	f897 b000 	ldrb.w	fp, [r7]
 801f560:	fb1b fb04 	smulbb	fp, fp, r4
 801f564:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f568:	fb0e be06 	mla	lr, lr, r6, fp
 801f56c:	fa1f fe8e 	uxth.w	lr, lr
 801f570:	f10e 0b01 	add.w	fp, lr, #1
 801f574:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f578:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f57c:	f887 b000 	strb.w	fp, [r7]
 801f580:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f584:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f588:	fb03 fe0e 	mul.w	lr, r3, lr
 801f58c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f590:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f594:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f598:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f59c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f5a0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f5a4:	fb1b fb04 	smulbb	fp, fp, r4
 801f5a8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f5ac:	fb0e be06 	mla	lr, lr, r6, fp
 801f5b0:	fa1f fe8e 	uxth.w	lr, lr
 801f5b4:	f10e 0b01 	add.w	fp, lr, #1
 801f5b8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f5bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f5c0:	f887 e001 	strb.w	lr, [r7, #1]
 801f5c4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f5c8:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f5cc:	fb03 f30c 	mul.w	r3, r3, ip
 801f5d0:	fb09 330e 	mla	r3, r9, lr, r3
 801f5d4:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f5d8:	7882      	ldrb	r2, [r0, #2]
 801f5da:	fb01 310e 	mla	r1, r1, lr, r3
 801f5de:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f5e2:	78b9      	ldrb	r1, [r7, #2]
 801f5e4:	fb11 f104 	smulbb	r1, r1, r4
 801f5e8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f5ec:	fb0a 1606 	mla	r6, sl, r6, r1
 801f5f0:	b2b6      	uxth	r6, r6
 801f5f2:	1c73      	adds	r3, r6, #1
 801f5f4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f5f8:	1236      	asrs	r6, r6, #8
 801f5fa:	70be      	strb	r6, [r7, #2]
 801f5fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f5fe:	3703      	adds	r7, #3
 801f600:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f602:	4413      	add	r3, r2
 801f604:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f606:	9327      	str	r3, [sp, #156]	; 0x9c
 801f608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f60a:	4413      	add	r3, r2
 801f60c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f60e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f610:	3b01      	subs	r3, #1
 801f612:	9311      	str	r3, [sp, #68]	; 0x44
 801f614:	e741      	b.n	801f49a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f616:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f618:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f61a:	4413      	add	r3, r2
 801f61c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f61e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f620:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f622:	4413      	add	r3, r2
 801f624:	9328      	str	r3, [sp, #160]	; 0xa0
 801f626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f628:	3b01      	subs	r3, #1
 801f62a:	930a      	str	r3, [sp, #40]	; 0x28
 801f62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f62e:	3303      	adds	r3, #3
 801f630:	930b      	str	r3, [sp, #44]	; 0x2c
 801f632:	e6e6      	b.n	801f402 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f634:	f47f aef8 	bne.w	801f428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	f340 811d 	ble.w	801f87a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f646:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f64a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f64e:	eef0 6a48 	vmov.f32	s13, s16
 801f652:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f656:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f65a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f65e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f662:	eef0 6a68 	vmov.f32	s13, s17
 801f666:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f66a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f66e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f672:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f676:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f67a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f67e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f682:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f686:	ee18 2a10 	vmov	r2, s16
 801f68a:	eeb0 8a47 	vmov.f32	s16, s14
 801f68e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f692:	ee18 2a90 	vmov	r2, s17
 801f696:	9329      	str	r3, [sp, #164]	; 0xa4
 801f698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f69a:	eef0 8a67 	vmov.f32	s17, s15
 801f69e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6a2:	932a      	str	r3, [sp, #168]	; 0xa8
 801f6a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6a8:	3b01      	subs	r3, #1
 801f6aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f6ae:	bf08      	it	eq
 801f6b0:	4613      	moveq	r3, r2
 801f6b2:	930a      	str	r3, [sp, #40]	; 0x28
 801f6b4:	e69e      	b.n	801f3f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f6b6:	b151      	cbz	r1, 801f6ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f6b8:	5d52      	ldrb	r2, [r2, r5]
 801f6ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6c0:	4402      	add	r2, r0
 801f6c2:	4640      	mov	r0, r8
 801f6c4:	46c4      	mov	ip, r8
 801f6c6:	e724      	b.n	801f512 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f6c8:	4640      	mov	r0, r8
 801f6ca:	4642      	mov	r2, r8
 801f6cc:	e721      	b.n	801f512 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f6ce:	4640      	mov	r0, r8
 801f6d0:	4642      	mov	r2, r8
 801f6d2:	e7f7      	b.n	801f6c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f6d4:	1c46      	adds	r6, r0, #1
 801f6d6:	d191      	bne.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f6d8:	4285      	cmp	r5, r0
 801f6da:	dd8f      	ble.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f6dc:	1c54      	adds	r4, r2, #1
 801f6de:	db8d      	blt.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f6e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f6e2:	4294      	cmp	r4, r2
 801f6e4:	dd8a      	ble.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f6e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f6e8:	9002      	str	r0, [sp, #8]
 801f6ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f6ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f6f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f6f4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f6f8:	e9cd 5300 	strd	r5, r3, [sp]
 801f6fc:	4639      	mov	r1, r7
 801f6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f700:	f7ff fd52 	bl	801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f704:	e77a      	b.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f706:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f708:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f70a:	1410      	asrs	r0, r2, #16
 801f70c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f710:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f712:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f714:	1412      	asrs	r2, r2, #16
 801f716:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f71a:	fb05 2000 	mla	r0, r5, r0, r2
 801f71e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f720:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f724:	4402      	add	r2, r0
 801f726:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f728:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f72c:	eb00 0708 	add.w	r7, r0, r8
 801f730:	2b00      	cmp	r3, #0
 801f732:	f000 8093 	beq.w	801f85c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f736:	7856      	ldrb	r6, [r2, #1]
 801f738:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f73c:	4406      	add	r6, r0
 801f73e:	2900      	cmp	r1, #0
 801f740:	f000 8095 	beq.w	801f86e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f744:	1950      	adds	r0, r2, r5
 801f746:	5d52      	ldrb	r2, [r2, r5]
 801f748:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f74a:	7840      	ldrb	r0, [r0, #1]
 801f74c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f754:	4422      	add	r2, r4
 801f756:	4420      	add	r0, r4
 801f758:	b29b      	uxth	r3, r3
 801f75a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f75c:	b289      	uxth	r1, r1
 801f75e:	f10c 0c03 	add.w	ip, ip, #3
 801f762:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f766:	fb03 f901 	mul.w	r9, r3, r1
 801f76a:	011b      	lsls	r3, r3, #4
 801f76c:	f896 8000 	ldrb.w	r8, [r6]
 801f770:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f774:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f778:	eba3 0309 	sub.w	r3, r3, r9
 801f77c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f77e:	b289      	uxth	r1, r1
 801f780:	b29b      	uxth	r3, r3
 801f782:	ebae 0e01 	sub.w	lr, lr, r1
 801f786:	fb03 f808 	mul.w	r8, r3, r8
 801f78a:	fa1f fe8e 	uxth.w	lr, lr
 801f78e:	fb0e 880b 	mla	r8, lr, fp, r8
 801f792:	f892 b000 	ldrb.w	fp, [r2]
 801f796:	fb01 880b 	mla	r8, r1, fp, r8
 801f79a:	f890 b000 	ldrb.w	fp, [r0]
 801f79e:	fb09 880b 	mla	r8, r9, fp, r8
 801f7a2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f7a6:	fb1b fb04 	smulbb	fp, fp, r4
 801f7aa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f7ae:	fb08 b80a 	mla	r8, r8, sl, fp
 801f7b2:	fa1f f888 	uxth.w	r8, r8
 801f7b6:	f108 0b01 	add.w	fp, r8, #1
 801f7ba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7be:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7c2:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f7c6:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f7ca:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f7ce:	fb03 f808 	mul.w	r8, r3, r8
 801f7d2:	fb0e 880b 	mla	r8, lr, fp, r8
 801f7d6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f7da:	fb01 880b 	mla	r8, r1, fp, r8
 801f7de:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f7e2:	fb09 880b 	mla	r8, r9, fp, r8
 801f7e6:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f7ea:	fb1b fb04 	smulbb	fp, fp, r4
 801f7ee:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f7f2:	fb08 b80a 	mla	r8, r8, sl, fp
 801f7f6:	fa1f f888 	uxth.w	r8, r8
 801f7fa:	f108 0b01 	add.w	fp, r8, #1
 801f7fe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f802:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f806:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f80a:	78b6      	ldrb	r6, [r6, #2]
 801f80c:	78bf      	ldrb	r7, [r7, #2]
 801f80e:	4373      	muls	r3, r6
 801f810:	7896      	ldrb	r6, [r2, #2]
 801f812:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f814:	fb0e 3307 	mla	r3, lr, r7, r3
 801f818:	fb01 3306 	mla	r3, r1, r6, r3
 801f81c:	7886      	ldrb	r6, [r0, #2]
 801f81e:	fb09 3906 	mla	r9, r9, r6, r3
 801f822:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f826:	fb13 f304 	smulbb	r3, r3, r4
 801f82a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f82e:	fb09 390a 	mla	r9, r9, sl, r3
 801f832:	fa1f f989 	uxth.w	r9, r9
 801f836:	f109 0301 	add.w	r3, r9, #1
 801f83a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f83e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f840:	4413      	add	r3, r2
 801f842:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f844:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f848:	9327      	str	r3, [sp, #156]	; 0x9c
 801f84a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f84c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f850:	4413      	add	r3, r2
 801f852:	9328      	str	r3, [sp, #160]	; 0xa0
 801f854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f856:	3b01      	subs	r3, #1
 801f858:	9311      	str	r3, [sp, #68]	; 0x44
 801f85a:	e601      	b.n	801f460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f85c:	b151      	cbz	r1, 801f874 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f85e:	5d52      	ldrb	r2, [r2, r5]
 801f860:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f862:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f866:	4402      	add	r2, r0
 801f868:	4638      	mov	r0, r7
 801f86a:	463e      	mov	r6, r7
 801f86c:	e774      	b.n	801f758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f86e:	4638      	mov	r0, r7
 801f870:	463a      	mov	r2, r7
 801f872:	e771      	b.n	801f758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f874:	4638      	mov	r0, r7
 801f876:	463a      	mov	r2, r7
 801f878:	e7f7      	b.n	801f86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f87a:	b015      	add	sp, #84	; 0x54
 801f87c:	ecbd 8b08 	vpop	{d8-d11}
 801f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f888:	780d      	ldrb	r5, [r1, #0]
 801f88a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f88e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f892:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f896:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f89a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f89e:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f8a2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f8a6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f8aa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f8ae:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f8b2:	9501      	str	r5, [sp, #4]
 801f8b4:	fb06 470c 	mla	r7, r6, ip, r4
 801f8b8:	2e00      	cmp	r6, #0
 801f8ba:	eb02 0e07 	add.w	lr, r2, r7
 801f8be:	db46      	blt.n	801f94e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f8c0:	45b0      	cmp	r8, r6
 801f8c2:	dd44      	ble.n	801f94e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f8c4:	2c00      	cmp	r4, #0
 801f8c6:	db40      	blt.n	801f94a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f8c8:	45a4      	cmp	ip, r4
 801f8ca:	dd3e      	ble.n	801f94a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f8cc:	5dd7      	ldrb	r7, [r2, r7]
 801f8ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f8d2:	441f      	add	r7, r3
 801f8d4:	1c62      	adds	r2, r4, #1
 801f8d6:	d43d      	bmi.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f8d8:	4594      	cmp	ip, r2
 801f8da:	dd3b      	ble.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f8dc:	f1ba 0f00 	cmp.w	sl, #0
 801f8e0:	d038      	beq.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f8e2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f8e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f8ea:	441d      	add	r5, r3
 801f8ec:	3601      	adds	r6, #1
 801f8ee:	d435      	bmi.n	801f95c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f8f0:	45b0      	cmp	r8, r6
 801f8f2:	dd33      	ble.n	801f95c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f8f4:	b390      	cbz	r0, 801f95c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f8f6:	2c00      	cmp	r4, #0
 801f8f8:	db2e      	blt.n	801f958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f8fa:	45a4      	cmp	ip, r4
 801f8fc:	dd2c      	ble.n	801f958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f8fe:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f902:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f906:	441e      	add	r6, r3
 801f908:	1c62      	adds	r2, r4, #1
 801f90a:	d42a      	bmi.n	801f962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f90c:	4594      	cmp	ip, r2
 801f90e:	dd28      	ble.n	801f962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f910:	f1ba 0f00 	cmp.w	sl, #0
 801f914:	d025      	beq.n	801f962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f916:	44f4      	add	ip, lr
 801f918:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f91c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f920:	4413      	add	r3, r2
 801f922:	f1ba 0f0f 	cmp.w	sl, #15
 801f926:	f897 8000 	ldrb.w	r8, [r7]
 801f92a:	f895 9000 	ldrb.w	r9, [r5]
 801f92e:	f896 e000 	ldrb.w	lr, [r6]
 801f932:	f893 c000 	ldrb.w	ip, [r3]
 801f936:	d801      	bhi.n	801f93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f938:	280f      	cmp	r0, #15
 801f93a:	d914      	bls.n	801f966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f93c:	4b29      	ldr	r3, [pc, #164]	; (801f9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f93e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f942:	4a29      	ldr	r2, [pc, #164]	; (801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f944:	4829      	ldr	r0, [pc, #164]	; (801f9ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f946:	f005 ff39 	bl	80257bc <__assert_func>
 801f94a:	af01      	add	r7, sp, #4
 801f94c:	e7c2      	b.n	801f8d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f94e:	ad01      	add	r5, sp, #4
 801f950:	462f      	mov	r7, r5
 801f952:	e7cb      	b.n	801f8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f954:	ad01      	add	r5, sp, #4
 801f956:	e7c9      	b.n	801f8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f958:	ae01      	add	r6, sp, #4
 801f95a:	e7d5      	b.n	801f908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f95c:	ab01      	add	r3, sp, #4
 801f95e:	461e      	mov	r6, r3
 801f960:	e7df      	b.n	801f922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f962:	ab01      	add	r3, sp, #4
 801f964:	e7dd      	b.n	801f922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f966:	fa1f f48a 	uxth.w	r4, sl
 801f96a:	b280      	uxth	r0, r0
 801f96c:	fb04 fa00 	mul.w	sl, r4, r0
 801f970:	0124      	lsls	r4, r4, #4
 801f972:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f976:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f97a:	b282      	uxth	r2, r0
 801f97c:	eba4 000a 	sub.w	r0, r4, sl
 801f980:	ebab 0b02 	sub.w	fp, fp, r2
 801f984:	b280      	uxth	r0, r0
 801f986:	fa1f fb8b 	uxth.w	fp, fp
 801f98a:	fb00 f909 	mul.w	r9, r0, r9
 801f98e:	fb0b 9808 	mla	r8, fp, r8, r9
 801f992:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f996:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f99a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f99e:	f881 c000 	strb.w	ip, [r1]
 801f9a2:	786c      	ldrb	r4, [r5, #1]
 801f9a4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f9a8:	4344      	muls	r4, r0
 801f9aa:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f9ae:	7874      	ldrb	r4, [r6, #1]
 801f9b0:	fb02 cc04 	mla	ip, r2, r4, ip
 801f9b4:	785c      	ldrb	r4, [r3, #1]
 801f9b6:	fb0a c404 	mla	r4, sl, r4, ip
 801f9ba:	1224      	asrs	r4, r4, #8
 801f9bc:	704c      	strb	r4, [r1, #1]
 801f9be:	78ad      	ldrb	r5, [r5, #2]
 801f9c0:	78bc      	ldrb	r4, [r7, #2]
 801f9c2:	4368      	muls	r0, r5
 801f9c4:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f9c8:	78b0      	ldrb	r0, [r6, #2]
 801f9ca:	fb02 b000 	mla	r0, r2, r0, fp
 801f9ce:	789a      	ldrb	r2, [r3, #2]
 801f9d0:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f9d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f9d8:	f881 a002 	strb.w	sl, [r1, #2]
 801f9dc:	b003      	add	sp, #12
 801f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9e2:	bf00      	nop
 801f9e4:	0802af2d 	.word	0x0802af2d
 801f9e8:	0802b426 	.word	0x0802b426
 801f9ec:	0802aff6 	.word	0x0802aff6

0801f9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9f4:	ed2d 8b0a 	vpush	{d8-d12}
 801f9f8:	b08f      	sub	sp, #60	; 0x3c
 801f9fa:	eeb0 aa40 	vmov.f32	s20, s0
 801f9fe:	eef0 9a60 	vmov.f32	s19, s1
 801fa02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801fa04:	eeb0 9a41 	vmov.f32	s18, s2
 801fa08:	9307      	str	r3, [sp, #28]
 801fa0a:	eeb0 8a62 	vmov.f32	s16, s5
 801fa0e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801fa12:	eef0 8a43 	vmov.f32	s17, s6
 801fa16:	900d      	str	r0, [sp, #52]	; 0x34
 801fa18:	eeb0 ca44 	vmov.f32	s24, s8
 801fa1c:	6860      	ldr	r0, [r4, #4]
 801fa1e:	eef0 ba64 	vmov.f32	s23, s9
 801fa22:	9309      	str	r3, [sp, #36]	; 0x24
 801fa24:	eeb0 ba45 	vmov.f32	s22, s10
 801fa28:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fa2c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801fa30:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801fa34:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fa38:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fa3a:	fb00 1303 	mla	r3, r0, r3, r1
 801fa3e:	6821      	ldr	r1, [r4, #0]
 801fa40:	6854      	ldr	r4, [r2, #4]
 801fa42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa46:	3404      	adds	r4, #4
 801fa48:	18cb      	adds	r3, r1, r3
 801fa4a:	9308      	str	r3, [sp, #32]
 801fa4c:	6813      	ldr	r3, [r2, #0]
 801fa4e:	930a      	str	r3, [sp, #40]	; 0x28
 801fa50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	dc03      	bgt.n	801fa5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fa56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	f340 81d2 	ble.w	801fe02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fa5e:	9b07      	ldr	r3, [sp, #28]
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	f340 80e3 	ble.w	801fc2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801fa66:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fa68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa6a:	1412      	asrs	r2, r2, #16
 801fa6c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fa70:	d42f      	bmi.n	801fad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801fa72:	1c51      	adds	r1, r2, #1
 801fa74:	428d      	cmp	r5, r1
 801fa76:	dd2f      	ble.n	801fad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	db2d      	blt.n	801fad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fa7c:	1c59      	adds	r1, r3, #1
 801fa7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa80:	4288      	cmp	r0, r1
 801fa82:	dd29      	ble.n	801fad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fa84:	9b07      	ldr	r3, [sp, #28]
 801fa86:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fa88:	3b01      	subs	r3, #1
 801fa8a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fa8c:	fb02 1203 	mla	r2, r2, r3, r1
 801fa90:	1412      	asrs	r2, r2, #16
 801fa92:	d42b      	bmi.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fa94:	3201      	adds	r2, #1
 801fa96:	4295      	cmp	r5, r2
 801fa98:	dd28      	ble.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fa9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fa9c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa9e:	fb02 1303 	mla	r3, r2, r3, r1
 801faa2:	141b      	asrs	r3, r3, #16
 801faa4:	d422      	bmi.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801faa6:	3301      	adds	r3, #1
 801faa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801faaa:	429a      	cmp	r2, r3
 801faac:	dd1e      	ble.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801faae:	9b08      	ldr	r3, [sp, #32]
 801fab0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fab4:	f103 0803 	add.w	r8, r3, #3
 801fab8:	f1ba 0f00 	cmp.w	sl, #0
 801fabc:	f300 8119 	bgt.w	801fcf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801fac0:	9b07      	ldr	r3, [sp, #28]
 801fac2:	9a08      	ldr	r2, [sp, #32]
 801fac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fac8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801facc:	441a      	add	r2, r3
 801face:	9208      	str	r2, [sp, #32]
 801fad0:	e0ae      	b.n	801fc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801fad2:	1c51      	adds	r1, r2, #1
 801fad4:	f040 809b 	bne.w	801fc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fad8:	42aa      	cmp	r2, r5
 801fada:	f280 8098 	bge.w	801fc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fade:	1c5a      	adds	r2, r3, #1
 801fae0:	f2c0 8095 	blt.w	801fc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fae6:	4293      	cmp	r3, r2
 801fae8:	f280 8091 	bge.w	801fc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801faec:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801faf0:	f1bb 0f00 	cmp.w	fp, #0
 801faf4:	dde4      	ble.n	801fac0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801faf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801faf8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fafa:	141a      	asrs	r2, r3, #16
 801fafc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fafe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb00:	1400      	asrs	r0, r0, #16
 801fb02:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fb06:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb0a:	f100 80dc 	bmi.w	801fcc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb0e:	1c47      	adds	r7, r0, #1
 801fb10:	42bd      	cmp	r5, r7
 801fb12:	f340 80da 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb16:	2a00      	cmp	r2, #0
 801fb18:	f2c0 80d7 	blt.w	801fcca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb1c:	f102 0c01 	add.w	ip, r2, #1
 801fb20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb22:	4567      	cmp	r7, ip
 801fb24:	f340 80d1 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb28:	fb02 0005 	mla	r0, r2, r5, r0
 801fb2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fb2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb30:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fb34:	4402      	add	r2, r0
 801fb36:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fb3a:	eb04 0c08 	add.w	ip, r4, r8
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	f000 80b3 	beq.w	801fcaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fb44:	7857      	ldrb	r7, [r2, #1]
 801fb46:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb4a:	4427      	add	r7, r4
 801fb4c:	2900      	cmp	r1, #0
 801fb4e:	f000 80b4 	beq.w	801fcba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fb52:	1950      	adds	r0, r2, r5
 801fb54:	5d52      	ldrb	r2, [r2, r5]
 801fb56:	7840      	ldrb	r0, [r0, #1]
 801fb58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb60:	4422      	add	r2, r4
 801fb62:	4420      	add	r0, r4
 801fb64:	b29b      	uxth	r3, r3
 801fb66:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fb6a:	b289      	uxth	r1, r1
 801fb6c:	f897 8000 	ldrb.w	r8, [r7]
 801fb70:	fb03 f901 	mul.w	r9, r3, r1
 801fb74:	011b      	lsls	r3, r3, #4
 801fb76:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fb7a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fb7e:	eba3 0309 	sub.w	r3, r3, r9
 801fb82:	b289      	uxth	r1, r1
 801fb84:	b29b      	uxth	r3, r3
 801fb86:	ebae 0e01 	sub.w	lr, lr, r1
 801fb8a:	fb03 f808 	mul.w	r8, r3, r8
 801fb8e:	fa1f fe8e 	uxth.w	lr, lr
 801fb92:	fb0e 880a 	mla	r8, lr, sl, r8
 801fb96:	f892 a000 	ldrb.w	sl, [r2]
 801fb9a:	fb01 880a 	mla	r8, r1, sl, r8
 801fb9e:	f890 a000 	ldrb.w	sl, [r0]
 801fba2:	fb09 880a 	mla	r8, r9, sl, r8
 801fba6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbaa:	f886 8000 	strb.w	r8, [r6]
 801fbae:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fbb2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fbb6:	fb03 f808 	mul.w	r8, r3, r8
 801fbba:	fb0e 880a 	mla	r8, lr, sl, r8
 801fbbe:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fbc2:	fb01 880a 	mla	r8, r1, sl, r8
 801fbc6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fbca:	fb09 880a 	mla	r8, r9, sl, r8
 801fbce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbd2:	f886 8001 	strb.w	r8, [r6, #1]
 801fbd6:	78bf      	ldrb	r7, [r7, #2]
 801fbd8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fbdc:	437b      	muls	r3, r7
 801fbde:	7892      	ldrb	r2, [r2, #2]
 801fbe0:	fb0e 330c 	mla	r3, lr, ip, r3
 801fbe4:	fb01 3102 	mla	r1, r1, r2, r3
 801fbe8:	7882      	ldrb	r2, [r0, #2]
 801fbea:	fb09 1902 	mla	r9, r9, r2, r1
 801fbee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fbf2:	f886 9002 	strb.w	r9, [r6, #2]
 801fbf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fbf8:	3603      	adds	r6, #3
 801fbfa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fbfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc00:	4413      	add	r3, r2
 801fc02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc04:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc08:	4413      	add	r3, r2
 801fc0a:	9324      	str	r3, [sp, #144]	; 0x90
 801fc0c:	e770      	b.n	801faf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fc0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc10:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc12:	4413      	add	r3, r2
 801fc14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc16:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc1a:	4413      	add	r3, r2
 801fc1c:	9324      	str	r3, [sp, #144]	; 0x90
 801fc1e:	9b07      	ldr	r3, [sp, #28]
 801fc20:	3b01      	subs	r3, #1
 801fc22:	9307      	str	r3, [sp, #28]
 801fc24:	9b08      	ldr	r3, [sp, #32]
 801fc26:	3303      	adds	r3, #3
 801fc28:	9308      	str	r3, [sp, #32]
 801fc2a:	e718      	b.n	801fa5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fc2c:	f47f af2a 	bne.w	801fa84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fc30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	f340 80e5 	ble.w	801fe02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fc38:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fc3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc3e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fc42:	eef0 6a48 	vmov.f32	s13, s16
 801fc46:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fc4a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fc4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc52:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fc56:	eef0 6a68 	vmov.f32	s13, s17
 801fc5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc5e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fc62:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc66:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc6e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc76:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fc7a:	ee18 2a10 	vmov	r2, s16
 801fc7e:	eeb0 8a47 	vmov.f32	s16, s14
 801fc82:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc86:	ee18 2a90 	vmov	r2, s17
 801fc8a:	9325      	str	r3, [sp, #148]	; 0x94
 801fc8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc8e:	eef0 8a67 	vmov.f32	s17, s15
 801fc92:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc96:	9326      	str	r3, [sp, #152]	; 0x98
 801fc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fc9c:	3b01      	subs	r3, #1
 801fc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fca2:	bf08      	it	eq
 801fca4:	4613      	moveq	r3, r2
 801fca6:	9307      	str	r3, [sp, #28]
 801fca8:	e6d2      	b.n	801fa50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcaa:	b149      	cbz	r1, 801fcc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fcac:	5d52      	ldrb	r2, [r2, r5]
 801fcae:	4660      	mov	r0, ip
 801fcb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fcb4:	4422      	add	r2, r4
 801fcb6:	4667      	mov	r7, ip
 801fcb8:	e754      	b.n	801fb64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fcba:	4660      	mov	r0, ip
 801fcbc:	4662      	mov	r2, ip
 801fcbe:	e751      	b.n	801fb64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fcc0:	4660      	mov	r0, ip
 801fcc2:	4662      	mov	r2, ip
 801fcc4:	e7f7      	b.n	801fcb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fcc6:	1c47      	adds	r7, r0, #1
 801fcc8:	d195      	bne.n	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcca:	4285      	cmp	r5, r0
 801fccc:	dd93      	ble.n	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcce:	1c57      	adds	r7, r2, #1
 801fcd0:	db91      	blt.n	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fcd4:	4297      	cmp	r7, r2
 801fcd6:	dd8e      	ble.n	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcd8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fcdc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fce0:	e9cd 5700 	strd	r5, r7, [sp]
 801fce4:	4623      	mov	r3, r4
 801fce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fce8:	4631      	mov	r1, r6
 801fcea:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fcec:	f7ff fdca 	bl	801f884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fcf0:	e781      	b.n	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fcf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fcf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fcf6:	1410      	asrs	r0, r2, #16
 801fcf8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fcfc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fcfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd00:	1412      	asrs	r2, r2, #16
 801fd02:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fd06:	fb05 2000 	mla	r0, r5, r0, r2
 801fd0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd0c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fd10:	4402      	add	r2, r0
 801fd12:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fd16:	eb04 070e 	add.w	r7, r4, lr
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d063      	beq.n	801fde6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801fd1e:	7856      	ldrb	r6, [r2, #1]
 801fd20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fd24:	4426      	add	r6, r4
 801fd26:	2900      	cmp	r1, #0
 801fd28:	d065      	beq.n	801fdf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fd2a:	1950      	adds	r0, r2, r5
 801fd2c:	5d52      	ldrb	r2, [r2, r5]
 801fd2e:	7840      	ldrb	r0, [r0, #1]
 801fd30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fd38:	4422      	add	r2, r4
 801fd3a:	4420      	add	r0, r4
 801fd3c:	b29b      	uxth	r3, r3
 801fd3e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fd42:	b289      	uxth	r1, r1
 801fd44:	f896 e000 	ldrb.w	lr, [r6]
 801fd48:	f108 0803 	add.w	r8, r8, #3
 801fd4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fd50:	fb03 f901 	mul.w	r9, r3, r1
 801fd54:	011b      	lsls	r3, r3, #4
 801fd56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fd5a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fd5e:	eba3 0309 	sub.w	r3, r3, r9
 801fd62:	b289      	uxth	r1, r1
 801fd64:	b29b      	uxth	r3, r3
 801fd66:	ebac 0c01 	sub.w	ip, ip, r1
 801fd6a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fd6e:	fa1f fc8c 	uxth.w	ip, ip
 801fd72:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fd76:	f892 b000 	ldrb.w	fp, [r2]
 801fd7a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fd7e:	f890 b000 	ldrb.w	fp, [r0]
 801fd82:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fd86:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fd8a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fd8e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fd92:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fd96:	fb03 fe0e 	mul.w	lr, r3, lr
 801fd9a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fd9e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fda2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fda6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fdaa:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fdae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fdb2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fdb6:	78b6      	ldrb	r6, [r6, #2]
 801fdb8:	78bf      	ldrb	r7, [r7, #2]
 801fdba:	4373      	muls	r3, r6
 801fdbc:	7896      	ldrb	r6, [r2, #2]
 801fdbe:	7882      	ldrb	r2, [r0, #2]
 801fdc0:	fb0c 3307 	mla	r3, ip, r7, r3
 801fdc4:	fb01 3306 	mla	r3, r1, r6, r3
 801fdc8:	fb09 3902 	mla	r9, r9, r2, r3
 801fdcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fdce:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fdd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdd4:	4413      	add	r3, r2
 801fdd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fdd8:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fddc:	9323      	str	r3, [sp, #140]	; 0x8c
 801fdde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fde0:	4413      	add	r3, r2
 801fde2:	9324      	str	r3, [sp, #144]	; 0x90
 801fde4:	e668      	b.n	801fab8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fde6:	b149      	cbz	r1, 801fdfc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fde8:	5d52      	ldrb	r2, [r2, r5]
 801fdea:	4638      	mov	r0, r7
 801fdec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fdf0:	4422      	add	r2, r4
 801fdf2:	463e      	mov	r6, r7
 801fdf4:	e7a2      	b.n	801fd3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fdf6:	4638      	mov	r0, r7
 801fdf8:	463a      	mov	r2, r7
 801fdfa:	e79f      	b.n	801fd3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fdfc:	4638      	mov	r0, r7
 801fdfe:	463a      	mov	r2, r7
 801fe00:	e7f7      	b.n	801fdf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fe02:	b00f      	add	sp, #60	; 0x3c
 801fe04:	ecbd 8b0a 	vpop	{d8-d12}
 801fe08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe10:	b087      	sub	sp, #28
 801fe12:	7888      	ldrb	r0, [r1, #2]
 801fe14:	9002      	str	r0, [sp, #8]
 801fe16:	7848      	ldrb	r0, [r1, #1]
 801fe18:	9e02      	ldr	r6, [sp, #8]
 801fe1a:	9003      	str	r0, [sp, #12]
 801fe1c:	7808      	ldrb	r0, [r1, #0]
 801fe1e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fe22:	9004      	str	r0, [sp, #16]
 801fe24:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fe28:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fe2c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fe30:	9e03      	ldr	r6, [sp, #12]
 801fe32:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fe36:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fe3a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fe3e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fe42:	fb04 7508 	mla	r5, r4, r8, r7
 801fe46:	2c00      	cmp	r4, #0
 801fe48:	eb02 0905 	add.w	r9, r2, r5
 801fe4c:	db45      	blt.n	801feda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe4e:	45a2      	cmp	sl, r4
 801fe50:	dd43      	ble.n	801feda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe52:	2f00      	cmp	r7, #0
 801fe54:	db3f      	blt.n	801fed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fe56:	45b8      	cmp	r8, r7
 801fe58:	dd3d      	ble.n	801fed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fe5a:	5d52      	ldrb	r2, [r2, r5]
 801fe5c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fe60:	1c7a      	adds	r2, r7, #1
 801fe62:	d43d      	bmi.n	801fee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe64:	4590      	cmp	r8, r2
 801fe66:	dd3b      	ble.n	801fee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe68:	f1bc 0f00 	cmp.w	ip, #0
 801fe6c:	d038      	beq.n	801fee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fe6e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fe72:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fe76:	3401      	adds	r4, #1
 801fe78:	d436      	bmi.n	801fee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fe7a:	45a2      	cmp	sl, r4
 801fe7c:	dd34      	ble.n	801fee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fe7e:	f1be 0f00 	cmp.w	lr, #0
 801fe82:	d031      	beq.n	801fee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fe84:	2f00      	cmp	r7, #0
 801fe86:	db2d      	blt.n	801fee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fe88:	45b8      	cmp	r8, r7
 801fe8a:	dd2b      	ble.n	801fee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fe8c:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fe90:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fe94:	3701      	adds	r7, #1
 801fe96:	d409      	bmi.n	801feac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fe98:	45b8      	cmp	r8, r7
 801fe9a:	dd07      	ble.n	801feac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fe9c:	f1bc 0f00 	cmp.w	ip, #0
 801fea0:	d004      	beq.n	801feac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fea2:	44c8      	add	r8, r9
 801fea4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fea8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801feac:	f1bc 0f0f 	cmp.w	ip, #15
 801feb0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801feb4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801feb8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801febc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fec0:	d802      	bhi.n	801fec8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fec2:	f1be 0f0f 	cmp.w	lr, #15
 801fec6:	d911      	bls.n	801feec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fec8:	4b77      	ldr	r3, [pc, #476]	; (80200a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801feca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fece:	4a77      	ldr	r2, [pc, #476]	; (80200ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801fed0:	4877      	ldr	r0, [pc, #476]	; (80200b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801fed2:	f005 fc73 	bl	80257bc <__assert_func>
 801fed6:	4606      	mov	r6, r0
 801fed8:	e7c2      	b.n	801fe60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801feda:	4605      	mov	r5, r0
 801fedc:	4606      	mov	r6, r0
 801fede:	e7ca      	b.n	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fee0:	4605      	mov	r5, r0
 801fee2:	e7c8      	b.n	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fee4:	4604      	mov	r4, r0
 801fee6:	e7d5      	b.n	801fe94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801fee8:	4604      	mov	r4, r0
 801feea:	e7df      	b.n	801feac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801feec:	fa1f fc8c 	uxth.w	ip, ip
 801fef0:	fa1f f28e 	uxth.w	r2, lr
 801fef4:	fb02 fe0c 	mul.w	lr, r2, ip
 801fef8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fefc:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801ff00:	ebac 070e 	sub.w	r7, ip, lr
 801ff04:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ff08:	b292      	uxth	r2, r2
 801ff0a:	b2bf      	uxth	r7, r7
 801ff0c:	1a9b      	subs	r3, r3, r2
 801ff0e:	fb07 fc0a 	mul.w	ip, r7, sl
 801ff12:	b29b      	uxth	r3, r3
 801ff14:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ff18:	9301      	str	r3, [sp, #4]
 801ff1a:	fb02 cc09 	mla	ip, r2, r9, ip
 801ff1e:	fb0e cc08 	mla	ip, lr, r8, ip
 801ff22:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ff26:	9305      	str	r3, [sp, #20]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	f000 80b9 	beq.w	80200a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801ff2e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ff32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff36:	fb0b fc0c 	mul.w	ip, fp, ip
 801ff3a:	fb0b f606 	mul.w	r6, fp, r6
 801ff3e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ff42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ff46:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ff4a:	44dc      	add	ip, fp
 801ff4c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ff50:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ff54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff58:	fb0a fb0b 	mul.w	fp, sl, fp
 801ff5c:	fb0a fa05 	mul.w	sl, sl, r5
 801ff60:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ff64:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ff68:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801ff6c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ff70:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ff74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ff78:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801ff7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff80:	0a36      	lsrs	r6, r6, #8
 801ff82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff86:	44dc      	add	ip, fp
 801ff88:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ff8c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ff90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff94:	fb09 fb0b 	mul.w	fp, r9, fp
 801ff98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff9c:	fb09 f904 	mul.w	r9, r9, r4
 801ffa0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ffa4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801ffa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffac:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ffb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffb4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ffb8:	fb0c fc07 	mul.w	ip, ip, r7
 801ffbc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ffc0:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801ffc4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ffc8:	445d      	add	r5, fp
 801ffca:	fb08 f404 	mul.w	r4, r8, r4
 801ffce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ffd2:	fb08 f800 	mul.w	r8, r8, r0
 801ffd6:	0a2d      	lsrs	r5, r5, #8
 801ffd8:	0a20      	lsrs	r0, r4, #8
 801ffda:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ffde:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ffe2:	fb07 f70a 	mul.w	r7, r7, sl
 801ffe6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ffea:	4404      	add	r4, r0
 801ffec:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801fff0:	0a24      	lsrs	r4, r4, #8
 801fff2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801fff6:	9801      	ldr	r0, [sp, #4]
 801fff8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fffc:	fb03 cc00 	mla	ip, r3, r0, ip
 8020000:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020004:	fb00 7606 	mla	r6, r0, r6, r7
 8020008:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 802000c:	fb04 cc0e 	mla	ip, r4, lr, ip
 8020010:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020014:	b280      	uxth	r0, r0
 8020016:	9c04      	ldr	r4, [sp, #16]
 8020018:	fb05 cc02 	mla	ip, r5, r2, ip
 802001c:	fb0e 6e08 	mla	lr, lr, r8, r6
 8020020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020024:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020028:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 802002c:	fb02 ec0c 	mla	ip, r2, ip, lr
 8020030:	9a05      	ldr	r2, [sp, #20]
 8020032:	4342      	muls	r2, r0
 8020034:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020038:	1c53      	adds	r3, r2, #1
 802003a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802003e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020042:	ea45 0c0c 	orr.w	ip, r5, ip
 8020046:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802004a:	fa5f f28c 	uxtb.w	r2, ip
 802004e:	b2db      	uxtb	r3, r3
 8020050:	fb14 f403 	smulbb	r4, r4, r3
 8020054:	fb02 4200 	mla	r2, r2, r0, r4
 8020058:	b292      	uxth	r2, r2
 802005a:	1c54      	adds	r4, r2, #1
 802005c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020060:	9c03      	ldr	r4, [sp, #12]
 8020062:	fb14 f403 	smulbb	r4, r4, r3
 8020066:	1212      	asrs	r2, r2, #8
 8020068:	700a      	strb	r2, [r1, #0]
 802006a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802006e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020072:	fb02 4200 	mla	r2, r2, r0, r4
 8020076:	b292      	uxth	r2, r2
 8020078:	1c54      	adds	r4, r2, #1
 802007a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802007e:	1212      	asrs	r2, r2, #8
 8020080:	704a      	strb	r2, [r1, #1]
 8020082:	9a02      	ldr	r2, [sp, #8]
 8020084:	fb12 f303 	smulbb	r3, r2, r3
 8020088:	fb0c 3c00 	mla	ip, ip, r0, r3
 802008c:	fa1f fc8c 	uxth.w	ip, ip
 8020090:	f10c 0301 	add.w	r3, ip, #1
 8020094:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020098:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802009c:	f881 c002 	strb.w	ip, [r1, #2]
 80200a0:	b007      	add	sp, #28
 80200a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200a6:	bf00      	nop
 80200a8:	0802af2d 	.word	0x0802af2d
 80200ac:	0802b426 	.word	0x0802b426
 80200b0:	0802aff6 	.word	0x0802aff6

080200b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80200b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b8:	ed2d 8b08 	vpush	{d8-d11}
 80200bc:	b09b      	sub	sp, #108	; 0x6c
 80200be:	eeb0 aa40 	vmov.f32	s20, s0
 80200c2:	eef0 9a60 	vmov.f32	s19, s1
 80200c6:	930a      	str	r3, [sp, #40]	; 0x28
 80200c8:	eeb0 9a41 	vmov.f32	s18, s2
 80200cc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80200d0:	eeb0 8a62 	vmov.f32	s16, s5
 80200d4:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 80200d6:	eef0 8a43 	vmov.f32	s17, s6
 80200da:	9312      	str	r3, [sp, #72]	; 0x48
 80200dc:	eef0 ba44 	vmov.f32	s23, s8
 80200e0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80200e4:	eeb0 ba64 	vmov.f32	s22, s9
 80200e8:	9019      	str	r0, [sp, #100]	; 0x64
 80200ea:	eef0 aa45 	vmov.f32	s21, s10
 80200ee:	9114      	str	r1, [sp, #80]	; 0x50
 80200f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80200f2:	6868      	ldr	r0, [r5, #4]
 80200f4:	9218      	str	r2, [sp, #96]	; 0x60
 80200f6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80200f8:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80200fc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020100:	fb00 1303 	mla	r3, r0, r3, r1
 8020104:	6829      	ldr	r1, [r5, #0]
 8020106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802010a:	18cb      	adds	r3, r1, r3
 802010c:	930d      	str	r3, [sp, #52]	; 0x34
 802010e:	6813      	ldr	r3, [r2, #0]
 8020110:	9313      	str	r3, [sp, #76]	; 0x4c
 8020112:	6853      	ldr	r3, [r2, #4]
 8020114:	3304      	adds	r3, #4
 8020116:	9309      	str	r3, [sp, #36]	; 0x24
 8020118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802011a:	2b00      	cmp	r3, #0
 802011c:	dc03      	bgt.n	8020126 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802011e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020120:	2b00      	cmp	r3, #0
 8020122:	f340 8352 	ble.w	80207ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020128:	2b00      	cmp	r3, #0
 802012a:	f340 81a2 	ble.w	8020472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802012e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020130:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020132:	1412      	asrs	r2, r2, #16
 8020134:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020138:	d431      	bmi.n	802019e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802013a:	1c51      	adds	r1, r2, #1
 802013c:	428c      	cmp	r4, r1
 802013e:	dd31      	ble.n	80201a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020140:	2b00      	cmp	r3, #0
 8020142:	db2f      	blt.n	80201a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020144:	1c59      	adds	r1, r3, #1
 8020146:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020148:	4288      	cmp	r0, r1
 802014a:	dd2b      	ble.n	80201a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802014c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802014e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020150:	3b01      	subs	r3, #1
 8020152:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020154:	fb02 1203 	mla	r2, r2, r3, r1
 8020158:	1412      	asrs	r2, r2, #16
 802015a:	d42d      	bmi.n	80201b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802015c:	3201      	adds	r2, #1
 802015e:	4294      	cmp	r4, r2
 8020160:	dd2a      	ble.n	80201b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020162:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020164:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020166:	fb02 1303 	mla	r3, r2, r3, r1
 802016a:	141b      	asrs	r3, r3, #16
 802016c:	d424      	bmi.n	80201b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802016e:	3301      	adds	r3, #1
 8020170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020172:	429a      	cmp	r2, r3
 8020174:	dd20      	ble.n	80201b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020178:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 802017c:	f103 0e03 	add.w	lr, r3, #3
 8020180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020182:	9315      	str	r3, [sp, #84]	; 0x54
 8020184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020186:	2b00      	cmp	r3, #0
 8020188:	f300 81de 	bgt.w	8020548 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802018c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802018e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020198:	441a      	add	r2, r3
 802019a:	920d      	str	r2, [sp, #52]	; 0x34
 802019c:	e16b      	b.n	8020476 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 802019e:	1c51      	adds	r1, r2, #1
 80201a0:	f040 8158 	bne.w	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201a4:	42a2      	cmp	r2, r4
 80201a6:	f280 8155 	bge.w	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201aa:	1c5a      	adds	r2, r3, #1
 80201ac:	f2c0 8152 	blt.w	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201b2:	4293      	cmp	r3, r2
 80201b4:	f280 814e 	bge.w	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201ba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80201bc:	9316      	str	r3, [sp, #88]	; 0x58
 80201be:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80201c2:	9315      	str	r3, [sp, #84]	; 0x54
 80201c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	dde0      	ble.n	802018c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80201ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80201cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80201ce:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80201d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80201d4:	141b      	asrs	r3, r3, #16
 80201d6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80201da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80201dc:	1412      	asrs	r2, r2, #16
 80201de:	f100 819a 	bmi.w	8020516 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 80201e2:	1c55      	adds	r5, r2, #1
 80201e4:	42ac      	cmp	r4, r5
 80201e6:	f340 8198 	ble.w	802051a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	f2c0 8195 	blt.w	802051a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80201f0:	1c5d      	adds	r5, r3, #1
 80201f2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80201f4:	42af      	cmp	r7, r5
 80201f6:	f340 8190 	ble.w	802051a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80201fa:	fb03 2304 	mla	r3, r3, r4, r2
 80201fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020200:	18d5      	adds	r5, r2, r3
 8020202:	5cd3      	ldrb	r3, [r2, r3]
 8020204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802020a:	0e1f      	lsrs	r7, r3, #24
 802020c:	2800      	cmp	r0, #0
 802020e:	f000 8171 	beq.w	80204f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020212:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020216:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802021a:	920e      	str	r2, [sp, #56]	; 0x38
 802021c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020220:	2900      	cmp	r1, #0
 8020222:	f000 8172 	beq.w	802050a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020226:	eb05 0c04 	add.w	ip, r5, r4
 802022a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802022c:	5d2d      	ldrb	r5, [r5, r4]
 802022e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020232:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020236:	950b      	str	r5, [sp, #44]	; 0x2c
 8020238:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802023c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802023e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020242:	0e15      	lsrs	r5, r2, #24
 8020244:	920f      	str	r2, [sp, #60]	; 0x3c
 8020246:	b280      	uxth	r0, r0
 8020248:	b289      	uxth	r1, r1
 802024a:	fb00 fa01 	mul.w	sl, r0, r1
 802024e:	0100      	lsls	r0, r0, #4
 8020250:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020254:	eba0 080a 	sub.w	r8, r0, sl
 8020258:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802025c:	b289      	uxth	r1, r1
 802025e:	fa1f f888 	uxth.w	r8, r8
 8020262:	1a52      	subs	r2, r2, r1
 8020264:	fb08 f00e 	mul.w	r0, r8, lr
 8020268:	b292      	uxth	r2, r2
 802026a:	fb02 0007 	mla	r0, r2, r7, r0
 802026e:	fb01 0009 	mla	r0, r1, r9, r0
 8020272:	fb0a 0005 	mla	r0, sl, r5, r0
 8020276:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802027a:	2800      	cmp	r0, #0
 802027c:	f000 80dd 	beq.w	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020280:	2fff      	cmp	r7, #255	; 0xff
 8020282:	d01a      	beq.n	80202ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020284:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020288:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802028c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020290:	435f      	muls	r7, r3
 8020292:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020296:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802029a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802029e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202a2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80202a6:	4463      	add	r3, ip
 80202a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80202ac:	0a1b      	lsrs	r3, r3, #8
 80202ae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80202b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202b6:	ea43 030b 	orr.w	r3, r3, fp
 80202ba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80202be:	d01e      	beq.n	80202fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80202c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80202c2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80202c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80202ca:	fb0e fb0b 	mul.w	fp, lr, fp
 80202ce:	fb0e fe07 	mul.w	lr, lr, r7
 80202d2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80202d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80202da:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80202de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202e2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80202e6:	44dc      	add	ip, fp
 80202e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80202f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202f8:	ea4c 070e 	orr.w	r7, ip, lr
 80202fc:	970e      	str	r7, [sp, #56]	; 0x38
 80202fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020302:	d01e      	beq.n	8020342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020304:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020306:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802030a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802030e:	fb09 fe0e 	mul.w	lr, r9, lr
 8020312:	fb09 f907 	mul.w	r9, r9, r7
 8020316:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802031a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802031e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020322:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020326:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802032a:	44f4      	add	ip, lr
 802032c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020334:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020338:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802033c:	ea4c 0709 	orr.w	r7, ip, r9
 8020340:	970b      	str	r7, [sp, #44]	; 0x2c
 8020342:	2dff      	cmp	r5, #255	; 0xff
 8020344:	d01c      	beq.n	8020380 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020346:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020348:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802034c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020350:	fb05 fe0e 	mul.w	lr, r5, lr
 8020354:	437d      	muls	r5, r7
 8020356:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802035a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802035e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020362:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020366:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802036a:	44f4      	add	ip, lr
 802036c:	0a2d      	lsrs	r5, r5, #8
 802036e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020372:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020376:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802037a:	ea4c 0505 	orr.w	r5, ip, r5
 802037e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020380:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020382:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802038a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802038e:	fb08 f505 	mul.w	r5, r8, r5
 8020392:	fb02 5507 	mla	r5, r2, r7, r5
 8020396:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020398:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802039c:	fb01 5507 	mla	r5, r1, r7, r5
 80203a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80203a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203a6:	fb0a 5507 	mla	r5, sl, r7, r5
 80203aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80203ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80203b0:	0a2d      	lsrs	r5, r5, #8
 80203b2:	fb08 f807 	mul.w	r8, r8, r7
 80203b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203ba:	fb02 8303 	mla	r3, r2, r3, r8
 80203be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203c0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80203c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203c6:	fb01 330c 	mla	r3, r1, ip, r3
 80203ca:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80203ce:	fb0a 3a01 	mla	sl, sl, r1, r3
 80203d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80203d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80203d6:	4343      	muls	r3, r0
 80203d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203dc:	1c58      	adds	r0, r3, #1
 80203de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203e2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80203e6:	ea45 050a 	orr.w	r5, r5, sl
 80203ea:	7833      	ldrb	r3, [r6, #0]
 80203ec:	b2ea      	uxtb	r2, r5
 80203ee:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80203f2:	fb12 f201 	smulbb	r2, r2, r1
 80203f6:	b2c0      	uxtb	r0, r0
 80203f8:	fb03 2300 	mla	r3, r3, r0, r2
 80203fc:	b29b      	uxth	r3, r3
 80203fe:	1c5a      	adds	r2, r3, #1
 8020400:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020404:	7872      	ldrb	r2, [r6, #1]
 8020406:	fb12 f200 	smulbb	r2, r2, r0
 802040a:	121b      	asrs	r3, r3, #8
 802040c:	7033      	strb	r3, [r6, #0]
 802040e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020412:	0c2d      	lsrs	r5, r5, #16
 8020414:	fb03 2301 	mla	r3, r3, r1, r2
 8020418:	b29b      	uxth	r3, r3
 802041a:	1c5a      	adds	r2, r3, #1
 802041c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020420:	121b      	asrs	r3, r3, #8
 8020422:	7073      	strb	r3, [r6, #1]
 8020424:	78b3      	ldrb	r3, [r6, #2]
 8020426:	fb13 f000 	smulbb	r0, r3, r0
 802042a:	fb05 0501 	mla	r5, r5, r1, r0
 802042e:	b2ad      	uxth	r5, r5
 8020430:	1c6b      	adds	r3, r5, #1
 8020432:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020436:	122d      	asrs	r5, r5, #8
 8020438:	70b5      	strb	r5, [r6, #2]
 802043a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802043c:	3603      	adds	r6, #3
 802043e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020440:	4413      	add	r3, r2
 8020442:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020444:	932d      	str	r3, [sp, #180]	; 0xb4
 8020446:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020448:	4413      	add	r3, r2
 802044a:	932e      	str	r3, [sp, #184]	; 0xb8
 802044c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802044e:	3b01      	subs	r3, #1
 8020450:	9316      	str	r3, [sp, #88]	; 0x58
 8020452:	e6b7      	b.n	80201c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020456:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020458:	4413      	add	r3, r2
 802045a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802045c:	932d      	str	r3, [sp, #180]	; 0xb4
 802045e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020460:	4413      	add	r3, r2
 8020462:	932e      	str	r3, [sp, #184]	; 0xb8
 8020464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020466:	3b01      	subs	r3, #1
 8020468:	930a      	str	r3, [sp, #40]	; 0x28
 802046a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802046c:	3303      	adds	r3, #3
 802046e:	930d      	str	r3, [sp, #52]	; 0x34
 8020470:	e659      	b.n	8020126 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020472:	f47f ae6b 	bne.w	802014c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020478:	2b00      	cmp	r3, #0
 802047a:	f340 81a6 	ble.w	80207ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802047e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020484:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020488:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802048c:	eef0 6a48 	vmov.f32	s13, s16
 8020490:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020494:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802049c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80204a0:	eef0 6a68 	vmov.f32	s13, s17
 80204a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204a8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80204ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204c4:	ee18 2a10 	vmov	r2, s16
 80204c8:	eeb0 8a47 	vmov.f32	s16, s14
 80204cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80204d0:	ee18 2a90 	vmov	r2, s17
 80204d4:	932f      	str	r3, [sp, #188]	; 0xbc
 80204d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80204d8:	eef0 8a67 	vmov.f32	s17, s15
 80204dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80204e0:	9330      	str	r3, [sp, #192]	; 0xc0
 80204e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80204e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80204e6:	3b01      	subs	r3, #1
 80204e8:	9314      	str	r3, [sp, #80]	; 0x50
 80204ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80204ec:	bf08      	it	eq
 80204ee:	4613      	moveq	r3, r2
 80204f0:	930a      	str	r3, [sp, #40]	; 0x28
 80204f2:	e611      	b.n	8020118 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80204f4:	b161      	cbz	r1, 8020510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80204f6:	5d2a      	ldrb	r2, [r5, r4]
 80204f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80204fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80204fe:	25ff      	movs	r5, #255	; 0xff
 8020500:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020504:	920b      	str	r2, [sp, #44]	; 0x2c
 8020506:	46ae      	mov	lr, r5
 8020508:	e69d      	b.n	8020246 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802050a:	25ff      	movs	r5, #255	; 0xff
 802050c:	46a9      	mov	r9, r5
 802050e:	e69a      	b.n	8020246 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020510:	25ff      	movs	r5, #255	; 0xff
 8020512:	46a9      	mov	r9, r5
 8020514:	e7f7      	b.n	8020506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020516:	1c57      	adds	r7, r2, #1
 8020518:	d18f      	bne.n	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802051a:	4294      	cmp	r4, r2
 802051c:	dd8d      	ble.n	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802051e:	1c5d      	adds	r5, r3, #1
 8020520:	db8b      	blt.n	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020522:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020524:	429d      	cmp	r5, r3
 8020526:	dd88      	ble.n	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020528:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802052a:	9202      	str	r2, [sp, #8]
 802052c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802052e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020534:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020536:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802053a:	e9cd 4300 	strd	r4, r3, [sp]
 802053e:	4631      	mov	r1, r6
 8020540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020542:	f7ff fc63 	bl	801fe0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020546:	e778      	b.n	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020548:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802054a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802054c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020550:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020552:	1412      	asrs	r2, r2, #16
 8020554:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020558:	141b      	asrs	r3, r3, #16
 802055a:	fb04 2303 	mla	r3, r4, r3, r2
 802055e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020560:	18d5      	adds	r5, r2, r3
 8020562:	5cd3      	ldrb	r3, [r2, r3]
 8020564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802056a:	0e1e      	lsrs	r6, r3, #24
 802056c:	2900      	cmp	r1, #0
 802056e:	f000 811b 	beq.w	80207a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8020572:	786a      	ldrb	r2, [r5, #1]
 8020574:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020576:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802057a:	9210      	str	r2, [sp, #64]	; 0x40
 802057c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020580:	2800      	cmp	r0, #0
 8020582:	f000 811c 	beq.w	80207be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8020586:	192a      	adds	r2, r5, r4
 8020588:	5d2d      	ldrb	r5, [r5, r4]
 802058a:	7852      	ldrb	r2, [r2, #1]
 802058c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020590:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020594:	950c      	str	r5, [sp, #48]	; 0x30
 8020596:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802059a:	0e15      	lsrs	r5, r2, #24
 802059c:	9211      	str	r2, [sp, #68]	; 0x44
 802059e:	b289      	uxth	r1, r1
 80205a0:	b280      	uxth	r0, r0
 80205a2:	fb01 fa00 	mul.w	sl, r1, r0
 80205a6:	0109      	lsls	r1, r1, #4
 80205a8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80205ac:	eba1 080a 	sub.w	r8, r1, sl
 80205b0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80205b4:	b280      	uxth	r0, r0
 80205b6:	fa1f f888 	uxth.w	r8, r8
 80205ba:	1a12      	subs	r2, r2, r0
 80205bc:	fb08 f10c 	mul.w	r1, r8, ip
 80205c0:	b292      	uxth	r2, r2
 80205c2:	fb02 1106 	mla	r1, r2, r6, r1
 80205c6:	fb00 1109 	mla	r1, r0, r9, r1
 80205ca:	fb0a 1105 	mla	r1, sl, r5, r1
 80205ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80205d2:	2900      	cmp	r1, #0
 80205d4:	f000 80da 	beq.w	802078c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80205d8:	2eff      	cmp	r6, #255	; 0xff
 80205da:	d016      	beq.n	802060a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80205dc:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80205e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205e4:	4377      	muls	r7, r6
 80205e6:	435e      	muls	r6, r3
 80205e8:	0a3b      	lsrs	r3, r7, #8
 80205ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80205ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205f2:	443b      	add	r3, r7
 80205f4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80205f8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80205fc:	0a1b      	lsrs	r3, r3, #8
 80205fe:	0a3f      	lsrs	r7, r7, #8
 8020600:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020604:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020608:	433b      	orrs	r3, r7
 802060a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802060e:	d01d      	beq.n	802064c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020610:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020612:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020614:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020618:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802061c:	fb0c f606 	mul.w	r6, ip, r6
 8020620:	fb0c fc07 	mul.w	ip, ip, r7
 8020624:	0a37      	lsrs	r7, r6, #8
 8020626:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802062a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802062e:	4437      	add	r7, r6
 8020630:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020634:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020638:	0a3f      	lsrs	r7, r7, #8
 802063a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802063e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020642:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020646:	ea47 060c 	orr.w	r6, r7, ip
 802064a:	9610      	str	r6, [sp, #64]	; 0x40
 802064c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020650:	d01d      	beq.n	802068e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020652:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020654:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020658:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802065c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020660:	fb09 f906 	mul.w	r9, r9, r6
 8020664:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020668:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802066c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020670:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020674:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020678:	4467      	add	r7, ip
 802067a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802067e:	0a3f      	lsrs	r7, r7, #8
 8020680:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020684:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020688:	ea47 0609 	orr.w	r6, r7, r9
 802068c:	960c      	str	r6, [sp, #48]	; 0x30
 802068e:	2dff      	cmp	r5, #255	; 0xff
 8020690:	d01a      	beq.n	80206c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8020692:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020694:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020698:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802069c:	fb05 fc0c 	mul.w	ip, r5, ip
 80206a0:	4375      	muls	r5, r6
 80206a2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80206a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206aa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80206ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206b2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80206b6:	4467      	add	r7, ip
 80206b8:	0a2d      	lsrs	r5, r5, #8
 80206ba:	0a3f      	lsrs	r7, r7, #8
 80206bc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80206c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206c4:	433d      	orrs	r5, r7
 80206c6:	9511      	str	r5, [sp, #68]	; 0x44
 80206c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80206ca:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80206ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80206d6:	fb08 f505 	mul.w	r5, r8, r5
 80206da:	fb02 5506 	mla	r5, r2, r6, r5
 80206de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80206e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80206e4:	fb00 5506 	mla	r5, r0, r6, r5
 80206e8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80206ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80206ee:	fb0a 5506 	mla	r5, sl, r6, r5
 80206f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80206f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206f8:	0a2d      	lsrs	r5, r5, #8
 80206fa:	fb08 f806 	mul.w	r8, r8, r6
 80206fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020702:	fb02 8303 	mla	r3, r2, r3, r8
 8020706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020708:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802070c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802070e:	fb00 3307 	mla	r3, r0, r7, r3
 8020712:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020716:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802071a:	fb01 f30b 	mul.w	r3, r1, fp
 802071e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020722:	1c59      	adds	r1, r3, #1
 8020724:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020728:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802072c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020730:	ea45 050c 	orr.w	r5, r5, ip
 8020734:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020738:	b2ea      	uxtb	r2, r5
 802073a:	b2c9      	uxtb	r1, r1
 802073c:	fb12 f20b 	smulbb	r2, r2, fp
 8020740:	fb03 2301 	mla	r3, r3, r1, r2
 8020744:	b29b      	uxth	r3, r3
 8020746:	1c5a      	adds	r2, r3, #1
 8020748:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802074c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020750:	fb12 f201 	smulbb	r2, r2, r1
 8020754:	121b      	asrs	r3, r3, #8
 8020756:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802075a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802075e:	0c2d      	lsrs	r5, r5, #16
 8020760:	fb03 230b 	mla	r3, r3, fp, r2
 8020764:	b29b      	uxth	r3, r3
 8020766:	1c5a      	adds	r2, r3, #1
 8020768:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802076c:	121b      	asrs	r3, r3, #8
 802076e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020772:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020776:	fb13 f101 	smulbb	r1, r3, r1
 802077a:	fb05 150b 	mla	r5, r5, fp, r1
 802077e:	b2ad      	uxth	r5, r5
 8020780:	1c69      	adds	r1, r5, #1
 8020782:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020786:	122d      	asrs	r5, r5, #8
 8020788:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802078c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802078e:	f10e 0e03 	add.w	lr, lr, #3
 8020792:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020794:	4413      	add	r3, r2
 8020796:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020798:	932d      	str	r3, [sp, #180]	; 0xb4
 802079a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802079c:	4413      	add	r3, r2
 802079e:	932e      	str	r3, [sp, #184]	; 0xb8
 80207a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80207a2:	3b01      	subs	r3, #1
 80207a4:	9315      	str	r3, [sp, #84]	; 0x54
 80207a6:	e4ed      	b.n	8020184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80207a8:	b160      	cbz	r0, 80207c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80207aa:	5d2a      	ldrb	r2, [r5, r4]
 80207ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80207ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80207b2:	25ff      	movs	r5, #255	; 0xff
 80207b4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80207b8:	920c      	str	r2, [sp, #48]	; 0x30
 80207ba:	46ac      	mov	ip, r5
 80207bc:	e6ef      	b.n	802059e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80207be:	25ff      	movs	r5, #255	; 0xff
 80207c0:	46a9      	mov	r9, r5
 80207c2:	e6ec      	b.n	802059e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80207c4:	25ff      	movs	r5, #255	; 0xff
 80207c6:	46a9      	mov	r9, r5
 80207c8:	e7f7      	b.n	80207ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80207ca:	b01b      	add	sp, #108	; 0x6c
 80207cc:	ecbd 8b08 	vpop	{d8-d11}
 80207d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80207d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207d8:	b085      	sub	sp, #20
 80207da:	7888      	ldrb	r0, [r1, #2]
 80207dc:	4692      	mov	sl, r2
 80207de:	4698      	mov	r8, r3
 80207e0:	9000      	str	r0, [sp, #0]
 80207e2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80207e6:	7848      	ldrb	r0, [r1, #1]
 80207e8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80207ec:	9001      	str	r0, [sp, #4]
 80207ee:	7808      	ldrb	r0, [r1, #0]
 80207f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80207f4:	9002      	str	r0, [sp, #8]
 80207f6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80207fa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80207fe:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020802:	fb04 560c 	mla	r6, r4, ip, r5
 8020806:	2c00      	cmp	r4, #0
 8020808:	eb02 0e06 	add.w	lr, r2, r6
 802080c:	9a00      	ldr	r2, [sp, #0]
 802080e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020812:	9a01      	ldr	r2, [sp, #4]
 8020814:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020818:	db3e      	blt.n	8020898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802081a:	45a1      	cmp	r9, r4
 802081c:	dd3c      	ble.n	8020898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802081e:	2d00      	cmp	r5, #0
 8020820:	db38      	blt.n	8020894 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020822:	45ac      	cmp	ip, r5
 8020824:	dd36      	ble.n	8020894 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020826:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802082a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802082e:	1c6e      	adds	r6, r5, #1
 8020830:	d435      	bmi.n	802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020832:	45b4      	cmp	ip, r6
 8020834:	dd33      	ble.n	802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020836:	b393      	cbz	r3, 802089e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020838:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802083c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020840:	3401      	adds	r4, #1
 8020842:	d430      	bmi.n	80208a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020844:	45a1      	cmp	r9, r4
 8020846:	dd2e      	ble.n	80208a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020848:	b36f      	cbz	r7, 80208a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802084a:	2d00      	cmp	r5, #0
 802084c:	db29      	blt.n	80208a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802084e:	45ac      	cmp	ip, r5
 8020850:	dd27      	ble.n	80208a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020852:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020856:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802085a:	3501      	adds	r5, #1
 802085c:	d407      	bmi.n	802086e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802085e:	45ac      	cmp	ip, r5
 8020860:	dd05      	ble.n	802086e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020862:	b123      	cbz	r3, 802086e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020864:	44f4      	add	ip, lr
 8020866:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802086a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802086e:	2b0f      	cmp	r3, #15
 8020870:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020874:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020878:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802087c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020880:	d801      	bhi.n	8020886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020882:	2f0f      	cmp	r7, #15
 8020884:	d911      	bls.n	80208aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8020886:	4b76      	ldr	r3, [pc, #472]	; (8020a60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020888:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802088c:	4a75      	ldr	r2, [pc, #468]	; (8020a64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802088e:	4876      	ldr	r0, [pc, #472]	; (8020a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020890:	f004 ff94 	bl	80257bc <__assert_func>
 8020894:	4602      	mov	r2, r0
 8020896:	e7ca      	b.n	802082e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8020898:	4606      	mov	r6, r0
 802089a:	4602      	mov	r2, r0
 802089c:	e7d0      	b.n	8020840 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802089e:	4606      	mov	r6, r0
 80208a0:	e7ce      	b.n	8020840 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80208a2:	4604      	mov	r4, r0
 80208a4:	e7d9      	b.n	802085a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80208a6:	4604      	mov	r4, r0
 80208a8:	e7e1      	b.n	802086e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208aa:	b29b      	uxth	r3, r3
 80208ac:	b2bf      	uxth	r7, r7
 80208ae:	fb07 fe03 	mul.w	lr, r7, r3
 80208b2:	011b      	lsls	r3, r3, #4
 80208b4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80208b8:	eba3 0c0e 	sub.w	ip, r3, lr
 80208bc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80208c0:	b2bf      	uxth	r7, r7
 80208c2:	fa1f fc8c 	uxth.w	ip, ip
 80208c6:	1bed      	subs	r5, r5, r7
 80208c8:	fb0c f30a 	mul.w	r3, ip, sl
 80208cc:	b2ad      	uxth	r5, r5
 80208ce:	fb05 330b 	mla	r3, r5, fp, r3
 80208d2:	fb07 3309 	mla	r3, r7, r9, r3
 80208d6:	fb0e 3308 	mla	r3, lr, r8, r3
 80208da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80208de:	9303      	str	r3, [sp, #12]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	f000 80b9 	beq.w	8020a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80208e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80208ea:	d018      	beq.n	802091e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80208ec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80208f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80208f4:	fb0b f303 	mul.w	r3, fp, r3
 80208f8:	fb0b fb02 	mul.w	fp, fp, r2
 80208fc:	0a1a      	lsrs	r2, r3, #8
 80208fe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020902:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020906:	441a      	add	r2, r3
 8020908:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802090c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020910:	0a12      	lsrs	r2, r2, #8
 8020912:	0a1b      	lsrs	r3, r3, #8
 8020914:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802091c:	431a      	orrs	r2, r3
 802091e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020922:	d019      	beq.n	8020958 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020924:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020928:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802092c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020930:	fb0a fa06 	mul.w	sl, sl, r6
 8020934:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020938:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802093c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020940:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020944:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020948:	445e      	add	r6, fp
 802094a:	0a1b      	lsrs	r3, r3, #8
 802094c:	0a36      	lsrs	r6, r6, #8
 802094e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020952:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020956:	431e      	orrs	r6, r3
 8020958:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802095c:	d019      	beq.n	8020992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802095e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020962:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020966:	fb09 fa0a 	mul.w	sl, r9, sl
 802096a:	fb09 f904 	mul.w	r9, r9, r4
 802096e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020972:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020976:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802097a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802097e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020982:	4454      	add	r4, sl
 8020984:	0a1b      	lsrs	r3, r3, #8
 8020986:	0a24      	lsrs	r4, r4, #8
 8020988:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802098c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020990:	431c      	orrs	r4, r3
 8020992:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020996:	d019      	beq.n	80209cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8020998:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802099c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80209a0:	fb08 f909 	mul.w	r9, r8, r9
 80209a4:	fb08 f800 	mul.w	r8, r8, r0
 80209a8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80209ac:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80209b0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80209b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80209b8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80209bc:	4448      	add	r0, r9
 80209be:	0a1b      	lsrs	r3, r3, #8
 80209c0:	0a00      	lsrs	r0, r0, #8
 80209c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80209ca:	4318      	orrs	r0, r3
 80209cc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80209d0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80209d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80209d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80209dc:	fb0c f808 	mul.w	r8, ip, r8
 80209e0:	fb0c f606 	mul.w	r6, ip, r6
 80209e4:	fb05 8803 	mla	r8, r5, r3, r8
 80209e8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80209ec:	fb05 6202 	mla	r2, r5, r2, r6
 80209f0:	fb07 8803 	mla	r8, r7, r3, r8
 80209f4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80209f8:	fb0e 8303 	mla	r3, lr, r3, r8
 80209fc:	0a1b      	lsrs	r3, r3, #8
 80209fe:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020a02:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020a06:	9c02      	ldr	r4, [sp, #8]
 8020a08:	fb07 2703 	mla	r7, r7, r3, r2
 8020a0c:	9a03      	ldr	r2, [sp, #12]
 8020a0e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020a12:	43d2      	mvns	r2, r2
 8020a14:	fb0e 7303 	mla	r3, lr, r3, r7
 8020a18:	b2d2      	uxtb	r2, r2
 8020a1a:	0a1b      	lsrs	r3, r3, #8
 8020a1c:	4354      	muls	r4, r2
 8020a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a22:	1c60      	adds	r0, r4, #1
 8020a24:	ea48 0303 	orr.w	r3, r8, r3
 8020a28:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a2c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020a30:	7008      	strb	r0, [r1, #0]
 8020a32:	9801      	ldr	r0, [sp, #4]
 8020a34:	4350      	muls	r0, r2
 8020a36:	1c44      	adds	r4, r0, #1
 8020a38:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020a3c:	0a18      	lsrs	r0, r3, #8
 8020a3e:	0c1b      	lsrs	r3, r3, #16
 8020a40:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a44:	7048      	strb	r0, [r1, #1]
 8020a46:	9800      	ldr	r0, [sp, #0]
 8020a48:	4350      	muls	r0, r2
 8020a4a:	4602      	mov	r2, r0
 8020a4c:	3001      	adds	r0, #1
 8020a4e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020a52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a56:	708b      	strb	r3, [r1, #2]
 8020a58:	b005      	add	sp, #20
 8020a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a5e:	bf00      	nop
 8020a60:	0802af2d 	.word	0x0802af2d
 8020a64:	0802b426 	.word	0x0802b426
 8020a68:	0802aff6 	.word	0x0802aff6

08020a6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a70:	ed2d 8b08 	vpush	{d8-d11}
 8020a74:	b097      	sub	sp, #92	; 0x5c
 8020a76:	eeb0 aa40 	vmov.f32	s20, s0
 8020a7a:	eef0 9a60 	vmov.f32	s19, s1
 8020a7e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020a80:	eeb0 9a41 	vmov.f32	s18, s2
 8020a84:	9308      	str	r3, [sp, #32]
 8020a86:	eeb0 8a62 	vmov.f32	s16, s5
 8020a8a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020a8e:	eef0 8a43 	vmov.f32	s17, s6
 8020a92:	9015      	str	r0, [sp, #84]	; 0x54
 8020a94:	eef0 ba44 	vmov.f32	s23, s8
 8020a98:	6868      	ldr	r0, [r5, #4]
 8020a9a:	eeb0 ba64 	vmov.f32	s22, s9
 8020a9e:	9112      	str	r1, [sp, #72]	; 0x48
 8020aa0:	eef0 aa45 	vmov.f32	s21, s10
 8020aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8020aa6:	9214      	str	r2, [sp, #80]	; 0x50
 8020aa8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020aaa:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8020aae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020ab2:	fb00 1303 	mla	r3, r0, r3, r1
 8020ab6:	6829      	ldr	r1, [r5, #0]
 8020ab8:	6855      	ldr	r5, [r2, #4]
 8020aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020abe:	3504      	adds	r5, #4
 8020ac0:	18cb      	adds	r3, r1, r3
 8020ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ac4:	6813      	ldr	r3, [r2, #0]
 8020ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8020ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	dc03      	bgt.n	8020ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	f340 8333 	ble.w	802113c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020ad6:	9b08      	ldr	r3, [sp, #32]
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	f340 8190 	ble.w	8020dfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020ade:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020ae0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ae2:	1412      	asrs	r2, r2, #16
 8020ae4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020ae8:	d42f      	bmi.n	8020b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020aea:	1c51      	adds	r1, r2, #1
 8020aec:	428c      	cmp	r4, r1
 8020aee:	dd2f      	ble.n	8020b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	db2d      	blt.n	8020b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020af4:	1c59      	adds	r1, r3, #1
 8020af6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020af8:	4288      	cmp	r0, r1
 8020afa:	dd29      	ble.n	8020b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020afc:	9b08      	ldr	r3, [sp, #32]
 8020afe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b00:	3b01      	subs	r3, #1
 8020b02:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020b04:	fb02 1203 	mla	r2, r2, r3, r1
 8020b08:	1412      	asrs	r2, r2, #16
 8020b0a:	d42b      	bmi.n	8020b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b0c:	3201      	adds	r2, #1
 8020b0e:	4294      	cmp	r4, r2
 8020b10:	dd28      	ble.n	8020b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b12:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b14:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020b16:	fb02 1303 	mla	r3, r2, r3, r1
 8020b1a:	141b      	asrs	r3, r3, #16
 8020b1c:	d422      	bmi.n	8020b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b1e:	3301      	adds	r3, #1
 8020b20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b22:	429a      	cmp	r2, r3
 8020b24:	dd1e      	ble.n	8020b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b28:	f103 0803 	add.w	r8, r3, #3
 8020b2c:	9b08      	ldr	r3, [sp, #32]
 8020b2e:	9307      	str	r3, [sp, #28]
 8020b30:	9b07      	ldr	r3, [sp, #28]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	f300 81ca 	bgt.w	8020ecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020b38:	9b08      	ldr	r3, [sp, #32]
 8020b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b44:	441a      	add	r2, r3
 8020b46:	920b      	str	r2, [sp, #44]	; 0x2c
 8020b48:	e15b      	b.n	8020e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020b4a:	1c51      	adds	r1, r2, #1
 8020b4c:	f040 8148 	bne.w	8020de0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b50:	42a2      	cmp	r2, r4
 8020b52:	f280 8145 	bge.w	8020de0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b56:	1c5a      	adds	r2, r3, #1
 8020b58:	f2c0 8142 	blt.w	8020de0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b5e:	4293      	cmp	r3, r2
 8020b60:	f280 813e 	bge.w	8020de0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b64:	9b08      	ldr	r3, [sp, #32]
 8020b66:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b6a:	9307      	str	r3, [sp, #28]
 8020b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	dde2      	ble.n	8020b38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020b72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b76:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020b7a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020b7c:	141b      	asrs	r3, r3, #16
 8020b7e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020b82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b84:	1412      	asrs	r2, r2, #16
 8020b86:	f100 818b 	bmi.w	8020ea0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020b8a:	1c56      	adds	r6, r2, #1
 8020b8c:	42b4      	cmp	r4, r6
 8020b8e:	f340 8189 	ble.w	8020ea4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	f2c0 8186 	blt.w	8020ea4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020b98:	1c5e      	adds	r6, r3, #1
 8020b9a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020b9c:	42b7      	cmp	r7, r6
 8020b9e:	f340 8181 	ble.w	8020ea4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020ba2:	fb03 2304 	mla	r3, r3, r4, r2
 8020ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ba8:	18d6      	adds	r6, r2, r3
 8020baa:	5cd3      	ldrb	r3, [r2, r3]
 8020bac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020bb0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020bb4:	2900      	cmp	r1, #0
 8020bb6:	f000 8163 	beq.w	8020e80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020bba:	7872      	ldrb	r2, [r6, #1]
 8020bbc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020bc0:	920c      	str	r2, [sp, #48]	; 0x30
 8020bc2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020bc6:	2800      	cmp	r0, #0
 8020bc8:	f000 8164 	beq.w	8020e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020bcc:	1932      	adds	r2, r6, r4
 8020bce:	5d36      	ldrb	r6, [r6, r4]
 8020bd0:	7852      	ldrb	r2, [r2, #1]
 8020bd2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020bd6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020bda:	9609      	str	r6, [sp, #36]	; 0x24
 8020bdc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020be0:	0e16      	lsrs	r6, r2, #24
 8020be2:	920d      	str	r2, [sp, #52]	; 0x34
 8020be4:	b289      	uxth	r1, r1
 8020be6:	b280      	uxth	r0, r0
 8020be8:	fb01 fb00 	mul.w	fp, r1, r0
 8020bec:	0109      	lsls	r1, r1, #4
 8020bee:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020bf2:	eba1 090b 	sub.w	r9, r1, fp
 8020bf6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020bfa:	b280      	uxth	r0, r0
 8020bfc:	fa1f f989 	uxth.w	r9, r9
 8020c00:	1a12      	subs	r2, r2, r0
 8020c02:	fb09 f108 	mul.w	r1, r9, r8
 8020c06:	b292      	uxth	r2, r2
 8020c08:	fb02 110c 	mla	r1, r2, ip, r1
 8020c0c:	fb00 110a 	mla	r1, r0, sl, r1
 8020c10:	fb0b 1106 	mla	r1, fp, r6, r1
 8020c14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c18:	2900      	cmp	r1, #0
 8020c1a:	f000 80d2 	beq.w	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020c22:	d01b      	beq.n	8020c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c24:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020c28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c2c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020c30:	fb0c fc03 	mul.w	ip, ip, r3
 8020c34:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020c38:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c40:	4473      	add	r3, lr
 8020c42:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020c46:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020c4a:	0a1b      	lsrs	r3, r3, #8
 8020c4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c54:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c58:	ea43 030e 	orr.w	r3, r3, lr
 8020c5c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c60:	d01e      	beq.n	8020ca0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020c62:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020c64:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c68:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020c6c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020c70:	fb08 f80e 	mul.w	r8, r8, lr
 8020c74:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c78:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c80:	44e6      	add	lr, ip
 8020c82:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020c86:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020c8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c8e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020c92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c96:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020c9a:	ea4e 0708 	orr.w	r7, lr, r8
 8020c9e:	970c      	str	r7, [sp, #48]	; 0x30
 8020ca0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020ca4:	d01e      	beq.n	8020ce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020ca6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020ca8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020cac:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020cb0:	fb0a f808 	mul.w	r8, sl, r8
 8020cb4:	fb0a fa0c 	mul.w	sl, sl, ip
 8020cb8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020cbc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020cc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020cc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ccc:	44c6      	add	lr, r8
 8020cce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cde:	ea4e 070a 	orr.w	r7, lr, sl
 8020ce2:	9709      	str	r7, [sp, #36]	; 0x24
 8020ce4:	2eff      	cmp	r6, #255	; 0xff
 8020ce6:	d01d      	beq.n	8020d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020ce8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020cea:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020cee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020cf2:	fb06 f808 	mul.w	r8, r6, r8
 8020cf6:	fb06 f60c 	mul.w	r6, r6, ip
 8020cfa:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020cfe:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020d02:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020d06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d0a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020d0e:	44c6      	add	lr, r8
 8020d10:	0a36      	lsrs	r6, r6, #8
 8020d12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d1e:	ea4e 0606 	orr.w	r6, lr, r6
 8020d22:	960d      	str	r6, [sp, #52]	; 0x34
 8020d24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020d26:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020d34:	43c9      	mvns	r1, r1
 8020d36:	fb09 f606 	mul.w	r6, r9, r6
 8020d3a:	b2c9      	uxtb	r1, r1
 8020d3c:	fb02 660c 	mla	r6, r2, ip, r6
 8020d40:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020d46:	fb00 660c 	mla	r6, r0, ip, r6
 8020d4a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020d50:	fb0b 660c 	mla	r6, fp, ip, r6
 8020d54:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020d58:	fb09 f90c 	mul.w	r9, r9, ip
 8020d5c:	0a36      	lsrs	r6, r6, #8
 8020d5e:	fb02 9303 	mla	r3, r2, r3, r9
 8020d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d64:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020d68:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020d6e:	fb00 330e 	mla	r3, r0, lr, r3
 8020d72:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020d76:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020d7a:	9b07      	ldr	r3, [sp, #28]
 8020d7c:	781b      	ldrb	r3, [r3, #0]
 8020d7e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020d82:	fb03 f201 	mul.w	r2, r3, r1
 8020d86:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020d8a:	1c53      	adds	r3, r2, #1
 8020d8c:	ea46 060b 	orr.w	r6, r6, fp
 8020d90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020d94:	9a07      	ldr	r2, [sp, #28]
 8020d96:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020d9a:	7013      	strb	r3, [r2, #0]
 8020d9c:	7853      	ldrb	r3, [r2, #1]
 8020d9e:	434b      	muls	r3, r1
 8020da0:	1c5a      	adds	r2, r3, #1
 8020da2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020da6:	0a33      	lsrs	r3, r6, #8
 8020da8:	0c36      	lsrs	r6, r6, #16
 8020daa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020dae:	9a07      	ldr	r2, [sp, #28]
 8020db0:	7053      	strb	r3, [r2, #1]
 8020db2:	7893      	ldrb	r3, [r2, #2]
 8020db4:	4359      	muls	r1, r3
 8020db6:	1c4b      	adds	r3, r1, #1
 8020db8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020dbc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020dc0:	7096      	strb	r6, [r2, #2]
 8020dc2:	9b07      	ldr	r3, [sp, #28]
 8020dc4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020dc6:	3303      	adds	r3, #3
 8020dc8:	9307      	str	r3, [sp, #28]
 8020dca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020dcc:	4413      	add	r3, r2
 8020dce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020dd0:	9329      	str	r3, [sp, #164]	; 0xa4
 8020dd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020dd4:	4413      	add	r3, r2
 8020dd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8020dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020dda:	3b01      	subs	r3, #1
 8020ddc:	9313      	str	r3, [sp, #76]	; 0x4c
 8020dde:	e6c5      	b.n	8020b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020de0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020de2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020de4:	4413      	add	r3, r2
 8020de6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020de8:	9329      	str	r3, [sp, #164]	; 0xa4
 8020dea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020dec:	4413      	add	r3, r2
 8020dee:	932a      	str	r3, [sp, #168]	; 0xa8
 8020df0:	9b08      	ldr	r3, [sp, #32]
 8020df2:	3b01      	subs	r3, #1
 8020df4:	9308      	str	r3, [sp, #32]
 8020df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020df8:	3303      	adds	r3, #3
 8020dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dfc:	e66b      	b.n	8020ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020dfe:	f47f ae7d 	bne.w	8020afc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	f340 8199 	ble.w	802113c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e10:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020e14:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e18:	eef0 6a48 	vmov.f32	s13, s16
 8020e1c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e20:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e28:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020e2c:	eef0 6a68 	vmov.f32	s13, s17
 8020e30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e34:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020e38:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e3c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e40:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e44:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e48:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e4c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e50:	ee18 2a10 	vmov	r2, s16
 8020e54:	eeb0 8a47 	vmov.f32	s16, s14
 8020e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e5c:	ee18 2a90 	vmov	r2, s17
 8020e60:	932b      	str	r3, [sp, #172]	; 0xac
 8020e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e64:	eef0 8a67 	vmov.f32	s17, s15
 8020e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e6c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e72:	3b01      	subs	r3, #1
 8020e74:	9312      	str	r3, [sp, #72]	; 0x48
 8020e76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e78:	bf08      	it	eq
 8020e7a:	4613      	moveq	r3, r2
 8020e7c:	9308      	str	r3, [sp, #32]
 8020e7e:	e623      	b.n	8020ac8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020e80:	b158      	cbz	r0, 8020e9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020e82:	5d32      	ldrb	r2, [r6, r4]
 8020e84:	26ff      	movs	r6, #255	; 0xff
 8020e86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e8a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8020e90:	46b0      	mov	r8, r6
 8020e92:	e6a7      	b.n	8020be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020e94:	26ff      	movs	r6, #255	; 0xff
 8020e96:	46b2      	mov	sl, r6
 8020e98:	e6a4      	b.n	8020be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020e9a:	26ff      	movs	r6, #255	; 0xff
 8020e9c:	46b2      	mov	sl, r6
 8020e9e:	e7f7      	b.n	8020e90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020ea0:	1c57      	adds	r7, r2, #1
 8020ea2:	d18e      	bne.n	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ea4:	4294      	cmp	r4, r2
 8020ea6:	dd8c      	ble.n	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ea8:	1c5e      	adds	r6, r3, #1
 8020eaa:	db8a      	blt.n	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020eac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020eae:	429e      	cmp	r6, r3
 8020eb0:	dd87      	ble.n	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020eb2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020eb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020eba:	e9cd 4600 	strd	r4, r6, [sp]
 8020ebe:	462b      	mov	r3, r5
 8020ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ec2:	9907      	ldr	r1, [sp, #28]
 8020ec4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020ec6:	f7ff fc85 	bl	80207d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020eca:	e77a      	b.n	8020dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ecc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020ece:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020ed0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ed4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ed6:	1409      	asrs	r1, r1, #16
 8020ed8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020edc:	141b      	asrs	r3, r3, #16
 8020ede:	fb04 1303 	mla	r3, r4, r3, r1
 8020ee2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020ee4:	18ce      	adds	r6, r1, r3
 8020ee6:	5ccb      	ldrb	r3, [r1, r3]
 8020ee8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020eec:	0e1f      	lsrs	r7, r3, #24
 8020eee:	2a00      	cmp	r2, #0
 8020ef0:	f000 8114 	beq.w	802111c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020ef4:	7871      	ldrb	r1, [r6, #1]
 8020ef6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020efa:	910e      	str	r1, [sp, #56]	; 0x38
 8020efc:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020f00:	2800      	cmp	r0, #0
 8020f02:	f000 8115 	beq.w	8021130 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020f06:	1931      	adds	r1, r6, r4
 8020f08:	5d36      	ldrb	r6, [r6, r4]
 8020f0a:	7849      	ldrb	r1, [r1, #1]
 8020f0c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020f10:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020f14:	960a      	str	r6, [sp, #40]	; 0x28
 8020f16:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020f1a:	0e0e      	lsrs	r6, r1, #24
 8020f1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8020f1e:	b292      	uxth	r2, r2
 8020f20:	b280      	uxth	r0, r0
 8020f22:	fb02 fb00 	mul.w	fp, r2, r0
 8020f26:	0112      	lsls	r2, r2, #4
 8020f28:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020f2c:	eba2 090b 	sub.w	r9, r2, fp
 8020f30:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020f34:	b280      	uxth	r0, r0
 8020f36:	fa1f f989 	uxth.w	r9, r9
 8020f3a:	1a09      	subs	r1, r1, r0
 8020f3c:	fb09 f20e 	mul.w	r2, r9, lr
 8020f40:	b289      	uxth	r1, r1
 8020f42:	fb01 2207 	mla	r2, r1, r7, r2
 8020f46:	fb00 220a 	mla	r2, r0, sl, r2
 8020f4a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020f52:	9213      	str	r2, [sp, #76]	; 0x4c
 8020f54:	2a00      	cmp	r2, #0
 8020f56:	f000 80d4 	beq.w	8021102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020f5a:	2fff      	cmp	r7, #255	; 0xff
 8020f5c:	d01a      	beq.n	8020f94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020f5e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f66:	fb07 fc0c 	mul.w	ip, r7, ip
 8020f6a:	435f      	muls	r7, r3
 8020f6c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020f70:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020f74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f78:	4463      	add	r3, ip
 8020f7a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020f7e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020f82:	0a1b      	lsrs	r3, r3, #8
 8020f84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f8c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f90:	ea43 030c 	orr.w	r3, r3, ip
 8020f94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f98:	d01f      	beq.n	8020fda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020f9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f9e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fa2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020fa6:	fb0e f707 	mul.w	r7, lr, r7
 8020faa:	fb0e fe0c 	mul.w	lr, lr, ip
 8020fae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020fb2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020fb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fba:	44bc      	add	ip, r7
 8020fbc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020fc0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020fc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fd0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020fd4:	ea4c 020e 	orr.w	r2, ip, lr
 8020fd8:	920e      	str	r2, [sp, #56]	; 0x38
 8020fda:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020fde:	d01e      	beq.n	802101e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020fe2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020fe6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020fea:	fb0a fe0e 	mul.w	lr, sl, lr
 8020fee:	fb0a fa07 	mul.w	sl, sl, r7
 8020ff2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020ff6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020ffa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ffe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021002:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021006:	44f4      	add	ip, lr
 8021008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802100c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021014:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021018:	ea4c 020a 	orr.w	r2, ip, sl
 802101c:	920a      	str	r2, [sp, #40]	; 0x28
 802101e:	2eff      	cmp	r6, #255	; 0xff
 8021020:	d01c      	beq.n	802105c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8021022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021024:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021028:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802102c:	fb06 fe0e 	mul.w	lr, r6, lr
 8021030:	437e      	muls	r6, r7
 8021032:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021036:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802103a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802103e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021042:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021046:	44f4      	add	ip, lr
 8021048:	0a36      	lsrs	r6, r6, #8
 802104a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802104e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021056:	ea4c 0206 	orr.w	r2, ip, r6
 802105a:	920f      	str	r2, [sp, #60]	; 0x3c
 802105c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802105e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021066:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802106a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802106c:	fb09 f606 	mul.w	r6, r9, r6
 8021070:	fb01 6607 	mla	r6, r1, r7, r6
 8021074:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802107a:	fb00 6607 	mla	r6, r0, r7, r6
 802107e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021084:	fb0b 6607 	mla	r6, fp, r7, r6
 8021088:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802108c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802108e:	fb09 f907 	mul.w	r9, r9, r7
 8021092:	0a36      	lsrs	r6, r6, #8
 8021094:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802109a:	fb01 9303 	mla	r3, r1, r3, r9
 802109e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80210a2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80210a6:	fb00 330c 	mla	r3, r0, ip, r3
 80210aa:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80210ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210b0:	43da      	mvns	r2, r3
 80210b2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80210b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210ba:	b2d2      	uxtb	r2, r2
 80210bc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80210c0:	fb03 f102 	mul.w	r1, r3, r2
 80210c4:	ea46 060e 	orr.w	r6, r6, lr
 80210c8:	1c4b      	adds	r3, r1, #1
 80210ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80210ce:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80210d2:	f808 3c03 	strb.w	r3, [r8, #-3]
 80210d6:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 80210da:	4353      	muls	r3, r2
 80210dc:	1c59      	adds	r1, r3, #1
 80210de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80210e2:	0a33      	lsrs	r3, r6, #8
 80210e4:	0c36      	lsrs	r6, r6, #16
 80210e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80210ea:	f808 3c02 	strb.w	r3, [r8, #-2]
 80210ee:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80210f2:	435a      	muls	r2, r3
 80210f4:	1c53      	adds	r3, r2, #1
 80210f6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80210fa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80210fe:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021102:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021104:	f108 0803 	add.w	r8, r8, #3
 8021108:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802110a:	4413      	add	r3, r2
 802110c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802110e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021110:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021112:	4413      	add	r3, r2
 8021114:	932a      	str	r3, [sp, #168]	; 0xa8
 8021116:	9b07      	ldr	r3, [sp, #28]
 8021118:	3b01      	subs	r3, #1
 802111a:	e508      	b.n	8020b2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802111c:	b158      	cbz	r0, 8021136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802111e:	5d31      	ldrb	r1, [r6, r4]
 8021120:	26ff      	movs	r6, #255	; 0xff
 8021122:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021126:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802112a:	910a      	str	r1, [sp, #40]	; 0x28
 802112c:	46b6      	mov	lr, r6
 802112e:	e6f6      	b.n	8020f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021130:	26ff      	movs	r6, #255	; 0xff
 8021132:	46b2      	mov	sl, r6
 8021134:	e6f3      	b.n	8020f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021136:	26ff      	movs	r6, #255	; 0xff
 8021138:	46b2      	mov	sl, r6
 802113a:	e7f7      	b.n	802112c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802113c:	b017      	add	sp, #92	; 0x5c
 802113e:	ecbd 8b08 	vpop	{d8-d11}
 8021142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802114c:	b08d      	sub	sp, #52	; 0x34
 802114e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021152:	9103      	str	r1, [sp, #12]
 8021154:	fb07 5803 	mla	r8, r7, r3, r5
 8021158:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802115c:	9803      	ldr	r0, [sp, #12]
 802115e:	2f00      	cmp	r7, #0
 8021160:	910b      	str	r1, [sp, #44]	; 0x2c
 8021162:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021166:	9903      	ldr	r1, [sp, #12]
 8021168:	9c03      	ldr	r4, [sp, #12]
 802116a:	eb02 0608 	add.w	r6, r2, r8
 802116e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021172:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021176:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802117a:	7809      	ldrb	r1, [r1, #0]
 802117c:	7840      	ldrb	r0, [r0, #1]
 802117e:	78a4      	ldrb	r4, [r4, #2]
 8021180:	db51      	blt.n	8021226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021182:	45be      	cmp	lr, r7
 8021184:	dd4f      	ble.n	8021226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021186:	2d00      	cmp	r5, #0
 8021188:	db49      	blt.n	802121e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802118a:	42ab      	cmp	r3, r5
 802118c:	dd47      	ble.n	802121e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802118e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8021192:	9204      	str	r2, [sp, #16]
 8021194:	7872      	ldrb	r2, [r6, #1]
 8021196:	9205      	str	r2, [sp, #20]
 8021198:	78b2      	ldrb	r2, [r6, #2]
 802119a:	9206      	str	r2, [sp, #24]
 802119c:	1c6a      	adds	r2, r5, #1
 802119e:	d449      	bmi.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211a0:	4293      	cmp	r3, r2
 80211a2:	dd47      	ble.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211a4:	f1bc 0f00 	cmp.w	ip, #0
 80211a8:	d044      	beq.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211aa:	7972      	ldrb	r2, [r6, #5]
 80211ac:	f896 b003 	ldrb.w	fp, [r6, #3]
 80211b0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80211b4:	9201      	str	r2, [sp, #4]
 80211b6:	3701      	adds	r7, #1
 80211b8:	d444      	bmi.n	8021244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80211ba:	45be      	cmp	lr, r7
 80211bc:	dd42      	ble.n	8021244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80211be:	f1b9 0f00 	cmp.w	r9, #0
 80211c2:	f000 80c1 	beq.w	8021348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80211c6:	2d00      	cmp	r5, #0
 80211c8:	db38      	blt.n	802123c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80211ca:	42ab      	cmp	r3, r5
 80211cc:	dd36      	ble.n	802123c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80211ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80211d2:	f816 8002 	ldrb.w	r8, [r6, r2]
 80211d6:	2203      	movs	r2, #3
 80211d8:	fb03 6702 	mla	r7, r3, r2, r6
 80211dc:	fb03 6202 	mla	r2, r3, r2, r6
 80211e0:	787f      	ldrb	r7, [r7, #1]
 80211e2:	f892 e002 	ldrb.w	lr, [r2, #2]
 80211e6:	9702      	str	r7, [sp, #8]
 80211e8:	3501      	adds	r5, #1
 80211ea:	d432      	bmi.n	8021252 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80211ec:	42ab      	cmp	r3, r5
 80211ee:	dd30      	ble.n	8021252 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80211f0:	f1bc 0f00 	cmp.w	ip, #0
 80211f4:	d031      	beq.n	802125a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80211f6:	2703      	movs	r7, #3
 80211f8:	fb13 7207 	smlabb	r2, r3, r7, r7
 80211fc:	5cb5      	ldrb	r5, [r6, r2]
 80211fe:	fb03 6207 	mla	r2, r3, r7, r6
 8021202:	fb03 6307 	mla	r3, r3, r7, r6
 8021206:	7912      	ldrb	r2, [r2, #4]
 8021208:	795e      	ldrb	r6, [r3, #5]
 802120a:	f1bc 0f0f 	cmp.w	ip, #15
 802120e:	d927      	bls.n	8021260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021210:	4b53      	ldr	r3, [pc, #332]	; (8021360 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021212:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021216:	4a53      	ldr	r2, [pc, #332]	; (8021364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021218:	4853      	ldr	r0, [pc, #332]	; (8021368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802121a:	f004 facf 	bl	80257bc <__assert_func>
 802121e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021222:	9104      	str	r1, [sp, #16]
 8021224:	e7ba      	b.n	802119c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021226:	9401      	str	r4, [sp, #4]
 8021228:	4682      	mov	sl, r0
 802122a:	468b      	mov	fp, r1
 802122c:	9104      	str	r1, [sp, #16]
 802122e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021232:	e7c0      	b.n	80211b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021234:	9401      	str	r4, [sp, #4]
 8021236:	4682      	mov	sl, r0
 8021238:	468b      	mov	fp, r1
 802123a:	e7bc      	b.n	80211b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802123c:	46a6      	mov	lr, r4
 802123e:	9002      	str	r0, [sp, #8]
 8021240:	4688      	mov	r8, r1
 8021242:	e7d1      	b.n	80211e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021244:	4626      	mov	r6, r4
 8021246:	4602      	mov	r2, r0
 8021248:	460d      	mov	r5, r1
 802124a:	46a6      	mov	lr, r4
 802124c:	9002      	str	r0, [sp, #8]
 802124e:	4688      	mov	r8, r1
 8021250:	e7db      	b.n	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021252:	4626      	mov	r6, r4
 8021254:	4602      	mov	r2, r0
 8021256:	460d      	mov	r5, r1
 8021258:	e7d7      	b.n	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802125a:	4626      	mov	r6, r4
 802125c:	4602      	mov	r2, r0
 802125e:	460d      	mov	r5, r1
 8021260:	f1b9 0f0f 	cmp.w	r9, #15
 8021264:	d8d4      	bhi.n	8021210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021266:	fa1f f38c 	uxth.w	r3, ip
 802126a:	fa1f fc89 	uxth.w	ip, r9
 802126e:	fb03 f70c 	mul.w	r7, r3, ip
 8021272:	011b      	lsls	r3, r3, #4
 8021274:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021278:	9707      	str	r7, [sp, #28]
 802127a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802127e:	fa1f fc8c 	uxth.w	ip, ip
 8021282:	eba7 070c 	sub.w	r7, r7, ip
 8021286:	b2bf      	uxth	r7, r7
 8021288:	9709      	str	r7, [sp, #36]	; 0x24
 802128a:	9f07      	ldr	r7, [sp, #28]
 802128c:	1bdb      	subs	r3, r3, r7
 802128e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8021292:	b29b      	uxth	r3, r3
 8021294:	9708      	str	r7, [sp, #32]
 8021296:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021298:	930a      	str	r3, [sp, #40]	; 0x28
 802129a:	ea6f 0907 	mvn.w	r9, r7
 802129e:	fb03 fb0b 	mul.w	fp, r3, fp
 80212a2:	9f04      	ldr	r7, [sp, #16]
 80212a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212a6:	fa5f f989 	uxtb.w	r9, r9
 80212aa:	fb03 bb07 	mla	fp, r3, r7, fp
 80212ae:	9f07      	ldr	r7, [sp, #28]
 80212b0:	fb11 f109 	smulbb	r1, r1, r9
 80212b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212b6:	fb0c b808 	mla	r8, ip, r8, fp
 80212ba:	fb10 f009 	smulbb	r0, r0, r9
 80212be:	fb14 f409 	smulbb	r4, r4, r9
 80212c2:	fb07 8805 	mla	r8, r7, r5, r8
 80212c6:	9d08      	ldr	r5, [sp, #32]
 80212c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80212ca:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80212ce:	fb08 1805 	mla	r8, r8, r5, r1
 80212d2:	9d05      	ldr	r5, [sp, #20]
 80212d4:	fa1f f888 	uxth.w	r8, r8
 80212d8:	f108 0101 	add.w	r1, r8, #1
 80212dc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80212e0:	9903      	ldr	r1, [sp, #12]
 80212e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80212e6:	f881 8000 	strb.w	r8, [r1]
 80212ea:	fb03 f10a 	mul.w	r1, r3, sl
 80212ee:	fb07 1105 	mla	r1, r7, r5, r1
 80212f2:	9d02      	ldr	r5, [sp, #8]
 80212f4:	fb0c 1105 	mla	r1, ip, r5, r1
 80212f8:	9d07      	ldr	r5, [sp, #28]
 80212fa:	fb05 1102 	mla	r1, r5, r2, r1
 80212fe:	9a08      	ldr	r2, [sp, #32]
 8021300:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021304:	fb01 0102 	mla	r1, r1, r2, r0
 8021308:	9a03      	ldr	r2, [sp, #12]
 802130a:	b289      	uxth	r1, r1
 802130c:	1c48      	adds	r0, r1, #1
 802130e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021312:	1209      	asrs	r1, r1, #8
 8021314:	7051      	strb	r1, [r2, #1]
 8021316:	9a01      	ldr	r2, [sp, #4]
 8021318:	4353      	muls	r3, r2
 802131a:	9a06      	ldr	r2, [sp, #24]
 802131c:	fb07 3702 	mla	r7, r7, r2, r3
 8021320:	9b08      	ldr	r3, [sp, #32]
 8021322:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021326:	fb05 c606 	mla	r6, r5, r6, ip
 802132a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802132e:	fb06 4603 	mla	r6, r6, r3, r4
 8021332:	9b03      	ldr	r3, [sp, #12]
 8021334:	b2b6      	uxth	r6, r6
 8021336:	f106 0e01 	add.w	lr, r6, #1
 802133a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802133e:	1236      	asrs	r6, r6, #8
 8021340:	709e      	strb	r6, [r3, #2]
 8021342:	b00d      	add	sp, #52	; 0x34
 8021344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021348:	f1bc 0f0f 	cmp.w	ip, #15
 802134c:	f63f af60 	bhi.w	8021210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021350:	4626      	mov	r6, r4
 8021352:	4602      	mov	r2, r0
 8021354:	460d      	mov	r5, r1
 8021356:	46a6      	mov	lr, r4
 8021358:	9002      	str	r0, [sp, #8]
 802135a:	4688      	mov	r8, r1
 802135c:	e783      	b.n	8021266 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802135e:	bf00      	nop
 8021360:	0802af2d 	.word	0x0802af2d
 8021364:	0802b426 	.word	0x0802b426
 8021368:	0802aff6 	.word	0x0802aff6

0802136c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021370:	ed2d 8b08 	vpush	{d8-d11}
 8021374:	b0a1      	sub	sp, #132	; 0x84
 8021376:	eeb0 aa40 	vmov.f32	s20, s0
 802137a:	eef0 9a60 	vmov.f32	s19, s1
 802137e:	9307      	str	r3, [sp, #28]
 8021380:	eeb0 9a41 	vmov.f32	s18, s2
 8021384:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8021388:	eeb0 8a62 	vmov.f32	s16, s5
 802138c:	9210      	str	r2, [sp, #64]	; 0x40
 802138e:	eef0 8a43 	vmov.f32	s17, s6
 8021392:	9308      	str	r3, [sp, #32]
 8021394:	eef0 ba44 	vmov.f32	s23, s8
 8021398:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 802139c:	eeb0 ba64 	vmov.f32	s22, s9
 80213a0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80213a2:	eef0 aa45 	vmov.f32	s21, s10
 80213a6:	930a      	str	r3, [sp, #40]	; 0x28
 80213a8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80213ac:	901f      	str	r0, [sp, #124]	; 0x7c
 80213ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80213b0:	6850      	ldr	r0, [r2, #4]
 80213b2:	910e      	str	r1, [sp, #56]	; 0x38
 80213b4:	6812      	ldr	r2, [r2, #0]
 80213b6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80213ba:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80213be:	fb00 1303 	mla	r3, r0, r3, r1
 80213c2:	9908      	ldr	r1, [sp, #32]
 80213c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213c8:	18d3      	adds	r3, r2, r3
 80213ca:	2203      	movs	r2, #3
 80213cc:	9309      	str	r3, [sp, #36]	; 0x24
 80213ce:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	930c      	str	r3, [sp, #48]	; 0x30
 80213d4:	f06f 0304 	mvn.w	r3, #4
 80213d8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80213dc:	930d      	str	r3, [sp, #52]	; 0x34
 80213de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80213e0:	43db      	mvns	r3, r3
 80213e2:	b2db      	uxtb	r3, r3
 80213e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80213e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	dc03      	bgt.n	80213f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80213ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	f340 81df 	ble.w	80217b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80213f4:	9b07      	ldr	r3, [sp, #28]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	f340 80f2 	ble.w	80215e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80213fc:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021400:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021404:	d430      	bmi.n	8021468 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021406:	1c51      	adds	r1, r2, #1
 8021408:	9808      	ldr	r0, [sp, #32]
 802140a:	4281      	cmp	r1, r0
 802140c:	da2f      	bge.n	802146e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802140e:	2b00      	cmp	r3, #0
 8021410:	db2d      	blt.n	802146e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021412:	1c59      	adds	r1, r3, #1
 8021414:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021416:	4288      	cmp	r0, r1
 8021418:	dd29      	ble.n	802146e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802141a:	9b07      	ldr	r3, [sp, #28]
 802141c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802141e:	3b01      	subs	r3, #1
 8021420:	fb02 8203 	mla	r2, r2, r3, r8
 8021424:	1412      	asrs	r2, r2, #16
 8021426:	d42d      	bmi.n	8021484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021428:	3201      	adds	r2, #1
 802142a:	9908      	ldr	r1, [sp, #32]
 802142c:	4291      	cmp	r1, r2
 802142e:	dd29      	ble.n	8021484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021430:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021432:	fb02 b303 	mla	r3, r2, r3, fp
 8021436:	141b      	asrs	r3, r3, #16
 8021438:	d424      	bmi.n	8021484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802143a:	3301      	adds	r3, #1
 802143c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802143e:	429a      	cmp	r2, r3
 8021440:	dd20      	ble.n	8021484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021444:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021448:	1cde      	adds	r6, r3, #3
 802144a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802144e:	f1bc 0f00 	cmp.w	ip, #0
 8021452:	f300 811f 	bgt.w	8021694 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021456:	9b07      	ldr	r3, [sp, #28]
 8021458:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802145c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802145e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021462:	4423      	add	r3, r4
 8021464:	9309      	str	r3, [sp, #36]	; 0x24
 8021466:	e0bd      	b.n	80215e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021468:	1c57      	adds	r7, r2, #1
 802146a:	f040 80ae 	bne.w	80215ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802146e:	9908      	ldr	r1, [sp, #32]
 8021470:	428a      	cmp	r2, r1
 8021472:	f280 80aa 	bge.w	80215ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021476:	1c5e      	adds	r6, r3, #1
 8021478:	f2c0 80a7 	blt.w	80215ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802147c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802147e:	4293      	cmp	r3, r2
 8021480:	f280 80a3 	bge.w	80215ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021488:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802148a:	f1ba 0f00 	cmp.w	sl, #0
 802148e:	dde2      	ble.n	8021456 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021490:	ea5f 4028 	movs.w	r0, r8, asr #16
 8021494:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021498:	ea4f 412b 	mov.w	r1, fp, asr #16
 802149c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80214a0:	f100 80df 	bmi.w	8021662 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80214a4:	1c45      	adds	r5, r0, #1
 80214a6:	9f08      	ldr	r7, [sp, #32]
 80214a8:	42af      	cmp	r7, r5
 80214aa:	f340 80dc 	ble.w	8021666 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214ae:	2900      	cmp	r1, #0
 80214b0:	f2c0 80d9 	blt.w	8021666 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214b4:	1c4d      	adds	r5, r1, #1
 80214b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80214b8:	42af      	cmp	r7, r5
 80214ba:	f340 80d4 	ble.w	8021666 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214be:	9d08      	ldr	r5, [sp, #32]
 80214c0:	fb05 0101 	mla	r1, r5, r1, r0
 80214c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80214c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80214ca:	1845      	adds	r5, r0, r1
 80214cc:	5c40      	ldrb	r0, [r0, r1]
 80214ce:	792f      	ldrb	r7, [r5, #4]
 80214d0:	7869      	ldrb	r1, [r5, #1]
 80214d2:	9711      	str	r7, [sp, #68]	; 0x44
 80214d4:	796f      	ldrb	r7, [r5, #5]
 80214d6:	f895 e002 	ldrb.w	lr, [r5, #2]
 80214da:	f895 9003 	ldrb.w	r9, [r5, #3]
 80214de:	9712      	str	r7, [sp, #72]	; 0x48
 80214e0:	b17a      	cbz	r2, 8021502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80214e2:	3505      	adds	r5, #5
 80214e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80214e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80214e8:	19ef      	adds	r7, r5, r7
 80214ea:	5d2d      	ldrb	r5, [r5, r4]
 80214ec:	787c      	ldrb	r4, [r7, #1]
 80214ee:	9513      	str	r5, [sp, #76]	; 0x4c
 80214f0:	9415      	str	r4, [sp, #84]	; 0x54
 80214f2:	78bc      	ldrb	r4, [r7, #2]
 80214f4:	9417      	str	r4, [sp, #92]	; 0x5c
 80214f6:	78fc      	ldrb	r4, [r7, #3]
 80214f8:	9414      	str	r4, [sp, #80]	; 0x50
 80214fa:	793c      	ldrb	r4, [r7, #4]
 80214fc:	9416      	str	r4, [sp, #88]	; 0x58
 80214fe:	797c      	ldrb	r4, [r7, #5]
 8021500:	9418      	str	r4, [sp, #96]	; 0x60
 8021502:	b29b      	uxth	r3, r3
 8021504:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021506:	b292      	uxth	r2, r2
 8021508:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802150c:	fb03 f702 	mul.w	r7, r3, r2
 8021510:	011b      	lsls	r3, r3, #4
 8021512:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021516:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802151a:	1bdb      	subs	r3, r3, r7
 802151c:	b292      	uxth	r2, r2
 802151e:	b29b      	uxth	r3, r3
 8021520:	ebac 0c02 	sub.w	ip, ip, r2
 8021524:	fb03 f909 	mul.w	r9, r3, r9
 8021528:	fa1f fc8c 	uxth.w	ip, ip
 802152c:	fb0c 9000 	mla	r0, ip, r0, r9
 8021530:	f896 9000 	ldrb.w	r9, [r6]
 8021534:	fb02 0004 	mla	r0, r2, r4, r0
 8021538:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802153a:	fb07 0004 	mla	r0, r7, r4, r0
 802153e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021540:	fb19 f904 	smulbb	r9, r9, r4
 8021544:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021548:	fb00 9005 	mla	r0, r0, r5, r9
 802154c:	b280      	uxth	r0, r0
 802154e:	f100 0901 	add.w	r9, r0, #1
 8021552:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021556:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021558:	4358      	muls	r0, r3
 802155a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802155e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021562:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021564:	f886 9000 	strb.w	r9, [r6]
 8021568:	fb02 1100 	mla	r1, r2, r0, r1
 802156c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802156e:	fb07 1100 	mla	r1, r7, r0, r1
 8021572:	7870      	ldrb	r0, [r6, #1]
 8021574:	fb10 f004 	smulbb	r0, r0, r4
 8021578:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802157c:	fb01 0105 	mla	r1, r1, r5, r0
 8021580:	b289      	uxth	r1, r1
 8021582:	1c48      	adds	r0, r1, #1
 8021584:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021588:	1209      	asrs	r1, r1, #8
 802158a:	7071      	strb	r1, [r6, #1]
 802158c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802158e:	434b      	muls	r3, r1
 8021590:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021592:	fb0c 330e 	mla	r3, ip, lr, r3
 8021596:	fb02 3201 	mla	r2, r2, r1, r3
 802159a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802159c:	fb07 2703 	mla	r7, r7, r3, r2
 80215a0:	78b2      	ldrb	r2, [r6, #2]
 80215a2:	fb12 f204 	smulbb	r2, r2, r4
 80215a6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80215aa:	fb07 2505 	mla	r5, r7, r5, r2
 80215ae:	b2ad      	uxth	r5, r5
 80215b0:	1c6f      	adds	r7, r5, #1
 80215b2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80215b6:	122d      	asrs	r5, r5, #8
 80215b8:	70b5      	strb	r5, [r6, #2]
 80215ba:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80215bc:	3603      	adds	r6, #3
 80215be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80215c2:	4498      	add	r8, r3
 80215c4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80215c6:	449b      	add	fp, r3
 80215c8:	e75f      	b.n	802148a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80215ca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80215cc:	4498      	add	r8, r3
 80215ce:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80215d0:	449b      	add	fp, r3
 80215d2:	9b07      	ldr	r3, [sp, #28]
 80215d4:	3b01      	subs	r3, #1
 80215d6:	9307      	str	r3, [sp, #28]
 80215d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215da:	3303      	adds	r3, #3
 80215dc:	9309      	str	r3, [sp, #36]	; 0x24
 80215de:	e709      	b.n	80213f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80215e0:	f47f af1b 	bne.w	802141a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80215e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	f340 80e3 	ble.w	80217b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80215ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80215f2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80215f6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80215fa:	eef0 6a48 	vmov.f32	s13, s16
 80215fe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021602:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802160a:	ee16 8a90 	vmov	r8, s13
 802160e:	eef0 6a68 	vmov.f32	s13, s17
 8021612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021616:	ee16 ba90 	vmov	fp, s13
 802161a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802161e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021622:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021626:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802162a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802162e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021632:	ee18 2a10 	vmov	r2, s16
 8021636:	eeb0 8a47 	vmov.f32	s16, s14
 802163a:	fb92 f3f3 	sdiv	r3, r2, r3
 802163e:	ee18 2a90 	vmov	r2, s17
 8021642:	9335      	str	r3, [sp, #212]	; 0xd4
 8021644:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021646:	eef0 8a67 	vmov.f32	s17, s15
 802164a:	fb92 f3f3 	sdiv	r3, r2, r3
 802164e:	9336      	str	r3, [sp, #216]	; 0xd8
 8021650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021652:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021654:	3b01      	subs	r3, #1
 8021656:	930e      	str	r3, [sp, #56]	; 0x38
 8021658:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802165a:	bf08      	it	eq
 802165c:	4613      	moveq	r3, r2
 802165e:	9307      	str	r3, [sp, #28]
 8021660:	e6c1      	b.n	80213e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021662:	1c45      	adds	r5, r0, #1
 8021664:	d1a9      	bne.n	80215ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021666:	9c08      	ldr	r4, [sp, #32]
 8021668:	42a0      	cmp	r0, r4
 802166a:	daa6      	bge.n	80215ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802166c:	1c4c      	adds	r4, r1, #1
 802166e:	dba4      	blt.n	80215ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021670:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021672:	428c      	cmp	r4, r1
 8021674:	dda1      	ble.n	80215ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021676:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021678:	9001      	str	r0, [sp, #4]
 802167a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802167c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021682:	4631      	mov	r1, r6
 8021684:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8021688:	9300      	str	r3, [sp, #0]
 802168a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802168c:	9b08      	ldr	r3, [sp, #32]
 802168e:	f7ff fd5b 	bl	8021148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021692:	e792      	b.n	80215ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021694:	ea4f 4228 	mov.w	r2, r8, asr #16
 8021698:	9c08      	ldr	r4, [sp, #32]
 802169a:	ea4f 402b 	mov.w	r0, fp, asr #16
 802169e:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80216a2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80216a6:	fb04 2000 	mla	r0, r4, r0, r2
 80216aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80216ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80216b2:	4402      	add	r2, r0
 80216b4:	5c25      	ldrb	r5, [r4, r0]
 80216b6:	7894      	ldrb	r4, [r2, #2]
 80216b8:	7850      	ldrb	r0, [r2, #1]
 80216ba:	9411      	str	r4, [sp, #68]	; 0x44
 80216bc:	7954      	ldrb	r4, [r2, #5]
 80216be:	f892 a003 	ldrb.w	sl, [r2, #3]
 80216c2:	f892 9004 	ldrb.w	r9, [r2, #4]
 80216c6:	9412      	str	r4, [sp, #72]	; 0x48
 80216c8:	b171      	cbz	r1, 80216e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80216ca:	3205      	adds	r2, #5
 80216cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216ce:	1917      	adds	r7, r2, r4
 80216d0:	5d12      	ldrb	r2, [r2, r4]
 80216d2:	9219      	str	r2, [sp, #100]	; 0x64
 80216d4:	787a      	ldrb	r2, [r7, #1]
 80216d6:	921b      	str	r2, [sp, #108]	; 0x6c
 80216d8:	78ba      	ldrb	r2, [r7, #2]
 80216da:	921d      	str	r2, [sp, #116]	; 0x74
 80216dc:	78fa      	ldrb	r2, [r7, #3]
 80216de:	921a      	str	r2, [sp, #104]	; 0x68
 80216e0:	793a      	ldrb	r2, [r7, #4]
 80216e2:	921c      	str	r2, [sp, #112]	; 0x70
 80216e4:	797a      	ldrb	r2, [r7, #5]
 80216e6:	921e      	str	r2, [sp, #120]	; 0x78
 80216e8:	b29b      	uxth	r3, r3
 80216ea:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80216ec:	b289      	uxth	r1, r1
 80216ee:	3603      	adds	r6, #3
 80216f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80216f4:	fb03 f201 	mul.w	r2, r3, r1
 80216f8:	011b      	lsls	r3, r3, #4
 80216fa:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80216fe:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021702:	1a9b      	subs	r3, r3, r2
 8021704:	b289      	uxth	r1, r1
 8021706:	b29b      	uxth	r3, r3
 8021708:	1a7f      	subs	r7, r7, r1
 802170a:	fb03 fa0a 	mul.w	sl, r3, sl
 802170e:	b2bf      	uxth	r7, r7
 8021710:	fb03 f909 	mul.w	r9, r3, r9
 8021714:	fb07 a505 	mla	r5, r7, r5, sl
 8021718:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802171c:	fb07 9000 	mla	r0, r7, r0, r9
 8021720:	fb01 5504 	mla	r5, r1, r4, r5
 8021724:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021726:	fb02 5504 	mla	r5, r2, r4, r5
 802172a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802172c:	fb1a fa04 	smulbb	sl, sl, r4
 8021730:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021734:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021736:	fb05 a50e 	mla	r5, r5, lr, sl
 802173a:	fb01 0004 	mla	r0, r1, r4, r0
 802173e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021740:	b2ad      	uxth	r5, r5
 8021742:	fb02 0004 	mla	r0, r2, r4, r0
 8021746:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021748:	f105 0a01 	add.w	sl, r5, #1
 802174c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021750:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021754:	122d      	asrs	r5, r5, #8
 8021756:	f806 5c06 	strb.w	r5, [r6, #-6]
 802175a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802175e:	fb15 f504 	smulbb	r5, r5, r4
 8021762:	fb00 500e 	mla	r0, r0, lr, r5
 8021766:	b280      	uxth	r0, r0
 8021768:	1c45      	adds	r5, r0, #1
 802176a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802176e:	1200      	asrs	r0, r0, #8
 8021770:	f806 0c05 	strb.w	r0, [r6, #-5]
 8021774:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021776:	4343      	muls	r3, r0
 8021778:	9811      	ldr	r0, [sp, #68]	; 0x44
 802177a:	fb07 3300 	mla	r3, r7, r0, r3
 802177e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021780:	fb01 3100 	mla	r1, r1, r0, r3
 8021784:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021786:	fb02 1203 	mla	r2, r2, r3, r1
 802178a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802178e:	fb11 f104 	smulbb	r1, r1, r4
 8021792:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021796:	fb02 120e 	mla	r2, r2, lr, r1
 802179a:	b292      	uxth	r2, r2
 802179c:	1c53      	adds	r3, r2, #1
 802179e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80217a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80217a4:	1212      	asrs	r2, r2, #8
 80217a6:	4498      	add	r8, r3
 80217a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80217aa:	f806 2c04 	strb.w	r2, [r6, #-4]
 80217ae:	449b      	add	fp, r3
 80217b0:	e64d      	b.n	802144e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80217b2:	b021      	add	sp, #132	; 0x84
 80217b4:	ecbd 8b08 	vpop	{d8-d11}
 80217b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80217bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c0:	b085      	sub	sp, #20
 80217c2:	784d      	ldrb	r5, [r1, #1]
 80217c4:	788e      	ldrb	r6, [r1, #2]
 80217c6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80217ca:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80217ce:	9403      	str	r4, [sp, #12]
 80217d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80217d4:	780c      	ldrb	r4, [r1, #0]
 80217d6:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80217da:	fb07 ce03 	mla	lr, r7, r3, ip
 80217de:	2f00      	cmp	r7, #0
 80217e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80217e4:	eb02 0b0e 	add.w	fp, r2, lr
 80217e8:	db56      	blt.n	8021898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80217ea:	45b9      	cmp	r9, r7
 80217ec:	dd54      	ble.n	8021898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80217ee:	f1bc 0f00 	cmp.w	ip, #0
 80217f2:	db4d      	blt.n	8021890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80217f4:	4563      	cmp	r3, ip
 80217f6:	dd4b      	ble.n	8021890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80217f8:	f812 200e 	ldrb.w	r2, [r2, lr]
 80217fc:	9200      	str	r2, [sp, #0]
 80217fe:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021802:	9201      	str	r2, [sp, #4]
 8021804:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021808:	9202      	str	r2, [sp, #8]
 802180a:	f11c 0201 	adds.w	r2, ip, #1
 802180e:	d44a      	bmi.n	80218a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021810:	4293      	cmp	r3, r2
 8021812:	dd48      	ble.n	80218a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021814:	2800      	cmp	r0, #0
 8021816:	d046      	beq.n	80218a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021818:	f89b e003 	ldrb.w	lr, [fp, #3]
 802181c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021820:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021824:	3701      	adds	r7, #1
 8021826:	d446      	bmi.n	80218b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021828:	45b9      	cmp	r9, r7
 802182a:	dd44      	ble.n	80218b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802182c:	9a03      	ldr	r2, [sp, #12]
 802182e:	2a00      	cmp	r2, #0
 8021830:	d045      	beq.n	80218be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021832:	f1bc 0f00 	cmp.w	ip, #0
 8021836:	db3a      	blt.n	80218ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021838:	4563      	cmp	r3, ip
 802183a:	dd38      	ble.n	80218ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802183c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021840:	f04f 0903 	mov.w	r9, #3
 8021844:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021848:	fb03 b209 	mla	r2, r3, r9, fp
 802184c:	fb03 b909 	mla	r9, r3, r9, fp
 8021850:	7852      	ldrb	r2, [r2, #1]
 8021852:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021856:	f11c 0c01 	adds.w	ip, ip, #1
 802185a:	d40d      	bmi.n	8021878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802185c:	4563      	cmp	r3, ip
 802185e:	dd0b      	ble.n	8021878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021860:	b160      	cbz	r0, 802187c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021862:	2603      	movs	r6, #3
 8021864:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021868:	fb03 b506 	mla	r5, r3, r6, fp
 802186c:	fb03 b306 	mla	r3, r3, r6, fp
 8021870:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021874:	792d      	ldrb	r5, [r5, #4]
 8021876:	795e      	ldrb	r6, [r3, #5]
 8021878:	280f      	cmp	r0, #15
 802187a:	d802      	bhi.n	8021882 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802187c:	9b03      	ldr	r3, [sp, #12]
 802187e:	2b0f      	cmp	r3, #15
 8021880:	d922      	bls.n	80218c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021882:	4b2f      	ldr	r3, [pc, #188]	; (8021940 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021884:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021888:	4a2e      	ldr	r2, [pc, #184]	; (8021944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 802188a:	482f      	ldr	r0, [pc, #188]	; (8021948 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 802188c:	f003 ff96 	bl	80257bc <__assert_func>
 8021890:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021894:	9400      	str	r4, [sp, #0]
 8021896:	e7b8      	b.n	802180a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021898:	46b2      	mov	sl, r6
 802189a:	46a8      	mov	r8, r5
 802189c:	46a6      	mov	lr, r4
 802189e:	9400      	str	r4, [sp, #0]
 80218a0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80218a4:	e7be      	b.n	8021824 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218a6:	46b2      	mov	sl, r6
 80218a8:	46a8      	mov	r8, r5
 80218aa:	46a6      	mov	lr, r4
 80218ac:	e7ba      	b.n	8021824 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218ae:	46b1      	mov	r9, r6
 80218b0:	462a      	mov	r2, r5
 80218b2:	4627      	mov	r7, r4
 80218b4:	e7cf      	b.n	8021856 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80218b6:	46b1      	mov	r9, r6
 80218b8:	462a      	mov	r2, r5
 80218ba:	4627      	mov	r7, r4
 80218bc:	e7dc      	b.n	8021878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80218be:	280f      	cmp	r0, #15
 80218c0:	d8df      	bhi.n	8021882 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80218c2:	46b1      	mov	r9, r6
 80218c4:	462a      	mov	r2, r5
 80218c6:	4627      	mov	r7, r4
 80218c8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80218cc:	b280      	uxth	r0, r0
 80218ce:	fb00 f30b 	mul.w	r3, r0, fp
 80218d2:	0100      	lsls	r0, r0, #4
 80218d4:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80218d8:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80218dc:	1ac0      	subs	r0, r0, r3
 80218de:	fa1f fb8b 	uxth.w	fp, fp
 80218e2:	b280      	uxth	r0, r0
 80218e4:	ebac 0c0b 	sub.w	ip, ip, fp
 80218e8:	9003      	str	r0, [sp, #12]
 80218ea:	fa1f fc8c 	uxth.w	ip, ip
 80218ee:	fb00 fe0e 	mul.w	lr, r0, lr
 80218f2:	9800      	ldr	r0, [sp, #0]
 80218f4:	fb0c ee00 	mla	lr, ip, r0, lr
 80218f8:	9803      	ldr	r0, [sp, #12]
 80218fa:	fb00 f808 	mul.w	r8, r0, r8
 80218fe:	9801      	ldr	r0, [sp, #4]
 8021900:	fb0b ee07 	mla	lr, fp, r7, lr
 8021904:	fb0c 8800 	mla	r8, ip, r0, r8
 8021908:	fb03 ee04 	mla	lr, r3, r4, lr
 802190c:	fb0b 8202 	mla	r2, fp, r2, r8
 8021910:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021914:	fb03 2505 	mla	r5, r3, r5, r2
 8021918:	9a03      	ldr	r2, [sp, #12]
 802191a:	f881 e000 	strb.w	lr, [r1]
 802191e:	fb02 f00a 	mul.w	r0, r2, sl
 8021922:	9a02      	ldr	r2, [sp, #8]
 8021924:	122d      	asrs	r5, r5, #8
 8021926:	fb0c 0c02 	mla	ip, ip, r2, r0
 802192a:	704d      	strb	r5, [r1, #1]
 802192c:	fb0b c909 	mla	r9, fp, r9, ip
 8021930:	fb03 9606 	mla	r6, r3, r6, r9
 8021934:	1236      	asrs	r6, r6, #8
 8021936:	708e      	strb	r6, [r1, #2]
 8021938:	b005      	add	sp, #20
 802193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802193e:	bf00      	nop
 8021940:	0802af2d 	.word	0x0802af2d
 8021944:	0802b426 	.word	0x0802b426
 8021948:	0802aff6 	.word	0x0802aff6

0802194c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021950:	ed2d 8b0a 	vpush	{d8-d12}
 8021954:	b09d      	sub	sp, #116	; 0x74
 8021956:	eeb0 aa40 	vmov.f32	s20, s0
 802195a:	eef0 9a60 	vmov.f32	s19, s1
 802195e:	9306      	str	r3, [sp, #24]
 8021960:	eeb0 9a41 	vmov.f32	s18, s2
 8021964:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021968:	eeb0 8a62 	vmov.f32	s16, s5
 802196c:	901b      	str	r0, [sp, #108]	; 0x6c
 802196e:	eef0 8a43 	vmov.f32	s17, s6
 8021972:	9307      	str	r3, [sp, #28]
 8021974:	eeb0 ca44 	vmov.f32	s24, s8
 8021978:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 802197c:	eef0 ba64 	vmov.f32	s23, s9
 8021980:	eeb0 ba45 	vmov.f32	s22, s10
 8021984:	9309      	str	r3, [sp, #36]	; 0x24
 8021986:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802198a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802198e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021990:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021994:	6850      	ldr	r0, [r2, #4]
 8021996:	6812      	ldr	r2, [r2, #0]
 8021998:	fb00 1303 	mla	r3, r0, r3, r1
 802199c:	9907      	ldr	r1, [sp, #28]
 802199e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219a2:	18d3      	adds	r3, r2, r3
 80219a4:	2203      	movs	r2, #3
 80219a6:	9308      	str	r3, [sp, #32]
 80219a8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80219aa:	681b      	ldr	r3, [r3, #0]
 80219ac:	930a      	str	r3, [sp, #40]	; 0x28
 80219ae:	f06f 0304 	mvn.w	r3, #4
 80219b2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80219b6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80219ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80219bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219be:	2b00      	cmp	r3, #0
 80219c0:	dc03      	bgt.n	80219ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80219c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	f340 8193 	ble.w	8021cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80219ca:	9b06      	ldr	r3, [sp, #24]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	f340 80d0 	ble.w	8021b72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80219d2:	1432      	asrs	r2, r6, #16
 80219d4:	ea4f 4325 	mov.w	r3, r5, asr #16
 80219d8:	d42f      	bmi.n	8021a3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80219da:	1c51      	adds	r1, r2, #1
 80219dc:	9807      	ldr	r0, [sp, #28]
 80219de:	4281      	cmp	r1, r0
 80219e0:	da2e      	bge.n	8021a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	db2c      	blt.n	8021a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80219e6:	1c59      	adds	r1, r3, #1
 80219e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80219ea:	4288      	cmp	r0, r1
 80219ec:	dd28      	ble.n	8021a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80219ee:	9b06      	ldr	r3, [sp, #24]
 80219f0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80219f2:	3b01      	subs	r3, #1
 80219f4:	fb02 6203 	mla	r2, r2, r3, r6
 80219f8:	1412      	asrs	r2, r2, #16
 80219fa:	d42c      	bmi.n	8021a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80219fc:	3201      	adds	r2, #1
 80219fe:	9907      	ldr	r1, [sp, #28]
 8021a00:	4291      	cmp	r1, r2
 8021a02:	dd28      	ble.n	8021a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a04:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021a06:	fb02 5303 	mla	r3, r2, r3, r5
 8021a0a:	141b      	asrs	r3, r3, #16
 8021a0c:	d423      	bmi.n	8021a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a0e:	3301      	adds	r3, #1
 8021a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a12:	429a      	cmp	r2, r3
 8021a14:	dd1f      	ble.n	8021a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a16:	9b08      	ldr	r3, [sp, #32]
 8021a18:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021a1c:	f103 0c03 	add.w	ip, r3, #3
 8021a20:	f1be 0f00 	cmp.w	lr, #0
 8021a24:	f300 80fa 	bgt.w	8021c1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021a28:	9b06      	ldr	r3, [sp, #24]
 8021a2a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021a2e:	9b08      	ldr	r3, [sp, #32]
 8021a30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a34:	4423      	add	r3, r4
 8021a36:	9308      	str	r3, [sp, #32]
 8021a38:	e09d      	b.n	8021b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021a3a:	1c51      	adds	r1, r2, #1
 8021a3c:	f040 808e 	bne.w	8021b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a40:	9907      	ldr	r1, [sp, #28]
 8021a42:	428a      	cmp	r2, r1
 8021a44:	f280 808a 	bge.w	8021b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a48:	1c5f      	adds	r7, r3, #1
 8021a4a:	f2c0 8087 	blt.w	8021b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a50:	4293      	cmp	r3, r2
 8021a52:	f280 8083 	bge.w	8021b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a56:	9f06      	ldr	r7, [sp, #24]
 8021a58:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021a5c:	2f00      	cmp	r7, #0
 8021a5e:	dde3      	ble.n	8021a28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021a60:	1432      	asrs	r2, r6, #16
 8021a62:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021a66:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021a6a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8021a6e:	f100 80bf 	bmi.w	8021bf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021a72:	1c50      	adds	r0, r2, #1
 8021a74:	9c07      	ldr	r4, [sp, #28]
 8021a76:	4284      	cmp	r4, r0
 8021a78:	f340 80bc 	ble.w	8021bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	f2c0 80b9 	blt.w	8021bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021a82:	1c58      	adds	r0, r3, #1
 8021a84:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021a86:	4284      	cmp	r4, r0
 8021a88:	f340 80b4 	ble.w	8021bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021a8c:	9807      	ldr	r0, [sp, #28]
 8021a8e:	fb00 2303 	mla	r3, r0, r3, r2
 8021a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a9a:	441a      	add	r2, r3
 8021a9c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8021aa0:	7953      	ldrb	r3, [r2, #5]
 8021aa2:	7850      	ldrb	r0, [r2, #1]
 8021aa4:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021aa8:	f892 9003 	ldrb.w	r9, [r2, #3]
 8021aac:	f892 8004 	ldrb.w	r8, [r2, #4]
 8021ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8021ab2:	f1bb 0f00 	cmp.w	fp, #0
 8021ab6:	d00f      	beq.n	8021ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021ab8:	3205      	adds	r2, #5
 8021aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021abc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021abe:	18d3      	adds	r3, r2, r3
 8021ac0:	5d12      	ldrb	r2, [r2, r4]
 8021ac2:	920f      	str	r2, [sp, #60]	; 0x3c
 8021ac4:	785a      	ldrb	r2, [r3, #1]
 8021ac6:	9211      	str	r2, [sp, #68]	; 0x44
 8021ac8:	789a      	ldrb	r2, [r3, #2]
 8021aca:	9213      	str	r2, [sp, #76]	; 0x4c
 8021acc:	78da      	ldrb	r2, [r3, #3]
 8021ace:	9210      	str	r2, [sp, #64]	; 0x40
 8021ad0:	791a      	ldrb	r2, [r3, #4]
 8021ad2:	795b      	ldrb	r3, [r3, #5]
 8021ad4:	9212      	str	r2, [sp, #72]	; 0x48
 8021ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8021ad8:	b28b      	uxth	r3, r1
 8021ada:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021adc:	fa1f f28b 	uxth.w	r2, fp
 8021ae0:	fb03 fb02 	mul.w	fp, r3, r2
 8021ae4:	011b      	lsls	r3, r3, #4
 8021ae6:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021aea:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021aee:	eba3 030b 	sub.w	r3, r3, fp
 8021af2:	b292      	uxth	r2, r2
 8021af4:	b29b      	uxth	r3, r3
 8021af6:	1a89      	subs	r1, r1, r2
 8021af8:	fb03 f808 	mul.w	r8, r3, r8
 8021afc:	b289      	uxth	r1, r1
 8021afe:	fb03 f909 	mul.w	r9, r3, r9
 8021b02:	fb01 8800 	mla	r8, r1, r0, r8
 8021b06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021b08:	fb01 990c 	mla	r9, r1, ip, r9
 8021b0c:	fb02 8800 	mla	r8, r2, r0, r8
 8021b10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021b12:	fb02 9904 	mla	r9, r2, r4, r9
 8021b16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b18:	fb0b 8800 	mla	r8, fp, r0, r8
 8021b1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021b1e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021b22:	4343      	muls	r3, r0
 8021b24:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b2c:	fb01 330e 	mla	r3, r1, lr, r3
 8021b30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021b32:	f88a 9000 	strb.w	r9, [sl]
 8021b36:	fb02 3201 	mla	r2, r2, r1, r3
 8021b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b3c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021b40:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021b44:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021b48:	f88a b002 	strb.w	fp, [sl, #2]
 8021b4c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b4e:	f10a 0a03 	add.w	sl, sl, #3
 8021b52:	3f01      	subs	r7, #1
 8021b54:	441e      	add	r6, r3
 8021b56:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021b58:	441d      	add	r5, r3
 8021b5a:	e77f      	b.n	8021a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021b5c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b5e:	441e      	add	r6, r3
 8021b60:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021b62:	441d      	add	r5, r3
 8021b64:	9b06      	ldr	r3, [sp, #24]
 8021b66:	3b01      	subs	r3, #1
 8021b68:	9306      	str	r3, [sp, #24]
 8021b6a:	9b08      	ldr	r3, [sp, #32]
 8021b6c:	3303      	adds	r3, #3
 8021b6e:	9308      	str	r3, [sp, #32]
 8021b70:	e72b      	b.n	80219ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021b72:	f47f af3c 	bne.w	80219ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	f340 80b9 	ble.w	8021cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021b7e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021b82:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b84:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021b88:	eef0 6a48 	vmov.f32	s13, s16
 8021b8c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021b90:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021b94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b98:	ee16 6a90 	vmov	r6, s13
 8021b9c:	eef0 6a68 	vmov.f32	s13, s17
 8021ba0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ba4:	ee16 5a90 	vmov	r5, s13
 8021ba8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021bac:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021bb0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021bb4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021bb8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021bbc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021bc0:	ee18 2a10 	vmov	r2, s16
 8021bc4:	eeb0 8a47 	vmov.f32	s16, s14
 8021bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bcc:	ee18 2a90 	vmov	r2, s17
 8021bd0:	9333      	str	r3, [sp, #204]	; 0xcc
 8021bd2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021bd4:	eef0 8a67 	vmov.f32	s17, s15
 8021bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bdc:	9334      	str	r3, [sp, #208]	; 0xd0
 8021bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021be2:	3b01      	subs	r3, #1
 8021be4:	930c      	str	r3, [sp, #48]	; 0x30
 8021be6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021be8:	bf08      	it	eq
 8021bea:	4613      	moveq	r3, r2
 8021bec:	9306      	str	r3, [sp, #24]
 8021bee:	e6e5      	b.n	80219bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021bf0:	1c54      	adds	r4, r2, #1
 8021bf2:	d1ab      	bne.n	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021bf4:	9807      	ldr	r0, [sp, #28]
 8021bf6:	4282      	cmp	r2, r0
 8021bf8:	daa8      	bge.n	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021bfa:	1c58      	adds	r0, r3, #1
 8021bfc:	dba6      	blt.n	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021bfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c00:	4298      	cmp	r0, r3
 8021c02:	dda3      	ble.n	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c04:	9000      	str	r0, [sp, #0]
 8021c06:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021c08:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021c0c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021c10:	9b07      	ldr	r3, [sp, #28]
 8021c12:	4651      	mov	r1, sl
 8021c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c16:	f7ff fdd1 	bl	80217bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021c1a:	e797      	b.n	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c1c:	1431      	asrs	r1, r6, #16
 8021c1e:	9c07      	ldr	r4, [sp, #28]
 8021c20:	1428      	asrs	r0, r5, #16
 8021c22:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021c26:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021c2a:	fb04 1000 	mla	r0, r4, r0, r1
 8021c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021c30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021c32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c36:	4401      	add	r1, r0
 8021c38:	5c20      	ldrb	r0, [r4, r0]
 8021c3a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021c3e:	900e      	str	r0, [sp, #56]	; 0x38
 8021c40:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021c44:	7848      	ldrb	r0, [r1, #1]
 8021c46:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021c4a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021c4e:	b172      	cbz	r2, 8021c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021c50:	3105      	adds	r1, #5
 8021c52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021c54:	190f      	adds	r7, r1, r4
 8021c56:	5d09      	ldrb	r1, [r1, r4]
 8021c58:	9115      	str	r1, [sp, #84]	; 0x54
 8021c5a:	7879      	ldrb	r1, [r7, #1]
 8021c5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021c5e:	78b9      	ldrb	r1, [r7, #2]
 8021c60:	9119      	str	r1, [sp, #100]	; 0x64
 8021c62:	78f9      	ldrb	r1, [r7, #3]
 8021c64:	9116      	str	r1, [sp, #88]	; 0x58
 8021c66:	7939      	ldrb	r1, [r7, #4]
 8021c68:	9118      	str	r1, [sp, #96]	; 0x60
 8021c6a:	7979      	ldrb	r1, [r7, #5]
 8021c6c:	911a      	str	r1, [sp, #104]	; 0x68
 8021c6e:	b29b      	uxth	r3, r3
 8021c70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c72:	b292      	uxth	r2, r2
 8021c74:	f10c 0c03 	add.w	ip, ip, #3
 8021c78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021c7c:	fb03 f102 	mul.w	r1, r3, r2
 8021c80:	011b      	lsls	r3, r3, #4
 8021c82:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021c86:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021c8a:	1a5b      	subs	r3, r3, r1
 8021c8c:	b292      	uxth	r2, r2
 8021c8e:	b29b      	uxth	r3, r3
 8021c90:	1abf      	subs	r7, r7, r2
 8021c92:	fb03 f909 	mul.w	r9, r3, r9
 8021c96:	b2bf      	uxth	r7, r7
 8021c98:	fb03 fa0a 	mul.w	sl, r3, sl
 8021c9c:	fb03 f30b 	mul.w	r3, r3, fp
 8021ca0:	fb07 9900 	mla	r9, r7, r0, r9
 8021ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021ca6:	fb07 aa04 	mla	sl, r7, r4, sl
 8021caa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021cac:	fb02 9900 	mla	r9, r2, r0, r9
 8021cb0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021cb2:	fb07 3308 	mla	r3, r7, r8, r3
 8021cb6:	fb01 9900 	mla	r9, r1, r0, r9
 8021cba:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021cbc:	fb02 aa04 	mla	sl, r2, r4, sl
 8021cc0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021cc2:	fb02 3200 	mla	r2, r2, r0, r3
 8021cc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021cc8:	fb01 aa04 	mla	sl, r1, r4, sl
 8021ccc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cd0:	fb01 2103 	mla	r1, r1, r3, r2
 8021cd4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021cd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021cda:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021cde:	1209      	asrs	r1, r1, #8
 8021ce0:	441e      	add	r6, r3
 8021ce2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021ce4:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021ce8:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021cec:	441d      	add	r5, r3
 8021cee:	e697      	b.n	8021a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021cf0:	b01d      	add	sp, #116	; 0x74
 8021cf2:	ecbd 8b0a 	vpop	{d8-d12}
 8021cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d00:	b085      	sub	sp, #20
 8021d02:	7888      	ldrb	r0, [r1, #2]
 8021d04:	4691      	mov	r9, r2
 8021d06:	9000      	str	r0, [sp, #0]
 8021d08:	7848      	ldrb	r0, [r1, #1]
 8021d0a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021d0e:	9001      	str	r0, [sp, #4]
 8021d10:	7808      	ldrb	r0, [r1, #0]
 8021d12:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021d16:	9002      	str	r0, [sp, #8]
 8021d18:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021d1c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021d20:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021d24:	fb04 c603 	mla	r6, r4, r3, ip
 8021d28:	2c00      	cmp	r4, #0
 8021d2a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021d2e:	9a00      	ldr	r2, [sp, #0]
 8021d30:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021d34:	9a01      	ldr	r2, [sp, #4]
 8021d36:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021d3a:	db3a      	blt.n	8021db2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d3c:	45a0      	cmp	r8, r4
 8021d3e:	dd38      	ble.n	8021db2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d40:	f1bc 0f00 	cmp.w	ip, #0
 8021d44:	db33      	blt.n	8021dae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d46:	4563      	cmp	r3, ip
 8021d48:	dd31      	ble.n	8021dae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d4a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021d4e:	f11c 0601 	adds.w	r6, ip, #1
 8021d52:	d431      	bmi.n	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d54:	42b3      	cmp	r3, r6
 8021d56:	dd2f      	ble.n	8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d58:	b375      	cbz	r5, 8021db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021d5a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021d5e:	3401      	adds	r4, #1
 8021d60:	d42e      	bmi.n	8021dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d62:	45a0      	cmp	r8, r4
 8021d64:	dd2c      	ble.n	8021dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d66:	b35f      	cbz	r7, 8021dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021d68:	f1bc 0f00 	cmp.w	ip, #0
 8021d6c:	db26      	blt.n	8021dbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021d6e:	4563      	cmp	r3, ip
 8021d70:	dd24      	ble.n	8021dbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021d72:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021d76:	f11c 0c01 	adds.w	ip, ip, #1
 8021d7a:	d405      	bmi.n	8021d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d7c:	4563      	cmp	r3, ip
 8021d7e:	dd03      	ble.n	8021d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d80:	b115      	cbz	r5, 8021d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021d82:	3301      	adds	r3, #1
 8021d84:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021d88:	2d0f      	cmp	r5, #15
 8021d8a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021d8e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021d92:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021d96:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021d9a:	d801      	bhi.n	8021da0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021d9c:	2f0f      	cmp	r7, #15
 8021d9e:	d911      	bls.n	8021dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021da0:	4b80      	ldr	r3, [pc, #512]	; (8021fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021da2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021da6:	4a80      	ldr	r2, [pc, #512]	; (8021fa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021da8:	4880      	ldr	r0, [pc, #512]	; (8021fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021daa:	f003 fd07 	bl	80257bc <__assert_func>
 8021dae:	4602      	mov	r2, r0
 8021db0:	e7cd      	b.n	8021d4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021db2:	4606      	mov	r6, r0
 8021db4:	4602      	mov	r2, r0
 8021db6:	e7d2      	b.n	8021d5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021db8:	4606      	mov	r6, r0
 8021dba:	e7d0      	b.n	8021d5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021dbc:	4604      	mov	r4, r0
 8021dbe:	e7da      	b.n	8021d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021dc0:	4604      	mov	r4, r0
 8021dc2:	e7e1      	b.n	8021d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021dc4:	b2ab      	uxth	r3, r5
 8021dc6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021dca:	b2bf      	uxth	r7, r7
 8021dcc:	fb03 fe07 	mul.w	lr, r3, r7
 8021dd0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021dd4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021dd8:	eba3 0c0e 	sub.w	ip, r3, lr
 8021ddc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021de0:	b2bf      	uxth	r7, r7
 8021de2:	fa1f fc8c 	uxth.w	ip, ip
 8021de6:	eba5 0507 	sub.w	r5, r5, r7
 8021dea:	fb0c f30a 	mul.w	r3, ip, sl
 8021dee:	b2ad      	uxth	r5, r5
 8021df0:	fb05 330b 	mla	r3, r5, fp, r3
 8021df4:	fb07 3309 	mla	r3, r7, r9, r3
 8021df8:	fb0e 3308 	mla	r3, lr, r8, r3
 8021dfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e00:	9303      	str	r3, [sp, #12]
 8021e02:	d018      	beq.n	8021e36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021e04:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e0c:	fb0b f303 	mul.w	r3, fp, r3
 8021e10:	fb0b fb02 	mul.w	fp, fp, r2
 8021e14:	0a1a      	lsrs	r2, r3, #8
 8021e16:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021e1a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e1e:	441a      	add	r2, r3
 8021e20:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021e24:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021e28:	0a12      	lsrs	r2, r2, #8
 8021e2a:	0a1b      	lsrs	r3, r3, #8
 8021e2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e34:	431a      	orrs	r2, r3
 8021e36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021e3a:	d019      	beq.n	8021e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021e3c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021e40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e44:	fb0a fb0b 	mul.w	fp, sl, fp
 8021e48:	fb0a fa06 	mul.w	sl, sl, r6
 8021e4c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021e50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e54:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021e58:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e5c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021e60:	445e      	add	r6, fp
 8021e62:	0a1b      	lsrs	r3, r3, #8
 8021e64:	0a36      	lsrs	r6, r6, #8
 8021e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e6e:	431e      	orrs	r6, r3
 8021e70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e74:	d019      	beq.n	8021eaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021e76:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021e7a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021e7e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021e82:	fb09 f904 	mul.w	r9, r9, r4
 8021e86:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021e8a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e8e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021e92:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021e96:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021e9a:	4454      	add	r4, sl
 8021e9c:	0a1b      	lsrs	r3, r3, #8
 8021e9e:	0a24      	lsrs	r4, r4, #8
 8021ea0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ea4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ea8:	431c      	orrs	r4, r3
 8021eaa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021eae:	d019      	beq.n	8021ee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021eb0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021eb4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021eb8:	fb08 f909 	mul.w	r9, r8, r9
 8021ebc:	fb08 f800 	mul.w	r8, r8, r0
 8021ec0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021ec4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021ec8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021ecc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021ed0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021ed4:	4448      	add	r0, r9
 8021ed6:	0a1b      	lsrs	r3, r3, #8
 8021ed8:	0a00      	lsrs	r0, r0, #8
 8021eda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ede:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021ee2:	4318      	orrs	r0, r3
 8021ee4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021ee8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021eec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021ef0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ef4:	fb0c f808 	mul.w	r8, ip, r8
 8021ef8:	fb0c f606 	mul.w	r6, ip, r6
 8021efc:	fb05 8803 	mla	r8, r5, r3, r8
 8021f00:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021f04:	fb05 6202 	mla	r2, r5, r2, r6
 8021f08:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021f0c:	fb07 8803 	mla	r8, r7, r3, r8
 8021f10:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021f14:	fb07 2704 	mla	r7, r7, r4, r2
 8021f18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f1c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021f20:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021f24:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021f28:	9803      	ldr	r0, [sp, #12]
 8021f2a:	b292      	uxth	r2, r2
 8021f2c:	9c02      	ldr	r4, [sp, #8]
 8021f2e:	0a1b      	lsrs	r3, r3, #8
 8021f30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f34:	4350      	muls	r0, r2
 8021f36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f3a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f3e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021f42:	1c43      	adds	r3, r0, #1
 8021f44:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021f48:	fa5f f08e 	uxtb.w	r0, lr
 8021f4c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021f50:	b2db      	uxtb	r3, r3
 8021f52:	fb14 f403 	smulbb	r4, r4, r3
 8021f56:	fb00 4002 	mla	r0, r0, r2, r4
 8021f5a:	b280      	uxth	r0, r0
 8021f5c:	1c44      	adds	r4, r0, #1
 8021f5e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021f62:	9c01      	ldr	r4, [sp, #4]
 8021f64:	fb14 f403 	smulbb	r4, r4, r3
 8021f68:	1200      	asrs	r0, r0, #8
 8021f6a:	7008      	strb	r0, [r1, #0]
 8021f6c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021f70:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021f74:	fb00 4002 	mla	r0, r0, r2, r4
 8021f78:	b280      	uxth	r0, r0
 8021f7a:	1c44      	adds	r4, r0, #1
 8021f7c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021f80:	1200      	asrs	r0, r0, #8
 8021f82:	7048      	strb	r0, [r1, #1]
 8021f84:	9800      	ldr	r0, [sp, #0]
 8021f86:	fb10 f303 	smulbb	r3, r0, r3
 8021f8a:	fb0e 3202 	mla	r2, lr, r2, r3
 8021f8e:	b292      	uxth	r2, r2
 8021f90:	f102 0e01 	add.w	lr, r2, #1
 8021f94:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021f98:	1212      	asrs	r2, r2, #8
 8021f9a:	708a      	strb	r2, [r1, #2]
 8021f9c:	b005      	add	sp, #20
 8021f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fa2:	bf00      	nop
 8021fa4:	0802af2d 	.word	0x0802af2d
 8021fa8:	0802b426 	.word	0x0802b426
 8021fac:	0802aff6 	.word	0x0802aff6

08021fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb4:	ed2d 8b08 	vpush	{d8-d11}
 8021fb8:	b099      	sub	sp, #100	; 0x64
 8021fba:	eeb0 aa40 	vmov.f32	s20, s0
 8021fbe:	eef0 9a60 	vmov.f32	s19, s1
 8021fc2:	9306      	str	r3, [sp, #24]
 8021fc4:	eeb0 9a41 	vmov.f32	s18, s2
 8021fc8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021fcc:	eeb0 8a62 	vmov.f32	s16, s5
 8021fd0:	9216      	str	r2, [sp, #88]	; 0x58
 8021fd2:	eef0 8a43 	vmov.f32	s17, s6
 8021fd6:	9307      	str	r3, [sp, #28]
 8021fd8:	eef0 ba44 	vmov.f32	s23, s8
 8021fdc:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021fe0:	eeb0 ba64 	vmov.f32	s22, s9
 8021fe4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021fe6:	eef0 aa45 	vmov.f32	s21, s10
 8021fea:	9310      	str	r3, [sp, #64]	; 0x40
 8021fec:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021ff0:	9017      	str	r0, [sp, #92]	; 0x5c
 8021ff2:	9112      	str	r1, [sp, #72]	; 0x48
 8021ff4:	6850      	ldr	r0, [r2, #4]
 8021ff6:	9315      	str	r3, [sp, #84]	; 0x54
 8021ff8:	6812      	ldr	r2, [r2, #0]
 8021ffa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021ffc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022000:	fb00 1303 	mla	r3, r0, r3, r1
 8022004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022008:	18d3      	adds	r3, r2, r3
 802200a:	930a      	str	r3, [sp, #40]	; 0x28
 802200c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	9311      	str	r3, [sp, #68]	; 0x44
 8022012:	9b07      	ldr	r3, [sp, #28]
 8022014:	009b      	lsls	r3, r3, #2
 8022016:	930e      	str	r3, [sp, #56]	; 0x38
 8022018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802201a:	2b00      	cmp	r3, #0
 802201c:	dc03      	bgt.n	8022026 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802201e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022020:	2b00      	cmp	r3, #0
 8022022:	f340 833b 	ble.w	802269c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022026:	9b06      	ldr	r3, [sp, #24]
 8022028:	2b00      	cmp	r3, #0
 802202a:	f340 8197 	ble.w	802235c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802202e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022030:	1423      	asrs	r3, r4, #16
 8022032:	1412      	asrs	r2, r2, #16
 8022034:	d432      	bmi.n	802209c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8022036:	1c51      	adds	r1, r2, #1
 8022038:	9807      	ldr	r0, [sp, #28]
 802203a:	4288      	cmp	r0, r1
 802203c:	dd31      	ble.n	80220a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802203e:	2b00      	cmp	r3, #0
 8022040:	db2f      	blt.n	80220a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022042:	1c59      	adds	r1, r3, #1
 8022044:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022046:	4288      	cmp	r0, r1
 8022048:	dd2b      	ble.n	80220a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802204a:	9b06      	ldr	r3, [sp, #24]
 802204c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802204e:	3b01      	subs	r3, #1
 8022050:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022052:	fb02 1203 	mla	r2, r2, r3, r1
 8022056:	1412      	asrs	r2, r2, #16
 8022058:	d42e      	bmi.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802205a:	3201      	adds	r2, #1
 802205c:	9907      	ldr	r1, [sp, #28]
 802205e:	4291      	cmp	r1, r2
 8022060:	dd2a      	ble.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022062:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022064:	fb02 4303 	mla	r3, r2, r3, r4
 8022068:	141b      	asrs	r3, r3, #16
 802206a:	d425      	bmi.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802206c:	3301      	adds	r3, #1
 802206e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022070:	429a      	cmp	r2, r3
 8022072:	dd21      	ble.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022076:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802207a:	f103 0e03 	add.w	lr, r3, #3
 802207e:	9b06      	ldr	r3, [sp, #24]
 8022080:	9313      	str	r3, [sp, #76]	; 0x4c
 8022082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022084:	2b00      	cmp	r3, #0
 8022086:	f300 81d2 	bgt.w	802242e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 802208a:	9b06      	ldr	r3, [sp, #24]
 802208c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022092:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022096:	4423      	add	r3, r4
 8022098:	930a      	str	r3, [sp, #40]	; 0x28
 802209a:	e161      	b.n	8022360 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802209c:	1c51      	adds	r1, r2, #1
 802209e:	f040 8150 	bne.w	8022342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220a2:	9907      	ldr	r1, [sp, #28]
 80220a4:	428a      	cmp	r2, r1
 80220a6:	f280 814c 	bge.w	8022342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220aa:	1c5a      	adds	r2, r3, #1
 80220ac:	f2c0 8149 	blt.w	8022342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220b2:	4293      	cmp	r3, r2
 80220b4:	f280 8145 	bge.w	8022342 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220b8:	9b06      	ldr	r3, [sp, #24]
 80220ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80220bc:	9314      	str	r3, [sp, #80]	; 0x50
 80220be:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80220c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80220c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	dddf      	ble.n	802208a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80220ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220cc:	1423      	asrs	r3, r4, #16
 80220ce:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80220d2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80220d6:	1412      	asrs	r2, r2, #16
 80220d8:	f100 8190 	bmi.w	80223fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80220dc:	1c55      	adds	r5, r2, #1
 80220de:	9f07      	ldr	r7, [sp, #28]
 80220e0:	42af      	cmp	r7, r5
 80220e2:	f340 818d 	ble.w	8022400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	f2c0 818a 	blt.w	8022400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80220ec:	1c5d      	adds	r5, r3, #1
 80220ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80220f0:	42af      	cmp	r7, r5
 80220f2:	f340 8185 	ble.w	8022400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80220f6:	9d07      	ldr	r5, [sp, #28]
 80220f8:	fb03 2305 	mla	r3, r3, r5, r2
 80220fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80220fe:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022106:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802210a:	2800      	cmp	r0, #0
 802210c:	f000 8167 	beq.w	80223de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022110:	686a      	ldr	r2, [r5, #4]
 8022112:	920b      	str	r2, [sp, #44]	; 0x2c
 8022114:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022118:	2900      	cmp	r1, #0
 802211a:	f000 8169 	beq.w	80223f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802211e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022120:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022122:	18aa      	adds	r2, r5, r2
 8022124:	59ed      	ldr	r5, [r5, r7]
 8022126:	6852      	ldr	r2, [r2, #4]
 8022128:	9508      	str	r5, [sp, #32]
 802212a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802212e:	0e15      	lsrs	r5, r2, #24
 8022130:	920c      	str	r2, [sp, #48]	; 0x30
 8022132:	b280      	uxth	r0, r0
 8022134:	b289      	uxth	r1, r1
 8022136:	fb00 fb01 	mul.w	fp, r0, r1
 802213a:	0100      	lsls	r0, r0, #4
 802213c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022140:	eba0 090b 	sub.w	r9, r0, fp
 8022144:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022148:	b289      	uxth	r1, r1
 802214a:	fa1f f989 	uxth.w	r9, r9
 802214e:	1a52      	subs	r2, r2, r1
 8022150:	fb09 f008 	mul.w	r0, r9, r8
 8022154:	b292      	uxth	r2, r2
 8022156:	fb02 000c 	mla	r0, r2, ip, r0
 802215a:	fb01 000a 	mla	r0, r1, sl, r0
 802215e:	fb0b 0005 	mla	r0, fp, r5, r0
 8022162:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022166:	2800      	cmp	r0, #0
 8022168:	f000 80e0 	beq.w	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802216c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022170:	d01b      	beq.n	80221aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8022172:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802217a:	fb0c fe0e 	mul.w	lr, ip, lr
 802217e:	fb0c fc03 	mul.w	ip, ip, r3
 8022182:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022186:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802218a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802218e:	4473      	add	r3, lr
 8022190:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022194:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022198:	0a1b      	lsrs	r3, r3, #8
 802219a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802219e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221a2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80221a6:	ea43 030e 	orr.w	r3, r3, lr
 80221aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80221ae:	d01e      	beq.n	80221ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80221b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221b2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80221b6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80221ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80221be:	fb08 f80e 	mul.w	r8, r8, lr
 80221c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80221c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80221ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221ce:	44e6      	add	lr, ip
 80221d0:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80221d4:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80221d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80221e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221e4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80221e8:	ea4e 0708 	orr.w	r7, lr, r8
 80221ec:	970b      	str	r7, [sp, #44]	; 0x2c
 80221ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80221f2:	d01e      	beq.n	8022232 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221f4:	9f08      	ldr	r7, [sp, #32]
 80221f6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80221fa:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80221fe:	fb0a f808 	mul.w	r8, sl, r8
 8022202:	fb0a fa0c 	mul.w	sl, sl, ip
 8022206:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802220a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802220e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022212:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022216:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802221a:	44c6      	add	lr, r8
 802221c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022220:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022224:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022228:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802222c:	ea4e 070a 	orr.w	r7, lr, sl
 8022230:	9708      	str	r7, [sp, #32]
 8022232:	2dff      	cmp	r5, #255	; 0xff
 8022234:	d01d      	beq.n	8022272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022236:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022238:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802223c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022240:	fb05 f808 	mul.w	r8, r5, r8
 8022244:	fb05 f50c 	mul.w	r5, r5, ip
 8022248:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802224c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022250:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022254:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022258:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802225c:	44c6      	add	lr, r8
 802225e:	0a2d      	lsrs	r5, r5, #8
 8022260:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022264:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022268:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802226c:	ea4e 0505 	orr.w	r5, lr, r5
 8022270:	950c      	str	r5, [sp, #48]	; 0x30
 8022272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022274:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022278:	9f08      	ldr	r7, [sp, #32]
 802227a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802227e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022282:	fb09 f505 	mul.w	r5, r9, r5
 8022286:	fb02 550c 	mla	r5, r2, ip, r5
 802228a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802228e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022290:	fb01 550c 	mla	r5, r1, ip, r5
 8022294:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022298:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802229a:	fb0b 550c 	mla	r5, fp, ip, r5
 802229e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80222a2:	fb09 f90c 	mul.w	r9, r9, ip
 80222a6:	0a2d      	lsrs	r5, r5, #8
 80222a8:	fb02 9303 	mla	r3, r2, r3, r9
 80222ac:	9a08      	ldr	r2, [sp, #32]
 80222ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222b2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80222b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80222b8:	fb01 330e 	mla	r3, r1, lr, r3
 80222bc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80222c0:	fb0b 3b01 	mla	fp, fp, r1, r3
 80222c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80222c8:	4343      	muls	r3, r0
 80222ca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80222ce:	1c58      	adds	r0, r3, #1
 80222d0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80222d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80222d8:	ea45 050b 	orr.w	r5, r5, fp
 80222dc:	7833      	ldrb	r3, [r6, #0]
 80222de:	b2ea      	uxtb	r2, r5
 80222e0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80222e4:	fb12 f201 	smulbb	r2, r2, r1
 80222e8:	b2c0      	uxtb	r0, r0
 80222ea:	fb03 2300 	mla	r3, r3, r0, r2
 80222ee:	b29b      	uxth	r3, r3
 80222f0:	1c5a      	adds	r2, r3, #1
 80222f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80222f6:	7872      	ldrb	r2, [r6, #1]
 80222f8:	fb12 f200 	smulbb	r2, r2, r0
 80222fc:	121b      	asrs	r3, r3, #8
 80222fe:	7033      	strb	r3, [r6, #0]
 8022300:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022304:	0c2d      	lsrs	r5, r5, #16
 8022306:	fb03 2301 	mla	r3, r3, r1, r2
 802230a:	b29b      	uxth	r3, r3
 802230c:	1c5a      	adds	r2, r3, #1
 802230e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022312:	121b      	asrs	r3, r3, #8
 8022314:	7073      	strb	r3, [r6, #1]
 8022316:	78b3      	ldrb	r3, [r6, #2]
 8022318:	fb13 f000 	smulbb	r0, r3, r0
 802231c:	fb05 0501 	mla	r5, r5, r1, r0
 8022320:	b2ad      	uxth	r5, r5
 8022322:	1c6b      	adds	r3, r5, #1
 8022324:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022328:	122d      	asrs	r5, r5, #8
 802232a:	70b5      	strb	r5, [r6, #2]
 802232c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802232e:	3603      	adds	r6, #3
 8022330:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022332:	4413      	add	r3, r2
 8022334:	932b      	str	r3, [sp, #172]	; 0xac
 8022336:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022338:	441c      	add	r4, r3
 802233a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802233c:	3b01      	subs	r3, #1
 802233e:	9314      	str	r3, [sp, #80]	; 0x50
 8022340:	e6c0      	b.n	80220c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022342:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022344:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022346:	4413      	add	r3, r2
 8022348:	932b      	str	r3, [sp, #172]	; 0xac
 802234a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802234c:	441c      	add	r4, r3
 802234e:	9b06      	ldr	r3, [sp, #24]
 8022350:	3b01      	subs	r3, #1
 8022352:	9306      	str	r3, [sp, #24]
 8022354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022356:	3303      	adds	r3, #3
 8022358:	930a      	str	r3, [sp, #40]	; 0x28
 802235a:	e664      	b.n	8022026 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802235c:	f47f ae75 	bne.w	802204a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022362:	2b00      	cmp	r3, #0
 8022364:	f340 819a 	ble.w	802269c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802236c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802236e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022372:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022376:	eef0 6a48 	vmov.f32	s13, s16
 802237a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802237e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022386:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802238a:	eef0 6a68 	vmov.f32	s13, s17
 802238e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022392:	ee16 4a90 	vmov	r4, s13
 8022396:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802239a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802239e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80223a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80223a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80223aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80223ae:	ee18 2a10 	vmov	r2, s16
 80223b2:	eeb0 8a47 	vmov.f32	s16, s14
 80223b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ba:	ee18 2a90 	vmov	r2, s17
 80223be:	932d      	str	r3, [sp, #180]	; 0xb4
 80223c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223c2:	eef0 8a67 	vmov.f32	s17, s15
 80223c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80223cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80223ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80223d0:	3b01      	subs	r3, #1
 80223d2:	9312      	str	r3, [sp, #72]	; 0x48
 80223d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223d6:	bf08      	it	eq
 80223d8:	4613      	moveq	r3, r2
 80223da:	9306      	str	r3, [sp, #24]
 80223dc:	e61c      	b.n	8022018 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80223de:	b151      	cbz	r1, 80223f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80223e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223e2:	58aa      	ldr	r2, [r5, r2]
 80223e4:	25ff      	movs	r5, #255	; 0xff
 80223e6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80223ea:	9208      	str	r2, [sp, #32]
 80223ec:	46a8      	mov	r8, r5
 80223ee:	e6a0      	b.n	8022132 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80223f0:	25ff      	movs	r5, #255	; 0xff
 80223f2:	46aa      	mov	sl, r5
 80223f4:	e69d      	b.n	8022132 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80223f6:	25ff      	movs	r5, #255	; 0xff
 80223f8:	46aa      	mov	sl, r5
 80223fa:	e7f7      	b.n	80223ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80223fc:	1c57      	adds	r7, r2, #1
 80223fe:	d195      	bne.n	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022400:	9d07      	ldr	r5, [sp, #28]
 8022402:	4295      	cmp	r5, r2
 8022404:	dd92      	ble.n	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022406:	1c5d      	adds	r5, r3, #1
 8022408:	db90      	blt.n	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802240a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802240c:	429d      	cmp	r5, r3
 802240e:	dd8d      	ble.n	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022410:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022412:	9201      	str	r2, [sp, #4]
 8022414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022416:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802241a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802241c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802241e:	9300      	str	r3, [sp, #0]
 8022420:	9b07      	ldr	r3, [sp, #28]
 8022422:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022426:	4631      	mov	r1, r6
 8022428:	f7ff fc68 	bl	8021cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802242c:	e77e      	b.n	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802242e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022430:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022434:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022436:	9d07      	ldr	r5, [sp, #28]
 8022438:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802243c:	1412      	asrs	r2, r2, #16
 802243e:	1423      	asrs	r3, r4, #16
 8022440:	fb05 2303 	mla	r3, r5, r3, r2
 8022444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022446:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802244e:	0e1e      	lsrs	r6, r3, #24
 8022450:	2900      	cmp	r1, #0
 8022452:	f000 8114 	beq.w	802267e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022456:	686a      	ldr	r2, [r5, #4]
 8022458:	920d      	str	r2, [sp, #52]	; 0x34
 802245a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802245e:	2800      	cmp	r0, #0
 8022460:	f000 8116 	beq.w	8022690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022466:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022468:	18aa      	adds	r2, r5, r2
 802246a:	59ed      	ldr	r5, [r5, r7]
 802246c:	6852      	ldr	r2, [r2, #4]
 802246e:	9509      	str	r5, [sp, #36]	; 0x24
 8022470:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022474:	0e15      	lsrs	r5, r2, #24
 8022476:	920f      	str	r2, [sp, #60]	; 0x3c
 8022478:	b289      	uxth	r1, r1
 802247a:	b280      	uxth	r0, r0
 802247c:	fb01 fa00 	mul.w	sl, r1, r0
 8022480:	0109      	lsls	r1, r1, #4
 8022482:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022486:	eba1 080a 	sub.w	r8, r1, sl
 802248a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802248e:	b280      	uxth	r0, r0
 8022490:	fa1f f888 	uxth.w	r8, r8
 8022494:	1a12      	subs	r2, r2, r0
 8022496:	fb08 f10c 	mul.w	r1, r8, ip
 802249a:	b292      	uxth	r2, r2
 802249c:	fb02 1106 	mla	r1, r2, r6, r1
 80224a0:	fb00 1109 	mla	r1, r0, r9, r1
 80224a4:	fb0a 1105 	mla	r1, sl, r5, r1
 80224a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80224ac:	2900      	cmp	r1, #0
 80224ae:	f000 80da 	beq.w	8022666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80224b2:	2eff      	cmp	r6, #255	; 0xff
 80224b4:	d016      	beq.n	80224e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80224b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80224ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224be:	4377      	muls	r7, r6
 80224c0:	435e      	muls	r6, r3
 80224c2:	0a3b      	lsrs	r3, r7, #8
 80224c4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80224c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80224cc:	443b      	add	r3, r7
 80224ce:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80224d2:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80224d6:	0a1b      	lsrs	r3, r3, #8
 80224d8:	0a3f      	lsrs	r7, r7, #8
 80224da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80224de:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80224e2:	433b      	orrs	r3, r7
 80224e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80224e8:	d01d      	beq.n	8022526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80224ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80224ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80224ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80224f6:	fb0c f606 	mul.w	r6, ip, r6
 80224fa:	fb0c fc07 	mul.w	ip, ip, r7
 80224fe:	0a37      	lsrs	r7, r6, #8
 8022500:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022504:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022508:	4437      	add	r7, r6
 802250a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802250e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022512:	0a3f      	lsrs	r7, r7, #8
 8022514:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022518:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802251c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022520:	ea47 060c 	orr.w	r6, r7, ip
 8022524:	960d      	str	r6, [sp, #52]	; 0x34
 8022526:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802252a:	d01d      	beq.n	8022568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802252c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802252e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022532:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022536:	fb09 fc0c 	mul.w	ip, r9, ip
 802253a:	fb09 f906 	mul.w	r9, r9, r6
 802253e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022542:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022546:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802254a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802254e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022552:	4467      	add	r7, ip
 8022554:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022558:	0a3f      	lsrs	r7, r7, #8
 802255a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802255e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022562:	ea47 0609 	orr.w	r6, r7, r9
 8022566:	9609      	str	r6, [sp, #36]	; 0x24
 8022568:	2dff      	cmp	r5, #255	; 0xff
 802256a:	d01a      	beq.n	80225a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802256c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802256e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022572:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022576:	fb05 fc0c 	mul.w	ip, r5, ip
 802257a:	4375      	muls	r5, r6
 802257c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022580:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022584:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022588:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802258c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022590:	4467      	add	r7, ip
 8022592:	0a2d      	lsrs	r5, r5, #8
 8022594:	0a3f      	lsrs	r7, r7, #8
 8022596:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802259a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802259e:	433d      	orrs	r5, r7
 80225a0:	950f      	str	r5, [sp, #60]	; 0x3c
 80225a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80225a4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80225a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225ac:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80225b0:	fb08 f505 	mul.w	r5, r8, r5
 80225b4:	fb02 5506 	mla	r5, r2, r6, r5
 80225b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80225ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225be:	fb00 5506 	mla	r5, r0, r6, r5
 80225c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80225c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225c8:	fb0a 5506 	mla	r5, sl, r6, r5
 80225cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80225ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225d2:	0a2d      	lsrs	r5, r5, #8
 80225d4:	fb08 f806 	mul.w	r8, r8, r6
 80225d8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80225dc:	fb02 8303 	mla	r3, r2, r3, r8
 80225e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225e2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80225e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225e8:	fb00 3307 	mla	r3, r0, r7, r3
 80225ec:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80225f0:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80225f4:	fb01 f30b 	mul.w	r3, r1, fp
 80225f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225fc:	1c59      	adds	r1, r3, #1
 80225fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022602:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022606:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802260a:	ea45 050c 	orr.w	r5, r5, ip
 802260e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022612:	b2ea      	uxtb	r2, r5
 8022614:	b2c9      	uxtb	r1, r1
 8022616:	fb12 f20b 	smulbb	r2, r2, fp
 802261a:	fb03 2301 	mla	r3, r3, r1, r2
 802261e:	b29b      	uxth	r3, r3
 8022620:	1c5a      	adds	r2, r3, #1
 8022622:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022626:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802262a:	fb12 f201 	smulbb	r2, r2, r1
 802262e:	121b      	asrs	r3, r3, #8
 8022630:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022634:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022638:	0c2d      	lsrs	r5, r5, #16
 802263a:	fb03 230b 	mla	r3, r3, fp, r2
 802263e:	b29b      	uxth	r3, r3
 8022640:	1c5a      	adds	r2, r3, #1
 8022642:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022646:	121b      	asrs	r3, r3, #8
 8022648:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802264c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022650:	fb13 f101 	smulbb	r1, r3, r1
 8022654:	fb05 150b 	mla	r5, r5, fp, r1
 8022658:	b2ad      	uxth	r5, r5
 802265a:	1c69      	adds	r1, r5, #1
 802265c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022660:	122d      	asrs	r5, r5, #8
 8022662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022666:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022668:	f10e 0e03 	add.w	lr, lr, #3
 802266c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802266e:	4413      	add	r3, r2
 8022670:	932b      	str	r3, [sp, #172]	; 0xac
 8022672:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022674:	441c      	add	r4, r3
 8022676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022678:	3b01      	subs	r3, #1
 802267a:	9313      	str	r3, [sp, #76]	; 0x4c
 802267c:	e501      	b.n	8022082 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802267e:	b150      	cbz	r0, 8022696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8022680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022682:	58aa      	ldr	r2, [r5, r2]
 8022684:	25ff      	movs	r5, #255	; 0xff
 8022686:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802268a:	9209      	str	r2, [sp, #36]	; 0x24
 802268c:	46ac      	mov	ip, r5
 802268e:	e6f3      	b.n	8022478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022690:	25ff      	movs	r5, #255	; 0xff
 8022692:	46a9      	mov	r9, r5
 8022694:	e6f0      	b.n	8022478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022696:	25ff      	movs	r5, #255	; 0xff
 8022698:	46a9      	mov	r9, r5
 802269a:	e7f7      	b.n	802268c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 802269c:	b019      	add	sp, #100	; 0x64
 802269e:	ecbd 8b08 	vpop	{d8-d11}
 80226a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080226a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80226a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ac:	b085      	sub	sp, #20
 80226ae:	7888      	ldrb	r0, [r1, #2]
 80226b0:	4691      	mov	r9, r2
 80226b2:	9000      	str	r0, [sp, #0]
 80226b4:	7848      	ldrb	r0, [r1, #1]
 80226b6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80226ba:	9001      	str	r0, [sp, #4]
 80226bc:	7808      	ldrb	r0, [r1, #0]
 80226be:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80226c2:	9002      	str	r0, [sp, #8]
 80226c4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80226c8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80226cc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80226d0:	fb04 c603 	mla	r6, r4, r3, ip
 80226d4:	2c00      	cmp	r4, #0
 80226d6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80226da:	9a00      	ldr	r2, [sp, #0]
 80226dc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80226e0:	9a01      	ldr	r2, [sp, #4]
 80226e2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80226e6:	db3a      	blt.n	802275e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80226e8:	45a0      	cmp	r8, r4
 80226ea:	dd38      	ble.n	802275e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80226ec:	f1bc 0f00 	cmp.w	ip, #0
 80226f0:	db33      	blt.n	802275a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80226f2:	4563      	cmp	r3, ip
 80226f4:	dd31      	ble.n	802275a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80226f6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80226fa:	f11c 0601 	adds.w	r6, ip, #1
 80226fe:	d431      	bmi.n	8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022700:	42b3      	cmp	r3, r6
 8022702:	dd2f      	ble.n	8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022704:	b375      	cbz	r5, 8022764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022706:	f8de 6004 	ldr.w	r6, [lr, #4]
 802270a:	3401      	adds	r4, #1
 802270c:	d42e      	bmi.n	802276c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802270e:	45a0      	cmp	r8, r4
 8022710:	dd2c      	ble.n	802276c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022712:	b35f      	cbz	r7, 802276c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022714:	f1bc 0f00 	cmp.w	ip, #0
 8022718:	db26      	blt.n	8022768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802271a:	4563      	cmp	r3, ip
 802271c:	dd24      	ble.n	8022768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802271e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022722:	f11c 0c01 	adds.w	ip, ip, #1
 8022726:	d405      	bmi.n	8022734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022728:	4563      	cmp	r3, ip
 802272a:	dd03      	ble.n	8022734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802272c:	b115      	cbz	r5, 8022734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802272e:	3301      	adds	r3, #1
 8022730:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022734:	2d0f      	cmp	r5, #15
 8022736:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802273a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802273e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022742:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022746:	d801      	bhi.n	802274c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022748:	2f0f      	cmp	r7, #15
 802274a:	d911      	bls.n	8022770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802274c:	4b77      	ldr	r3, [pc, #476]	; (802292c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802274e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022752:	4a77      	ldr	r2, [pc, #476]	; (8022930 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022754:	4877      	ldr	r0, [pc, #476]	; (8022934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022756:	f003 f831 	bl	80257bc <__assert_func>
 802275a:	4602      	mov	r2, r0
 802275c:	e7cd      	b.n	80226fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802275e:	4606      	mov	r6, r0
 8022760:	4602      	mov	r2, r0
 8022762:	e7d2      	b.n	802270a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022764:	4606      	mov	r6, r0
 8022766:	e7d0      	b.n	802270a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022768:	4604      	mov	r4, r0
 802276a:	e7da      	b.n	8022722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 802276c:	4604      	mov	r4, r0
 802276e:	e7e1      	b.n	8022734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022770:	b2ab      	uxth	r3, r5
 8022772:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022776:	b2bf      	uxth	r7, r7
 8022778:	fb03 fe07 	mul.w	lr, r3, r7
 802277c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022780:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022784:	eba3 0c0e 	sub.w	ip, r3, lr
 8022788:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802278c:	b2bf      	uxth	r7, r7
 802278e:	fa1f fc8c 	uxth.w	ip, ip
 8022792:	eba5 0507 	sub.w	r5, r5, r7
 8022796:	fb0c f30a 	mul.w	r3, ip, sl
 802279a:	b2ad      	uxth	r5, r5
 802279c:	fb05 330b 	mla	r3, r5, fp, r3
 80227a0:	fb07 3309 	mla	r3, r7, r9, r3
 80227a4:	fb0e 3308 	mla	r3, lr, r8, r3
 80227a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227ac:	9303      	str	r3, [sp, #12]
 80227ae:	d018      	beq.n	80227e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80227b0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80227b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227b8:	fb0b f303 	mul.w	r3, fp, r3
 80227bc:	fb0b fb02 	mul.w	fp, fp, r2
 80227c0:	0a1a      	lsrs	r2, r3, #8
 80227c2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80227c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80227ca:	441a      	add	r2, r3
 80227cc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80227d0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80227d4:	0a12      	lsrs	r2, r2, #8
 80227d6:	0a1b      	lsrs	r3, r3, #8
 80227d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80227dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227e0:	431a      	orrs	r2, r3
 80227e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80227e6:	d019      	beq.n	802281c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80227e8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80227ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227f0:	fb0a fb0b 	mul.w	fp, sl, fp
 80227f4:	fb0a fa06 	mul.w	sl, sl, r6
 80227f8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80227fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022800:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022804:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022808:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802280c:	445e      	add	r6, fp
 802280e:	0a1b      	lsrs	r3, r3, #8
 8022810:	0a36      	lsrs	r6, r6, #8
 8022812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022816:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802281a:	431e      	orrs	r6, r3
 802281c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022820:	d019      	beq.n	8022856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022822:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022826:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802282a:	fb09 fa0a 	mul.w	sl, r9, sl
 802282e:	fb09 f904 	mul.w	r9, r9, r4
 8022832:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022836:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802283a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802283e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022842:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022846:	4454      	add	r4, sl
 8022848:	0a1b      	lsrs	r3, r3, #8
 802284a:	0a24      	lsrs	r4, r4, #8
 802284c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022850:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022854:	431c      	orrs	r4, r3
 8022856:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802285a:	d019      	beq.n	8022890 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802285c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022860:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022864:	fb08 f909 	mul.w	r9, r8, r9
 8022868:	fb08 f800 	mul.w	r8, r8, r0
 802286c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022870:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022874:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022878:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802287c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022880:	4448      	add	r0, r9
 8022882:	0a1b      	lsrs	r3, r3, #8
 8022884:	0a00      	lsrs	r0, r0, #8
 8022886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802288a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802288e:	4318      	orrs	r0, r3
 8022890:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022894:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022898:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802289c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80228a0:	fb0c f808 	mul.w	r8, ip, r8
 80228a4:	fb0c f606 	mul.w	r6, ip, r6
 80228a8:	fb05 8803 	mla	r8, r5, r3, r8
 80228ac:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80228b0:	fb05 6202 	mla	r2, r5, r2, r6
 80228b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80228b8:	fb07 8803 	mla	r8, r7, r3, r8
 80228bc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80228c0:	fb07 2704 	mla	r7, r7, r4, r2
 80228c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228c8:	fb0e 8303 	mla	r3, lr, r3, r8
 80228cc:	fb0e 7e00 	mla	lr, lr, r0, r7
 80228d0:	9802      	ldr	r0, [sp, #8]
 80228d2:	0a1b      	lsrs	r3, r3, #8
 80228d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228dc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80228e0:	ea43 0e0e 	orr.w	lr, r3, lr
 80228e4:	9b03      	ldr	r3, [sp, #12]
 80228e6:	43db      	mvns	r3, r3
 80228e8:	b2db      	uxtb	r3, r3
 80228ea:	4358      	muls	r0, r3
 80228ec:	1c42      	adds	r2, r0, #1
 80228ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80228f2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80228f6:	700a      	strb	r2, [r1, #0]
 80228f8:	9a01      	ldr	r2, [sp, #4]
 80228fa:	435a      	muls	r2, r3
 80228fc:	1c50      	adds	r0, r2, #1
 80228fe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022902:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022906:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802290a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802290e:	704a      	strb	r2, [r1, #1]
 8022910:	9a00      	ldr	r2, [sp, #0]
 8022912:	435a      	muls	r2, r3
 8022914:	4613      	mov	r3, r2
 8022916:	3201      	adds	r2, #1
 8022918:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802291c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022920:	f881 e002 	strb.w	lr, [r1, #2]
 8022924:	b005      	add	sp, #20
 8022926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802292a:	bf00      	nop
 802292c:	0802af2d 	.word	0x0802af2d
 8022930:	0802b426 	.word	0x0802b426
 8022934:	0802aff6 	.word	0x0802aff6

08022938 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802293c:	ed2d 8b08 	vpush	{d8-d11}
 8022940:	b097      	sub	sp, #92	; 0x5c
 8022942:	eeb0 aa40 	vmov.f32	s20, s0
 8022946:	eef0 9a60 	vmov.f32	s19, s1
 802294a:	9306      	str	r3, [sp, #24]
 802294c:	eeb0 9a41 	vmov.f32	s18, s2
 8022950:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022954:	eeb0 8a62 	vmov.f32	s16, s5
 8022958:	9214      	str	r2, [sp, #80]	; 0x50
 802295a:	eef0 8a43 	vmov.f32	s17, s6
 802295e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022960:	eef0 ba44 	vmov.f32	s23, s8
 8022964:	9307      	str	r3, [sp, #28]
 8022966:	eeb0 ba64 	vmov.f32	s22, s9
 802296a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802296e:	eef0 aa45 	vmov.f32	s21, s10
 8022972:	9015      	str	r0, [sp, #84]	; 0x54
 8022974:	9112      	str	r1, [sp, #72]	; 0x48
 8022976:	6850      	ldr	r0, [r2, #4]
 8022978:	9310      	str	r3, [sp, #64]	; 0x40
 802297a:	6812      	ldr	r2, [r2, #0]
 802297c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802297e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022982:	fb00 1303 	mla	r3, r0, r3, r1
 8022986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802298a:	18d3      	adds	r3, r2, r3
 802298c:	930a      	str	r3, [sp, #40]	; 0x28
 802298e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	9311      	str	r3, [sp, #68]	; 0x44
 8022994:	9b07      	ldr	r3, [sp, #28]
 8022996:	009b      	lsls	r3, r3, #2
 8022998:	930e      	str	r3, [sp, #56]	; 0x38
 802299a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802299c:	2b00      	cmp	r3, #0
 802299e:	dc03      	bgt.n	80229a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80229a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	f340 832e 	ble.w	8023004 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80229a8:	9b06      	ldr	r3, [sp, #24]
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	f340 8186 	ble.w	8022cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80229b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80229b2:	1423      	asrs	r3, r4, #16
 80229b4:	1412      	asrs	r2, r2, #16
 80229b6:	d42f      	bmi.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80229b8:	1c51      	adds	r1, r2, #1
 80229ba:	9807      	ldr	r0, [sp, #28]
 80229bc:	4288      	cmp	r0, r1
 80229be:	dd2e      	ble.n	8022a1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	db2c      	blt.n	8022a1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229c4:	1c59      	adds	r1, r3, #1
 80229c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229c8:	4288      	cmp	r0, r1
 80229ca:	dd28      	ble.n	8022a1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80229cc:	9b06      	ldr	r3, [sp, #24]
 80229ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80229d0:	3b01      	subs	r3, #1
 80229d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80229d4:	fb02 1203 	mla	r2, r2, r3, r1
 80229d8:	1412      	asrs	r2, r2, #16
 80229da:	d42b      	bmi.n	8022a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80229dc:	3201      	adds	r2, #1
 80229de:	9907      	ldr	r1, [sp, #28]
 80229e0:	4291      	cmp	r1, r2
 80229e2:	dd27      	ble.n	8022a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80229e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80229e6:	fb02 4303 	mla	r3, r2, r3, r4
 80229ea:	141b      	asrs	r3, r3, #16
 80229ec:	d422      	bmi.n	8022a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80229ee:	3301      	adds	r3, #1
 80229f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229f2:	429a      	cmp	r2, r3
 80229f4:	dd1e      	ble.n	8022a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80229f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229f8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80229fc:	1cdd      	adds	r5, r3, #3
 80229fe:	f1bb 0f00 	cmp.w	fp, #0
 8022a02:	f300 81c4 	bgt.w	8022d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022a06:	9b06      	ldr	r3, [sp, #24]
 8022a08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a12:	4423      	add	r3, r4
 8022a14:	930a      	str	r3, [sp, #40]	; 0x28
 8022a16:	e153      	b.n	8022cc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022a18:	1c51      	adds	r1, r2, #1
 8022a1a:	f040 8142 	bne.w	8022ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a1e:	9907      	ldr	r1, [sp, #28]
 8022a20:	428a      	cmp	r2, r1
 8022a22:	f280 813e 	bge.w	8022ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a26:	1c5a      	adds	r2, r3, #1
 8022a28:	f2c0 813b 	blt.w	8022ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a2e:	4293      	cmp	r3, r2
 8022a30:	f280 8137 	bge.w	8022ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a34:	9b06      	ldr	r3, [sp, #24]
 8022a36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	dde2      	ble.n	8022a06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022a40:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a42:	1423      	asrs	r3, r4, #16
 8022a44:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022a46:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022a4a:	1409      	asrs	r1, r1, #16
 8022a4c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022a50:	f100 8187 	bmi.w	8022d62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022a54:	1c4e      	adds	r6, r1, #1
 8022a56:	9f07      	ldr	r7, [sp, #28]
 8022a58:	42b7      	cmp	r7, r6
 8022a5a:	f340 8184 	ble.w	8022d66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	f2c0 8181 	blt.w	8022d66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a64:	1c5e      	adds	r6, r3, #1
 8022a66:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022a68:	42b7      	cmp	r7, r6
 8022a6a:	f340 817c 	ble.w	8022d66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a6e:	9e07      	ldr	r6, [sp, #28]
 8022a70:	fb03 1306 	mla	r3, r3, r6, r1
 8022a74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022a76:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022a7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022a7e:	0e1f      	lsrs	r7, r3, #24
 8022a80:	2a00      	cmp	r2, #0
 8022a82:	f000 815c 	beq.w	8022d3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022a86:	6871      	ldr	r1, [r6, #4]
 8022a88:	910b      	str	r1, [sp, #44]	; 0x2c
 8022a8a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022a8e:	2800      	cmp	r0, #0
 8022a90:	f000 815e 	beq.w	8022d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022a94:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022a96:	eb06 0c01 	add.w	ip, r6, r1
 8022a9a:	5876      	ldr	r6, [r6, r1]
 8022a9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022aa0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022aa4:	9608      	str	r6, [sp, #32]
 8022aa6:	0e0e      	lsrs	r6, r1, #24
 8022aa8:	910c      	str	r1, [sp, #48]	; 0x30
 8022aaa:	b292      	uxth	r2, r2
 8022aac:	b280      	uxth	r0, r0
 8022aae:	fb02 fa00 	mul.w	sl, r2, r0
 8022ab2:	0112      	lsls	r2, r2, #4
 8022ab4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022ab8:	eba2 080a 	sub.w	r8, r2, sl
 8022abc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022ac0:	b280      	uxth	r0, r0
 8022ac2:	fa1f f888 	uxth.w	r8, r8
 8022ac6:	1a09      	subs	r1, r1, r0
 8022ac8:	fb08 f20e 	mul.w	r2, r8, lr
 8022acc:	b289      	uxth	r1, r1
 8022ace:	fb01 2207 	mla	r2, r1, r7, r2
 8022ad2:	fb00 2209 	mla	r2, r0, r9, r2
 8022ad6:	fb0a 2206 	mla	r2, sl, r6, r2
 8022ada:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022ade:	2a00      	cmp	r2, #0
 8022ae0:	f000 80d4 	beq.w	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022ae4:	2fff      	cmp	r7, #255	; 0xff
 8022ae6:	d01a      	beq.n	8022b1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022ae8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022aec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022af0:	fb07 fc0c 	mul.w	ip, r7, ip
 8022af4:	435f      	muls	r7, r3
 8022af6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022afa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022afe:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022b02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b06:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022b0a:	4463      	add	r3, ip
 8022b0c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022b10:	0a1b      	lsrs	r3, r3, #8
 8022b12:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022b16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b1a:	ea43 030b 	orr.w	r3, r3, fp
 8022b1e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b22:	d01e      	beq.n	8022b62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022b24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b26:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022b2a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b2e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022b32:	fb0e fe07 	mul.w	lr, lr, r7
 8022b36:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022b3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b3e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022b42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b46:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022b4a:	44dc      	add	ip, fp
 8022b4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b54:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b5c:	ea4c 070e 	orr.w	r7, ip, lr
 8022b60:	970b      	str	r7, [sp, #44]	; 0x2c
 8022b62:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b66:	d01e      	beq.n	8022ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b68:	9f08      	ldr	r7, [sp, #32]
 8022b6a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022b6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b72:	fb09 fe0e 	mul.w	lr, r9, lr
 8022b76:	fb09 f907 	mul.w	r9, r9, r7
 8022b7a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022b7e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022b82:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022b86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022b8e:	44f4      	add	ip, lr
 8022b90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ba0:	ea4c 0709 	orr.w	r7, ip, r9
 8022ba4:	9708      	str	r7, [sp, #32]
 8022ba6:	2eff      	cmp	r6, #255	; 0xff
 8022ba8:	d01c      	beq.n	8022be4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022baa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022bac:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022bb0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022bb4:	fb06 fe0e 	mul.w	lr, r6, lr
 8022bb8:	437e      	muls	r6, r7
 8022bba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022bbe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022bc2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022bc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bca:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022bce:	44f4      	add	ip, lr
 8022bd0:	0a36      	lsrs	r6, r6, #8
 8022bd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022bd6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022bda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bde:	ea4c 0606 	orr.w	r6, ip, r6
 8022be2:	960c      	str	r6, [sp, #48]	; 0x30
 8022be4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022be6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bee:	2aff      	cmp	r2, #255	; 0xff
 8022bf0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022bf4:	fb08 f606 	mul.w	r6, r8, r6
 8022bf8:	fb01 6607 	mla	r6, r1, r7, r6
 8022bfc:	9f08      	ldr	r7, [sp, #32]
 8022bfe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c02:	fb00 6607 	mla	r6, r0, r7, r6
 8022c06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c08:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c0c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022c10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022c12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c16:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022c1a:	fb08 f807 	mul.w	r8, r8, r7
 8022c1e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c22:	fb01 8303 	mla	r3, r1, r3, r8
 8022c26:	9908      	ldr	r1, [sp, #32]
 8022c28:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022c2e:	fb00 330c 	mla	r3, r0, ip, r3
 8022c32:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022c36:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022c3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c42:	ea46 060a 	orr.w	r6, r6, sl
 8022c46:	b2f0      	uxtb	r0, r6
 8022c48:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022c4c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022c50:	f000 8084 	beq.w	8022d5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022c54:	43d2      	mvns	r2, r2
 8022c56:	782b      	ldrb	r3, [r5, #0]
 8022c58:	b2d2      	uxtb	r2, r2
 8022c5a:	fb03 f702 	mul.w	r7, r3, r2
 8022c5e:	1c7b      	adds	r3, r7, #1
 8022c60:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022c64:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022c68:	702b      	strb	r3, [r5, #0]
 8022c6a:	786b      	ldrb	r3, [r5, #1]
 8022c6c:	fb03 f002 	mul.w	r0, r3, r2
 8022c70:	1c43      	adds	r3, r0, #1
 8022c72:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022c76:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022c7a:	706b      	strb	r3, [r5, #1]
 8022c7c:	78ab      	ldrb	r3, [r5, #2]
 8022c7e:	4353      	muls	r3, r2
 8022c80:	1c5a      	adds	r2, r3, #1
 8022c82:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c86:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022c8a:	70ae      	strb	r6, [r5, #2]
 8022c8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022c8e:	3503      	adds	r5, #3
 8022c90:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022c92:	4413      	add	r3, r2
 8022c94:	9329      	str	r3, [sp, #164]	; 0xa4
 8022c96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c98:	441c      	add	r4, r3
 8022c9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022c9c:	3b01      	subs	r3, #1
 8022c9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ca0:	e6cb      	b.n	8022a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022ca2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ca4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ca6:	4413      	add	r3, r2
 8022ca8:	9329      	str	r3, [sp, #164]	; 0xa4
 8022caa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022cac:	441c      	add	r4, r3
 8022cae:	9b06      	ldr	r3, [sp, #24]
 8022cb0:	3b01      	subs	r3, #1
 8022cb2:	9306      	str	r3, [sp, #24]
 8022cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cb6:	3303      	adds	r3, #3
 8022cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8022cba:	e675      	b.n	80229a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022cbc:	f47f ae86 	bne.w	80229cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	f340 819e 	ble.w	8023004 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ccc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022cce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022cd2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022cd6:	eef0 6a48 	vmov.f32	s13, s16
 8022cda:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022cde:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022ce2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ce6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022cea:	eef0 6a68 	vmov.f32	s13, s17
 8022cee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022cf2:	ee16 4a90 	vmov	r4, s13
 8022cf6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022cfa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022cfe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d06:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022d0e:	ee18 2a10 	vmov	r2, s16
 8022d12:	eeb0 8a47 	vmov.f32	s16, s14
 8022d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d1a:	ee18 2a90 	vmov	r2, s17
 8022d1e:	932b      	str	r3, [sp, #172]	; 0xac
 8022d20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d22:	eef0 8a67 	vmov.f32	s17, s15
 8022d26:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d2a:	932c      	str	r3, [sp, #176]	; 0xb0
 8022d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022d30:	3b01      	subs	r3, #1
 8022d32:	9312      	str	r3, [sp, #72]	; 0x48
 8022d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d36:	bf08      	it	eq
 8022d38:	4613      	moveq	r3, r2
 8022d3a:	9306      	str	r3, [sp, #24]
 8022d3c:	e62d      	b.n	802299a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022d3e:	b150      	cbz	r0, 8022d56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022d40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d42:	5871      	ldr	r1, [r6, r1]
 8022d44:	26ff      	movs	r6, #255	; 0xff
 8022d46:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022d4a:	9108      	str	r1, [sp, #32]
 8022d4c:	46b6      	mov	lr, r6
 8022d4e:	e6ac      	b.n	8022aaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022d50:	26ff      	movs	r6, #255	; 0xff
 8022d52:	46b1      	mov	r9, r6
 8022d54:	e6a9      	b.n	8022aaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022d56:	26ff      	movs	r6, #255	; 0xff
 8022d58:	46b1      	mov	r9, r6
 8022d5a:	e7f7      	b.n	8022d4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022d5c:	7028      	strb	r0, [r5, #0]
 8022d5e:	7069      	strb	r1, [r5, #1]
 8022d60:	e793      	b.n	8022c8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022d62:	1c4f      	adds	r7, r1, #1
 8022d64:	d192      	bne.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d66:	9e07      	ldr	r6, [sp, #28]
 8022d68:	428e      	cmp	r6, r1
 8022d6a:	dd8f      	ble.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d6c:	1c5e      	adds	r6, r3, #1
 8022d6e:	db8d      	blt.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d70:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022d72:	429e      	cmp	r6, r3
 8022d74:	dd8a      	ble.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d76:	9600      	str	r6, [sp, #0]
 8022d78:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022d7c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022d82:	4629      	mov	r1, r5
 8022d84:	9b07      	ldr	r3, [sp, #28]
 8022d86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022d88:	f7ff fc8e 	bl	80226a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022d8c:	e77e      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022d90:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022d94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022d96:	9e07      	ldr	r6, [sp, #28]
 8022d98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022d9c:	1409      	asrs	r1, r1, #16
 8022d9e:	1423      	asrs	r3, r4, #16
 8022da0:	fb06 1303 	mla	r3, r6, r3, r1
 8022da4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022da6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022dae:	0e1f      	lsrs	r7, r3, #24
 8022db0:	2a00      	cmp	r2, #0
 8022db2:	f000 8113 	beq.w	8022fdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022db6:	6871      	ldr	r1, [r6, #4]
 8022db8:	910d      	str	r1, [sp, #52]	; 0x34
 8022dba:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022dbe:	2800      	cmp	r0, #0
 8022dc0:	f000 8115 	beq.w	8022fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022dc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022dc6:	eb06 0c01 	add.w	ip, r6, r1
 8022dca:	5876      	ldr	r6, [r6, r1]
 8022dcc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022dd0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022dd4:	9609      	str	r6, [sp, #36]	; 0x24
 8022dd6:	0e0e      	lsrs	r6, r1, #24
 8022dd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8022dda:	b292      	uxth	r2, r2
 8022ddc:	b280      	uxth	r0, r0
 8022dde:	fb02 fa00 	mul.w	sl, r2, r0
 8022de2:	0112      	lsls	r2, r2, #4
 8022de4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022de8:	eba2 080a 	sub.w	r8, r2, sl
 8022dec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022df0:	b280      	uxth	r0, r0
 8022df2:	fa1f f888 	uxth.w	r8, r8
 8022df6:	1a09      	subs	r1, r1, r0
 8022df8:	fb08 f20e 	mul.w	r2, r8, lr
 8022dfc:	b289      	uxth	r1, r1
 8022dfe:	fb01 2207 	mla	r2, r1, r7, r2
 8022e02:	fb00 2209 	mla	r2, r0, r9, r2
 8022e06:	fb0a 2206 	mla	r2, sl, r6, r2
 8022e0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e0e:	2a00      	cmp	r2, #0
 8022e10:	f000 80da 	beq.w	8022fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022e14:	2fff      	cmp	r7, #255	; 0xff
 8022e16:	d01a      	beq.n	8022e4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022e18:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022e1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e20:	fb07 fc0c 	mul.w	ip, r7, ip
 8022e24:	435f      	muls	r7, r3
 8022e26:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022e2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e32:	4463      	add	r3, ip
 8022e34:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022e38:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022e3c:	0a1b      	lsrs	r3, r3, #8
 8022e3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e46:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e4a:	ea43 030c 	orr.w	r3, r3, ip
 8022e4e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022e52:	d021      	beq.n	8022e98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022e54:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e56:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e5a:	fb0e f707 	mul.w	r7, lr, r7
 8022e5e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022e60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e62:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022e66:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022e68:	fb0e fe0c 	mul.w	lr, lr, ip
 8022e6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022e70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022e74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e78:	44bc      	add	ip, r7
 8022e7a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022e7e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022e82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e8e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e92:	ea4c 070e 	orr.w	r7, ip, lr
 8022e96:	970d      	str	r7, [sp, #52]	; 0x34
 8022e98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e9c:	d01e      	beq.n	8022edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022e9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ea0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ea4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ea8:	fb09 fe0e 	mul.w	lr, r9, lr
 8022eac:	fb09 f907 	mul.w	r9, r9, r7
 8022eb0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022eb4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022eb8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022ebc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ec0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022ec4:	44f4      	add	ip, lr
 8022ec6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022eca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ece:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ed6:	ea4c 0709 	orr.w	r7, ip, r9
 8022eda:	9709      	str	r7, [sp, #36]	; 0x24
 8022edc:	2eff      	cmp	r6, #255	; 0xff
 8022ede:	d01c      	beq.n	8022f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022ee0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022ee2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ee6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022eea:	fb06 fe0e 	mul.w	lr, r6, lr
 8022eee:	437e      	muls	r6, r7
 8022ef0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022ef4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ef8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f00:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022f04:	44f4      	add	ip, lr
 8022f06:	0a36      	lsrs	r6, r6, #8
 8022f08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f14:	ea4c 0606 	orr.w	r6, ip, r6
 8022f18:	960f      	str	r6, [sp, #60]	; 0x3c
 8022f1a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022f1c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f24:	2aff      	cmp	r2, #255	; 0xff
 8022f26:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f2a:	fb08 f606 	mul.w	r6, r8, r6
 8022f2e:	fb01 6607 	mla	r6, r1, r7, r6
 8022f32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f38:	fb00 6607 	mla	r6, r0, r7, r6
 8022f3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f42:	fb0a 6607 	mla	r6, sl, r7, r6
 8022f46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022f48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f4c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022f50:	fb08 f807 	mul.w	r8, r8, r7
 8022f54:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f58:	fb01 8303 	mla	r3, r1, r3, r8
 8022f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022f5e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022f62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022f64:	fb00 330c 	mla	r3, r0, ip, r3
 8022f68:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022f6c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022f70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f74:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022f78:	ea46 060e 	orr.w	r6, r6, lr
 8022f7c:	b2f0      	uxtb	r0, r6
 8022f7e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022f82:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022f86:	d038      	beq.n	8022ffa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022f88:	43d2      	mvns	r2, r2
 8022f8a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022f8e:	b2d2      	uxtb	r2, r2
 8022f90:	4357      	muls	r7, r2
 8022f92:	1c7b      	adds	r3, r7, #1
 8022f94:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022f98:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022f9c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022fa0:	4350      	muls	r0, r2
 8022fa2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022fa6:	1c43      	adds	r3, r0, #1
 8022fa8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022fac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022fb4:	4353      	muls	r3, r2
 8022fb6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022fba:	1c5a      	adds	r2, r3, #1
 8022fbc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022fc0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022fc4:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022fc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022fca:	3503      	adds	r5, #3
 8022fcc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022fce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022fd2:	4413      	add	r3, r2
 8022fd4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022fd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022fd8:	441c      	add	r4, r3
 8022fda:	e510      	b.n	80229fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022fdc:	b150      	cbz	r0, 8022ff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022fde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022fe0:	5871      	ldr	r1, [r6, r1]
 8022fe2:	26ff      	movs	r6, #255	; 0xff
 8022fe4:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022fe8:	9109      	str	r1, [sp, #36]	; 0x24
 8022fea:	46b6      	mov	lr, r6
 8022fec:	e6f5      	b.n	8022dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022fee:	26ff      	movs	r6, #255	; 0xff
 8022ff0:	46b1      	mov	r9, r6
 8022ff2:	e6f2      	b.n	8022dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022ff4:	26ff      	movs	r6, #255	; 0xff
 8022ff6:	46b1      	mov	r9, r6
 8022ff8:	e7f7      	b.n	8022fea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022ffa:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022ffe:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023002:	e7df      	b.n	8022fc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8023004:	b017      	add	sp, #92	; 0x5c
 8023006:	ecbd 8b08 	vpop	{d8-d11}
 802300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023010 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023014:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023018:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802301c:	2800      	cmp	r0, #0
 802301e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023022:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023026:	fb0c 0e03 	mla	lr, ip, r3, r0
 802302a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802302e:	db6b      	blt.n	8023108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023030:	4580      	cmp	r8, r0
 8023032:	dd69      	ble.n	8023108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023034:	f1bc 0f00 	cmp.w	ip, #0
 8023038:	db66      	blt.n	8023108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802303a:	45e1      	cmp	r9, ip
 802303c:	dd64      	ble.n	8023108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802303e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023042:	f01e 0f01 	tst.w	lr, #1
 8023046:	5d16      	ldrb	r6, [r2, r4]
 8023048:	bf0c      	ite	eq
 802304a:	f006 060f 	andeq.w	r6, r6, #15
 802304e:	1136      	asrne	r6, r6, #4
 8023050:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023054:	b2f6      	uxtb	r6, r6
 8023056:	f110 0a01 	adds.w	sl, r0, #1
 802305a:	d457      	bmi.n	802310c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802305c:	45d0      	cmp	r8, sl
 802305e:	dd55      	ble.n	802310c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023060:	f1bc 0f00 	cmp.w	ip, #0
 8023064:	db52      	blt.n	802310c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023066:	45e1      	cmp	r9, ip
 8023068:	dd50      	ble.n	802310c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802306a:	2f00      	cmp	r7, #0
 802306c:	f000 80ac 	beq.w	80231c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023070:	f10e 0b01 	add.w	fp, lr, #1
 8023074:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023078:	f01b 0f01 	tst.w	fp, #1
 802307c:	5d14      	ldrb	r4, [r2, r4]
 802307e:	bf0c      	ite	eq
 8023080:	f004 040f 	andeq.w	r4, r4, #15
 8023084:	1124      	asrne	r4, r4, #4
 8023086:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802308a:	b2e4      	uxtb	r4, r4
 802308c:	2d00      	cmp	r5, #0
 802308e:	f000 8096 	beq.w	80231be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023092:	2800      	cmp	r0, #0
 8023094:	f10c 0c01 	add.w	ip, ip, #1
 8023098:	db3c      	blt.n	8023114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802309a:	4580      	cmp	r8, r0
 802309c:	dd3a      	ble.n	8023114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802309e:	f1bc 0f00 	cmp.w	ip, #0
 80230a2:	db37      	blt.n	8023114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230a4:	45e1      	cmp	r9, ip
 80230a6:	dd35      	ble.n	8023114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230a8:	eb03 0b0e 	add.w	fp, r3, lr
 80230ac:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80230b0:	f01b 0f01 	tst.w	fp, #1
 80230b4:	5c10      	ldrb	r0, [r2, r0]
 80230b6:	bf0c      	ite	eq
 80230b8:	f000 000f 	andeq.w	r0, r0, #15
 80230bc:	1100      	asrne	r0, r0, #4
 80230be:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80230c2:	b2c0      	uxtb	r0, r0
 80230c4:	f1ba 0f00 	cmp.w	sl, #0
 80230c8:	db26      	blt.n	8023118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230ca:	45d0      	cmp	r8, sl
 80230cc:	dd24      	ble.n	8023118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230ce:	f1bc 0f00 	cmp.w	ip, #0
 80230d2:	db21      	blt.n	8023118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230d4:	45e1      	cmp	r9, ip
 80230d6:	dd1f      	ble.n	8023118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80230d8:	b307      	cbz	r7, 802311c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80230da:	3301      	adds	r3, #1
 80230dc:	449e      	add	lr, r3
 80230de:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80230e2:	f01e 0f01 	tst.w	lr, #1
 80230e6:	5cd3      	ldrb	r3, [r2, r3]
 80230e8:	bf0c      	ite	eq
 80230ea:	f003 030f 	andeq.w	r3, r3, #15
 80230ee:	111b      	asrne	r3, r3, #4
 80230f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80230f4:	b2db      	uxtb	r3, r3
 80230f6:	2f0f      	cmp	r7, #15
 80230f8:	d911      	bls.n	802311e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80230fa:	4b35      	ldr	r3, [pc, #212]	; (80231d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80230fc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023100:	4a34      	ldr	r2, [pc, #208]	; (80231d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023102:	4835      	ldr	r0, [pc, #212]	; (80231d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023104:	f002 fb5a 	bl	80257bc <__assert_func>
 8023108:	2600      	movs	r6, #0
 802310a:	e7a4      	b.n	8023056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802310c:	2400      	movs	r4, #0
 802310e:	e7bd      	b.n	802308c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023110:	463c      	mov	r4, r7
 8023112:	e7be      	b.n	8023092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023114:	2000      	movs	r0, #0
 8023116:	e7d5      	b.n	80230c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023118:	2300      	movs	r3, #0
 802311a:	e7ec      	b.n	80230f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802311c:	463b      	mov	r3, r7
 802311e:	2d0f      	cmp	r5, #15
 8023120:	d8eb      	bhi.n	80230fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023122:	b2bf      	uxth	r7, r7
 8023124:	b2ad      	uxth	r5, r5
 8023126:	fb07 f205 	mul.w	r2, r7, r5
 802312a:	013f      	lsls	r7, r7, #4
 802312c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023130:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023134:	1abf      	subs	r7, r7, r2
 8023136:	b2ad      	uxth	r5, r5
 8023138:	b2bf      	uxth	r7, r7
 802313a:	ebac 0c05 	sub.w	ip, ip, r5
 802313e:	437c      	muls	r4, r7
 8023140:	fa1f fc8c 	uxth.w	ip, ip
 8023144:	fb06 440c 	mla	r4, r6, ip, r4
 8023148:	fb05 4400 	mla	r4, r5, r0, r4
 802314c:	fb02 4203 	mla	r2, r2, r3, r4
 8023150:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023154:	b38a      	cbz	r2, 80231ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023156:	4b21      	ldr	r3, [pc, #132]	; (80231dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023158:	681c      	ldr	r4, [r3, #0]
 802315a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802315e:	b2e5      	uxtb	r5, r4
 8023160:	4353      	muls	r3, r2
 8023162:	1c5a      	adds	r2, r3, #1
 8023164:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023168:	1212      	asrs	r2, r2, #8
 802316a:	b290      	uxth	r0, r2
 802316c:	43d2      	mvns	r2, r2
 802316e:	fb15 f500 	smulbb	r5, r5, r0
 8023172:	b2d3      	uxtb	r3, r2
 8023174:	780a      	ldrb	r2, [r1, #0]
 8023176:	fb02 5203 	mla	r2, r2, r3, r5
 802317a:	b292      	uxth	r2, r2
 802317c:	1c55      	adds	r5, r2, #1
 802317e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023182:	784d      	ldrb	r5, [r1, #1]
 8023184:	fb15 f503 	smulbb	r5, r5, r3
 8023188:	1212      	asrs	r2, r2, #8
 802318a:	700a      	strb	r2, [r1, #0]
 802318c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023190:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023194:	fb02 5200 	mla	r2, r2, r0, r5
 8023198:	b292      	uxth	r2, r2
 802319a:	1c55      	adds	r5, r2, #1
 802319c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80231a0:	1212      	asrs	r2, r2, #8
 80231a2:	704a      	strb	r2, [r1, #1]
 80231a4:	788a      	ldrb	r2, [r1, #2]
 80231a6:	fb12 f303 	smulbb	r3, r2, r3
 80231aa:	fb04 3300 	mla	r3, r4, r0, r3
 80231ae:	b29b      	uxth	r3, r3
 80231b0:	1c5a      	adds	r2, r3, #1
 80231b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231b6:	121b      	asrs	r3, r3, #8
 80231b8:	708b      	strb	r3, [r1, #2]
 80231ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231be:	2f0f      	cmp	r7, #15
 80231c0:	d89b      	bhi.n	80230fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80231c2:	462b      	mov	r3, r5
 80231c4:	4628      	mov	r0, r5
 80231c6:	e7ac      	b.n	8023122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80231c8:	2d00      	cmp	r5, #0
 80231ca:	d1a1      	bne.n	8023110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80231cc:	462c      	mov	r4, r5
 80231ce:	e7f8      	b.n	80231c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80231d0:	0802af2d 	.word	0x0802af2d
 80231d4:	0802b426 	.word	0x0802b426
 80231d8:	0802aff6 	.word	0x0802aff6
 80231dc:	2000bbbc 	.word	0x2000bbbc

080231e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80231e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e4:	ed2d 8b08 	vpush	{d8-d11}
 80231e8:	b097      	sub	sp, #92	; 0x5c
 80231ea:	eeb0 aa40 	vmov.f32	s20, s0
 80231ee:	eef0 9a60 	vmov.f32	s19, s1
 80231f2:	9308      	str	r3, [sp, #32]
 80231f4:	eeb0 9a41 	vmov.f32	s18, s2
 80231f8:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80231fc:	eeb0 8a62 	vmov.f32	s16, s5
 8023200:	9214      	str	r2, [sp, #80]	; 0x50
 8023202:	eef0 8a43 	vmov.f32	s17, s6
 8023206:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023208:	eef0 ba44 	vmov.f32	s23, s8
 802320c:	9309      	str	r3, [sp, #36]	; 0x24
 802320e:	eeb0 ba64 	vmov.f32	s22, s9
 8023212:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023216:	eef0 aa45 	vmov.f32	s21, s10
 802321a:	9015      	str	r0, [sp, #84]	; 0x54
 802321c:	910c      	str	r1, [sp, #48]	; 0x30
 802321e:	930e      	str	r3, [sp, #56]	; 0x38
 8023220:	6850      	ldr	r0, [r2, #4]
 8023222:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023226:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802322a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802322e:	fb00 1803 	mla	r8, r0, r3, r1
 8023232:	6813      	ldr	r3, [r2, #0]
 8023234:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023238:	4498      	add	r8, r3
 802323a:	f10b 0301 	add.w	r3, fp, #1
 802323e:	f023 0301 	bic.w	r3, r3, #1
 8023242:	930f      	str	r3, [sp, #60]	; 0x3c
 8023244:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023246:	681f      	ldr	r7, [r3, #0]
 8023248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802324a:	2b00      	cmp	r3, #0
 802324c:	dc03      	bgt.n	8023256 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802324e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023250:	2b00      	cmp	r3, #0
 8023252:	f340 8238 	ble.w	80236c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023256:	9b08      	ldr	r3, [sp, #32]
 8023258:	2b00      	cmp	r3, #0
 802325a:	f340 810c 	ble.w	8023476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802325e:	142a      	asrs	r2, r5, #16
 8023260:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023264:	d42c      	bmi.n	80232c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023266:	1c51      	adds	r1, r2, #1
 8023268:	458b      	cmp	fp, r1
 802326a:	dd2c      	ble.n	80232c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802326c:	2b00      	cmp	r3, #0
 802326e:	db2a      	blt.n	80232c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023270:	1c59      	adds	r1, r3, #1
 8023272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023274:	4288      	cmp	r0, r1
 8023276:	dd26      	ble.n	80232c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023278:	9b08      	ldr	r3, [sp, #32]
 802327a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802327c:	3b01      	subs	r3, #1
 802327e:	fb02 5203 	mla	r2, r2, r3, r5
 8023282:	1412      	asrs	r2, r2, #16
 8023284:	d429      	bmi.n	80232da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023286:	3201      	adds	r2, #1
 8023288:	4593      	cmp	fp, r2
 802328a:	dd26      	ble.n	80232da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802328c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802328e:	fb02 6303 	mla	r3, r2, r3, r6
 8023292:	141b      	asrs	r3, r3, #16
 8023294:	d421      	bmi.n	80232da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023296:	3301      	adds	r3, #1
 8023298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802329a:	429a      	cmp	r2, r3
 802329c:	dd1d      	ble.n	80232da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802329e:	f108 0e03 	add.w	lr, r8, #3
 80232a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80232a6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80232aa:	f1b9 0f00 	cmp.w	r9, #0
 80232ae:	f300 814f 	bgt.w	8023550 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80232b2:	9b08      	ldr	r3, [sp, #32]
 80232b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232bc:	44a0      	add	r8, r4
 80232be:	e0dc      	b.n	802347a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80232c0:	1c51      	adds	r1, r2, #1
 80232c2:	f040 80ce 	bne.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232c6:	4593      	cmp	fp, r2
 80232c8:	f340 80cb 	ble.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232cc:	1c5a      	adds	r2, r3, #1
 80232ce:	f2c0 80c8 	blt.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232d4:	4293      	cmp	r3, r2
 80232d6:	f280 80c4 	bge.w	8023462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80232da:	9b08      	ldr	r3, [sp, #32]
 80232dc:	46c1      	mov	r9, r8
 80232de:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80232e2:	930d      	str	r3, [sp, #52]	; 0x34
 80232e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	dde3      	ble.n	80232b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80232ea:	1428      	asrs	r0, r5, #16
 80232ec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80232f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80232f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80232f8:	f100 8111 	bmi.w	802351e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80232fc:	f100 0c01 	add.w	ip, r0, #1
 8023300:	45e3      	cmp	fp, ip
 8023302:	f340 810e 	ble.w	8023522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023306:	2b00      	cmp	r3, #0
 8023308:	f2c0 810b 	blt.w	8023522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802330c:	f103 0c01 	add.w	ip, r3, #1
 8023310:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023312:	4564      	cmp	r4, ip
 8023314:	f340 8105 	ble.w	8023522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023318:	fb03 030a 	mla	r3, r3, sl, r0
 802331c:	0858      	lsrs	r0, r3, #1
 802331e:	07dc      	lsls	r4, r3, #31
 8023320:	5c38      	ldrb	r0, [r7, r0]
 8023322:	bf54      	ite	pl
 8023324:	f000 000f 	andpl.w	r0, r0, #15
 8023328:	1100      	asrmi	r0, r0, #4
 802332a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802332e:	b2c0      	uxtb	r0, r0
 8023330:	2a00      	cmp	r2, #0
 8023332:	f000 80e1 	beq.w	80234f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023336:	f103 0e01 	add.w	lr, r3, #1
 802333a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802333e:	f01e 0f01 	tst.w	lr, #1
 8023342:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023346:	bf0c      	ite	eq
 8023348:	f00c 0c0f 	andeq.w	ip, ip, #15
 802334c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023350:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023354:	fa5f f48c 	uxtb.w	r4, ip
 8023358:	9410      	str	r4, [sp, #64]	; 0x40
 802335a:	b1f9      	cbz	r1, 802339c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802335c:	4453      	add	r3, sl
 802335e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023362:	07dc      	lsls	r4, r3, #31
 8023364:	f103 0301 	add.w	r3, r3, #1
 8023368:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802336c:	bf54      	ite	pl
 802336e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023372:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023376:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802337a:	fa5f f48c 	uxtb.w	r4, ip
 802337e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023382:	940a      	str	r4, [sp, #40]	; 0x28
 8023384:	07dc      	lsls	r4, r3, #31
 8023386:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802338a:	bf54      	ite	pl
 802338c:	f00c 030f 	andpl.w	r3, ip, #15
 8023390:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023394:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023398:	b2db      	uxtb	r3, r3
 802339a:	9311      	str	r3, [sp, #68]	; 0x44
 802339c:	b292      	uxth	r2, r2
 802339e:	b289      	uxth	r1, r1
 80233a0:	0113      	lsls	r3, r2, #4
 80233a2:	fb02 fc01 	mul.w	ip, r2, r1
 80233a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233a8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80233ac:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80233b0:	eba3 030c 	sub.w	r3, r3, ip
 80233b4:	b289      	uxth	r1, r1
 80233b6:	b29b      	uxth	r3, r3
 80233b8:	ebae 0e01 	sub.w	lr, lr, r1
 80233bc:	4353      	muls	r3, r2
 80233be:	fa1f fe8e 	uxth.w	lr, lr
 80233c2:	fb00 320e 	mla	r2, r0, lr, r3
 80233c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233c8:	fb01 2203 	mla	r2, r1, r3, r2
 80233cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80233ce:	fb0c 2203 	mla	r2, ip, r3, r2
 80233d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80233d6:	2a00      	cmp	r2, #0
 80233d8:	d039      	beq.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80233da:	4bbd      	ldr	r3, [pc, #756]	; (80236d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80233dc:	6819      	ldr	r1, [r3, #0]
 80233de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80233e0:	fa5f fc81 	uxtb.w	ip, r1
 80233e4:	435a      	muls	r2, r3
 80233e6:	1c53      	adds	r3, r2, #1
 80233e8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80233ec:	1212      	asrs	r2, r2, #8
 80233ee:	b290      	uxth	r0, r2
 80233f0:	43d2      	mvns	r2, r2
 80233f2:	fb1c fc00 	smulbb	ip, ip, r0
 80233f6:	b2d3      	uxtb	r3, r2
 80233f8:	f899 2000 	ldrb.w	r2, [r9]
 80233fc:	fb02 c203 	mla	r2, r2, r3, ip
 8023400:	b292      	uxth	r2, r2
 8023402:	f102 0c01 	add.w	ip, r2, #1
 8023406:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802340a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802340e:	fb1c fc03 	smulbb	ip, ip, r3
 8023412:	1212      	asrs	r2, r2, #8
 8023414:	f889 2000 	strb.w	r2, [r9]
 8023418:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802341c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023420:	fb02 c200 	mla	r2, r2, r0, ip
 8023424:	b292      	uxth	r2, r2
 8023426:	f102 0c01 	add.w	ip, r2, #1
 802342a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802342e:	1212      	asrs	r2, r2, #8
 8023430:	f889 2001 	strb.w	r2, [r9, #1]
 8023434:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023438:	fb12 f303 	smulbb	r3, r2, r3
 802343c:	fb01 3300 	mla	r3, r1, r0, r3
 8023440:	b29b      	uxth	r3, r3
 8023442:	1c5a      	adds	r2, r3, #1
 8023444:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023448:	121b      	asrs	r3, r3, #8
 802344a:	f889 3002 	strb.w	r3, [r9, #2]
 802344e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023450:	f109 0903 	add.w	r9, r9, #3
 8023454:	441d      	add	r5, r3
 8023456:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023458:	441e      	add	r6, r3
 802345a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802345c:	3b01      	subs	r3, #1
 802345e:	930d      	str	r3, [sp, #52]	; 0x34
 8023460:	e740      	b.n	80232e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023462:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023464:	f108 0803 	add.w	r8, r8, #3
 8023468:	441d      	add	r5, r3
 802346a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802346c:	441e      	add	r6, r3
 802346e:	9b08      	ldr	r3, [sp, #32]
 8023470:	3b01      	subs	r3, #1
 8023472:	9308      	str	r3, [sp, #32]
 8023474:	e6ef      	b.n	8023256 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023476:	f47f aeff 	bne.w	8023278 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802347a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802347c:	2b00      	cmp	r3, #0
 802347e:	f340 8122 	ble.w	80236c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023486:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023488:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802348c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023490:	eef0 6a48 	vmov.f32	s13, s16
 8023494:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023498:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802349c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234a0:	ee16 5a90 	vmov	r5, s13
 80234a4:	eef0 6a68 	vmov.f32	s13, s17
 80234a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234ac:	ee16 6a90 	vmov	r6, s13
 80234b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80234b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80234b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80234bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80234c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80234c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80234c8:	ee18 2a10 	vmov	r2, s16
 80234cc:	eeb0 8a47 	vmov.f32	s16, s14
 80234d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80234d4:	ee18 2a90 	vmov	r2, s17
 80234d8:	932b      	str	r3, [sp, #172]	; 0xac
 80234da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234dc:	eef0 8a67 	vmov.f32	s17, s15
 80234e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80234e4:	932c      	str	r3, [sp, #176]	; 0xb0
 80234e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80234ea:	3b01      	subs	r3, #1
 80234ec:	930c      	str	r3, [sp, #48]	; 0x30
 80234ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234f0:	bf08      	it	eq
 80234f2:	4613      	moveq	r3, r2
 80234f4:	9308      	str	r3, [sp, #32]
 80234f6:	e6a7      	b.n	8023248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80234f8:	2900      	cmp	r1, #0
 80234fa:	f43f af4f 	beq.w	802339c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80234fe:	4453      	add	r3, sl
 8023500:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023504:	07db      	lsls	r3, r3, #31
 8023506:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802350a:	bf54      	ite	pl
 802350c:	f00c 030f 	andpl.w	r3, ip, #15
 8023510:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023514:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023518:	b2db      	uxtb	r3, r3
 802351a:	930a      	str	r3, [sp, #40]	; 0x28
 802351c:	e73e      	b.n	802339c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802351e:	1c44      	adds	r4, r0, #1
 8023520:	d195      	bne.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023522:	4583      	cmp	fp, r0
 8023524:	dd93      	ble.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023526:	1c5c      	adds	r4, r3, #1
 8023528:	db91      	blt.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802352a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802352c:	429c      	cmp	r4, r3
 802352e:	dd8e      	ble.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023530:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023532:	9002      	str	r0, [sp, #8]
 8023534:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023536:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802353a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802353c:	463a      	mov	r2, r7
 802353e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023542:	e9cd b300 	strd	fp, r3, [sp]
 8023546:	4649      	mov	r1, r9
 8023548:	4653      	mov	r3, sl
 802354a:	f7ff fd61 	bl	8023010 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802354e:	e77e      	b.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023550:	142a      	asrs	r2, r5, #16
 8023552:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023556:	1433      	asrs	r3, r6, #16
 8023558:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802355c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023560:	085a      	lsrs	r2, r3, #1
 8023562:	07dc      	lsls	r4, r3, #31
 8023564:	5cba      	ldrb	r2, [r7, r2]
 8023566:	bf54      	ite	pl
 8023568:	f002 020f 	andpl.w	r2, r2, #15
 802356c:	1112      	asrmi	r2, r2, #4
 802356e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023572:	b2d2      	uxtb	r2, r2
 8023574:	2900      	cmp	r1, #0
 8023576:	f000 8093 	beq.w	80236a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802357a:	1c5c      	adds	r4, r3, #1
 802357c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8023580:	07e4      	lsls	r4, r4, #31
 8023582:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023586:	bf54      	ite	pl
 8023588:	f00c 0c0f 	andpl.w	ip, ip, #15
 802358c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023590:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023594:	fa5f f48c 	uxtb.w	r4, ip
 8023598:	9412      	str	r4, [sp, #72]	; 0x48
 802359a:	b300      	cbz	r0, 80235de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802359c:	4453      	add	r3, sl
 802359e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235a2:	07dc      	lsls	r4, r3, #31
 80235a4:	f103 0301 	add.w	r3, r3, #1
 80235a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235ac:	bf54      	ite	pl
 80235ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235ba:	fa5f f48c 	uxtb.w	r4, ip
 80235be:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80235c4:	07dc      	lsls	r4, r3, #31
 80235c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235ca:	bf54      	ite	pl
 80235cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235d8:	fa5f f38c 	uxtb.w	r3, ip
 80235dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80235de:	b289      	uxth	r1, r1
 80235e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235e2:	b280      	uxth	r0, r0
 80235e4:	fb01 f300 	mul.w	r3, r1, r0
 80235e8:	0109      	lsls	r1, r1, #4
 80235ea:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80235ee:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80235f2:	1ac9      	subs	r1, r1, r3
 80235f4:	b280      	uxth	r0, r0
 80235f6:	b289      	uxth	r1, r1
 80235f8:	ebac 0c00 	sub.w	ip, ip, r0
 80235fc:	4361      	muls	r1, r4
 80235fe:	fa1f fc8c 	uxth.w	ip, ip
 8023602:	fb02 120c 	mla	r2, r2, ip, r1
 8023606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023608:	fb00 2001 	mla	r0, r0, r1, r2
 802360c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802360e:	fb03 0302 	mla	r3, r3, r2, r0
 8023612:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023616:	2b00      	cmp	r3, #0
 8023618:	d039      	beq.n	802368e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802361a:	4a2d      	ldr	r2, [pc, #180]	; (80236d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802361c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023620:	6810      	ldr	r0, [r2, #0]
 8023622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023624:	fa5f fc80 	uxtb.w	ip, r0
 8023628:	4353      	muls	r3, r2
 802362a:	1c5a      	adds	r2, r3, #1
 802362c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023630:	121b      	asrs	r3, r3, #8
 8023632:	b29a      	uxth	r2, r3
 8023634:	43db      	mvns	r3, r3
 8023636:	fb1c fc02 	smulbb	ip, ip, r2
 802363a:	b2db      	uxtb	r3, r3
 802363c:	fb01 c103 	mla	r1, r1, r3, ip
 8023640:	b289      	uxth	r1, r1
 8023642:	f101 0c01 	add.w	ip, r1, #1
 8023646:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802364a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802364e:	fb1c fc03 	smulbb	ip, ip, r3
 8023652:	1209      	asrs	r1, r1, #8
 8023654:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023658:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802365c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023660:	fb01 c102 	mla	r1, r1, r2, ip
 8023664:	b289      	uxth	r1, r1
 8023666:	f101 0c01 	add.w	ip, r1, #1
 802366a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802366e:	1209      	asrs	r1, r1, #8
 8023670:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023674:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023678:	fb11 f303 	smulbb	r3, r1, r3
 802367c:	fb00 3002 	mla	r0, r0, r2, r3
 8023680:	b280      	uxth	r0, r0
 8023682:	1c42      	adds	r2, r0, #1
 8023684:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023688:	1200      	asrs	r0, r0, #8
 802368a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802368e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023690:	f10e 0e03 	add.w	lr, lr, #3
 8023694:	f109 39ff 	add.w	r9, r9, #4294967295
 8023698:	441d      	add	r5, r3
 802369a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802369c:	441e      	add	r6, r3
 802369e:	e604      	b.n	80232aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80236a0:	2800      	cmp	r0, #0
 80236a2:	d09c      	beq.n	80235de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80236a4:	4453      	add	r3, sl
 80236a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80236aa:	07db      	lsls	r3, r3, #31
 80236ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80236b0:	bf54      	ite	pl
 80236b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80236b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80236ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80236be:	fa5f f38c 	uxtb.w	r3, ip
 80236c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80236c4:	e78b      	b.n	80235de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80236c6:	b017      	add	sp, #92	; 0x5c
 80236c8:	ecbd 8b08 	vpop	{d8-d11}
 80236cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236d0:	2000bbbc 	.word	0x2000bbbc

080236d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80236d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236d8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80236dc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80236e0:	2800      	cmp	r0, #0
 80236e2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80236e6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80236ea:	fb0c 0e03 	mla	lr, ip, r3, r0
 80236ee:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80236f2:	db6b      	blt.n	80237cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80236f4:	4580      	cmp	r8, r0
 80236f6:	dd69      	ble.n	80237cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80236f8:	f1bc 0f00 	cmp.w	ip, #0
 80236fc:	db66      	blt.n	80237cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80236fe:	45e1      	cmp	r9, ip
 8023700:	dd64      	ble.n	80237cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023702:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023706:	f01e 0f01 	tst.w	lr, #1
 802370a:	5d16      	ldrb	r6, [r2, r4]
 802370c:	bf0c      	ite	eq
 802370e:	f006 060f 	andeq.w	r6, r6, #15
 8023712:	1136      	asrne	r6, r6, #4
 8023714:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023718:	b2f6      	uxtb	r6, r6
 802371a:	f110 0a01 	adds.w	sl, r0, #1
 802371e:	d457      	bmi.n	80237d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023720:	45d0      	cmp	r8, sl
 8023722:	dd55      	ble.n	80237d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023724:	f1bc 0f00 	cmp.w	ip, #0
 8023728:	db52      	blt.n	80237d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802372a:	45e1      	cmp	r9, ip
 802372c:	dd50      	ble.n	80237d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802372e:	2f00      	cmp	r7, #0
 8023730:	f000 80a5 	beq.w	802387e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023734:	f10e 0b01 	add.w	fp, lr, #1
 8023738:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802373c:	f01b 0f01 	tst.w	fp, #1
 8023740:	5d14      	ldrb	r4, [r2, r4]
 8023742:	bf0c      	ite	eq
 8023744:	f004 040f 	andeq.w	r4, r4, #15
 8023748:	1124      	asrne	r4, r4, #4
 802374a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802374e:	b2e4      	uxtb	r4, r4
 8023750:	2d00      	cmp	r5, #0
 8023752:	f000 808f 	beq.w	8023874 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023756:	2800      	cmp	r0, #0
 8023758:	f10c 0c01 	add.w	ip, ip, #1
 802375c:	db3c      	blt.n	80237d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802375e:	4580      	cmp	r8, r0
 8023760:	dd3a      	ble.n	80237d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023762:	f1bc 0f00 	cmp.w	ip, #0
 8023766:	db37      	blt.n	80237d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023768:	45e1      	cmp	r9, ip
 802376a:	dd35      	ble.n	80237d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802376c:	eb03 0b0e 	add.w	fp, r3, lr
 8023770:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023774:	f01b 0f01 	tst.w	fp, #1
 8023778:	5c10      	ldrb	r0, [r2, r0]
 802377a:	bf0c      	ite	eq
 802377c:	f000 000f 	andeq.w	r0, r0, #15
 8023780:	1100      	asrne	r0, r0, #4
 8023782:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023786:	b2c0      	uxtb	r0, r0
 8023788:	f1ba 0f00 	cmp.w	sl, #0
 802378c:	db26      	blt.n	80237dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802378e:	45d0      	cmp	r8, sl
 8023790:	dd24      	ble.n	80237dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023792:	f1bc 0f00 	cmp.w	ip, #0
 8023796:	db21      	blt.n	80237dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023798:	45e1      	cmp	r9, ip
 802379a:	dd1f      	ble.n	80237dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802379c:	b307      	cbz	r7, 80237e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802379e:	3301      	adds	r3, #1
 80237a0:	449e      	add	lr, r3
 80237a2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80237a6:	f01e 0f01 	tst.w	lr, #1
 80237aa:	5cd3      	ldrb	r3, [r2, r3]
 80237ac:	bf0c      	ite	eq
 80237ae:	f003 030f 	andeq.w	r3, r3, #15
 80237b2:	111b      	asrne	r3, r3, #4
 80237b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237b8:	b2db      	uxtb	r3, r3
 80237ba:	2f0f      	cmp	r7, #15
 80237bc:	d911      	bls.n	80237e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80237be:	4b32      	ldr	r3, [pc, #200]	; (8023888 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80237c0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80237c4:	4a31      	ldr	r2, [pc, #196]	; (802388c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80237c6:	4832      	ldr	r0, [pc, #200]	; (8023890 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80237c8:	f001 fff8 	bl	80257bc <__assert_func>
 80237cc:	2600      	movs	r6, #0
 80237ce:	e7a4      	b.n	802371a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80237d0:	2400      	movs	r4, #0
 80237d2:	e7bd      	b.n	8023750 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80237d4:	463c      	mov	r4, r7
 80237d6:	e7be      	b.n	8023756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80237d8:	2000      	movs	r0, #0
 80237da:	e7d5      	b.n	8023788 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80237dc:	2300      	movs	r3, #0
 80237de:	e7ec      	b.n	80237ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80237e0:	463b      	mov	r3, r7
 80237e2:	2d0f      	cmp	r5, #15
 80237e4:	d8eb      	bhi.n	80237be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80237e6:	b2bf      	uxth	r7, r7
 80237e8:	b2ad      	uxth	r5, r5
 80237ea:	fb07 f205 	mul.w	r2, r7, r5
 80237ee:	013f      	lsls	r7, r7, #4
 80237f0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80237f4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80237f8:	1abf      	subs	r7, r7, r2
 80237fa:	b2ad      	uxth	r5, r5
 80237fc:	b2bf      	uxth	r7, r7
 80237fe:	ebac 0c05 	sub.w	ip, ip, r5
 8023802:	437c      	muls	r4, r7
 8023804:	fa1f fc8c 	uxth.w	ip, ip
 8023808:	fb06 440c 	mla	r4, r6, ip, r4
 802380c:	fb05 4400 	mla	r4, r5, r0, r4
 8023810:	fb02 4303 	mla	r3, r2, r3, r4
 8023814:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023818:	b353      	cbz	r3, 8023870 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802381a:	4a1e      	ldr	r2, [pc, #120]	; (8023894 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802381c:	7808      	ldrb	r0, [r1, #0]
 802381e:	6814      	ldr	r4, [r2, #0]
 8023820:	b29a      	uxth	r2, r3
 8023822:	43db      	mvns	r3, r3
 8023824:	b2e5      	uxtb	r5, r4
 8023826:	b2db      	uxtb	r3, r3
 8023828:	fb15 f502 	smulbb	r5, r5, r2
 802382c:	fb00 5003 	mla	r0, r0, r3, r5
 8023830:	b280      	uxth	r0, r0
 8023832:	1c45      	adds	r5, r0, #1
 8023834:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023838:	784d      	ldrb	r5, [r1, #1]
 802383a:	fb15 f503 	smulbb	r5, r5, r3
 802383e:	1200      	asrs	r0, r0, #8
 8023840:	7008      	strb	r0, [r1, #0]
 8023842:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023846:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802384a:	fb00 5002 	mla	r0, r0, r2, r5
 802384e:	b280      	uxth	r0, r0
 8023850:	1c45      	adds	r5, r0, #1
 8023852:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023856:	1200      	asrs	r0, r0, #8
 8023858:	7048      	strb	r0, [r1, #1]
 802385a:	7888      	ldrb	r0, [r1, #2]
 802385c:	fb10 f303 	smulbb	r3, r0, r3
 8023860:	fb04 3202 	mla	r2, r4, r2, r3
 8023864:	b292      	uxth	r2, r2
 8023866:	1c53      	adds	r3, r2, #1
 8023868:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802386c:	1212      	asrs	r2, r2, #8
 802386e:	708a      	strb	r2, [r1, #2]
 8023870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023874:	2f0f      	cmp	r7, #15
 8023876:	d8a2      	bhi.n	80237be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023878:	462b      	mov	r3, r5
 802387a:	4628      	mov	r0, r5
 802387c:	e7b3      	b.n	80237e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802387e:	2d00      	cmp	r5, #0
 8023880:	d1a8      	bne.n	80237d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023882:	462c      	mov	r4, r5
 8023884:	e7f8      	b.n	8023878 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023886:	bf00      	nop
 8023888:	0802af2d 	.word	0x0802af2d
 802388c:	0802b426 	.word	0x0802b426
 8023890:	0802aff6 	.word	0x0802aff6
 8023894:	2000bbbc 	.word	0x2000bbbc

08023898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802389c:	ed2d 8b08 	vpush	{d8-d11}
 80238a0:	b095      	sub	sp, #84	; 0x54
 80238a2:	461c      	mov	r4, r3
 80238a4:	eeb0 aa40 	vmov.f32	s20, s0
 80238a8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80238ac:	eef0 9a60 	vmov.f32	s19, s1
 80238b0:	920e      	str	r2, [sp, #56]	; 0x38
 80238b2:	eeb0 9a41 	vmov.f32	s18, s2
 80238b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80238b8:	eeb0 8a62 	vmov.f32	s16, s5
 80238bc:	9307      	str	r3, [sp, #28]
 80238be:	eef0 8a43 	vmov.f32	s17, s6
 80238c2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80238c6:	eef0 ba44 	vmov.f32	s23, s8
 80238ca:	9013      	str	r0, [sp, #76]	; 0x4c
 80238cc:	eeb0 ba64 	vmov.f32	s22, s9
 80238d0:	9109      	str	r1, [sp, #36]	; 0x24
 80238d2:	eef0 aa45 	vmov.f32	s21, s10
 80238d6:	9308      	str	r3, [sp, #32]
 80238d8:	6850      	ldr	r0, [r2, #4]
 80238da:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80238de:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80238e2:	fb00 1803 	mla	r8, r0, r3, r1
 80238e6:	6813      	ldr	r3, [r2, #0]
 80238e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80238ec:	4498      	add	r8, r3
 80238ee:	9b07      	ldr	r3, [sp, #28]
 80238f0:	3301      	adds	r3, #1
 80238f2:	f023 0301 	bic.w	r3, r3, #1
 80238f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80238f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80238fa:	681f      	ldr	r7, [r3, #0]
 80238fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238fe:	2b00      	cmp	r3, #0
 8023900:	dc03      	bgt.n	802390a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023904:	2b00      	cmp	r3, #0
 8023906:	f340 8238 	ble.w	8023d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802390a:	2c00      	cmp	r4, #0
 802390c:	f340 8109 	ble.w	8023b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023910:	142a      	asrs	r2, r5, #16
 8023912:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023916:	d42b      	bmi.n	8023970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023918:	1c51      	adds	r1, r2, #1
 802391a:	9807      	ldr	r0, [sp, #28]
 802391c:	4288      	cmp	r0, r1
 802391e:	dd2a      	ble.n	8023976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023920:	2b00      	cmp	r3, #0
 8023922:	db28      	blt.n	8023976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023924:	1c59      	adds	r1, r3, #1
 8023926:	9808      	ldr	r0, [sp, #32]
 8023928:	4288      	cmp	r0, r1
 802392a:	dd24      	ble.n	8023976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802392c:	1e63      	subs	r3, r4, #1
 802392e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023930:	fb02 5203 	mla	r2, r2, r3, r5
 8023934:	1412      	asrs	r2, r2, #16
 8023936:	d429      	bmi.n	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023938:	3201      	adds	r2, #1
 802393a:	9907      	ldr	r1, [sp, #28]
 802393c:	4291      	cmp	r1, r2
 802393e:	dd25      	ble.n	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023940:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023942:	fb02 6303 	mla	r3, r2, r3, r6
 8023946:	141b      	asrs	r3, r3, #16
 8023948:	d420      	bmi.n	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802394a:	3301      	adds	r3, #1
 802394c:	9a08      	ldr	r2, [sp, #32]
 802394e:	429a      	cmp	r2, r3
 8023950:	dd1c      	ble.n	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023952:	f108 0e03 	add.w	lr, r8, #3
 8023956:	46a1      	mov	r9, r4
 8023958:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802395c:	f1b9 0f00 	cmp.w	r9, #0
 8023960:	f300 8155 	bgt.w	8023c0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023964:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023968:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802396c:	44a0      	add	r8, r4
 802396e:	e0da      	b.n	8023b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8023970:	1c50      	adds	r0, r2, #1
 8023972:	f040 80ce 	bne.w	8023b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023976:	9907      	ldr	r1, [sp, #28]
 8023978:	4291      	cmp	r1, r2
 802397a:	f340 80ca 	ble.w	8023b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802397e:	1c59      	adds	r1, r3, #1
 8023980:	f2c0 80c7 	blt.w	8023b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023984:	9a08      	ldr	r2, [sp, #32]
 8023986:	4293      	cmp	r3, r2
 8023988:	f280 80c3 	bge.w	8023b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802398c:	46a3      	mov	fp, r4
 802398e:	46c1      	mov	r9, r8
 8023990:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8023994:	f1bb 0f00 	cmp.w	fp, #0
 8023998:	dde4      	ble.n	8023964 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802399a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802399e:	1428      	asrs	r0, r5, #16
 80239a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80239a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80239a8:	920a      	str	r2, [sp, #40]	; 0x28
 80239aa:	f100 8116 	bmi.w	8023bda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80239ae:	f100 0c01 	add.w	ip, r0, #1
 80239b2:	9a07      	ldr	r2, [sp, #28]
 80239b4:	4562      	cmp	r2, ip
 80239b6:	f340 8112 	ble.w	8023bde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	f2c0 810f 	blt.w	8023bde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239c0:	f103 0c01 	add.w	ip, r3, #1
 80239c4:	9a08      	ldr	r2, [sp, #32]
 80239c6:	4562      	cmp	r2, ip
 80239c8:	f340 8109 	ble.w	8023bde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80239cc:	fb03 030a 	mla	r3, r3, sl, r0
 80239d0:	0858      	lsrs	r0, r3, #1
 80239d2:	07da      	lsls	r2, r3, #31
 80239d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239d6:	5c38      	ldrb	r0, [r7, r0]
 80239d8:	bf54      	ite	pl
 80239da:	f000 000f 	andpl.w	r0, r0, #15
 80239de:	1100      	asrmi	r0, r0, #4
 80239e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80239e4:	b2c0      	uxtb	r0, r0
 80239e6:	2a00      	cmp	r2, #0
 80239e8:	f000 80dd 	beq.w	8023ba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80239ec:	f103 0e01 	add.w	lr, r3, #1
 80239f0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80239f4:	f01e 0f01 	tst.w	lr, #1
 80239f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80239fc:	bf0c      	ite	eq
 80239fe:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023a02:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023a06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a0a:	fa5f fc8c 	uxtb.w	ip, ip
 8023a0e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023a12:	b301      	cbz	r1, 8023a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023a14:	4453      	add	r3, sl
 8023a16:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a1a:	07da      	lsls	r2, r3, #31
 8023a1c:	f103 0301 	add.w	r3, r3, #1
 8023a20:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a24:	bf54      	ite	pl
 8023a26:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a2a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a2e:	07da      	lsls	r2, r3, #31
 8023a30:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a34:	fa5f fc8c 	uxtb.w	ip, ip
 8023a38:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8023a3c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a40:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a44:	bf54      	ite	pl
 8023a46:	f00c 030f 	andpl.w	r3, ip, #15
 8023a4a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023a4e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a52:	b2db      	uxtb	r3, r3
 8023a54:	9310      	str	r3, [sp, #64]	; 0x40
 8023a56:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023a5a:	b289      	uxth	r1, r1
 8023a5c:	fb02 f301 	mul.w	r3, r2, r1
 8023a60:	0112      	lsls	r2, r2, #4
 8023a62:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023a66:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8023a6a:	1ad2      	subs	r2, r2, r3
 8023a6c:	fa1f fe81 	uxth.w	lr, r1
 8023a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023a72:	b292      	uxth	r2, r2
 8023a74:	ebac 0c0e 	sub.w	ip, ip, lr
 8023a78:	434a      	muls	r2, r1
 8023a7a:	fa1f fc8c 	uxth.w	ip, ip
 8023a7e:	fb00 200c 	mla	r0, r0, ip, r2
 8023a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023a84:	fb0e 0002 	mla	r0, lr, r2, r0
 8023a88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a8a:	fb03 0002 	mla	r0, r3, r2, r0
 8023a8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023a92:	b3a8      	cbz	r0, 8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023a94:	4bbb      	ldr	r3, [pc, #748]	; (8023d84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023a96:	28ff      	cmp	r0, #255	; 0xff
 8023a98:	681b      	ldr	r3, [r3, #0]
 8023a9a:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8023a9e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023aa2:	b2db      	uxtb	r3, r3
 8023aa4:	f000 8092 	beq.w	8023bcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8023aa8:	b282      	uxth	r2, r0
 8023aaa:	43c0      	mvns	r0, r0
 8023aac:	f899 e000 	ldrb.w	lr, [r9]
 8023ab0:	fb13 f302 	smulbb	r3, r3, r2
 8023ab4:	b2c0      	uxtb	r0, r0
 8023ab6:	fb11 f102 	smulbb	r1, r1, r2
 8023aba:	fb0e 3300 	mla	r3, lr, r0, r3
 8023abe:	fb1c f202 	smulbb	r2, ip, r2
 8023ac2:	b29b      	uxth	r3, r3
 8023ac4:	f103 0e01 	add.w	lr, r3, #1
 8023ac8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023acc:	121b      	asrs	r3, r3, #8
 8023ace:	f889 3000 	strb.w	r3, [r9]
 8023ad2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023ad6:	fb03 1100 	mla	r1, r3, r0, r1
 8023ada:	b289      	uxth	r1, r1
 8023adc:	1c4b      	adds	r3, r1, #1
 8023ade:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023ae2:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023ae6:	fb03 2000 	mla	r0, r3, r0, r2
 8023aea:	1209      	asrs	r1, r1, #8
 8023aec:	b280      	uxth	r0, r0
 8023aee:	f889 1001 	strb.w	r1, [r9, #1]
 8023af2:	f100 0c01 	add.w	ip, r0, #1
 8023af6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023afa:	1200      	asrs	r0, r0, #8
 8023afc:	f889 0002 	strb.w	r0, [r9, #2]
 8023b00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b02:	f109 0903 	add.w	r9, r9, #3
 8023b06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023b0a:	441d      	add	r5, r3
 8023b0c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b0e:	441e      	add	r6, r3
 8023b10:	e740      	b.n	8023994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023b12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b14:	3c01      	subs	r4, #1
 8023b16:	f108 0803 	add.w	r8, r8, #3
 8023b1a:	441d      	add	r5, r3
 8023b1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b1e:	441e      	add	r6, r3
 8023b20:	e6f3      	b.n	802390a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023b22:	f47f af03 	bne.w	802392c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	f340 8126 	ble.w	8023d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b34:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023b38:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023b3c:	eef0 6a48 	vmov.f32	s13, s16
 8023b40:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023b44:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b4c:	ee16 5a90 	vmov	r5, s13
 8023b50:	eef0 6a68 	vmov.f32	s13, s17
 8023b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b58:	ee16 6a90 	vmov	r6, s13
 8023b5c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023b60:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023b64:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023b68:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023b6c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023b70:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023b74:	ee18 2a10 	vmov	r2, s16
 8023b78:	eeb0 8a47 	vmov.f32	s16, s14
 8023b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b80:	ee18 2a90 	vmov	r2, s17
 8023b84:	9329      	str	r3, [sp, #164]	; 0xa4
 8023b86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b88:	eef0 8a67 	vmov.f32	s17, s15
 8023b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b90:	932a      	str	r3, [sp, #168]	; 0xa8
 8023b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b96:	3b01      	subs	r3, #1
 8023b98:	9309      	str	r3, [sp, #36]	; 0x24
 8023b9a:	bf08      	it	eq
 8023b9c:	4614      	moveq	r4, r2
 8023b9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ba0:	bf18      	it	ne
 8023ba2:	461c      	movne	r4, r3
 8023ba4:	e6aa      	b.n	80238fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023ba6:	2900      	cmp	r1, #0
 8023ba8:	f43f af55 	beq.w	8023a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023bac:	4453      	add	r3, sl
 8023bae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023bb2:	07db      	lsls	r3, r3, #31
 8023bb4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023bb8:	bf54      	ite	pl
 8023bba:	f00c 030f 	andpl.w	r3, ip, #15
 8023bbe:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023bc2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023bc6:	b2db      	uxtb	r3, r3
 8023bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8023bca:	e744      	b.n	8023a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023bcc:	f889 3000 	strb.w	r3, [r9]
 8023bd0:	f889 1001 	strb.w	r1, [r9, #1]
 8023bd4:	f889 c002 	strb.w	ip, [r9, #2]
 8023bd8:	e792      	b.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023bda:	1c42      	adds	r2, r0, #1
 8023bdc:	d190      	bne.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023bde:	9a07      	ldr	r2, [sp, #28]
 8023be0:	4282      	cmp	r2, r0
 8023be2:	dd8d      	ble.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023be4:	1c5a      	adds	r2, r3, #1
 8023be6:	db8b      	blt.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023be8:	9a08      	ldr	r2, [sp, #32]
 8023bea:	429a      	cmp	r2, r3
 8023bec:	dd88      	ble.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023bf0:	9105      	str	r1, [sp, #20]
 8023bf2:	4649      	mov	r1, r9
 8023bf4:	9002      	str	r0, [sp, #8]
 8023bf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023bf8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023bfc:	9b08      	ldr	r3, [sp, #32]
 8023bfe:	463a      	mov	r2, r7
 8023c00:	9301      	str	r3, [sp, #4]
 8023c02:	9b07      	ldr	r3, [sp, #28]
 8023c04:	9300      	str	r3, [sp, #0]
 8023c06:	4653      	mov	r3, sl
 8023c08:	f7ff fd64 	bl	80236d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023c0c:	e778      	b.n	8023b00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c0e:	142a      	asrs	r2, r5, #16
 8023c10:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023c14:	1433      	asrs	r3, r6, #16
 8023c16:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023c1a:	fb0a 2303 	mla	r3, sl, r3, r2
 8023c1e:	085a      	lsrs	r2, r3, #1
 8023c20:	07d9      	lsls	r1, r3, #31
 8023c22:	5cba      	ldrb	r2, [r7, r2]
 8023c24:	bf54      	ite	pl
 8023c26:	f002 020f 	andpl.w	r2, r2, #15
 8023c2a:	1112      	asrmi	r2, r2, #4
 8023c2c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c30:	b2d2      	uxtb	r2, r2
 8023c32:	2800      	cmp	r0, #0
 8023c34:	f000 808a 	beq.w	8023d4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023c38:	f103 0b01 	add.w	fp, r3, #1
 8023c3c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023c40:	f01b 0f01 	tst.w	fp, #1
 8023c44:	5c79      	ldrb	r1, [r7, r1]
 8023c46:	bf0c      	ite	eq
 8023c48:	f001 010f 	andeq.w	r1, r1, #15
 8023c4c:	1109      	asrne	r1, r1, #4
 8023c4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c52:	b2c9      	uxtb	r1, r1
 8023c54:	9111      	str	r1, [sp, #68]	; 0x44
 8023c56:	f1bc 0f00 	cmp.w	ip, #0
 8023c5a:	d019      	beq.n	8023c90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c5c:	4453      	add	r3, sl
 8023c5e:	0859      	lsrs	r1, r3, #1
 8023c60:	f013 0f01 	tst.w	r3, #1
 8023c64:	f103 0301 	add.w	r3, r3, #1
 8023c68:	5c79      	ldrb	r1, [r7, r1]
 8023c6a:	bf0c      	ite	eq
 8023c6c:	f001 010f 	andeq.w	r1, r1, #15
 8023c70:	1109      	asrne	r1, r1, #4
 8023c72:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c76:	b2c9      	uxtb	r1, r1
 8023c78:	910d      	str	r1, [sp, #52]	; 0x34
 8023c7a:	0859      	lsrs	r1, r3, #1
 8023c7c:	07db      	lsls	r3, r3, #31
 8023c7e:	5c79      	ldrb	r1, [r7, r1]
 8023c80:	bf54      	ite	pl
 8023c82:	f001 010f 	andpl.w	r1, r1, #15
 8023c86:	1109      	asrmi	r1, r1, #4
 8023c88:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c8c:	b2c9      	uxtb	r1, r1
 8023c8e:	9112      	str	r1, [sp, #72]	; 0x48
 8023c90:	b280      	uxth	r0, r0
 8023c92:	fa1f fc8c 	uxth.w	ip, ip
 8023c96:	fb00 f30c 	mul.w	r3, r0, ip
 8023c9a:	0100      	lsls	r0, r0, #4
 8023c9c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023ca0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023ca4:	1ac0      	subs	r0, r0, r3
 8023ca6:	fa1f fc8c 	uxth.w	ip, ip
 8023caa:	b280      	uxth	r0, r0
 8023cac:	eba1 010c 	sub.w	r1, r1, ip
 8023cb0:	fa1f fb81 	uxth.w	fp, r1
 8023cb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023cb6:	4348      	muls	r0, r1
 8023cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023cba:	fb02 020b 	mla	r2, r2, fp, r0
 8023cbe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023cc4:	fb03 c302 	mla	r3, r3, r2, ip
 8023cc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ccc:	b3ab      	cbz	r3, 8023d3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023cce:	4a2d      	ldr	r2, [pc, #180]	; (8023d84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023cd0:	2bff      	cmp	r3, #255	; 0xff
 8023cd2:	6811      	ldr	r1, [r2, #0]
 8023cd4:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023cd8:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023cdc:	b2c9      	uxtb	r1, r1
 8023cde:	d045      	beq.n	8023d6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023ce0:	b298      	uxth	r0, r3
 8023ce2:	43db      	mvns	r3, r3
 8023ce4:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023ce8:	fb11 f100 	smulbb	r1, r1, r0
 8023cec:	b2db      	uxtb	r3, r3
 8023cee:	fb1c fc00 	smulbb	ip, ip, r0
 8023cf2:	fb02 1103 	mla	r1, r2, r3, r1
 8023cf6:	fb1b f000 	smulbb	r0, fp, r0
 8023cfa:	b289      	uxth	r1, r1
 8023cfc:	1c4a      	adds	r2, r1, #1
 8023cfe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d02:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023d06:	fb02 cc03 	mla	ip, r2, r3, ip
 8023d0a:	1209      	asrs	r1, r1, #8
 8023d0c:	fa1f fc8c 	uxth.w	ip, ip
 8023d10:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023d14:	f10c 0201 	add.w	r2, ip, #1
 8023d18:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023d1c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023d20:	fb02 0303 	mla	r3, r2, r3, r0
 8023d24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023d28:	b29b      	uxth	r3, r3
 8023d2a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023d2e:	1c5a      	adds	r2, r3, #1
 8023d30:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d34:	121b      	asrs	r3, r3, #8
 8023d36:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023d3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d3c:	f10e 0e03 	add.w	lr, lr, #3
 8023d40:	f109 39ff 	add.w	r9, r9, #4294967295
 8023d44:	441d      	add	r5, r3
 8023d46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d48:	441e      	add	r6, r3
 8023d4a:	e607      	b.n	802395c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023d4c:	f1bc 0f00 	cmp.w	ip, #0
 8023d50:	d09e      	beq.n	8023c90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d52:	4453      	add	r3, sl
 8023d54:	0859      	lsrs	r1, r3, #1
 8023d56:	07db      	lsls	r3, r3, #31
 8023d58:	5c79      	ldrb	r1, [r7, r1]
 8023d5a:	bf54      	ite	pl
 8023d5c:	f001 010f 	andpl.w	r1, r1, #15
 8023d60:	1109      	asrmi	r1, r1, #4
 8023d62:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023d66:	b2c9      	uxtb	r1, r1
 8023d68:	910d      	str	r1, [sp, #52]	; 0x34
 8023d6a:	e791      	b.n	8023c90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d6c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023d70:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023d74:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023d78:	e7df      	b.n	8023d3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023d7a:	b015      	add	sp, #84	; 0x54
 8023d7c:	ecbd 8b08 	vpop	{d8-d11}
 8023d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d84:	2000bbbc 	.word	0x2000bbbc

08023d88 <CRC_Lock>:
 8023d88:	4a1d      	ldr	r2, [pc, #116]	; (8023e00 <CRC_Lock+0x78>)
 8023d8a:	b530      	push	{r4, r5, lr}
 8023d8c:	6813      	ldr	r3, [r2, #0]
 8023d8e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023d92:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023d96:	f023 0301 	bic.w	r3, r3, #1
 8023d9a:	6013      	str	r3, [r2, #0]
 8023d9c:	4b19      	ldr	r3, [pc, #100]	; (8023e04 <CRC_Lock+0x7c>)
 8023d9e:	681a      	ldr	r2, [r3, #0]
 8023da0:	4022      	ands	r2, r4
 8023da2:	42aa      	cmp	r2, r5
 8023da4:	d005      	beq.n	8023db2 <CRC_Lock+0x2a>
 8023da6:	681b      	ldr	r3, [r3, #0]
 8023da8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023dac:	4023      	ands	r3, r4
 8023dae:	4293      	cmp	r3, r2
 8023db0:	d11d      	bne.n	8023dee <CRC_Lock+0x66>
 8023db2:	4b15      	ldr	r3, [pc, #84]	; (8023e08 <CRC_Lock+0x80>)
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	b9d3      	cbnz	r3, 8023dee <CRC_Lock+0x66>
 8023db8:	4a14      	ldr	r2, [pc, #80]	; (8023e0c <CRC_Lock+0x84>)
 8023dba:	6813      	ldr	r3, [r2, #0]
 8023dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023dc0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023dc4:	d006      	beq.n	8023dd4 <CRC_Lock+0x4c>
 8023dc6:	6813      	ldr	r3, [r2, #0]
 8023dc8:	f240 4283 	movw	r2, #1155	; 0x483
 8023dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023dd0:	4293      	cmp	r3, r2
 8023dd2:	d10c      	bne.n	8023dee <CRC_Lock+0x66>
 8023dd4:	4b0e      	ldr	r3, [pc, #56]	; (8023e10 <CRC_Lock+0x88>)
 8023dd6:	2201      	movs	r2, #1
 8023dd8:	601a      	str	r2, [r3, #0]
 8023dda:	681a      	ldr	r2, [r3, #0]
 8023ddc:	2a00      	cmp	r2, #0
 8023dde:	d1fc      	bne.n	8023dda <CRC_Lock+0x52>
 8023de0:	4b0c      	ldr	r3, [pc, #48]	; (8023e14 <CRC_Lock+0x8c>)
 8023de2:	6018      	str	r0, [r3, #0]
 8023de4:	6818      	ldr	r0, [r3, #0]
 8023de6:	1a43      	subs	r3, r0, r1
 8023de8:	4258      	negs	r0, r3
 8023dea:	4158      	adcs	r0, r3
 8023dec:	bd30      	pop	{r4, r5, pc}
 8023dee:	4b0a      	ldr	r3, [pc, #40]	; (8023e18 <CRC_Lock+0x90>)
 8023df0:	2201      	movs	r2, #1
 8023df2:	601a      	str	r2, [r3, #0]
 8023df4:	681a      	ldr	r2, [r3, #0]
 8023df6:	2a00      	cmp	r2, #0
 8023df8:	d1fc      	bne.n	8023df4 <CRC_Lock+0x6c>
 8023dfa:	4b08      	ldr	r3, [pc, #32]	; (8023e1c <CRC_Lock+0x94>)
 8023dfc:	e7f1      	b.n	8023de2 <CRC_Lock+0x5a>
 8023dfe:	bf00      	nop
 8023e00:	e0002000 	.word	0xe0002000
 8023e04:	e000ed00 	.word	0xe000ed00
 8023e08:	e0042000 	.word	0xe0042000
 8023e0c:	5c001000 	.word	0x5c001000
 8023e10:	58024c08 	.word	0x58024c08
 8023e14:	58024c00 	.word	0x58024c00
 8023e18:	40023008 	.word	0x40023008
 8023e1c:	40023000 	.word	0x40023000

08023e20 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023e20:	6101      	str	r1, [r0, #16]
 8023e22:	4770      	bx	lr

08023e24 <_ZN8touchgfx8Gestures4tickEv>:
 8023e24:	7b83      	ldrb	r3, [r0, #14]
 8023e26:	b14b      	cbz	r3, 8023e3c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023e28:	8903      	ldrh	r3, [r0, #8]
 8023e2a:	3301      	adds	r3, #1
 8023e2c:	b29b      	uxth	r3, r3
 8023e2e:	2b07      	cmp	r3, #7
 8023e30:	8103      	strh	r3, [r0, #8]
 8023e32:	bf81      	itttt	hi
 8023e34:	2300      	movhi	r3, #0
 8023e36:	8143      	strhhi	r3, [r0, #10]
 8023e38:	8183      	strhhi	r3, [r0, #12]
 8023e3a:	7383      	strbhi	r3, [r0, #14]
 8023e3c:	4770      	bx	lr
	...

08023e40 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023e40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023e44:	4604      	mov	r4, r0
 8023e46:	4698      	mov	r8, r3
 8023e48:	8880      	ldrh	r0, [r0, #4]
 8023e4a:	4617      	mov	r7, r2
 8023e4c:	4b1d      	ldr	r3, [pc, #116]	; (8023ec4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023e4e:	460e      	mov	r6, r1
 8023e50:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023e54:	eba8 0000 	sub.w	r0, r8, r0
 8023e58:	9300      	str	r3, [sp, #0]
 8023e5a:	2300      	movs	r3, #0
 8023e5c:	b280      	uxth	r0, r0
 8023e5e:	8aa2      	ldrh	r2, [r4, #20]
 8023e60:	f88d 3004 	strb.w	r3, [sp, #4]
 8023e64:	b203      	sxth	r3, r0
 8023e66:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023e6a:	88e1      	ldrh	r1, [r4, #6]
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023e72:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023e76:	bfb8      	it	lt
 8023e78:	4240      	neglt	r0, r0
 8023e7a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023e7e:	bfb8      	it	lt
 8023e80:	b203      	sxthlt	r3, r0
 8023e82:	4293      	cmp	r3, r2
 8023e84:	dc08      	bgt.n	8023e98 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023e86:	1a69      	subs	r1, r5, r1
 8023e88:	b289      	uxth	r1, r1
 8023e8a:	b20b      	sxth	r3, r1
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	bfbc      	itt	lt
 8023e90:	4249      	neglt	r1, r1
 8023e92:	b20b      	sxthlt	r3, r1
 8023e94:	429a      	cmp	r2, r3
 8023e96:	da13      	bge.n	8023ec0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023e98:	6920      	ldr	r0, [r4, #16]
 8023e9a:	4669      	mov	r1, sp
 8023e9c:	eba8 0606 	sub.w	r6, r8, r6
 8023ea0:	1bef      	subs	r7, r5, r7
 8023ea2:	6803      	ldr	r3, [r0, #0]
 8023ea4:	685b      	ldr	r3, [r3, #4]
 8023ea6:	4798      	blx	r3
 8023ea8:	2300      	movs	r3, #0
 8023eaa:	2001      	movs	r0, #1
 8023eac:	8166      	strh	r6, [r4, #10]
 8023eae:	8123      	strh	r3, [r4, #8]
 8023eb0:	81a7      	strh	r7, [r4, #12]
 8023eb2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023eb6:	80e5      	strh	r5, [r4, #6]
 8023eb8:	73a0      	strb	r0, [r4, #14]
 8023eba:	b004      	add	sp, #16
 8023ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ec0:	2000      	movs	r0, #0
 8023ec2:	e7fa      	b.n	8023eba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023ec4:	08029348 	.word	0x08029348

08023ec8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023eca:	461e      	mov	r6, r3
 8023ecc:	1e4b      	subs	r3, r1, #1
 8023ece:	b085      	sub	sp, #20
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	2b01      	cmp	r3, #1
 8023ed4:	460d      	mov	r5, r1
 8023ed6:	4617      	mov	r7, r2
 8023ed8:	d84b      	bhi.n	8023f72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023eda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023ede:	1cd3      	adds	r3, r2, #3
 8023ee0:	b29b      	uxth	r3, r3
 8023ee2:	2b06      	cmp	r3, #6
 8023ee4:	d916      	bls.n	8023f14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023ee6:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023f80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023eea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023eee:	f8cd c004 	str.w	ip, [sp, #4]
 8023ef2:	f04f 0c00 	mov.w	ip, #0
 8023ef6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023efa:	6900      	ldr	r0, [r0, #16]
 8023efc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f00:	a901      	add	r1, sp, #4
 8023f02:	f88d c008 	strb.w	ip, [sp, #8]
 8023f06:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f0e:	6803      	ldr	r3, [r0, #0]
 8023f10:	689b      	ldr	r3, [r3, #8]
 8023f12:	4798      	blx	r3
 8023f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f18:	1cd3      	adds	r3, r2, #3
 8023f1a:	b29b      	uxth	r3, r3
 8023f1c:	2b06      	cmp	r3, #6
 8023f1e:	d916      	bls.n	8023f4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023f20:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023f80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023f24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f28:	f8cd c004 	str.w	ip, [sp, #4]
 8023f2c:	f04f 0c01 	mov.w	ip, #1
 8023f30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f34:	6920      	ldr	r0, [r4, #16]
 8023f36:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f3a:	a901      	add	r1, sp, #4
 8023f3c:	f88d c008 	strb.w	ip, [sp, #8]
 8023f40:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f48:	6803      	ldr	r3, [r0, #0]
 8023f4a:	689b      	ldr	r3, [r3, #8]
 8023f4c:	4798      	blx	r3
 8023f4e:	4b0b      	ldr	r3, [pc, #44]	; (8023f7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023f50:	a901      	add	r1, sp, #4
 8023f52:	6920      	ldr	r0, [r4, #16]
 8023f54:	9301      	str	r3, [sp, #4]
 8023f56:	2300      	movs	r3, #0
 8023f58:	f88d 5008 	strb.w	r5, [sp, #8]
 8023f5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023f60:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023f64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f68:	6803      	ldr	r3, [r0, #0]
 8023f6a:	681b      	ldr	r3, [r3, #0]
 8023f6c:	4798      	blx	r3
 8023f6e:	b005      	add	sp, #20
 8023f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f72:	2900      	cmp	r1, #0
 8023f74:	d1eb      	bne.n	8023f4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023f76:	80a2      	strh	r2, [r4, #4]
 8023f78:	80c6      	strh	r6, [r0, #6]
 8023f7a:	e7e8      	b.n	8023f4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023f7c:	08029334 	.word	0x08029334
 8023f80:	0802935c 	.word	0x0802935c

08023f84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023f84:	10c9      	asrs	r1, r1, #3
 8023f86:	2900      	cmp	r1, #0
 8023f88:	bfb8      	it	lt
 8023f8a:	4249      	neglt	r1, r1
 8023f8c:	2801      	cmp	r0, #1
 8023f8e:	d108      	bne.n	8023fa2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023f90:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023f94:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023f98:	4601      	mov	r1, r0
 8023f9a:	dd02      	ble.n	8023fa2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023f9c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023fa0:	4770      	bx	lr
 8023fa2:	29ff      	cmp	r1, #255	; 0xff
 8023fa4:	bfa8      	it	ge
 8023fa6:	21ff      	movge	r1, #255	; 0xff
 8023fa8:	4608      	mov	r0, r1
 8023faa:	4770      	bx	lr

08023fac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fb0:	688c      	ldr	r4, [r1, #8]
 8023fb2:	b087      	sub	sp, #28
 8023fb4:	4607      	mov	r7, r0
 8023fb6:	2c00      	cmp	r4, #0
 8023fb8:	db2b      	blt.n	8024012 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023fba:	6803      	ldr	r3, [r0, #0]
 8023fbc:	68da      	ldr	r2, [r3, #12]
 8023fbe:	42a2      	cmp	r2, r4
 8023fc0:	dd27      	ble.n	8024012 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023fc2:	681a      	ldr	r2, [r3, #0]
 8023fc4:	691e      	ldr	r6, [r3, #16]
 8023fc6:	68cd      	ldr	r5, [r1, #12]
 8023fc8:	fb06 2604 	mla	r6, r6, r4, r2
 8023fcc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023fd0:	698a      	ldr	r2, [r1, #24]
 8023fd2:	f893 a004 	ldrb.w	sl, [r3, #4]
 8023fd6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023fda:	9205      	str	r2, [sp, #20]
 8023fdc:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023fe0:	9b05      	ldr	r3, [sp, #20]
 8023fe2:	6839      	ldr	r1, [r7, #0]
 8023fe4:	eb03 0c02 	add.w	ip, r3, r2
 8023fe8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023fec:	6889      	ldr	r1, [r1, #8]
 8023fee:	1898      	adds	r0, r3, r2
 8023ff0:	4288      	cmp	r0, r1
 8023ff2:	db02      	blt.n	8023ffa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023ff4:	1a8b      	subs	r3, r1, r2
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	dd09      	ble.n	802400e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023ffa:	6878      	ldr	r0, [r7, #4]
 8023ffc:	6801      	ldr	r1, [r0, #0]
 8023ffe:	9400      	str	r4, [sp, #0]
 8024000:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024004:	4653      	mov	r3, sl
 8024006:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802400a:	4631      	mov	r1, r6
 802400c:	47d8      	blx	fp
 802400e:	3d01      	subs	r5, #1
 8024010:	d1e4      	bne.n	8023fdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024012:	b007      	add	sp, #28
 8024014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024018 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024018:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802401c:	b90b      	cbnz	r3, 8024022 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802401e:	f001 b974 	b.w	802530a <_ZN8touchgfx7Outline6lineToEii>
 8024022:	4770      	bx	lr

08024024 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024028:	4604      	mov	r4, r0
 802402a:	2600      	movs	r6, #0
 802402c:	4b8e      	ldr	r3, [pc, #568]	; (8024268 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802402e:	f100 0518 	add.w	r5, r0, #24
 8024032:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8024036:	b086      	sub	sp, #24
 8024038:	4690      	mov	r8, r2
 802403a:	e9c0 3100 	strd	r3, r1, [r0]
 802403e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8024042:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024046:	4628      	mov	r0, r5
 8024048:	f001 fb75 	bl	8025736 <_ZN8touchgfx15RenderingBufferC1Ev>
 802404c:	4638      	mov	r0, r7
 802404e:	f000 fb45 	bl	80246dc <_ZN8touchgfx7OutlineC1Ev>
 8024052:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8024056:	f001 fb23 	bl	80256a0 <_ZN8touchgfx8ScanlineC1Ev>
 802405a:	2301      	movs	r3, #1
 802405c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8024060:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8024064:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024068:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 802406c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8024070:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8024074:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8024078:	f7f3 fcb0 	bl	80179dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802407c:	b928      	cbnz	r0, 802408a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802407e:	4b7b      	ldr	r3, [pc, #492]	; (802426c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024080:	2118      	movs	r1, #24
 8024082:	4a7b      	ldr	r2, [pc, #492]	; (8024270 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024084:	487b      	ldr	r0, [pc, #492]	; (8024274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024086:	f001 fb99 	bl	80257bc <__assert_func>
 802408a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802408e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024092:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024096:	4410      	add	r0, r2
 8024098:	9602      	str	r6, [sp, #8]
 802409a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802409e:	b280      	uxth	r0, r0
 80240a0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80240a4:	fa0f fa80 	sxth.w	sl, r0
 80240a8:	f1ba 0f00 	cmp.w	sl, #0
 80240ac:	dd70      	ble.n	8024190 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240ae:	4591      	cmp	r9, r2
 80240b0:	dd6e      	ble.n	8024190 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240b2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80240b6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80240ba:	440b      	add	r3, r1
 80240bc:	b29b      	uxth	r3, r3
 80240be:	b21e      	sxth	r6, r3
 80240c0:	2e00      	cmp	r6, #0
 80240c2:	dd65      	ble.n	8024190 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240c4:	458e      	cmp	lr, r1
 80240c6:	dd63      	ble.n	8024190 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240c8:	45d1      	cmp	r9, sl
 80240ca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80240ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80240d2:	bfb8      	it	lt
 80240d4:	fa1f f089 	uxthlt.w	r0, r9
 80240d8:	45b6      	cmp	lr, r6
 80240da:	f8ad 2008 	strh.w	r2, [sp, #8]
 80240de:	bfb8      	it	lt
 80240e0:	fa1f f38e 	uxthlt.w	r3, lr
 80240e4:	1a80      	subs	r0, r0, r2
 80240e6:	f8ad 100a 	strh.w	r1, [sp, #10]
 80240ea:	1a5b      	subs	r3, r3, r1
 80240ec:	f8ad 000c 	strh.w	r0, [sp, #12]
 80240f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80240f4:	f10d 0808 	add.w	r8, sp, #8
 80240f8:	ae04      	add	r6, sp, #16
 80240fa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80240fe:	e886 0003 	stmia.w	r6, {r0, r1}
 8024102:	f8dc 3000 	ldr.w	r3, [ip]
 8024106:	4660      	mov	r0, ip
 8024108:	4631      	mov	r1, r6
 802410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802410c:	4798      	blx	r3
 802410e:	6861      	ldr	r1, [r4, #4]
 8024110:	4640      	mov	r0, r8
 8024112:	3104      	adds	r1, #4
 8024114:	f7f4 ff3a 	bl	8018f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024118:	4630      	mov	r0, r6
 802411a:	f7f4 ff4f 	bl	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802411e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024122:	f7f3 fbeb 	bl	80178fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024126:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802412a:	4638      	mov	r0, r7
 802412c:	f000 fab2 	bl	8024694 <_ZN8touchgfx7Outline5resetEv>
 8024130:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024134:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024138:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 802413c:	015b      	lsls	r3, r3, #5
 802413e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8024142:	0152      	lsls	r2, r2, #5
 8024144:	60e3      	str	r3, [r4, #12]
 8024146:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802414a:	60a2      	str	r2, [r4, #8]
 802414c:	015b      	lsls	r3, r3, #5
 802414e:	6123      	str	r3, [r4, #16]
 8024150:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024154:	015b      	lsls	r3, r3, #5
 8024156:	6163      	str	r3, [r4, #20]
 8024158:	4b47      	ldr	r3, [pc, #284]	; (8024278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802415a:	6818      	ldr	r0, [r3, #0]
 802415c:	6803      	ldr	r3, [r0, #0]
 802415e:	6a1b      	ldr	r3, [r3, #32]
 8024160:	4798      	blx	r3
 8024162:	4606      	mov	r6, r0
 8024164:	f7eb fc68 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8024168:	6803      	ldr	r3, [r0, #0]
 802416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802416c:	4798      	blx	r3
 802416e:	4607      	mov	r7, r0
 8024170:	f7eb fc62 	bl	800fa38 <_ZN8touchgfx3HAL3lcdEv>
 8024174:	6803      	ldr	r3, [r0, #0]
 8024176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024178:	4798      	blx	r3
 802417a:	280c      	cmp	r0, #12
 802417c:	d854      	bhi.n	8024228 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802417e:	e8df f000 	tbb	[pc, r0]
 8024182:	554b      	.short	0x554b
 8024184:	2b6e0a66 	.word	0x2b6e0a66
 8024188:	5f5f5f3b 	.word	0x5f5f5f3b
 802418c:	5f5f      	.short	0x5f5f
 802418e:	6e          	.byte	0x6e
 802418f:	00          	.byte	0x00
 8024190:	2300      	movs	r3, #0
 8024192:	9303      	str	r3, [sp, #12]
 8024194:	e7ae      	b.n	80240f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8024196:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802419a:	2108      	movs	r1, #8
 802419c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80241a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80241a4:	fb07 1303 	mla	r3, r7, r3, r1
 80241a8:	441e      	add	r6, r3
 80241aa:	4253      	negs	r3, r2
 80241ac:	f002 0207 	and.w	r2, r2, #7
 80241b0:	f003 0307 	and.w	r3, r3, #7
 80241b4:	bf58      	it	pl
 80241b6:	425a      	negpl	r2, r3
 80241b8:	b2d2      	uxtb	r2, r2
 80241ba:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80241be:	4628      	mov	r0, r5
 80241c0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80241c4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80241c6:	e9cd 1700 	strd	r1, r7, [sp]
 80241ca:	4631      	mov	r1, r6
 80241cc:	f001 fabb 	bl	8025746 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80241d0:	4620      	mov	r0, r4
 80241d2:	b006      	add	sp, #24
 80241d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80241dc:	2104      	movs	r1, #4
 80241de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80241e2:	fb92 f1f1 	sdiv	r1, r2, r1
 80241e6:	fb07 1303 	mla	r3, r7, r3, r1
 80241ea:	441e      	add	r6, r3
 80241ec:	4253      	negs	r3, r2
 80241ee:	f002 0203 	and.w	r2, r2, #3
 80241f2:	f003 0303 	and.w	r3, r3, #3
 80241f6:	e7dd      	b.n	80241b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80241f8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80241fc:	2102      	movs	r1, #2
 80241fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024202:	2a00      	cmp	r2, #0
 8024204:	fb92 f1f1 	sdiv	r1, r2, r1
 8024208:	f002 0201 	and.w	r2, r2, #1
 802420c:	fb07 1303 	mla	r3, r7, r3, r1
 8024210:	bfb8      	it	lt
 8024212:	4252      	neglt	r2, r2
 8024214:	441e      	add	r6, r3
 8024216:	e7cf      	b.n	80241b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024218:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802421c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024220:	437b      	muls	r3, r7
 8024222:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024226:	441e      	add	r6, r3
 8024228:	2200      	movs	r2, #0
 802422a:	e7c6      	b.n	80241ba <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802422c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024230:	2103      	movs	r1, #3
 8024232:	fb07 f203 	mul.w	r2, r7, r3
 8024236:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802423a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802423e:	e7f2      	b.n	8024226 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024240:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024244:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024248:	fb07 2303 	mla	r3, r7, r3, r2
 802424c:	e7eb      	b.n	8024226 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802424e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024252:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024256:	437b      	muls	r3, r7
 8024258:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802425c:	e7e3      	b.n	8024226 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802425e:	4b07      	ldr	r3, [pc, #28]	; (802427c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024260:	2156      	movs	r1, #86	; 0x56
 8024262:	4a03      	ldr	r2, [pc, #12]	; (8024270 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024264:	e70e      	b.n	8024084 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024266:	bf00      	nop
 8024268:	0802b74c 	.word	0x0802b74c
 802426c:	0802b696 	.word	0x0802b696
 8024270:	0802b754 	.word	0x0802b754
 8024274:	0802b6f2 	.word	0x0802b6f2
 8024278:	2000bb94 	.word	0x2000bb94
 802427c:	0802b726 	.word	0x0802b726

08024280 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024280:	6812      	ldr	r2, [r2, #0]
 8024282:	2a00      	cmp	r2, #0
 8024284:	db0b      	blt.n	802429e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024286:	9800      	ldr	r0, [sp, #0]
 8024288:	6800      	ldr	r0, [r0, #0]
 802428a:	4290      	cmp	r0, r2
 802428c:	bfd4      	ite	le
 802428e:	2002      	movle	r0, #2
 8024290:	2000      	movgt	r0, #0
 8024292:	680a      	ldr	r2, [r1, #0]
 8024294:	2a00      	cmp	r2, #0
 8024296:	da04      	bge.n	80242a2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024298:	f040 0004 	orr.w	r0, r0, #4
 802429c:	4770      	bx	lr
 802429e:	2001      	movs	r0, #1
 80242a0:	e7f7      	b.n	8024292 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80242a2:	681b      	ldr	r3, [r3, #0]
 80242a4:	4293      	cmp	r3, r2
 80242a6:	bfd8      	it	le
 80242a8:	f040 0008 	orrle.w	r0, r0, #8
 80242ac:	4770      	bx	lr
	...

080242b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80242b0:	4b07      	ldr	r3, [pc, #28]	; (80242d0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80242b2:	b510      	push	{r4, lr}
 80242b4:	781b      	ldrb	r3, [r3, #0]
 80242b6:	2b01      	cmp	r3, #1
 80242b8:	d108      	bne.n	80242cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80242ba:	6843      	ldr	r3, [r0, #4]
 80242bc:	6814      	ldr	r4, [r2, #0]
 80242be:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80242c2:	680b      	ldr	r3, [r1, #0]
 80242c4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80242c8:	6013      	str	r3, [r2, #0]
 80242ca:	600c      	str	r4, [r1, #0]
 80242cc:	bd10      	pop	{r4, pc}
 80242ce:	bf00      	nop
 80242d0:	2000bb8c 	.word	0x2000bb8c

080242d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80242d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242d6:	b085      	sub	sp, #20
 80242d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80242dc:	4604      	mov	r4, r0
 80242de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80242e2:	b33b      	cbz	r3, 8024334 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80242e4:	aa02      	add	r2, sp, #8
 80242e6:	a903      	add	r1, sp, #12
 80242e8:	f7ff ffe2 	bl	80242b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80242ec:	68a3      	ldr	r3, [r4, #8]
 80242ee:	9e03      	ldr	r6, [sp, #12]
 80242f0:	aa02      	add	r2, sp, #8
 80242f2:	9f02      	ldr	r7, [sp, #8]
 80242f4:	a903      	add	r1, sp, #12
 80242f6:	1af6      	subs	r6, r6, r3
 80242f8:	68e3      	ldr	r3, [r4, #12]
 80242fa:	4620      	mov	r0, r4
 80242fc:	1aff      	subs	r7, r7, r3
 80242fe:	f104 0314 	add.w	r3, r4, #20
 8024302:	9603      	str	r6, [sp, #12]
 8024304:	9300      	str	r3, [sp, #0]
 8024306:	f104 0310 	add.w	r3, r4, #16
 802430a:	9702      	str	r7, [sp, #8]
 802430c:	f7ff ffb8 	bl	8024280 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024310:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8024314:	4605      	mov	r5, r0
 8024316:	b97b      	cbnz	r3, 8024338 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024318:	463a      	mov	r2, r7
 802431a:	4631      	mov	r1, r6
 802431c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024320:	f7ff fe7a 	bl	8024018 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024324:	9b03      	ldr	r3, [sp, #12]
 8024326:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802432a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802432e:	9b02      	ldr	r3, [sp, #8]
 8024330:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8024334:	b005      	add	sp, #20
 8024336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024338:	b110      	cbz	r0, 8024340 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802433a:	ea13 0200 	ands.w	r2, r3, r0
 802433e:	d11c      	bne.n	802437a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024340:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8024344:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8024348:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802434c:	b188      	cbz	r0, 8024372 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802434e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8024352:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024356:	b913      	cbnz	r3, 802435e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024358:	4630      	mov	r0, r6
 802435a:	f001 f806 	bl	802536a <_ZN8touchgfx7Outline6moveToEii>
 802435e:	2300      	movs	r3, #0
 8024360:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024364:	2301      	movs	r3, #1
 8024366:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802436a:	4630      	mov	r0, r6
 802436c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024370:	e7d6      	b.n	8024320 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024372:	4630      	mov	r0, r6
 8024374:	f7ff fe50 	bl	8024018 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024378:	e7f7      	b.n	802436a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802437a:	4615      	mov	r5, r2
 802437c:	e7d2      	b.n	8024324 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802437e <_ZN8touchgfx6Canvas5closeEv>:
 802437e:	b538      	push	{r3, r4, r5, lr}
 8024380:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8024384:	4604      	mov	r4, r0
 8024386:	b993      	cbnz	r3, 80243ae <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024388:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 802438c:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8024390:	4213      	tst	r3, r2
 8024392:	d10c      	bne.n	80243ae <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024394:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8024398:	b123      	cbz	r3, 80243a4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802439a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802439e:	4628      	mov	r0, r5
 80243a0:	f7ff fe3a 	bl	8024018 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243a4:	4628      	mov	r0, r5
 80243a6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80243aa:	f7ff fe35 	bl	8024018 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243ae:	2300      	movs	r3, #0
 80243b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80243b4:	bd38      	pop	{r3, r4, r5, pc}

080243b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80243b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243b8:	b085      	sub	sp, #20
 80243ba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80243be:	4604      	mov	r4, r0
 80243c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80243c4:	b353      	cbz	r3, 802441c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80243c6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80243ca:	b90b      	cbnz	r3, 80243d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80243cc:	f7ff ffd7 	bl	802437e <_ZN8touchgfx6Canvas5closeEv>
 80243d0:	aa02      	add	r2, sp, #8
 80243d2:	a903      	add	r1, sp, #12
 80243d4:	4620      	mov	r0, r4
 80243d6:	f7ff ff6b 	bl	80242b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80243da:	68a3      	ldr	r3, [r4, #8]
 80243dc:	9d03      	ldr	r5, [sp, #12]
 80243de:	aa02      	add	r2, sp, #8
 80243e0:	9e02      	ldr	r6, [sp, #8]
 80243e2:	a903      	add	r1, sp, #12
 80243e4:	1aed      	subs	r5, r5, r3
 80243e6:	68e3      	ldr	r3, [r4, #12]
 80243e8:	4620      	mov	r0, r4
 80243ea:	1af6      	subs	r6, r6, r3
 80243ec:	f104 0314 	add.w	r3, r4, #20
 80243f0:	9503      	str	r5, [sp, #12]
 80243f2:	9300      	str	r3, [sp, #0]
 80243f4:	f104 0310 	add.w	r3, r4, #16
 80243f8:	9602      	str	r6, [sp, #8]
 80243fa:	f7ff ff41 	bl	8024280 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80243fe:	4607      	mov	r7, r0
 8024400:	b170      	cbz	r0, 8024420 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024402:	2301      	movs	r3, #1
 8024404:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024408:	9a03      	ldr	r2, [sp, #12]
 802440a:	9b02      	ldr	r3, [sp, #8]
 802440c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8024410:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8024414:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8024418:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802441c:	b005      	add	sp, #20
 802441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024420:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024424:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8024428:	b92b      	cbnz	r3, 8024436 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802442a:	4632      	mov	r2, r6
 802442c:	4629      	mov	r1, r5
 802442e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024432:	f000 ff9a 	bl	802536a <_ZN8touchgfx7Outline6moveToEii>
 8024436:	2300      	movs	r3, #0
 8024438:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802443c:	2301      	movs	r3, #1
 802443e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8024442:	e7e1      	b.n	8024408 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024444 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024448:	4604      	mov	r4, r0
 802444a:	b087      	sub	sp, #28
 802444c:	9105      	str	r1, [sp, #20]
 802444e:	f001 f8d0 	bl	80255f2 <_ZN8touchgfx7Outline8getCellsEv>
 8024452:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024456:	4605      	mov	r5, r0
 8024458:	f1b9 0f00 	cmp.w	r9, #0
 802445c:	d103      	bne.n	8024466 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802445e:	2001      	movs	r0, #1
 8024460:	b007      	add	sp, #28
 8024462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024466:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802446a:	2e00      	cmp	r6, #0
 802446c:	d139      	bne.n	80244e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802446e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024472:	f105 0708 	add.w	r7, r5, #8
 8024476:	4640      	mov	r0, r8
 8024478:	f001 f8fd 	bl	8025676 <_ZN8touchgfx8Scanline5resetEv>
 802447c:	f109 33ff 	add.w	r3, r9, #4294967295
 8024480:	9303      	str	r3, [sp, #12]
 8024482:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024486:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802448a:	46da      	mov	sl, fp
 802448c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024490:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024494:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024498:	9b03      	ldr	r3, [sp, #12]
 802449a:	4416      	add	r6, r2
 802449c:	9504      	str	r5, [sp, #16]
 802449e:	463d      	mov	r5, r7
 80244a0:	3b01      	subs	r3, #1
 80244a2:	9303      	str	r3, [sp, #12]
 80244a4:	3301      	adds	r3, #1
 80244a6:	d01e      	beq.n	80244e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80244a8:	3708      	adds	r7, #8
 80244aa:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80244ae:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80244b2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80244b6:	4290      	cmp	r0, r2
 80244b8:	d11e      	bne.n	80244f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80244ba:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80244be:	4411      	add	r1, r2
 80244c0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80244c4:	e7e8      	b.n	8024498 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80244c6:	1c91      	adds	r1, r2, #2
 80244c8:	f04f 0301 	mov.w	r3, #1
 80244cc:	65e1      	str	r1, [r4, #92]	; 0x5c
 80244ce:	8053      	strh	r3, [r2, #2]
 80244d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80244d2:	1c91      	adds	r1, r2, #2
 80244d4:	65a1      	str	r1, [r4, #88]	; 0x58
 80244d6:	f8a2 b002 	strh.w	fp, [r2, #2]
 80244da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80244dc:	3201      	adds	r2, #1
 80244de:	6562      	str	r2, [r4, #84]	; 0x54
 80244e0:	e03a      	b.n	8024558 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80244e2:	2000      	movs	r0, #0
 80244e4:	e7bc      	b.n	8024460 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80244e6:	b951      	cbnz	r1, 80244fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80244e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d0b7      	beq.n	802445e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80244ee:	4641      	mov	r1, r8
 80244f0:	9805      	ldr	r0, [sp, #20]
 80244f2:	f7ff fd5b 	bl	8023fac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80244f6:	e7b2      	b.n	802445e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80244f8:	2900      	cmp	r1, #0
 80244fa:	d035      	beq.n	8024568 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80244fc:	9504      	str	r5, [sp, #16]
 80244fe:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024502:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024506:	f7ff fd3d 	bl	8023f84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802450a:	4605      	mov	r5, r0
 802450c:	b330      	cbz	r0, 802455c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802450e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024510:	b182      	cbz	r2, 8024534 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024512:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024514:	454a      	cmp	r2, r9
 8024516:	d00d      	beq.n	8024534 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024518:	4641      	mov	r1, r8
 802451a:	9805      	ldr	r0, [sp, #20]
 802451c:	f7ff fd46 	bl	8023fac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024520:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024524:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024526:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802452a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802452c:	2300      	movs	r3, #0
 802452e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024530:	6563      	str	r3, [r4, #84]	; 0x54
 8024532:	65a2      	str	r2, [r4, #88]	; 0x58
 8024534:	f1bb 0f00 	cmp.w	fp, #0
 8024538:	db10      	blt.n	802455c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802453a:	f7f3 fa5d 	bl	80179f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802453e:	4583      	cmp	fp, r0
 8024540:	d20c      	bcs.n	802455c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024542:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024544:	f802 500b 	strb.w	r5, [r2, fp]
 8024548:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802454a:	3201      	adds	r2, #1
 802454c:	455a      	cmp	r2, fp
 802454e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024550:	d1b9      	bne.n	80244c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024552:	8811      	ldrh	r1, [r2, #0]
 8024554:	3101      	adds	r1, #1
 8024556:	8011      	strh	r1, [r2, #0]
 8024558:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802455c:	9b03      	ldr	r3, [sp, #12]
 802455e:	3301      	adds	r3, #1
 8024560:	d0c2      	beq.n	80244e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024562:	f10b 0a01 	add.w	sl, fp, #1
 8024566:	9d04      	ldr	r5, [sp, #16]
 8024568:	f9b5 3000 	ldrsh.w	r3, [r5]
 802456c:	4553      	cmp	r3, sl
 802456e:	dd88      	ble.n	8024482 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024570:	01b1      	lsls	r1, r6, #6
 8024572:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024576:	f7ff fd05 	bl	8023f84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802457a:	4683      	mov	fp, r0
 802457c:	2800      	cmp	r0, #0
 802457e:	d080      	beq.n	8024482 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024580:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024582:	b183      	cbz	r3, 80245a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024584:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024586:	454b      	cmp	r3, r9
 8024588:	d00d      	beq.n	80245a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802458a:	4641      	mov	r1, r8
 802458c:	9805      	ldr	r0, [sp, #20]
 802458e:	f7ff fd0d 	bl	8023fac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024592:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024596:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802459a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802459c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802459e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80245a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80245a2:	2300      	movs	r3, #0
 80245a4:	6563      	str	r3, [r4, #84]	; 0x54
 80245a6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80245aa:	464a      	mov	r2, r9
 80245ac:	f8cd b000 	str.w	fp, [sp]
 80245b0:	4651      	mov	r1, sl
 80245b2:	eba3 030a 	sub.w	r3, r3, sl
 80245b6:	4640      	mov	r0, r8
 80245b8:	f001 f884 	bl	80256c4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80245bc:	e761      	b.n	8024482 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080245be <_ZN8touchgfx6Canvas6renderEv>:
 80245be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80245c0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80245c4:	4604      	mov	r4, r0
 80245c6:	b913      	cbnz	r3, 80245ce <_ZN8touchgfx6Canvas6renderEv+0x10>
 80245c8:	2001      	movs	r0, #1
 80245ca:	b003      	add	sp, #12
 80245cc:	bd30      	pop	{r4, r5, pc}
 80245ce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d131      	bne.n	802463a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80245d6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d0f4      	beq.n	80245c8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80245de:	6840      	ldr	r0, [r0, #4]
 80245e0:	6803      	ldr	r3, [r0, #0]
 80245e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80245e4:	4798      	blx	r3
 80245e6:	2800      	cmp	r0, #0
 80245e8:	d0ee      	beq.n	80245c8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80245ea:	4620      	mov	r0, r4
 80245ec:	f7ff fec7 	bl	802437e <_ZN8touchgfx6Canvas5closeEv>
 80245f0:	6860      	ldr	r0, [r4, #4]
 80245f2:	6803      	ldr	r3, [r0, #0]
 80245f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80245f6:	4798      	blx	r3
 80245f8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80245fc:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8024600:	f7f2 f993 	bl	801692a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8024604:	6860      	ldr	r0, [r4, #4]
 8024606:	6803      	ldr	r3, [r0, #0]
 8024608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802460a:	4798      	blx	r3
 802460c:	4605      	mov	r5, r0
 802460e:	6860      	ldr	r0, [r4, #4]
 8024610:	6803      	ldr	r3, [r0, #0]
 8024612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024614:	4798      	blx	r3
 8024616:	4601      	mov	r1, r0
 8024618:	4628      	mov	r0, r5
 802461a:	f7f2 f989 	bl	8016930 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802461e:	6860      	ldr	r0, [r4, #4]
 8024620:	6803      	ldr	r3, [r0, #0]
 8024622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024624:	4798      	blx	r3
 8024626:	f104 0318 	add.w	r3, r4, #24
 802462a:	4669      	mov	r1, sp
 802462c:	e9cd 3000 	strd	r3, r0, [sp]
 8024630:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024634:	f7ff ff06 	bl	8024444 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024638:	e7c7      	b.n	80245ca <_ZN8touchgfx6Canvas6renderEv+0xc>
 802463a:	2000      	movs	r0, #0
 802463c:	e7c5      	b.n	80245ca <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08024640 <_ZN8touchgfx6CanvasD1Ev>:
 8024640:	b538      	push	{r3, r4, r5, lr}
 8024642:	4605      	mov	r5, r0
 8024644:	4b08      	ldr	r3, [pc, #32]	; (8024668 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024646:	4604      	mov	r4, r0
 8024648:	f845 3b2c 	str.w	r3, [r5], #44
 802464c:	4b07      	ldr	r3, [pc, #28]	; (802466c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802464e:	6818      	ldr	r0, [r3, #0]
 8024650:	6803      	ldr	r3, [r0, #0]
 8024652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024654:	4798      	blx	r3
 8024656:	4628      	mov	r0, r5
 8024658:	f000 f814 	bl	8024684 <_ZN8touchgfx7OutlineD1Ev>
 802465c:	f104 0018 	add.w	r0, r4, #24
 8024660:	f001 f870 	bl	8025744 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024664:	4620      	mov	r0, r4
 8024666:	bd38      	pop	{r3, r4, r5, pc}
 8024668:	0802b74c 	.word	0x0802b74c
 802466c:	2000bb94 	.word	0x2000bb94

08024670 <_ZN8touchgfx6CanvasD0Ev>:
 8024670:	b510      	push	{r4, lr}
 8024672:	4604      	mov	r4, r0
 8024674:	f7ff ffe4 	bl	8024640 <_ZN8touchgfx6CanvasD1Ev>
 8024678:	21b8      	movs	r1, #184	; 0xb8
 802467a:	4620      	mov	r0, r4
 802467c:	f001 f873 	bl	8025766 <_ZdlPvj>
 8024680:	4620      	mov	r0, r4
 8024682:	bd10      	pop	{r4, pc}

08024684 <_ZN8touchgfx7OutlineD1Ev>:
 8024684:	4770      	bx	lr

08024686 <_ZN8touchgfx7OutlineD0Ev>:
 8024686:	b510      	push	{r4, lr}
 8024688:	4604      	mov	r4, r0
 802468a:	2148      	movs	r1, #72	; 0x48
 802468c:	f001 f86b 	bl	8025766 <_ZdlPvj>
 8024690:	4620      	mov	r0, r4
 8024692:	bd10      	pop	{r4, pc}

08024694 <_ZN8touchgfx7Outline5resetEv>:
 8024694:	b510      	push	{r4, lr}
 8024696:	4604      	mov	r4, r0
 8024698:	f7f3 f9c6 	bl	8017a28 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802469c:	60e0      	str	r0, [r4, #12]
 802469e:	f7f3 f9c9 	bl	8017a34 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80246a2:	68e3      	ldr	r3, [r4, #12]
 80246a4:	2200      	movs	r2, #0
 80246a6:	08c0      	lsrs	r0, r0, #3
 80246a8:	6123      	str	r3, [r4, #16]
 80246aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80246ae:	6060      	str	r0, [r4, #4]
 80246b0:	82a3      	strh	r3, [r4, #20]
 80246b2:	82e3      	strh	r3, [r4, #22]
 80246b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80246b6:	60a2      	str	r2, [r4, #8]
 80246b8:	f023 0301 	bic.w	r3, r3, #1
 80246bc:	8322      	strh	r2, [r4, #24]
 80246be:	8362      	strh	r2, [r4, #26]
 80246c0:	f043 0302 	orr.w	r3, r3, #2
 80246c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80246c8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80246ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80246ce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80246d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80246d6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80246da:	bd10      	pop	{r4, pc}

080246dc <_ZN8touchgfx7OutlineC1Ev>:
 80246dc:	4b0f      	ldr	r3, [pc, #60]	; (802471c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80246de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80246e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80246e6:	b510      	push	{r4, lr}
 80246e8:	6003      	str	r3, [r0, #0]
 80246ea:	2300      	movs	r3, #0
 80246ec:	4604      	mov	r4, r0
 80246ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80246f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80246f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80246fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80246fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024702:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024706:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802470a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802470e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024712:	f7ff ffbf 	bl	8024694 <_ZN8touchgfx7Outline5resetEv>
 8024716:	4620      	mov	r0, r4
 8024718:	bd10      	pop	{r4, pc}
 802471a:	bf00      	nop
 802471c:	0802b7ac 	.word	0x0802b7ac

08024720 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024724:	b093      	sub	sp, #76	; 0x4c
 8024726:	4604      	mov	r4, r0
 8024728:	1156      	asrs	r6, r2, #5
 802472a:	f002 0e1f 	and.w	lr, r2, #31
 802472e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024730:	9305      	str	r3, [sp, #20]
 8024732:	1143      	asrs	r3, r0, #5
 8024734:	1145      	asrs	r5, r0, #5
 8024736:	930c      	str	r3, [sp, #48]	; 0x30
 8024738:	f000 031f 	and.w	r3, r0, #31
 802473c:	9303      	str	r3, [sp, #12]
 802473e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024740:	42b3      	cmp	r3, r6
 8024742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024744:	bfc8      	it	gt
 8024746:	6326      	strgt	r6, [r4, #48]	; 0x30
 8024748:	42b3      	cmp	r3, r6
 802474a:	bfdc      	itt	le
 802474c:	1c73      	addle	r3, r6, #1
 802474e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024752:	42ab      	cmp	r3, r5
 8024754:	bfc8      	it	gt
 8024756:	462b      	movgt	r3, r5
 8024758:	ea4f 1560 	mov.w	r5, r0, asr #5
 802475c:	bfc8      	it	gt
 802475e:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024762:	42ab      	cmp	r3, r5
 8024764:	bfd8      	it	le
 8024766:	462b      	movle	r3, r5
 8024768:	ea4f 1561 	mov.w	r5, r1, asr #5
 802476c:	bfdc      	itt	le
 802476e:	3301      	addle	r3, #1
 8024770:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024772:	9b05      	ldr	r3, [sp, #20]
 8024774:	eba3 0a01 	sub.w	sl, r3, r1
 8024778:	1143      	asrs	r3, r0, #5
 802477a:	429e      	cmp	r6, r3
 802477c:	f040 8119 	bne.w	80249b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8024780:	9b05      	ldr	r3, [sp, #20]
 8024782:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024786:	9b03      	ldr	r3, [sp, #12]
 8024788:	459e      	cmp	lr, r3
 802478a:	d12c      	bne.n	80247e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 802478c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024790:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8024794:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024798:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802479c:	4291      	cmp	r1, r2
 802479e:	d037      	beq.n	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80247a0:	8b61      	ldrh	r1, [r4, #26]
 80247a2:	8b22      	ldrh	r2, [r4, #24]
 80247a4:	430a      	orrs	r2, r1
 80247a6:	d00b      	beq.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	db09      	blt.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80247ae:	429a      	cmp	r2, r3
 80247b0:	dd06      	ble.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247b2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80247b6:	429a      	cmp	r2, r3
 80247b8:	d308      	bcc.n	80247cc <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80247ba:	2301      	movs	r3, #1
 80247bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80247c0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80247c4:	82e6      	strh	r6, [r4, #22]
 80247c6:	2300      	movs	r3, #0
 80247c8:	8323      	strh	r3, [r4, #24]
 80247ca:	e0c6      	b.n	802495a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80247cc:	f104 0314 	add.w	r3, r4, #20
 80247d0:	6922      	ldr	r2, [r4, #16]
 80247d2:	cb03      	ldmia	r3!, {r0, r1}
 80247d4:	6010      	str	r0, [r2, #0]
 80247d6:	6051      	str	r1, [r2, #4]
 80247d8:	6923      	ldr	r3, [r4, #16]
 80247da:	3308      	adds	r3, #8
 80247dc:	6123      	str	r3, [r4, #16]
 80247de:	68a3      	ldr	r3, [r4, #8]
 80247e0:	3301      	adds	r3, #1
 80247e2:	60a3      	str	r3, [r4, #8]
 80247e4:	e7ec      	b.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247e6:	9b05      	ldr	r3, [sp, #20]
 80247e8:	45ac      	cmp	ip, r5
 80247ea:	f001 011f 	and.w	r1, r1, #31
 80247ee:	8b20      	ldrh	r0, [r4, #24]
 80247f0:	f003 031f 	and.w	r3, r3, #31
 80247f4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80247f8:	9304      	str	r3, [sp, #16]
 80247fa:	9b03      	ldr	r3, [sp, #12]
 80247fc:	eba3 020e 	sub.w	r2, r3, lr
 8024800:	d109      	bne.n	8024816 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8024802:	9b04      	ldr	r3, [sp, #16]
 8024804:	4410      	add	r0, r2
 8024806:	4419      	add	r1, r3
 8024808:	8320      	strh	r0, [r4, #24]
 802480a:	fb02 8201 	mla	r2, r2, r1, r8
 802480e:	8362      	strh	r2, [r4, #26]
 8024810:	b013      	add	sp, #76	; 0x4c
 8024812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024816:	f1ba 0f00 	cmp.w	sl, #0
 802481a:	f2c0 80a0 	blt.w	802495e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802481e:	f1c1 0320 	rsb	r3, r1, #32
 8024822:	f04f 0b20 	mov.w	fp, #32
 8024826:	435a      	muls	r2, r3
 8024828:	2301      	movs	r3, #1
 802482a:	9302      	str	r3, [sp, #8]
 802482c:	4459      	add	r1, fp
 802482e:	fb92 f7fa 	sdiv	r7, r2, sl
 8024832:	fb0a 2217 	mls	r2, sl, r7, r2
 8024836:	2a00      	cmp	r2, #0
 8024838:	bfbc      	itt	lt
 802483a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802483e:	4452      	addlt	r2, sl
 8024840:	fb07 8101 	mla	r1, r7, r1, r8
 8024844:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024848:	4438      	add	r0, r7
 802484a:	b20b      	sxth	r3, r1
 802484c:	9902      	ldr	r1, [sp, #8]
 802484e:	b200      	sxth	r0, r0
 8024850:	9301      	str	r3, [sp, #4]
 8024852:	8363      	strh	r3, [r4, #26]
 8024854:	186b      	adds	r3, r5, r1
 8024856:	0435      	lsls	r5, r6, #16
 8024858:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802485c:	8320      	strh	r0, [r4, #24]
 802485e:	eb03 0905 	add.w	r9, r3, r5
 8024862:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8024866:	9300      	str	r3, [sp, #0]
 8024868:	45c1      	cmp	r9, r8
 802486a:	9505      	str	r5, [sp, #20]
 802486c:	d014      	beq.n	8024898 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802486e:	9b01      	ldr	r3, [sp, #4]
 8024870:	4303      	orrs	r3, r0
 8024872:	d00b      	beq.n	802488c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024874:	2900      	cmp	r1, #0
 8024876:	db09      	blt.n	802488c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802487a:	428b      	cmp	r3, r1
 802487c:	dd06      	ble.n	802488c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802487e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024882:	4299      	cmp	r1, r3
 8024884:	d374      	bcc.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8024886:	2301      	movs	r3, #1
 8024888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802488c:	9b00      	ldr	r3, [sp, #0]
 802488e:	82e6      	strh	r6, [r4, #22]
 8024890:	82a3      	strh	r3, [r4, #20]
 8024892:	2300      	movs	r3, #0
 8024894:	8323      	strh	r3, [r4, #24]
 8024896:	8363      	strh	r3, [r4, #26]
 8024898:	9900      	ldr	r1, [sp, #0]
 802489a:	eb0e 0307 	add.w	r3, lr, r7
 802489e:	458c      	cmp	ip, r1
 80248a0:	d04e      	beq.n	8024940 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80248a2:	9903      	ldr	r1, [sp, #12]
 80248a4:	eba2 020a 	sub.w	r2, r2, sl
 80248a8:	1ac9      	subs	r1, r1, r3
 80248aa:	9201      	str	r2, [sp, #4]
 80248ac:	440f      	add	r7, r1
 80248ae:	017f      	lsls	r7, r7, #5
 80248b0:	fb97 fefa 	sdiv	lr, r7, sl
 80248b4:	fb0a 771e 	mls	r7, sl, lr, r7
 80248b8:	2f00      	cmp	r7, #0
 80248ba:	bfbc      	itt	lt
 80248bc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80248c0:	4457      	addlt	r7, sl
 80248c2:	f10e 0101 	add.w	r1, lr, #1
 80248c6:	9106      	str	r1, [sp, #24]
 80248c8:	9a01      	ldr	r2, [sp, #4]
 80248ca:	8b20      	ldrh	r0, [r4, #24]
 80248cc:	19d2      	adds	r2, r2, r7
 80248ce:	8b61      	ldrh	r1, [r4, #26]
 80248d0:	9d02      	ldr	r5, [sp, #8]
 80248d2:	9201      	str	r2, [sp, #4]
 80248d4:	bf5b      	ittet	pl
 80248d6:	eba2 020a 	subpl.w	r2, r2, sl
 80248da:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80248de:	46f0      	movmi	r8, lr
 80248e0:	9201      	strpl	r2, [sp, #4]
 80248e2:	9a00      	ldr	r2, [sp, #0]
 80248e4:	4440      	add	r0, r8
 80248e6:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80248ea:	4443      	add	r3, r8
 80248ec:	442a      	add	r2, r5
 80248ee:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80248f2:	9d05      	ldr	r5, [sp, #20]
 80248f4:	b200      	sxth	r0, r0
 80248f6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80248fa:	b209      	sxth	r1, r1
 80248fc:	4415      	add	r5, r2
 80248fe:	8320      	strh	r0, [r4, #24]
 8024900:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024904:	8361      	strh	r1, [r4, #26]
 8024906:	9200      	str	r2, [sp, #0]
 8024908:	454d      	cmp	r5, r9
 802490a:	d016      	beq.n	802493a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802490c:	4301      	orrs	r1, r0
 802490e:	d00d      	beq.n	802492c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024910:	f1b8 0f00 	cmp.w	r8, #0
 8024914:	db0a      	blt.n	802492c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024916:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024918:	4541      	cmp	r1, r8
 802491a:	dd07      	ble.n	802492c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802491c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024920:	4288      	cmp	r0, r1
 8024922:	d335      	bcc.n	8024990 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024924:	f04f 0101 	mov.w	r1, #1
 8024928:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802492c:	9900      	ldr	r1, [sp, #0]
 802492e:	82e6      	strh	r6, [r4, #22]
 8024930:	82a1      	strh	r1, [r4, #20]
 8024932:	f04f 0100 	mov.w	r1, #0
 8024936:	8321      	strh	r1, [r4, #24]
 8024938:	8361      	strh	r1, [r4, #26]
 802493a:	9a00      	ldr	r2, [sp, #0]
 802493c:	4594      	cmp	ip, r2
 802493e:	d1c3      	bne.n	80248c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024940:	9a03      	ldr	r2, [sp, #12]
 8024942:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8024946:	1ad3      	subs	r3, r2, r3
 8024948:	8b22      	ldrh	r2, [r4, #24]
 802494a:	441a      	add	r2, r3
 802494c:	8322      	strh	r2, [r4, #24]
 802494e:	9a04      	ldr	r2, [sp, #16]
 8024950:	3220      	adds	r2, #32
 8024952:	eba2 020b 	sub.w	r2, r2, fp
 8024956:	fb03 c302 	mla	r3, r3, r2, ip
 802495a:	8363      	strh	r3, [r4, #26]
 802495c:	e758      	b.n	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802495e:	f04f 33ff 	mov.w	r3, #4294967295
 8024962:	434a      	muls	r2, r1
 8024964:	f1ca 0a00 	rsb	sl, sl, #0
 8024968:	f04f 0b00 	mov.w	fp, #0
 802496c:	9302      	str	r3, [sp, #8]
 802496e:	e75d      	b.n	802482c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8024970:	f104 0314 	add.w	r3, r4, #20
 8024974:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024978:	cb03      	ldmia	r3!, {r0, r1}
 802497a:	f8c8 0000 	str.w	r0, [r8]
 802497e:	f8c8 1004 	str.w	r1, [r8, #4]
 8024982:	6923      	ldr	r3, [r4, #16]
 8024984:	3308      	adds	r3, #8
 8024986:	6123      	str	r3, [r4, #16]
 8024988:	68a3      	ldr	r3, [r4, #8]
 802498a:	3301      	adds	r3, #1
 802498c:	60a3      	str	r3, [r4, #8]
 802498e:	e77d      	b.n	802488c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024990:	f104 0814 	add.w	r8, r4, #20
 8024994:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024998:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802499c:	f8c9 0000 	str.w	r0, [r9]
 80249a0:	f8c9 1004 	str.w	r1, [r9, #4]
 80249a4:	6921      	ldr	r1, [r4, #16]
 80249a6:	3108      	adds	r1, #8
 80249a8:	6121      	str	r1, [r4, #16]
 80249aa:	68a1      	ldr	r1, [r4, #8]
 80249ac:	3101      	adds	r1, #1
 80249ae:	60a1      	str	r1, [r4, #8]
 80249b0:	e7bc      	b.n	802492c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80249b2:	1a83      	subs	r3, r0, r2
 80249b4:	9301      	str	r3, [sp, #4]
 80249b6:	f1ba 0f00 	cmp.w	sl, #0
 80249ba:	f040 8094 	bne.w	8024ae6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80249be:	9a01      	ldr	r2, [sp, #4]
 80249c0:	0049      	lsls	r1, r1, #1
 80249c2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80249c6:	2a00      	cmp	r2, #0
 80249c8:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80249cc:	8b62      	ldrh	r2, [r4, #26]
 80249ce:	bfaa      	itet	ge
 80249d0:	f04f 0a20 	movge.w	sl, #32
 80249d4:	f04f 38ff 	movlt.w	r8, #4294967295
 80249d8:	f04f 0801 	movge.w	r8, #1
 80249dc:	8b21      	ldrh	r1, [r4, #24]
 80249de:	ebaa 0e0e 	sub.w	lr, sl, lr
 80249e2:	4471      	add	r1, lr
 80249e4:	fb0e 2e03 	mla	lr, lr, r3, r2
 80249e8:	eb08 0206 	add.w	r2, r8, r6
 80249ec:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80249f0:	b209      	sxth	r1, r1
 80249f2:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80249f6:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80249fa:	8321      	strh	r1, [r4, #24]
 80249fc:	fa0f fe8e 	sxth.w	lr, lr
 8024a00:	42b7      	cmp	r7, r6
 8024a02:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024a06:	d013      	beq.n	8024a30 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024a08:	ea51 010e 	orrs.w	r1, r1, lr
 8024a0c:	d00b      	beq.n	8024a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a0e:	2800      	cmp	r0, #0
 8024a10:	db09      	blt.n	8024a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024a14:	4281      	cmp	r1, r0
 8024a16:	dd06      	ble.n	8024a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a18:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024a1c:	4288      	cmp	r0, r1
 8024a1e:	d339      	bcc.n	8024a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024a20:	2101      	movs	r1, #1
 8024a22:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024a26:	2100      	movs	r1, #0
 8024a28:	82a5      	strh	r5, [r4, #20]
 8024a2a:	82e2      	strh	r2, [r4, #22]
 8024a2c:	8321      	strh	r1, [r4, #24]
 8024a2e:	8361      	strh	r1, [r4, #26]
 8024a30:	f1aa 0610 	sub.w	r6, sl, #16
 8024a34:	f04f 0e00 	mov.w	lr, #0
 8024a38:	f04f 0b01 	mov.w	fp, #1
 8024a3c:	0076      	lsls	r6, r6, #1
 8024a3e:	fb06 f703 	mul.w	r7, r6, r3
 8024a42:	b236      	sxth	r6, r6
 8024a44:	b23f      	sxth	r7, r7
 8024a46:	ea46 0107 	orr.w	r1, r6, r7
 8024a4a:	9100      	str	r1, [sp, #0]
 8024a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024a4e:	428a      	cmp	r2, r1
 8024a50:	d03e      	beq.n	8024ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024a52:	4442      	add	r2, r8
 8024a54:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024a58:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024a5c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024a60:	8326      	strh	r6, [r4, #24]
 8024a62:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024a66:	8367      	strh	r7, [r4, #26]
 8024a68:	4584      	cmp	ip, r0
 8024a6a:	d0ef      	beq.n	8024a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024a6c:	9800      	ldr	r0, [sp, #0]
 8024a6e:	b150      	cbz	r0, 8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024a70:	2900      	cmp	r1, #0
 8024a72:	db08      	blt.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024a74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024a76:	4288      	cmp	r0, r1
 8024a78:	dd05      	ble.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024a7a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024a7e:	4288      	cmp	r0, r1
 8024a80:	d315      	bcc.n	8024aae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024a82:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024a86:	82a5      	strh	r5, [r4, #20]
 8024a88:	82e2      	strh	r2, [r4, #22]
 8024a8a:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024a8e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024a92:	e7db      	b.n	8024a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024a94:	f104 0614 	add.w	r6, r4, #20
 8024a98:	6927      	ldr	r7, [r4, #16]
 8024a9a:	ce03      	ldmia	r6!, {r0, r1}
 8024a9c:	6038      	str	r0, [r7, #0]
 8024a9e:	6079      	str	r1, [r7, #4]
 8024aa0:	6921      	ldr	r1, [r4, #16]
 8024aa2:	3108      	adds	r1, #8
 8024aa4:	6121      	str	r1, [r4, #16]
 8024aa6:	68a1      	ldr	r1, [r4, #8]
 8024aa8:	3101      	adds	r1, #1
 8024aaa:	60a1      	str	r1, [r4, #8]
 8024aac:	e7bb      	b.n	8024a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024aae:	f104 0c14 	add.w	ip, r4, #20
 8024ab2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024ab6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8024aba:	f8c9 0000 	str.w	r0, [r9]
 8024abe:	f8c9 1004 	str.w	r1, [r9, #4]
 8024ac2:	6921      	ldr	r1, [r4, #16]
 8024ac4:	3108      	adds	r1, #8
 8024ac6:	6121      	str	r1, [r4, #16]
 8024ac8:	68a1      	ldr	r1, [r4, #8]
 8024aca:	3101      	adds	r1, #1
 8024acc:	60a1      	str	r1, [r4, #8]
 8024ace:	e7da      	b.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024ad0:	9a03      	ldr	r2, [sp, #12]
 8024ad2:	8b61      	ldrh	r1, [r4, #26]
 8024ad4:	f1a2 0c20 	sub.w	ip, r2, #32
 8024ad8:	8b22      	ldrh	r2, [r4, #24]
 8024ada:	44d4      	add	ip, sl
 8024adc:	4462      	add	r2, ip
 8024ade:	fb0c 1303 	mla	r3, ip, r3, r1
 8024ae2:	8322      	strh	r2, [r4, #24]
 8024ae4:	e739      	b.n	802495a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024ae6:	9b01      	ldr	r3, [sp, #4]
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	db3f      	blt.n	8024b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024aec:	2201      	movs	r2, #1
 8024aee:	f1ce 0320 	rsb	r3, lr, #32
 8024af2:	920b      	str	r2, [sp, #44]	; 0x2c
 8024af4:	2220      	movs	r2, #32
 8024af6:	fb0a f303 	mul.w	r3, sl, r3
 8024afa:	9202      	str	r2, [sp, #8]
 8024afc:	9a01      	ldr	r2, [sp, #4]
 8024afe:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024b02:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024b06:	fb93 f7f2 	sdiv	r7, r3, r2
 8024b0a:	fb02 3317 	mls	r3, r2, r7, r3
 8024b0e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	9308      	str	r3, [sp, #32]
 8024b16:	bfbc      	itt	lt
 8024b18:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024b1c:	189b      	addlt	r3, r3, r2
 8024b1e:	eb07 0b01 	add.w	fp, r7, r1
 8024b22:	bfb8      	it	lt
 8024b24:	9308      	strlt	r3, [sp, #32]
 8024b26:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024b2a:	9304      	str	r3, [sp, #16]
 8024b2c:	9b02      	ldr	r3, [sp, #8]
 8024b2e:	4573      	cmp	r3, lr
 8024b30:	d133      	bne.n	8024b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024b32:	9b04      	ldr	r3, [sp, #16]
 8024b34:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024b38:	454b      	cmp	r3, r9
 8024b3a:	d045      	beq.n	8024bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024b3c:	8b62      	ldrh	r2, [r4, #26]
 8024b3e:	8b23      	ldrh	r3, [r4, #24]
 8024b40:	4313      	orrs	r3, r2
 8024b42:	d00c      	beq.n	8024b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b44:	f1b8 0f00 	cmp.w	r8, #0
 8024b48:	db09      	blt.n	8024b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b4c:	4543      	cmp	r3, r8
 8024b4e:	dd06      	ble.n	8024b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b50:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024b54:	429a      	cmp	r2, r3
 8024b56:	d313      	bcc.n	8024b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024b58:	2301      	movs	r3, #1
 8024b5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b5e:	9b04      	ldr	r3, [sp, #16]
 8024b60:	82e6      	strh	r6, [r4, #22]
 8024b62:	82a3      	strh	r3, [r4, #20]
 8024b64:	2300      	movs	r3, #0
 8024b66:	8323      	strh	r3, [r4, #24]
 8024b68:	8363      	strh	r3, [r4, #26]
 8024b6a:	e02d      	b.n	8024bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024b6c:	9a01      	ldr	r2, [sp, #4]
 8024b6e:	fb0a f30e 	mul.w	r3, sl, lr
 8024b72:	4252      	negs	r2, r2
 8024b74:	9201      	str	r2, [sp, #4]
 8024b76:	f04f 32ff 	mov.w	r2, #4294967295
 8024b7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024b7c:	2200      	movs	r2, #0
 8024b7e:	e7bc      	b.n	8024afa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024b80:	f104 0314 	add.w	r3, r4, #20
 8024b84:	6922      	ldr	r2, [r4, #16]
 8024b86:	cb03      	ldmia	r3!, {r0, r1}
 8024b88:	6010      	str	r0, [r2, #0]
 8024b8a:	6051      	str	r1, [r2, #4]
 8024b8c:	6923      	ldr	r3, [r4, #16]
 8024b8e:	3308      	adds	r3, #8
 8024b90:	6123      	str	r3, [r4, #16]
 8024b92:	68a3      	ldr	r3, [r4, #8]
 8024b94:	3301      	adds	r3, #1
 8024b96:	60a3      	str	r3, [r4, #8]
 8024b98:	e7e1      	b.n	8024b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b9a:	f00b 031f 	and.w	r3, fp, #31
 8024b9e:	f001 011f 	and.w	r1, r1, #31
 8024ba2:	8b20      	ldrh	r0, [r4, #24]
 8024ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ba6:	9b02      	ldr	r3, [sp, #8]
 8024ba8:	eba3 020e 	sub.w	r2, r3, lr
 8024bac:	8b63      	ldrh	r3, [r4, #26]
 8024bae:	9300      	str	r3, [sp, #0]
 8024bb0:	9b04      	ldr	r3, [sp, #16]
 8024bb2:	42ab      	cmp	r3, r5
 8024bb4:	f040 80ef 	bne.w	8024d96 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bba:	4410      	add	r0, r2
 8024bbc:	4419      	add	r1, r3
 8024bbe:	9b00      	ldr	r3, [sp, #0]
 8024bc0:	8320      	strh	r0, [r4, #24]
 8024bc2:	fb02 3101 	mla	r1, r2, r1, r3
 8024bc6:	8361      	strh	r1, [r4, #26]
 8024bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bca:	9904      	ldr	r1, [sp, #16]
 8024bcc:	4433      	add	r3, r6
 8024bce:	9300      	str	r3, [sp, #0]
 8024bd0:	9a00      	ldr	r2, [sp, #0]
 8024bd2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024bd6:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024bda:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024bde:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024be2:	4288      	cmp	r0, r1
 8024be4:	d018      	beq.n	8024c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024be6:	8b60      	ldrh	r0, [r4, #26]
 8024be8:	8b21      	ldrh	r1, [r4, #24]
 8024bea:	ea50 0201 	orrs.w	r2, r0, r1
 8024bee:	d00c      	beq.n	8024c0a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	db0a      	blt.n	8024c0a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024bf4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024bf6:	4299      	cmp	r1, r3
 8024bf8:	dd07      	ble.n	8024c0a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024bfa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024bfe:	4299      	cmp	r1, r3
 8024c00:	f0c0 818b 	bcc.w	8024f1a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024c04:	2301      	movs	r3, #1
 8024c06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c0a:	9b04      	ldr	r3, [sp, #16]
 8024c0c:	82a3      	strh	r3, [r4, #20]
 8024c0e:	9b00      	ldr	r3, [sp, #0]
 8024c10:	82e3      	strh	r3, [r4, #22]
 8024c12:	2300      	movs	r3, #0
 8024c14:	8323      	strh	r3, [r4, #24]
 8024c16:	8363      	strh	r3, [r4, #26]
 8024c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c1a:	9a00      	ldr	r2, [sp, #0]
 8024c1c:	4293      	cmp	r3, r2
 8024c1e:	f000 808d 	beq.w	8024d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024c22:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024c26:	9901      	ldr	r1, [sp, #4]
 8024c28:	9801      	ldr	r0, [sp, #4]
 8024c2a:	fb93 f1f1 	sdiv	r1, r3, r1
 8024c2e:	fb00 3311 	mls	r3, r0, r1, r3
 8024c32:	9106      	str	r1, [sp, #24]
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	9307      	str	r3, [sp, #28]
 8024c38:	da04      	bge.n	8024c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024c3a:	1e4b      	subs	r3, r1, #1
 8024c3c:	9306      	str	r3, [sp, #24]
 8024c3e:	9b07      	ldr	r3, [sp, #28]
 8024c40:	4403      	add	r3, r0
 8024c42:	9307      	str	r3, [sp, #28]
 8024c44:	9b08      	ldr	r3, [sp, #32]
 8024c46:	f04f 0c00 	mov.w	ip, #0
 8024c4a:	9901      	ldr	r1, [sp, #4]
 8024c4c:	1a5b      	subs	r3, r3, r1
 8024c4e:	4659      	mov	r1, fp
 8024c50:	9308      	str	r3, [sp, #32]
 8024c52:	9b02      	ldr	r3, [sp, #8]
 8024c54:	f1c3 0320 	rsb	r3, r3, #32
 8024c58:	930a      	str	r3, [sp, #40]	; 0x28
 8024c5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024c5c:	9b02      	ldr	r3, [sp, #8]
 8024c5e:	1a1b      	subs	r3, r3, r0
 8024c60:	9309      	str	r3, [sp, #36]	; 0x24
 8024c62:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024c66:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024c6a:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024c6e:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024c72:	181b      	adds	r3, r3, r0
 8024c74:	bf58      	it	pl
 8024c76:	9801      	ldrpl	r0, [sp, #4]
 8024c78:	9308      	str	r3, [sp, #32]
 8024c7a:	bf54      	ite	pl
 8024c7c:	1a1b      	subpl	r3, r3, r0
 8024c7e:	9d06      	ldrmi	r5, [sp, #24]
 8024c80:	9802      	ldr	r0, [sp, #8]
 8024c82:	bf5e      	ittt	pl
 8024c84:	9308      	strpl	r3, [sp, #32]
 8024c86:	9b06      	ldrpl	r3, [sp, #24]
 8024c88:	1c5d      	addpl	r5, r3, #1
 8024c8a:	44ab      	add	fp, r5
 8024c8c:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024c90:	9304      	str	r3, [sp, #16]
 8024c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c94:	4283      	cmp	r3, r0
 8024c96:	f040 815a 	bne.w	8024f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024c9a:	9b04      	ldr	r3, [sp, #16]
 8024c9c:	9a00      	ldr	r2, [sp, #0]
 8024c9e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024ca2:	4543      	cmp	r3, r8
 8024ca4:	d01a      	beq.n	8024cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024ca6:	8b61      	ldrh	r1, [r4, #26]
 8024ca8:	8b23      	ldrh	r3, [r4, #24]
 8024caa:	430b      	orrs	r3, r1
 8024cac:	d00e      	beq.n	8024ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cae:	f1be 0f00 	cmp.w	lr, #0
 8024cb2:	db0b      	blt.n	8024ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024cb6:	4573      	cmp	r3, lr
 8024cb8:	dd08      	ble.n	8024ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024cbe:	4299      	cmp	r1, r3
 8024cc0:	f0c0 8138 	bcc.w	8024f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024cc4:	f04f 0301 	mov.w	r3, #1
 8024cc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024ccc:	9b04      	ldr	r3, [sp, #16]
 8024cce:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024cd2:	82a3      	strh	r3, [r4, #20]
 8024cd4:	9b00      	ldr	r3, [sp, #0]
 8024cd6:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024cda:	82e3      	strh	r3, [r4, #22]
 8024cdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024cde:	9a00      	ldr	r2, [sp, #0]
 8024ce0:	441a      	add	r2, r3
 8024ce2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024ce6:	9200      	str	r2, [sp, #0]
 8024ce8:	9900      	ldr	r1, [sp, #0]
 8024cea:	9a04      	ldr	r2, [sp, #16]
 8024cec:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024cf0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024cf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024cf8:	4288      	cmp	r0, r1
 8024cfa:	d01a      	beq.n	8024d32 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024cfc:	8b60      	ldrh	r0, [r4, #26]
 8024cfe:	8b21      	ldrh	r1, [r4, #24]
 8024d00:	ea50 0201 	orrs.w	r2, r0, r1
 8024d04:	d00d      	beq.n	8024d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	db0b      	blt.n	8024d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d0c:	4299      	cmp	r1, r3
 8024d0e:	dd08      	ble.n	8024d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d10:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d14:	4299      	cmp	r1, r3
 8024d16:	f0c0 81f9 	bcc.w	802510c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024d1a:	f04f 0301 	mov.w	r3, #1
 8024d1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d22:	9b04      	ldr	r3, [sp, #16]
 8024d24:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024d28:	82a3      	strh	r3, [r4, #20]
 8024d2a:	9b00      	ldr	r3, [sp, #0]
 8024d2c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024d30:	82e3      	strh	r3, [r4, #22]
 8024d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d34:	4659      	mov	r1, fp
 8024d36:	9a00      	ldr	r2, [sp, #0]
 8024d38:	4293      	cmp	r3, r2
 8024d3a:	d192      	bne.n	8024c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024d3c:	9b02      	ldr	r3, [sp, #8]
 8024d3e:	f1c3 0c20 	rsb	ip, r3, #32
 8024d42:	9b05      	ldr	r3, [sp, #20]
 8024d44:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024d48:	9b03      	ldr	r3, [sp, #12]
 8024d4a:	459c      	cmp	ip, r3
 8024d4c:	f040 81f8 	bne.w	8025140 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024d50:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d54:	9a00      	ldr	r2, [sp, #0]
 8024d56:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d5a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024d5e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024d62:	4288      	cmp	r0, r1
 8024d64:	f43f ad54 	beq.w	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024d68:	8b60      	ldrh	r0, [r4, #26]
 8024d6a:	8b21      	ldrh	r1, [r4, #24]
 8024d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8024d70:	d00c      	beq.n	8024d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024d72:	2b00      	cmp	r3, #0
 8024d74:	db0a      	blt.n	8024d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024d76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d78:	4299      	cmp	r1, r3
 8024d7a:	dd07      	ble.n	8024d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024d7c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d80:	4299      	cmp	r1, r3
 8024d82:	f0c0 81d0 	bcc.w	8025126 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024d86:	2301      	movs	r3, #1
 8024d88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d8c:	9b00      	ldr	r3, [sp, #0]
 8024d8e:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024d92:	82e3      	strh	r3, [r4, #22]
 8024d94:	e517      	b.n	80247c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024d96:	2f00      	cmp	r7, #0
 8024d98:	f2c0 8097 	blt.w	8024eca <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024d9c:	2301      	movs	r3, #1
 8024d9e:	f1c1 0c20 	rsb	ip, r1, #32
 8024da2:	9307      	str	r3, [sp, #28]
 8024da4:	2320      	movs	r3, #32
 8024da6:	fb02 f20c 	mul.w	r2, r2, ip
 8024daa:	9306      	str	r3, [sp, #24]
 8024dac:	9b06      	ldr	r3, [sp, #24]
 8024dae:	fb92 fcf7 	sdiv	ip, r2, r7
 8024db2:	fb07 221c 	mls	r2, r7, ip, r2
 8024db6:	4419      	add	r1, r3
 8024db8:	9b00      	ldr	r3, [sp, #0]
 8024dba:	2a00      	cmp	r2, #0
 8024dbc:	bfbc      	itt	lt
 8024dbe:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024dc2:	19d2      	addlt	r2, r2, r7
 8024dc4:	fb0c 3101 	mla	r1, ip, r1, r3
 8024dc8:	9b07      	ldr	r3, [sp, #28]
 8024dca:	4460      	add	r0, ip
 8024dcc:	441d      	add	r5, r3
 8024dce:	0433      	lsls	r3, r6, #16
 8024dd0:	b200      	sxth	r0, r0
 8024dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8024dd4:	18eb      	adds	r3, r5, r3
 8024dd6:	b209      	sxth	r1, r1
 8024dd8:	8320      	strh	r0, [r4, #24]
 8024dda:	454b      	cmp	r3, r9
 8024ddc:	8361      	strh	r1, [r4, #26]
 8024dde:	d014      	beq.n	8024e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024de0:	ea50 0301 	orrs.w	r3, r0, r1
 8024de4:	d00c      	beq.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024de6:	f1b8 0f00 	cmp.w	r8, #0
 8024dea:	db09      	blt.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024dee:	4543      	cmp	r3, r8
 8024df0:	dd06      	ble.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024df2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024df6:	4299      	cmp	r1, r3
 8024df8:	d36e      	bcc.n	8024ed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024dfa:	2301      	movs	r3, #1
 8024dfc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024e00:	2300      	movs	r3, #0
 8024e02:	82a5      	strh	r5, [r4, #20]
 8024e04:	82e6      	strh	r6, [r4, #22]
 8024e06:	8323      	strh	r3, [r4, #24]
 8024e08:	8363      	strh	r3, [r4, #26]
 8024e0a:	9904      	ldr	r1, [sp, #16]
 8024e0c:	eb0e 030c 	add.w	r3, lr, ip
 8024e10:	42a9      	cmp	r1, r5
 8024e12:	d04d      	beq.n	8024eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024e14:	9902      	ldr	r1, [sp, #8]
 8024e16:	1bd2      	subs	r2, r2, r7
 8024e18:	1ac9      	subs	r1, r1, r3
 8024e1a:	9200      	str	r2, [sp, #0]
 8024e1c:	448c      	add	ip, r1
 8024e1e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024e22:	fb9c fef7 	sdiv	lr, ip, r7
 8024e26:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024e2a:	f1bc 0f00 	cmp.w	ip, #0
 8024e2e:	bfbc      	itt	lt
 8024e30:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024e34:	44bc      	addlt	ip, r7
 8024e36:	f10e 0101 	add.w	r1, lr, #1
 8024e3a:	910d      	str	r1, [sp, #52]	; 0x34
 8024e3c:	9a00      	ldr	r2, [sp, #0]
 8024e3e:	8b20      	ldrh	r0, [r4, #24]
 8024e40:	eb12 020c 	adds.w	r2, r2, ip
 8024e44:	8b61      	ldrh	r1, [r4, #26]
 8024e46:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024e4a:	9200      	str	r2, [sp, #0]
 8024e4c:	bf5b      	ittet	pl
 8024e4e:	1bd2      	subpl	r2, r2, r7
 8024e50:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024e54:	46f0      	movmi	r8, lr
 8024e56:	9200      	strpl	r2, [sp, #0]
 8024e58:	9a07      	ldr	r2, [sp, #28]
 8024e5a:	4440      	add	r0, r8
 8024e5c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024e60:	4443      	add	r3, r8
 8024e62:	4415      	add	r5, r2
 8024e64:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e6a:	b200      	sxth	r0, r0
 8024e6c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024e70:	442a      	add	r2, r5
 8024e72:	b209      	sxth	r1, r1
 8024e74:	8320      	strh	r0, [r4, #24]
 8024e76:	454a      	cmp	r2, r9
 8024e78:	8361      	strh	r1, [r4, #26]
 8024e7a:	d016      	beq.n	8024eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024e7c:	ea50 0201 	orrs.w	r2, r0, r1
 8024e80:	d00d      	beq.n	8024e9e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024e82:	f1b8 0f00 	cmp.w	r8, #0
 8024e86:	db0a      	blt.n	8024e9e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024e88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024e8a:	4541      	cmp	r1, r8
 8024e8c:	dd07      	ble.n	8024e9e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024e8e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024e92:	4288      	cmp	r0, r1
 8024e94:	d330      	bcc.n	8024ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024e96:	f04f 0201 	mov.w	r2, #1
 8024e9a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024e9e:	f04f 0200 	mov.w	r2, #0
 8024ea2:	82a5      	strh	r5, [r4, #20]
 8024ea4:	82e6      	strh	r6, [r4, #22]
 8024ea6:	8322      	strh	r2, [r4, #24]
 8024ea8:	8362      	strh	r2, [r4, #26]
 8024eaa:	9904      	ldr	r1, [sp, #16]
 8024eac:	42a9      	cmp	r1, r5
 8024eae:	d1c5      	bne.n	8024e3c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024eb0:	9a02      	ldr	r2, [sp, #8]
 8024eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024eb4:	1ad3      	subs	r3, r2, r3
 8024eb6:	8b22      	ldrh	r2, [r4, #24]
 8024eb8:	3120      	adds	r1, #32
 8024eba:	441a      	add	r2, r3
 8024ebc:	8322      	strh	r2, [r4, #24]
 8024ebe:	9a06      	ldr	r2, [sp, #24]
 8024ec0:	1a89      	subs	r1, r1, r2
 8024ec2:	8b62      	ldrh	r2, [r4, #26]
 8024ec4:	fb03 2301 	mla	r3, r3, r1, r2
 8024ec8:	e64e      	b.n	8024b68 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024eca:	f04f 33ff 	mov.w	r3, #4294967295
 8024ece:	434a      	muls	r2, r1
 8024ed0:	427f      	negs	r7, r7
 8024ed2:	9307      	str	r3, [sp, #28]
 8024ed4:	2300      	movs	r3, #0
 8024ed6:	e768      	b.n	8024daa <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024ed8:	f104 0314 	add.w	r3, r4, #20
 8024edc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024ee0:	cb03      	ldmia	r3!, {r0, r1}
 8024ee2:	f8c8 0000 	str.w	r0, [r8]
 8024ee6:	f8c8 1004 	str.w	r1, [r8, #4]
 8024eea:	6923      	ldr	r3, [r4, #16]
 8024eec:	3308      	adds	r3, #8
 8024eee:	6123      	str	r3, [r4, #16]
 8024ef0:	68a3      	ldr	r3, [r4, #8]
 8024ef2:	3301      	adds	r3, #1
 8024ef4:	60a3      	str	r3, [r4, #8]
 8024ef6:	e783      	b.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024ef8:	f104 0814 	add.w	r8, r4, #20
 8024efc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024f00:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024f04:	f8c9 0000 	str.w	r0, [r9]
 8024f08:	f8c9 1004 	str.w	r1, [r9, #4]
 8024f0c:	6921      	ldr	r1, [r4, #16]
 8024f0e:	3108      	adds	r1, #8
 8024f10:	6121      	str	r1, [r4, #16]
 8024f12:	68a1      	ldr	r1, [r4, #8]
 8024f14:	3101      	adds	r1, #1
 8024f16:	60a1      	str	r1, [r4, #8]
 8024f18:	e7c1      	b.n	8024e9e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024f1a:	f104 0314 	add.w	r3, r4, #20
 8024f1e:	6925      	ldr	r5, [r4, #16]
 8024f20:	cb03      	ldmia	r3!, {r0, r1}
 8024f22:	6028      	str	r0, [r5, #0]
 8024f24:	6069      	str	r1, [r5, #4]
 8024f26:	6923      	ldr	r3, [r4, #16]
 8024f28:	3308      	adds	r3, #8
 8024f2a:	6123      	str	r3, [r4, #16]
 8024f2c:	68a3      	ldr	r3, [r4, #8]
 8024f2e:	3301      	adds	r3, #1
 8024f30:	60a3      	str	r3, [r4, #8]
 8024f32:	e66a      	b.n	8024c0a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024f34:	f104 0314 	add.w	r3, r4, #20
 8024f38:	6925      	ldr	r5, [r4, #16]
 8024f3a:	cb03      	ldmia	r3!, {r0, r1}
 8024f3c:	6028      	str	r0, [r5, #0]
 8024f3e:	6069      	str	r1, [r5, #4]
 8024f40:	6923      	ldr	r3, [r4, #16]
 8024f42:	3308      	adds	r3, #8
 8024f44:	6123      	str	r3, [r4, #16]
 8024f46:	68a3      	ldr	r3, [r4, #8]
 8024f48:	3301      	adds	r3, #1
 8024f4a:	60a3      	str	r3, [r4, #8]
 8024f4c:	e6be      	b.n	8024ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f4e:	f00b 031f 	and.w	r3, fp, #31
 8024f52:	114f      	asrs	r7, r1, #5
 8024f54:	8b20      	ldrh	r0, [r4, #24]
 8024f56:	f001 011f 	and.w	r1, r1, #31
 8024f5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f5c:	9b04      	ldr	r3, [sp, #16]
 8024f5e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024f62:	429f      	cmp	r7, r3
 8024f64:	d10a      	bne.n	8024f7c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f68:	4418      	add	r0, r3
 8024f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024f6c:	4419      	add	r1, r3
 8024f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f70:	8320      	strh	r0, [r4, #24]
 8024f72:	fb03 9901 	mla	r9, r3, r1, r9
 8024f76:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024f7a:	e6af      	b.n	8024cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024f7c:	2d00      	cmp	r5, #0
 8024f7e:	f2c0 809b 	blt.w	80250b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024f82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024f84:	f1c1 0320 	rsb	r3, r1, #32
 8024f88:	4373      	muls	r3, r6
 8024f8a:	2601      	movs	r6, #1
 8024f8c:	960e      	str	r6, [sp, #56]	; 0x38
 8024f8e:	2620      	movs	r6, #32
 8024f90:	960d      	str	r6, [sp, #52]	; 0x34
 8024f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f94:	fb93 f6f5 	sdiv	r6, r3, r5
 8024f98:	4411      	add	r1, r2
 8024f9a:	fb05 3316 	mls	r3, r5, r6, r3
 8024f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	4417      	add	r7, r2
 8024fa4:	9a00      	ldr	r2, [sp, #0]
 8024fa6:	bfbc      	itt	lt
 8024fa8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024fac:	195b      	addlt	r3, r3, r5
 8024fae:	0412      	lsls	r2, r2, #16
 8024fb0:	fb06 9101 	mla	r1, r6, r1, r9
 8024fb4:	4430      	add	r0, r6
 8024fb6:	eb07 0902 	add.w	r9, r7, r2
 8024fba:	9210      	str	r2, [sp, #64]	; 0x40
 8024fbc:	b200      	sxth	r0, r0
 8024fbe:	b209      	sxth	r1, r1
 8024fc0:	45c1      	cmp	r9, r8
 8024fc2:	8320      	strh	r0, [r4, #24]
 8024fc4:	8361      	strh	r1, [r4, #26]
 8024fc6:	d017      	beq.n	8024ff8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024fc8:	ea50 0201 	orrs.w	r2, r0, r1
 8024fcc:	d00d      	beq.n	8024fea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024fce:	f1be 0f00 	cmp.w	lr, #0
 8024fd2:	db0a      	blt.n	8024fea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024fd4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024fd6:	4571      	cmp	r1, lr
 8024fd8:	dd07      	ble.n	8024fea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024fda:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024fde:	4288      	cmp	r0, r1
 8024fe0:	d372      	bcc.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024fe2:	f04f 0201 	mov.w	r2, #1
 8024fe6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024fea:	9a00      	ldr	r2, [sp, #0]
 8024fec:	82a7      	strh	r7, [r4, #20]
 8024fee:	82e2      	strh	r2, [r4, #22]
 8024ff0:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024ff4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024ffa:	eb02 0e06 	add.w	lr, r2, r6
 8024ffe:	9a04      	ldr	r2, [sp, #16]
 8025000:	42ba      	cmp	r2, r7
 8025002:	d049      	beq.n	8025098 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8025004:	9a02      	ldr	r2, [sp, #8]
 8025006:	1b5b      	subs	r3, r3, r5
 8025008:	eba2 010e 	sub.w	r1, r2, lr
 802500c:	440e      	add	r6, r1
 802500e:	0176      	lsls	r6, r6, #5
 8025010:	fb96 f8f5 	sdiv	r8, r6, r5
 8025014:	fb05 6618 	mls	r6, r5, r8, r6
 8025018:	2e00      	cmp	r6, #0
 802501a:	bfbc      	itt	lt
 802501c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025020:	1976      	addlt	r6, r6, r5
 8025022:	f108 0201 	add.w	r2, r8, #1
 8025026:	9211      	str	r2, [sp, #68]	; 0x44
 8025028:	199b      	adds	r3, r3, r6
 802502a:	8b20      	ldrh	r0, [r4, #24]
 802502c:	8b61      	ldrh	r1, [r4, #26]
 802502e:	bf54      	ite	pl
 8025030:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8025034:	46c1      	movmi	r9, r8
 8025036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025038:	bf58      	it	pl
 802503a:	1b5b      	subpl	r3, r3, r5
 802503c:	4448      	add	r0, r9
 802503e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025042:	4417      	add	r7, r2
 8025044:	44ce      	add	lr, r9
 8025046:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025048:	b200      	sxth	r0, r0
 802504a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802504e:	b209      	sxth	r1, r1
 8025050:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025054:	443a      	add	r2, r7
 8025056:	8320      	strh	r0, [r4, #24]
 8025058:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802505c:	8361      	strh	r1, [r4, #26]
 802505e:	4552      	cmp	r2, sl
 8025060:	d017      	beq.n	8025092 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8025062:	ea50 0201 	orrs.w	r2, r0, r1
 8025066:	d00d      	beq.n	8025084 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025068:	f1b9 0f00 	cmp.w	r9, #0
 802506c:	db0a      	blt.n	8025084 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802506e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025070:	4549      	cmp	r1, r9
 8025072:	dd07      	ble.n	8025084 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025074:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025078:	4288      	cmp	r0, r1
 802507a:	d336      	bcc.n	80250ea <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802507c:	f04f 0201 	mov.w	r2, #1
 8025080:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025084:	9a00      	ldr	r2, [sp, #0]
 8025086:	82a7      	strh	r7, [r4, #20]
 8025088:	82e2      	strh	r2, [r4, #22]
 802508a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802508e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025092:	9a04      	ldr	r2, [sp, #16]
 8025094:	42ba      	cmp	r2, r7
 8025096:	d1c7      	bne.n	8025028 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025098:	9b02      	ldr	r3, [sp, #8]
 802509a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802509c:	eba3 0e0e 	sub.w	lr, r3, lr
 80250a0:	8b23      	ldrh	r3, [r4, #24]
 80250a2:	3120      	adds	r1, #32
 80250a4:	4473      	add	r3, lr
 80250a6:	8323      	strh	r3, [r4, #24]
 80250a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250aa:	1ac9      	subs	r1, r1, r3
 80250ac:	8b63      	ldrh	r3, [r4, #26]
 80250ae:	fb0e 3e01 	mla	lr, lr, r1, r3
 80250b2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80250b6:	e611      	b.n	8024cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80250b8:	f04f 36ff 	mov.w	r6, #4294967295
 80250bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250be:	426d      	negs	r5, r5
 80250c0:	960e      	str	r6, [sp, #56]	; 0x38
 80250c2:	2600      	movs	r6, #0
 80250c4:	434b      	muls	r3, r1
 80250c6:	e763      	b.n	8024f90 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80250c8:	f104 0e14 	add.w	lr, r4, #20
 80250cc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80250d0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80250d4:	f8c8 0000 	str.w	r0, [r8]
 80250d8:	f8c8 1004 	str.w	r1, [r8, #4]
 80250dc:	6921      	ldr	r1, [r4, #16]
 80250de:	3108      	adds	r1, #8
 80250e0:	6121      	str	r1, [r4, #16]
 80250e2:	68a1      	ldr	r1, [r4, #8]
 80250e4:	3101      	adds	r1, #1
 80250e6:	60a1      	str	r1, [r4, #8]
 80250e8:	e77f      	b.n	8024fea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80250ea:	f104 0914 	add.w	r9, r4, #20
 80250ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80250f2:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80250f6:	f8ca 0000 	str.w	r0, [sl]
 80250fa:	f8ca 1004 	str.w	r1, [sl, #4]
 80250fe:	6921      	ldr	r1, [r4, #16]
 8025100:	3108      	adds	r1, #8
 8025102:	6121      	str	r1, [r4, #16]
 8025104:	68a1      	ldr	r1, [r4, #8]
 8025106:	3101      	adds	r1, #1
 8025108:	60a1      	str	r1, [r4, #8]
 802510a:	e7bb      	b.n	8025084 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802510c:	f104 0314 	add.w	r3, r4, #20
 8025110:	6925      	ldr	r5, [r4, #16]
 8025112:	cb03      	ldmia	r3!, {r0, r1}
 8025114:	6028      	str	r0, [r5, #0]
 8025116:	6069      	str	r1, [r5, #4]
 8025118:	6923      	ldr	r3, [r4, #16]
 802511a:	3308      	adds	r3, #8
 802511c:	6123      	str	r3, [r4, #16]
 802511e:	68a3      	ldr	r3, [r4, #8]
 8025120:	3301      	adds	r3, #1
 8025122:	60a3      	str	r3, [r4, #8]
 8025124:	e5fd      	b.n	8024d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025126:	f104 0314 	add.w	r3, r4, #20
 802512a:	6925      	ldr	r5, [r4, #16]
 802512c:	cb03      	ldmia	r3!, {r0, r1}
 802512e:	6028      	str	r0, [r5, #0]
 8025130:	6069      	str	r1, [r5, #4]
 8025132:	6923      	ldr	r3, [r4, #16]
 8025134:	3308      	adds	r3, #8
 8025136:	6123      	str	r3, [r4, #16]
 8025138:	68a3      	ldr	r3, [r4, #8]
 802513a:	3301      	adds	r3, #1
 802513c:	60a3      	str	r3, [r4, #8]
 802513e:	e625      	b.n	8024d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025140:	9b05      	ldr	r3, [sp, #20]
 8025142:	ea4f 176b 	mov.w	r7, fp, asr #5
 8025146:	f00b 081f 	and.w	r8, fp, #31
 802514a:	8b20      	ldrh	r0, [r4, #24]
 802514c:	f003 031f 	and.w	r3, r3, #31
 8025150:	4577      	cmp	r7, lr
 8025152:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025156:	9302      	str	r3, [sp, #8]
 8025158:	9b03      	ldr	r3, [sp, #12]
 802515a:	eba3 050c 	sub.w	r5, r3, ip
 802515e:	d108      	bne.n	8025172 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025160:	9b02      	ldr	r3, [sp, #8]
 8025162:	4428      	add	r0, r5
 8025164:	4498      	add	r8, r3
 8025166:	8320      	strh	r0, [r4, #24]
 8025168:	fb05 9508 	mla	r5, r5, r8, r9
 802516c:	8365      	strh	r5, [r4, #26]
 802516e:	f7ff bb4f 	b.w	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025172:	9b05      	ldr	r3, [sp, #20]
 8025174:	ebb3 030b 	subs.w	r3, r3, fp
 8025178:	f100 809c 	bmi.w	80252b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802517c:	f1c8 0120 	rsb	r1, r8, #32
 8025180:	2201      	movs	r2, #1
 8025182:	f04f 0b20 	mov.w	fp, #32
 8025186:	434d      	muls	r5, r1
 8025188:	9201      	str	r2, [sp, #4]
 802518a:	9a01      	ldr	r2, [sp, #4]
 802518c:	44d8      	add	r8, fp
 802518e:	fb95 f6f3 	sdiv	r6, r5, r3
 8025192:	fb03 5516 	mls	r5, r3, r6, r5
 8025196:	4417      	add	r7, r2
 8025198:	9a00      	ldr	r2, [sp, #0]
 802519a:	2d00      	cmp	r5, #0
 802519c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80251a0:	bfbc      	itt	lt
 80251a2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80251a6:	18ed      	addlt	r5, r5, r3
 80251a8:	eb07 0a02 	add.w	sl, r7, r2
 80251ac:	9204      	str	r2, [sp, #16]
 80251ae:	fb06 9808 	mla	r8, r6, r8, r9
 80251b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80251b6:	4430      	add	r0, r6
 80251b8:	fa0f f188 	sxth.w	r1, r8
 80251bc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80251c0:	b200      	sxth	r0, r0
 80251c2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80251c6:	8361      	strh	r1, [r4, #26]
 80251c8:	8320      	strh	r0, [r4, #24]
 80251ca:	45ca      	cmp	sl, r9
 80251cc:	d015      	beq.n	80251fa <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80251ce:	ea50 0201 	orrs.w	r2, r0, r1
 80251d2:	d00c      	beq.n	80251ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80251d4:	f1b8 0f00 	cmp.w	r8, #0
 80251d8:	db09      	blt.n	80251ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80251da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80251dc:	4541      	cmp	r1, r8
 80251de:	dd06      	ble.n	80251ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80251e0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80251e4:	4288      	cmp	r0, r1
 80251e6:	d36e      	bcc.n	80252c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80251e8:	2101      	movs	r1, #1
 80251ea:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80251ee:	2100      	movs	r1, #0
 80251f0:	9a00      	ldr	r2, [sp, #0]
 80251f2:	82a7      	strh	r7, [r4, #20]
 80251f4:	82e2      	strh	r2, [r4, #22]
 80251f6:	8321      	strh	r1, [r4, #24]
 80251f8:	8361      	strh	r1, [r4, #26]
 80251fa:	45be      	cmp	lr, r7
 80251fc:	44b4      	add	ip, r6
 80251fe:	d048      	beq.n	8025292 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025200:	9a03      	ldr	r2, [sp, #12]
 8025202:	1aed      	subs	r5, r5, r3
 8025204:	eba2 010c 	sub.w	r1, r2, ip
 8025208:	440e      	add	r6, r1
 802520a:	0176      	lsls	r6, r6, #5
 802520c:	fb96 f8f3 	sdiv	r8, r6, r3
 8025210:	fb03 6618 	mls	r6, r3, r8, r6
 8025214:	2e00      	cmp	r6, #0
 8025216:	bfbc      	itt	lt
 8025218:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802521c:	18f6      	addlt	r6, r6, r3
 802521e:	f108 0201 	add.w	r2, r8, #1
 8025222:	9205      	str	r2, [sp, #20]
 8025224:	19ad      	adds	r5, r5, r6
 8025226:	8b20      	ldrh	r0, [r4, #24]
 8025228:	8b61      	ldrh	r1, [r4, #26]
 802522a:	bf54      	ite	pl
 802522c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025230:	46c1      	movmi	r9, r8
 8025232:	9a01      	ldr	r2, [sp, #4]
 8025234:	bf58      	it	pl
 8025236:	1aed      	subpl	r5, r5, r3
 8025238:	4448      	add	r0, r9
 802523a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802523e:	4417      	add	r7, r2
 8025240:	44cc      	add	ip, r9
 8025242:	9a04      	ldr	r2, [sp, #16]
 8025244:	b200      	sxth	r0, r0
 8025246:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802524a:	b209      	sxth	r1, r1
 802524c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025250:	443a      	add	r2, r7
 8025252:	8320      	strh	r0, [r4, #24]
 8025254:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025258:	8361      	strh	r1, [r4, #26]
 802525a:	4552      	cmp	r2, sl
 802525c:	d017      	beq.n	802528e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802525e:	ea50 0201 	orrs.w	r2, r0, r1
 8025262:	d00d      	beq.n	8025280 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025264:	f1b9 0f00 	cmp.w	r9, #0
 8025268:	db0a      	blt.n	8025280 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802526a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802526c:	4549      	cmp	r1, r9
 802526e:	dd07      	ble.n	8025280 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025270:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025274:	4288      	cmp	r0, r1
 8025276:	d337      	bcc.n	80252e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8025278:	f04f 0201 	mov.w	r2, #1
 802527c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025280:	9a00      	ldr	r2, [sp, #0]
 8025282:	82a7      	strh	r7, [r4, #20]
 8025284:	82e2      	strh	r2, [r4, #22]
 8025286:	f04f 0200 	mov.w	r2, #0
 802528a:	8322      	strh	r2, [r4, #24]
 802528c:	8362      	strh	r2, [r4, #26]
 802528e:	45be      	cmp	lr, r7
 8025290:	d1c8      	bne.n	8025224 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8025292:	9b03      	ldr	r3, [sp, #12]
 8025294:	8b62      	ldrh	r2, [r4, #26]
 8025296:	eba3 0c0c 	sub.w	ip, r3, ip
 802529a:	8b23      	ldrh	r3, [r4, #24]
 802529c:	4463      	add	r3, ip
 802529e:	8323      	strh	r3, [r4, #24]
 80252a0:	9b02      	ldr	r3, [sp, #8]
 80252a2:	3320      	adds	r3, #32
 80252a4:	eba3 030b 	sub.w	r3, r3, fp
 80252a8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80252ac:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80252b0:	f7ff baae 	b.w	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80252b4:	f04f 32ff 	mov.w	r2, #4294967295
 80252b8:	fb05 f508 	mul.w	r5, r5, r8
 80252bc:	425b      	negs	r3, r3
 80252be:	f04f 0b00 	mov.w	fp, #0
 80252c2:	9201      	str	r2, [sp, #4]
 80252c4:	e761      	b.n	802518a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80252c6:	f104 0814 	add.w	r8, r4, #20
 80252ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80252ce:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80252d2:	f8c9 0000 	str.w	r0, [r9]
 80252d6:	f8c9 1004 	str.w	r1, [r9, #4]
 80252da:	6921      	ldr	r1, [r4, #16]
 80252dc:	3108      	adds	r1, #8
 80252de:	6121      	str	r1, [r4, #16]
 80252e0:	68a1      	ldr	r1, [r4, #8]
 80252e2:	3101      	adds	r1, #1
 80252e4:	60a1      	str	r1, [r4, #8]
 80252e6:	e782      	b.n	80251ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80252e8:	f104 0914 	add.w	r9, r4, #20
 80252ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80252f0:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80252f4:	f8ca 0000 	str.w	r0, [sl]
 80252f8:	f8ca 1004 	str.w	r1, [sl, #4]
 80252fc:	6921      	ldr	r1, [r4, #16]
 80252fe:	3108      	adds	r1, #8
 8025300:	6121      	str	r1, [r4, #16]
 8025302:	68a1      	ldr	r1, [r4, #8]
 8025304:	3101      	adds	r1, #1
 8025306:	60a1      	str	r1, [r4, #8]
 8025308:	e7ba      	b.n	8025280 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802530a <_ZN8touchgfx7Outline6lineToEii>:
 802530a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802530c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802530e:	4604      	mov	r4, r0
 8025310:	460d      	mov	r5, r1
 8025312:	4616      	mov	r6, r2
 8025314:	079b      	lsls	r3, r3, #30
 8025316:	d526      	bpl.n	8025366 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025318:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802531c:	ea85 0001 	eor.w	r0, r5, r1
 8025320:	ea86 0302 	eor.w	r3, r6, r2
 8025324:	4303      	orrs	r3, r0
 8025326:	d01e      	beq.n	8025366 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025328:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802532a:	114b      	asrs	r3, r1, #5
 802532c:	9600      	str	r6, [sp, #0]
 802532e:	4283      	cmp	r3, r0
 8025330:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025332:	bfb8      	it	lt
 8025334:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025336:	3301      	adds	r3, #1
 8025338:	4283      	cmp	r3, r0
 802533a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802533c:	bfc8      	it	gt
 802533e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025340:	116b      	asrs	r3, r5, #5
 8025342:	4283      	cmp	r3, r0
 8025344:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025346:	bfb8      	it	lt
 8025348:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802534a:	3301      	adds	r3, #1
 802534c:	4283      	cmp	r3, r0
 802534e:	4620      	mov	r0, r4
 8025350:	bfc8      	it	gt
 8025352:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025354:	462b      	mov	r3, r5
 8025356:	f7ff f9e3 	bl	8024720 <_ZN8touchgfx7Outline10renderLineEiiii>
 802535a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802535c:	f043 0301 	orr.w	r3, r3, #1
 8025360:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025364:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025366:	b002      	add	sp, #8
 8025368:	bd70      	pop	{r4, r5, r6, pc}

0802536a <_ZN8touchgfx7Outline6moveToEii>:
 802536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802536c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802536e:	4615      	mov	r5, r2
 8025370:	4604      	mov	r4, r0
 8025372:	460e      	mov	r6, r1
 8025374:	079a      	lsls	r2, r3, #30
 8025376:	d401      	bmi.n	802537c <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025378:	f7ff f98c 	bl	8024694 <_ZN8touchgfx7Outline5resetEv>
 802537c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802537e:	07db      	lsls	r3, r3, #31
 8025380:	d504      	bpl.n	802538c <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025382:	4620      	mov	r0, r4
 8025384:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025388:	f7ff ffbf 	bl	802530a <_ZN8touchgfx7Outline6lineToEii>
 802538c:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8025390:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025394:	116f      	asrs	r7, r5, #5
 8025396:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802539a:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802539e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80253a2:	4291      	cmp	r1, r2
 80253a4:	d015      	beq.n	80253d2 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80253a6:	8b61      	ldrh	r1, [r4, #26]
 80253a8:	8b22      	ldrh	r2, [r4, #24]
 80253aa:	430a      	orrs	r2, r1
 80253ac:	d00b      	beq.n	80253c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	db09      	blt.n	80253c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80253b4:	429a      	cmp	r2, r3
 80253b6:	dd06      	ble.n	80253c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253b8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80253bc:	429a      	cmp	r2, r3
 80253be:	d30d      	bcc.n	80253dc <_ZN8touchgfx7Outline6moveToEii+0x72>
 80253c0:	2301      	movs	r3, #1
 80253c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80253c6:	2300      	movs	r3, #0
 80253c8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80253cc:	82e7      	strh	r7, [r4, #22]
 80253ce:	8323      	strh	r3, [r4, #24]
 80253d0:	8363      	strh	r3, [r4, #26]
 80253d2:	61e6      	str	r6, [r4, #28]
 80253d4:	62a5      	str	r5, [r4, #40]	; 0x28
 80253d6:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80253da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80253dc:	f104 0314 	add.w	r3, r4, #20
 80253e0:	6922      	ldr	r2, [r4, #16]
 80253e2:	cb03      	ldmia	r3!, {r0, r1}
 80253e4:	6010      	str	r0, [r2, #0]
 80253e6:	6051      	str	r1, [r2, #4]
 80253e8:	6923      	ldr	r3, [r4, #16]
 80253ea:	3308      	adds	r3, #8
 80253ec:	6123      	str	r3, [r4, #16]
 80253ee:	68a3      	ldr	r3, [r4, #8]
 80253f0:	3301      	adds	r3, #1
 80253f2:	60a3      	str	r3, [r4, #8]
 80253f4:	e7e7      	b.n	80253c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>

080253f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80253f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253fa:	b0d1      	sub	sp, #324	; 0x144
 80253fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025400:	466c      	mov	r4, sp
 8025402:	1a0d      	subs	r5, r1, r0
 8025404:	f100 0208 	add.w	r2, r0, #8
 8025408:	2d48      	cmp	r5, #72	; 0x48
 802540a:	f340 80ba 	ble.w	8025582 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802540e:	112d      	asrs	r5, r5, #4
 8025410:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025414:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025418:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802541c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025420:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025424:	681e      	ldr	r6, [r3, #0]
 8025426:	6006      	str	r6, [r0, #0]
 8025428:	685e      	ldr	r6, [r3, #4]
 802542a:	6046      	str	r6, [r0, #4]
 802542c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025430:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025434:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025438:	80df      	strh	r7, [r3, #6]
 802543a:	f1a1 0308 	sub.w	r3, r1, #8
 802543e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025442:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025446:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802544a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802544e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025452:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025456:	45ac      	cmp	ip, r5
 8025458:	dd0f      	ble.n	802547a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802545a:	681d      	ldr	r5, [r3, #0]
 802545c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025460:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025464:	6015      	str	r5, [r2, #0]
 8025466:	685d      	ldr	r5, [r3, #4]
 8025468:	6055      	str	r5, [r2, #4]
 802546a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802546e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025472:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025476:	f821 cc02 	strh.w	ip, [r1, #-2]
 802547a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802547e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025482:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025486:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802548a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802548e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025492:	4565      	cmp	r5, ip
 8025494:	dd0d      	ble.n	80254b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8025496:	6815      	ldr	r5, [r2, #0]
 8025498:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802549c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80254a0:	6005      	str	r5, [r0, #0]
 80254a2:	6855      	ldr	r5, [r2, #4]
 80254a4:	8107      	strh	r7, [r0, #8]
 80254a6:	6045      	str	r5, [r0, #4]
 80254a8:	8146      	strh	r6, [r0, #10]
 80254aa:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80254ae:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80254b2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80254b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80254ba:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80254be:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80254c2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80254c6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80254ca:	45ac      	cmp	ip, r5
 80254cc:	dd0f      	ble.n	80254ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80254ce:	681d      	ldr	r5, [r3, #0]
 80254d0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80254d4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80254d8:	6005      	str	r5, [r0, #0]
 80254da:	685d      	ldr	r5, [r3, #4]
 80254dc:	6045      	str	r5, [r0, #4]
 80254de:	f821 7c08 	strh.w	r7, [r1, #-8]
 80254e2:	f821 6c06 	strh.w	r6, [r1, #-6]
 80254e6:	f821 ec04 	strh.w	lr, [r1, #-4]
 80254ea:	f821 cc02 	strh.w	ip, [r1, #-2]
 80254ee:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80254f2:	f102 0508 	add.w	r5, r2, #8
 80254f6:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80254fa:	f9b0 e000 	ldrsh.w	lr, [r0]
 80254fe:	462f      	mov	r7, r5
 8025500:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025504:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025508:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802550c:	45b2      	cmp	sl, r6
 802550e:	dc18      	bgt.n	8025542 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025510:	3b08      	subs	r3, #8
 8025512:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025516:	f9b3 6000 	ldrsh.w	r6, [r3]
 802551a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802551e:	45b2      	cmp	sl, r6
 8025520:	dbf6      	blt.n	8025510 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025522:	42ab      	cmp	r3, r5
 8025524:	681e      	ldr	r6, [r3, #0]
 8025526:	d30e      	bcc.n	8025546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025528:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802552c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025530:	602e      	str	r6, [r5, #0]
 8025532:	685e      	ldr	r6, [r3, #4]
 8025534:	606e      	str	r6, [r5, #4]
 8025536:	f8a3 9000 	strh.w	r9, [r3]
 802553a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802553e:	809f      	strh	r7, [r3, #4]
 8025540:	80da      	strh	r2, [r3, #6]
 8025542:	462a      	mov	r2, r5
 8025544:	e7d3      	b.n	80254ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025546:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802554a:	6006      	str	r6, [r0, #0]
 802554c:	685e      	ldr	r6, [r3, #4]
 802554e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025552:	6046      	str	r6, [r0, #4]
 8025554:	1a1e      	subs	r6, r3, r0
 8025556:	80da      	strh	r2, [r3, #6]
 8025558:	1b4a      	subs	r2, r1, r5
 802555a:	f8a3 e000 	strh.w	lr, [r3]
 802555e:	10d2      	asrs	r2, r2, #3
 8025560:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025564:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025568:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802556c:	bfb5      	itete	lt
 802556e:	e9c4 0300 	strdlt	r0, r3, [r4]
 8025572:	4607      	movge	r7, r0
 8025574:	460b      	movlt	r3, r1
 8025576:	e9c4 5100 	strdge	r5, r1, [r4]
 802557a:	4638      	mov	r0, r7
 802557c:	3408      	adds	r4, #8
 802557e:	4619      	mov	r1, r3
 8025580:	e73f      	b.n	8025402 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025582:	4291      	cmp	r1, r2
 8025584:	d925      	bls.n	80255d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8025586:	f1a2 0310 	sub.w	r3, r2, #16
 802558a:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802558e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025592:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8025596:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802559a:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802559e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80255a2:	42b5      	cmp	r5, r6
 80255a4:	dd13      	ble.n	80255ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80255a6:	461d      	mov	r5, r3
 80255a8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80255ac:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80255b0:	3b08      	subs	r3, #8
 80255b2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80255b6:	619e      	str	r6, [r3, #24]
 80255b8:	42a8      	cmp	r0, r5
 80255ba:	686e      	ldr	r6, [r5, #4]
 80255bc:	f8a3 c010 	strh.w	ip, [r3, #16]
 80255c0:	61de      	str	r6, [r3, #28]
 80255c2:	825f      	strh	r7, [r3, #18]
 80255c4:	f8a3 8014 	strh.w	r8, [r3, #20]
 80255c8:	f8a3 e016 	strh.w	lr, [r3, #22]
 80255cc:	d1dd      	bne.n	802558a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80255ce:	3208      	adds	r2, #8
 80255d0:	e7d7      	b.n	8025582 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80255d2:	466b      	mov	r3, sp
 80255d4:	429c      	cmp	r4, r3
 80255d6:	d903      	bls.n	80255e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80255d8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80255dc:	3c08      	subs	r4, #8
 80255de:	e710      	b.n	8025402 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80255e0:	b051      	add	sp, #324	; 0x144
 80255e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255e6 <_ZN8touchgfx7Outline9sortCellsEv>:
 80255e6:	6881      	ldr	r1, [r0, #8]
 80255e8:	b111      	cbz	r1, 80255f0 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80255ea:	68c0      	ldr	r0, [r0, #12]
 80255ec:	f7ff bf03 	b.w	80253f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80255f0:	4770      	bx	lr

080255f2 <_ZN8touchgfx7Outline8getCellsEv>:
 80255f2:	b510      	push	{r4, lr}
 80255f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80255f6:	4604      	mov	r4, r0
 80255f8:	07da      	lsls	r2, r3, #31
 80255fa:	d507      	bpl.n	802560c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80255fc:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025600:	f7ff fe83 	bl	802530a <_ZN8touchgfx7Outline6lineToEii>
 8025604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025606:	f023 0301 	bic.w	r3, r3, #1
 802560a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802560c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802560e:	079b      	lsls	r3, r3, #30
 8025610:	d51a      	bpl.n	8025648 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025612:	8b62      	ldrh	r2, [r4, #26]
 8025614:	8b23      	ldrh	r3, [r4, #24]
 8025616:	4313      	orrs	r3, r2
 8025618:	d00d      	beq.n	8025636 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802561a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802561e:	2b00      	cmp	r3, #0
 8025620:	db09      	blt.n	8025636 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025624:	4293      	cmp	r3, r2
 8025626:	da06      	bge.n	8025636 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025628:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802562c:	429a      	cmp	r2, r3
 802562e:	d80d      	bhi.n	802564c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025630:	2301      	movs	r3, #1
 8025632:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025636:	68a0      	ldr	r0, [r4, #8]
 8025638:	b138      	cbz	r0, 802564a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802563a:	4620      	mov	r0, r4
 802563c:	f7ff ffd3 	bl	80255e6 <_ZN8touchgfx7Outline9sortCellsEv>
 8025640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025642:	f023 0302 	bic.w	r3, r3, #2
 8025646:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025648:	68e0      	ldr	r0, [r4, #12]
 802564a:	bd10      	pop	{r4, pc}
 802564c:	f104 0314 	add.w	r3, r4, #20
 8025650:	6922      	ldr	r2, [r4, #16]
 8025652:	cb03      	ldmia	r3!, {r0, r1}
 8025654:	6010      	str	r0, [r2, #0]
 8025656:	6051      	str	r1, [r2, #4]
 8025658:	6923      	ldr	r3, [r4, #16]
 802565a:	3308      	adds	r3, #8
 802565c:	6123      	str	r3, [r4, #16]
 802565e:	68a3      	ldr	r3, [r4, #8]
 8025660:	3301      	adds	r3, #1
 8025662:	60a3      	str	r3, [r4, #8]
 8025664:	e7e7      	b.n	8025636 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025666 <_ZN8touchgfx8ScanlineD1Ev>:
 8025666:	4770      	bx	lr

08025668 <_ZN8touchgfx8ScanlineD0Ev>:
 8025668:	b510      	push	{r4, lr}
 802566a:	4604      	mov	r4, r0
 802566c:	2124      	movs	r1, #36	; 0x24
 802566e:	f000 f87a 	bl	8025766 <_ZdlPvj>
 8025672:	4620      	mov	r0, r4
 8025674:	bd10      	pop	{r4, pc}

08025676 <_ZN8touchgfx8Scanline5resetEv>:
 8025676:	b510      	push	{r4, lr}
 8025678:	4604      	mov	r4, r0
 802567a:	f7f2 f9c3 	bl	8017a04 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802567e:	61a0      	str	r0, [r4, #24]
 8025680:	f7f2 f9c6 	bl	8017a10 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025684:	61e0      	str	r0, [r4, #28]
 8025686:	f7f2 f9c9 	bl	8017a1c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802568a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802568e:	6220      	str	r0, [r4, #32]
 8025690:	6160      	str	r0, [r4, #20]
 8025692:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025696:	69e3      	ldr	r3, [r4, #28]
 8025698:	6123      	str	r3, [r4, #16]
 802569a:	2300      	movs	r3, #0
 802569c:	60e3      	str	r3, [r4, #12]
 802569e:	bd10      	pop	{r4, pc}

080256a0 <_ZN8touchgfx8ScanlineC1Ev>:
 80256a0:	4b07      	ldr	r3, [pc, #28]	; (80256c0 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80256a2:	b510      	push	{r4, lr}
 80256a4:	6003      	str	r3, [r0, #0]
 80256a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256aa:	4604      	mov	r4, r0
 80256ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80256b0:	2300      	movs	r3, #0
 80256b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80256b6:	6143      	str	r3, [r0, #20]
 80256b8:	f7ff ffdd 	bl	8025676 <_ZN8touchgfx8Scanline5resetEv>
 80256bc:	4620      	mov	r0, r4
 80256be:	bd10      	pop	{r4, pc}
 80256c0:	0802b7bc 	.word	0x0802b7bc

080256c4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80256c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256c8:	1e0c      	subs	r4, r1, #0
 80256ca:	4605      	mov	r5, r0
 80256cc:	4617      	mov	r7, r2
 80256ce:	461e      	mov	r6, r3
 80256d0:	da03      	bge.n	80256da <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80256d2:	4426      	add	r6, r4
 80256d4:	2e01      	cmp	r6, #1
 80256d6:	d421      	bmi.n	802571c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80256d8:	2400      	movs	r4, #0
 80256da:	f7f2 f98d 	bl	80179f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80256de:	42a0      	cmp	r0, r4
 80256e0:	d91c      	bls.n	802571c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80256e2:	eb04 0806 	add.w	r8, r4, r6
 80256e6:	f7f2 f987 	bl	80179f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80256ea:	4580      	cmp	r8, r0
 80256ec:	d902      	bls.n	80256f4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80256ee:	f7f2 f983 	bl	80179f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80256f2:	1b06      	subs	r6, r0, r4
 80256f4:	69a8      	ldr	r0, [r5, #24]
 80256f6:	4632      	mov	r2, r6
 80256f8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80256fc:	4420      	add	r0, r4
 80256fe:	f7f4 fb0c 	bl	8019d1a <_ZN8touchgfx6memsetEPvhm>
 8025702:	686b      	ldr	r3, [r5, #4]
 8025704:	b2b2      	uxth	r2, r6
 8025706:	3301      	adds	r3, #1
 8025708:	42a3      	cmp	r3, r4
 802570a:	696b      	ldr	r3, [r5, #20]
 802570c:	d108      	bne.n	8025720 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802570e:	8819      	ldrh	r1, [r3, #0]
 8025710:	440a      	add	r2, r1
 8025712:	801a      	strh	r2, [r3, #0]
 8025714:	3c01      	subs	r4, #1
 8025716:	4434      	add	r4, r6
 8025718:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025720:	1c99      	adds	r1, r3, #2
 8025722:	6169      	str	r1, [r5, #20]
 8025724:	805a      	strh	r2, [r3, #2]
 8025726:	692b      	ldr	r3, [r5, #16]
 8025728:	1c9a      	adds	r2, r3, #2
 802572a:	612a      	str	r2, [r5, #16]
 802572c:	805c      	strh	r4, [r3, #2]
 802572e:	68eb      	ldr	r3, [r5, #12]
 8025730:	3301      	adds	r3, #1
 8025732:	60eb      	str	r3, [r5, #12]
 8025734:	e7ee      	b.n	8025714 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025736 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025736:	2200      	movs	r2, #0
 8025738:	6002      	str	r2, [r0, #0]
 802573a:	7102      	strb	r2, [r0, #4]
 802573c:	6102      	str	r2, [r0, #16]
 802573e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8025742:	4770      	bx	lr

08025744 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025744:	4770      	bx	lr

08025746 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025746:	6083      	str	r3, [r0, #8]
 8025748:	9b00      	ldr	r3, [sp, #0]
 802574a:	6001      	str	r1, [r0, #0]
 802574c:	60c3      	str	r3, [r0, #12]
 802574e:	9b01      	ldr	r3, [sp, #4]
 8025750:	7102      	strb	r2, [r0, #4]
 8025752:	6103      	str	r3, [r0, #16]
 8025754:	4770      	bx	lr

08025756 <__aeabi_atexit>:
 8025756:	460b      	mov	r3, r1
 8025758:	4601      	mov	r1, r0
 802575a:	4618      	mov	r0, r3
 802575c:	f000 b852 	b.w	8025804 <__cxa_atexit>

08025760 <__cxa_pure_virtual>:
 8025760:	b508      	push	{r3, lr}
 8025762:	f000 f81f 	bl	80257a4 <_ZSt9terminatev>

08025766 <_ZdlPvj>:
 8025766:	f000 b80f 	b.w	8025788 <_ZdlPv>

0802576a <__cxa_guard_acquire>:
 802576a:	6803      	ldr	r3, [r0, #0]
 802576c:	07db      	lsls	r3, r3, #31
 802576e:	d406      	bmi.n	802577e <__cxa_guard_acquire+0x14>
 8025770:	7843      	ldrb	r3, [r0, #1]
 8025772:	b103      	cbz	r3, 8025776 <__cxa_guard_acquire+0xc>
 8025774:	deff      	udf	#255	; 0xff
 8025776:	2301      	movs	r3, #1
 8025778:	7043      	strb	r3, [r0, #1]
 802577a:	4618      	mov	r0, r3
 802577c:	4770      	bx	lr
 802577e:	2000      	movs	r0, #0
 8025780:	4770      	bx	lr

08025782 <__cxa_guard_release>:
 8025782:	2301      	movs	r3, #1
 8025784:	6003      	str	r3, [r0, #0]
 8025786:	4770      	bx	lr

08025788 <_ZdlPv>:
 8025788:	f000 b88e 	b.w	80258a8 <free>

0802578c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802578c:	b508      	push	{r3, lr}
 802578e:	4780      	blx	r0
 8025790:	f000 f80d 	bl	80257ae <abort>

08025794 <_ZSt13get_terminatev>:
 8025794:	4b02      	ldr	r3, [pc, #8]	; (80257a0 <_ZSt13get_terminatev+0xc>)
 8025796:	6818      	ldr	r0, [r3, #0]
 8025798:	f3bf 8f5b 	dmb	ish
 802579c:	4770      	bx	lr
 802579e:	bf00      	nop
 80257a0:	200000a8 	.word	0x200000a8

080257a4 <_ZSt9terminatev>:
 80257a4:	b508      	push	{r3, lr}
 80257a6:	f7ff fff5 	bl	8025794 <_ZSt13get_terminatev>
 80257aa:	f7ff ffef 	bl	802578c <_ZN10__cxxabiv111__terminateEPFvvE>

080257ae <abort>:
 80257ae:	b508      	push	{r3, lr}
 80257b0:	2006      	movs	r0, #6
 80257b2:	f000 fc3d 	bl	8026030 <raise>
 80257b6:	2001      	movs	r0, #1
 80257b8:	f7de f87c 	bl	80038b4 <_exit>

080257bc <__assert_func>:
 80257bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80257be:	461c      	mov	r4, r3
 80257c0:	4b09      	ldr	r3, [pc, #36]	; (80257e8 <__assert_func+0x2c>)
 80257c2:	681b      	ldr	r3, [r3, #0]
 80257c4:	4605      	mov	r5, r0
 80257c6:	68d8      	ldr	r0, [r3, #12]
 80257c8:	b152      	cbz	r2, 80257e0 <__assert_func+0x24>
 80257ca:	4b08      	ldr	r3, [pc, #32]	; (80257ec <__assert_func+0x30>)
 80257cc:	9100      	str	r1, [sp, #0]
 80257ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80257d2:	4907      	ldr	r1, [pc, #28]	; (80257f0 <__assert_func+0x34>)
 80257d4:	462b      	mov	r3, r5
 80257d6:	4622      	mov	r2, r4
 80257d8:	f000 f828 	bl	802582c <fiprintf>
 80257dc:	f7ff ffe7 	bl	80257ae <abort>
 80257e0:	4b04      	ldr	r3, [pc, #16]	; (80257f4 <__assert_func+0x38>)
 80257e2:	461a      	mov	r2, r3
 80257e4:	e7f2      	b.n	80257cc <__assert_func+0x10>
 80257e6:	bf00      	nop
 80257e8:	200000ac 	.word	0x200000ac
 80257ec:	0802b7c4 	.word	0x0802b7c4
 80257f0:	0802b7d1 	.word	0x0802b7d1
 80257f4:	0802b7ff 	.word	0x0802b7ff

080257f8 <atexit>:
 80257f8:	2300      	movs	r3, #0
 80257fa:	4601      	mov	r1, r0
 80257fc:	461a      	mov	r2, r3
 80257fe:	4618      	mov	r0, r3
 8025800:	f000 bcf2 	b.w	80261e8 <__register_exitproc>

08025804 <__cxa_atexit>:
 8025804:	b510      	push	{r4, lr}
 8025806:	4c05      	ldr	r4, [pc, #20]	; (802581c <__cxa_atexit+0x18>)
 8025808:	4613      	mov	r3, r2
 802580a:	b12c      	cbz	r4, 8025818 <__cxa_atexit+0x14>
 802580c:	460a      	mov	r2, r1
 802580e:	4601      	mov	r1, r0
 8025810:	2002      	movs	r0, #2
 8025812:	f000 fce9 	bl	80261e8 <__register_exitproc>
 8025816:	bd10      	pop	{r4, pc}
 8025818:	4620      	mov	r0, r4
 802581a:	e7fc      	b.n	8025816 <__cxa_atexit+0x12>
 802581c:	080261e9 	.word	0x080261e9

08025820 <__errno>:
 8025820:	4b01      	ldr	r3, [pc, #4]	; (8025828 <__errno+0x8>)
 8025822:	6818      	ldr	r0, [r3, #0]
 8025824:	4770      	bx	lr
 8025826:	bf00      	nop
 8025828:	200000ac 	.word	0x200000ac

0802582c <fiprintf>:
 802582c:	b40e      	push	{r1, r2, r3}
 802582e:	b503      	push	{r0, r1, lr}
 8025830:	4601      	mov	r1, r0
 8025832:	ab03      	add	r3, sp, #12
 8025834:	4805      	ldr	r0, [pc, #20]	; (802584c <fiprintf+0x20>)
 8025836:	f853 2b04 	ldr.w	r2, [r3], #4
 802583a:	6800      	ldr	r0, [r0, #0]
 802583c:	9301      	str	r3, [sp, #4]
 802583e:	f000 f921 	bl	8025a84 <_vfiprintf_r>
 8025842:	b002      	add	sp, #8
 8025844:	f85d eb04 	ldr.w	lr, [sp], #4
 8025848:	b003      	add	sp, #12
 802584a:	4770      	bx	lr
 802584c:	200000ac 	.word	0x200000ac

08025850 <__libc_init_array>:
 8025850:	b570      	push	{r4, r5, r6, lr}
 8025852:	4e0d      	ldr	r6, [pc, #52]	; (8025888 <__libc_init_array+0x38>)
 8025854:	4c0d      	ldr	r4, [pc, #52]	; (802588c <__libc_init_array+0x3c>)
 8025856:	1ba4      	subs	r4, r4, r6
 8025858:	10a4      	asrs	r4, r4, #2
 802585a:	2500      	movs	r5, #0
 802585c:	42a5      	cmp	r5, r4
 802585e:	d109      	bne.n	8025874 <__libc_init_array+0x24>
 8025860:	4e0b      	ldr	r6, [pc, #44]	; (8025890 <__libc_init_array+0x40>)
 8025862:	4c0c      	ldr	r4, [pc, #48]	; (8025894 <__libc_init_array+0x44>)
 8025864:	f000 ffb0 	bl	80267c8 <_init>
 8025868:	1ba4      	subs	r4, r4, r6
 802586a:	10a4      	asrs	r4, r4, #2
 802586c:	2500      	movs	r5, #0
 802586e:	42a5      	cmp	r5, r4
 8025870:	d105      	bne.n	802587e <__libc_init_array+0x2e>
 8025872:	bd70      	pop	{r4, r5, r6, pc}
 8025874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025878:	4798      	blx	r3
 802587a:	3501      	adds	r5, #1
 802587c:	e7ee      	b.n	802585c <__libc_init_array+0xc>
 802587e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025882:	4798      	blx	r3
 8025884:	3501      	adds	r5, #1
 8025886:	e7f2      	b.n	802586e <__libc_init_array+0x1e>
 8025888:	08062cb4 	.word	0x08062cb4
 802588c:	08062cb4 	.word	0x08062cb4
 8025890:	08062cb4 	.word	0x08062cb4
 8025894:	08062cc8 	.word	0x08062cc8

08025898 <malloc>:
 8025898:	4b02      	ldr	r3, [pc, #8]	; (80258a4 <malloc+0xc>)
 802589a:	4601      	mov	r1, r0
 802589c:	6818      	ldr	r0, [r3, #0]
 802589e:	f000 b86d 	b.w	802597c <_malloc_r>
 80258a2:	bf00      	nop
 80258a4:	200000ac 	.word	0x200000ac

080258a8 <free>:
 80258a8:	4b02      	ldr	r3, [pc, #8]	; (80258b4 <free+0xc>)
 80258aa:	4601      	mov	r1, r0
 80258ac:	6818      	ldr	r0, [r3, #0]
 80258ae:	f000 b817 	b.w	80258e0 <_free_r>
 80258b2:	bf00      	nop
 80258b4:	200000ac 	.word	0x200000ac

080258b8 <memcpy>:
 80258b8:	b510      	push	{r4, lr}
 80258ba:	1e43      	subs	r3, r0, #1
 80258bc:	440a      	add	r2, r1
 80258be:	4291      	cmp	r1, r2
 80258c0:	d100      	bne.n	80258c4 <memcpy+0xc>
 80258c2:	bd10      	pop	{r4, pc}
 80258c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80258c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80258cc:	e7f7      	b.n	80258be <memcpy+0x6>

080258ce <memset>:
 80258ce:	4402      	add	r2, r0
 80258d0:	4603      	mov	r3, r0
 80258d2:	4293      	cmp	r3, r2
 80258d4:	d100      	bne.n	80258d8 <memset+0xa>
 80258d6:	4770      	bx	lr
 80258d8:	f803 1b01 	strb.w	r1, [r3], #1
 80258dc:	e7f9      	b.n	80258d2 <memset+0x4>
	...

080258e0 <_free_r>:
 80258e0:	b538      	push	{r3, r4, r5, lr}
 80258e2:	4605      	mov	r5, r0
 80258e4:	2900      	cmp	r1, #0
 80258e6:	d045      	beq.n	8025974 <_free_r+0x94>
 80258e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80258ec:	1f0c      	subs	r4, r1, #4
 80258ee:	2b00      	cmp	r3, #0
 80258f0:	bfb8      	it	lt
 80258f2:	18e4      	addlt	r4, r4, r3
 80258f4:	f000 feba 	bl	802666c <__malloc_lock>
 80258f8:	4a1f      	ldr	r2, [pc, #124]	; (8025978 <_free_r+0x98>)
 80258fa:	6813      	ldr	r3, [r2, #0]
 80258fc:	4610      	mov	r0, r2
 80258fe:	b933      	cbnz	r3, 802590e <_free_r+0x2e>
 8025900:	6063      	str	r3, [r4, #4]
 8025902:	6014      	str	r4, [r2, #0]
 8025904:	4628      	mov	r0, r5
 8025906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802590a:	f000 beb0 	b.w	802666e <__malloc_unlock>
 802590e:	42a3      	cmp	r3, r4
 8025910:	d90c      	bls.n	802592c <_free_r+0x4c>
 8025912:	6821      	ldr	r1, [r4, #0]
 8025914:	1862      	adds	r2, r4, r1
 8025916:	4293      	cmp	r3, r2
 8025918:	bf04      	itt	eq
 802591a:	681a      	ldreq	r2, [r3, #0]
 802591c:	685b      	ldreq	r3, [r3, #4]
 802591e:	6063      	str	r3, [r4, #4]
 8025920:	bf04      	itt	eq
 8025922:	1852      	addeq	r2, r2, r1
 8025924:	6022      	streq	r2, [r4, #0]
 8025926:	6004      	str	r4, [r0, #0]
 8025928:	e7ec      	b.n	8025904 <_free_r+0x24>
 802592a:	4613      	mov	r3, r2
 802592c:	685a      	ldr	r2, [r3, #4]
 802592e:	b10a      	cbz	r2, 8025934 <_free_r+0x54>
 8025930:	42a2      	cmp	r2, r4
 8025932:	d9fa      	bls.n	802592a <_free_r+0x4a>
 8025934:	6819      	ldr	r1, [r3, #0]
 8025936:	1858      	adds	r0, r3, r1
 8025938:	42a0      	cmp	r0, r4
 802593a:	d10b      	bne.n	8025954 <_free_r+0x74>
 802593c:	6820      	ldr	r0, [r4, #0]
 802593e:	4401      	add	r1, r0
 8025940:	1858      	adds	r0, r3, r1
 8025942:	4282      	cmp	r2, r0
 8025944:	6019      	str	r1, [r3, #0]
 8025946:	d1dd      	bne.n	8025904 <_free_r+0x24>
 8025948:	6810      	ldr	r0, [r2, #0]
 802594a:	6852      	ldr	r2, [r2, #4]
 802594c:	605a      	str	r2, [r3, #4]
 802594e:	4401      	add	r1, r0
 8025950:	6019      	str	r1, [r3, #0]
 8025952:	e7d7      	b.n	8025904 <_free_r+0x24>
 8025954:	d902      	bls.n	802595c <_free_r+0x7c>
 8025956:	230c      	movs	r3, #12
 8025958:	602b      	str	r3, [r5, #0]
 802595a:	e7d3      	b.n	8025904 <_free_r+0x24>
 802595c:	6820      	ldr	r0, [r4, #0]
 802595e:	1821      	adds	r1, r4, r0
 8025960:	428a      	cmp	r2, r1
 8025962:	bf04      	itt	eq
 8025964:	6811      	ldreq	r1, [r2, #0]
 8025966:	6852      	ldreq	r2, [r2, #4]
 8025968:	6062      	str	r2, [r4, #4]
 802596a:	bf04      	itt	eq
 802596c:	1809      	addeq	r1, r1, r0
 802596e:	6021      	streq	r1, [r4, #0]
 8025970:	605c      	str	r4, [r3, #4]
 8025972:	e7c7      	b.n	8025904 <_free_r+0x24>
 8025974:	bd38      	pop	{r3, r4, r5, pc}
 8025976:	bf00      	nop
 8025978:	2000bcb0 	.word	0x2000bcb0

0802597c <_malloc_r>:
 802597c:	b570      	push	{r4, r5, r6, lr}
 802597e:	1ccd      	adds	r5, r1, #3
 8025980:	f025 0503 	bic.w	r5, r5, #3
 8025984:	3508      	adds	r5, #8
 8025986:	2d0c      	cmp	r5, #12
 8025988:	bf38      	it	cc
 802598a:	250c      	movcc	r5, #12
 802598c:	2d00      	cmp	r5, #0
 802598e:	4606      	mov	r6, r0
 8025990:	db01      	blt.n	8025996 <_malloc_r+0x1a>
 8025992:	42a9      	cmp	r1, r5
 8025994:	d903      	bls.n	802599e <_malloc_r+0x22>
 8025996:	230c      	movs	r3, #12
 8025998:	6033      	str	r3, [r6, #0]
 802599a:	2000      	movs	r0, #0
 802599c:	bd70      	pop	{r4, r5, r6, pc}
 802599e:	f000 fe65 	bl	802666c <__malloc_lock>
 80259a2:	4a21      	ldr	r2, [pc, #132]	; (8025a28 <_malloc_r+0xac>)
 80259a4:	6814      	ldr	r4, [r2, #0]
 80259a6:	4621      	mov	r1, r4
 80259a8:	b991      	cbnz	r1, 80259d0 <_malloc_r+0x54>
 80259aa:	4c20      	ldr	r4, [pc, #128]	; (8025a2c <_malloc_r+0xb0>)
 80259ac:	6823      	ldr	r3, [r4, #0]
 80259ae:	b91b      	cbnz	r3, 80259b8 <_malloc_r+0x3c>
 80259b0:	4630      	mov	r0, r6
 80259b2:	f000 fb05 	bl	8025fc0 <_sbrk_r>
 80259b6:	6020      	str	r0, [r4, #0]
 80259b8:	4629      	mov	r1, r5
 80259ba:	4630      	mov	r0, r6
 80259bc:	f000 fb00 	bl	8025fc0 <_sbrk_r>
 80259c0:	1c43      	adds	r3, r0, #1
 80259c2:	d124      	bne.n	8025a0e <_malloc_r+0x92>
 80259c4:	230c      	movs	r3, #12
 80259c6:	6033      	str	r3, [r6, #0]
 80259c8:	4630      	mov	r0, r6
 80259ca:	f000 fe50 	bl	802666e <__malloc_unlock>
 80259ce:	e7e4      	b.n	802599a <_malloc_r+0x1e>
 80259d0:	680b      	ldr	r3, [r1, #0]
 80259d2:	1b5b      	subs	r3, r3, r5
 80259d4:	d418      	bmi.n	8025a08 <_malloc_r+0x8c>
 80259d6:	2b0b      	cmp	r3, #11
 80259d8:	d90f      	bls.n	80259fa <_malloc_r+0x7e>
 80259da:	600b      	str	r3, [r1, #0]
 80259dc:	50cd      	str	r5, [r1, r3]
 80259de:	18cc      	adds	r4, r1, r3
 80259e0:	4630      	mov	r0, r6
 80259e2:	f000 fe44 	bl	802666e <__malloc_unlock>
 80259e6:	f104 000b 	add.w	r0, r4, #11
 80259ea:	1d23      	adds	r3, r4, #4
 80259ec:	f020 0007 	bic.w	r0, r0, #7
 80259f0:	1ac3      	subs	r3, r0, r3
 80259f2:	d0d3      	beq.n	802599c <_malloc_r+0x20>
 80259f4:	425a      	negs	r2, r3
 80259f6:	50e2      	str	r2, [r4, r3]
 80259f8:	e7d0      	b.n	802599c <_malloc_r+0x20>
 80259fa:	428c      	cmp	r4, r1
 80259fc:	684b      	ldr	r3, [r1, #4]
 80259fe:	bf16      	itet	ne
 8025a00:	6063      	strne	r3, [r4, #4]
 8025a02:	6013      	streq	r3, [r2, #0]
 8025a04:	460c      	movne	r4, r1
 8025a06:	e7eb      	b.n	80259e0 <_malloc_r+0x64>
 8025a08:	460c      	mov	r4, r1
 8025a0a:	6849      	ldr	r1, [r1, #4]
 8025a0c:	e7cc      	b.n	80259a8 <_malloc_r+0x2c>
 8025a0e:	1cc4      	adds	r4, r0, #3
 8025a10:	f024 0403 	bic.w	r4, r4, #3
 8025a14:	42a0      	cmp	r0, r4
 8025a16:	d005      	beq.n	8025a24 <_malloc_r+0xa8>
 8025a18:	1a21      	subs	r1, r4, r0
 8025a1a:	4630      	mov	r0, r6
 8025a1c:	f000 fad0 	bl	8025fc0 <_sbrk_r>
 8025a20:	3001      	adds	r0, #1
 8025a22:	d0cf      	beq.n	80259c4 <_malloc_r+0x48>
 8025a24:	6025      	str	r5, [r4, #0]
 8025a26:	e7db      	b.n	80259e0 <_malloc_r+0x64>
 8025a28:	2000bcb0 	.word	0x2000bcb0
 8025a2c:	2000bcb4 	.word	0x2000bcb4

08025a30 <__sfputc_r>:
 8025a30:	6893      	ldr	r3, [r2, #8]
 8025a32:	3b01      	subs	r3, #1
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	b410      	push	{r4}
 8025a38:	6093      	str	r3, [r2, #8]
 8025a3a:	da08      	bge.n	8025a4e <__sfputc_r+0x1e>
 8025a3c:	6994      	ldr	r4, [r2, #24]
 8025a3e:	42a3      	cmp	r3, r4
 8025a40:	db01      	blt.n	8025a46 <__sfputc_r+0x16>
 8025a42:	290a      	cmp	r1, #10
 8025a44:	d103      	bne.n	8025a4e <__sfputc_r+0x1e>
 8025a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a4a:	f000 bb0d 	b.w	8026068 <__swbuf_r>
 8025a4e:	6813      	ldr	r3, [r2, #0]
 8025a50:	1c58      	adds	r0, r3, #1
 8025a52:	6010      	str	r0, [r2, #0]
 8025a54:	7019      	strb	r1, [r3, #0]
 8025a56:	4608      	mov	r0, r1
 8025a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a5c:	4770      	bx	lr

08025a5e <__sfputs_r>:
 8025a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a60:	4606      	mov	r6, r0
 8025a62:	460f      	mov	r7, r1
 8025a64:	4614      	mov	r4, r2
 8025a66:	18d5      	adds	r5, r2, r3
 8025a68:	42ac      	cmp	r4, r5
 8025a6a:	d101      	bne.n	8025a70 <__sfputs_r+0x12>
 8025a6c:	2000      	movs	r0, #0
 8025a6e:	e007      	b.n	8025a80 <__sfputs_r+0x22>
 8025a70:	463a      	mov	r2, r7
 8025a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a76:	4630      	mov	r0, r6
 8025a78:	f7ff ffda 	bl	8025a30 <__sfputc_r>
 8025a7c:	1c43      	adds	r3, r0, #1
 8025a7e:	d1f3      	bne.n	8025a68 <__sfputs_r+0xa>
 8025a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025a84 <_vfiprintf_r>:
 8025a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a88:	460c      	mov	r4, r1
 8025a8a:	b09d      	sub	sp, #116	; 0x74
 8025a8c:	4617      	mov	r7, r2
 8025a8e:	461d      	mov	r5, r3
 8025a90:	4606      	mov	r6, r0
 8025a92:	b118      	cbz	r0, 8025a9c <_vfiprintf_r+0x18>
 8025a94:	6983      	ldr	r3, [r0, #24]
 8025a96:	b90b      	cbnz	r3, 8025a9c <_vfiprintf_r+0x18>
 8025a98:	f000 fcfa 	bl	8026490 <__sinit>
 8025a9c:	4b7c      	ldr	r3, [pc, #496]	; (8025c90 <_vfiprintf_r+0x20c>)
 8025a9e:	429c      	cmp	r4, r3
 8025aa0:	d158      	bne.n	8025b54 <_vfiprintf_r+0xd0>
 8025aa2:	6874      	ldr	r4, [r6, #4]
 8025aa4:	89a3      	ldrh	r3, [r4, #12]
 8025aa6:	0718      	lsls	r0, r3, #28
 8025aa8:	d55e      	bpl.n	8025b68 <_vfiprintf_r+0xe4>
 8025aaa:	6923      	ldr	r3, [r4, #16]
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	d05b      	beq.n	8025b68 <_vfiprintf_r+0xe4>
 8025ab0:	2300      	movs	r3, #0
 8025ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ab4:	2320      	movs	r3, #32
 8025ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025aba:	2330      	movs	r3, #48	; 0x30
 8025abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025ac0:	9503      	str	r5, [sp, #12]
 8025ac2:	f04f 0b01 	mov.w	fp, #1
 8025ac6:	46b8      	mov	r8, r7
 8025ac8:	4645      	mov	r5, r8
 8025aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025ace:	b10b      	cbz	r3, 8025ad4 <_vfiprintf_r+0x50>
 8025ad0:	2b25      	cmp	r3, #37	; 0x25
 8025ad2:	d154      	bne.n	8025b7e <_vfiprintf_r+0xfa>
 8025ad4:	ebb8 0a07 	subs.w	sl, r8, r7
 8025ad8:	d00b      	beq.n	8025af2 <_vfiprintf_r+0x6e>
 8025ada:	4653      	mov	r3, sl
 8025adc:	463a      	mov	r2, r7
 8025ade:	4621      	mov	r1, r4
 8025ae0:	4630      	mov	r0, r6
 8025ae2:	f7ff ffbc 	bl	8025a5e <__sfputs_r>
 8025ae6:	3001      	adds	r0, #1
 8025ae8:	f000 80c2 	beq.w	8025c70 <_vfiprintf_r+0x1ec>
 8025aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025aee:	4453      	add	r3, sl
 8025af0:	9309      	str	r3, [sp, #36]	; 0x24
 8025af2:	f898 3000 	ldrb.w	r3, [r8]
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	f000 80ba 	beq.w	8025c70 <_vfiprintf_r+0x1ec>
 8025afc:	2300      	movs	r3, #0
 8025afe:	f04f 32ff 	mov.w	r2, #4294967295
 8025b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b06:	9304      	str	r3, [sp, #16]
 8025b08:	9307      	str	r3, [sp, #28]
 8025b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8025b10:	46a8      	mov	r8, r5
 8025b12:	2205      	movs	r2, #5
 8025b14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025b18:	485e      	ldr	r0, [pc, #376]	; (8025c94 <_vfiprintf_r+0x210>)
 8025b1a:	f7da fb79 	bl	8000210 <memchr>
 8025b1e:	9b04      	ldr	r3, [sp, #16]
 8025b20:	bb78      	cbnz	r0, 8025b82 <_vfiprintf_r+0xfe>
 8025b22:	06d9      	lsls	r1, r3, #27
 8025b24:	bf44      	itt	mi
 8025b26:	2220      	movmi	r2, #32
 8025b28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b2c:	071a      	lsls	r2, r3, #28
 8025b2e:	bf44      	itt	mi
 8025b30:	222b      	movmi	r2, #43	; 0x2b
 8025b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b36:	782a      	ldrb	r2, [r5, #0]
 8025b38:	2a2a      	cmp	r2, #42	; 0x2a
 8025b3a:	d02a      	beq.n	8025b92 <_vfiprintf_r+0x10e>
 8025b3c:	9a07      	ldr	r2, [sp, #28]
 8025b3e:	46a8      	mov	r8, r5
 8025b40:	2000      	movs	r0, #0
 8025b42:	250a      	movs	r5, #10
 8025b44:	4641      	mov	r1, r8
 8025b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025b4a:	3b30      	subs	r3, #48	; 0x30
 8025b4c:	2b09      	cmp	r3, #9
 8025b4e:	d969      	bls.n	8025c24 <_vfiprintf_r+0x1a0>
 8025b50:	b360      	cbz	r0, 8025bac <_vfiprintf_r+0x128>
 8025b52:	e024      	b.n	8025b9e <_vfiprintf_r+0x11a>
 8025b54:	4b50      	ldr	r3, [pc, #320]	; (8025c98 <_vfiprintf_r+0x214>)
 8025b56:	429c      	cmp	r4, r3
 8025b58:	d101      	bne.n	8025b5e <_vfiprintf_r+0xda>
 8025b5a:	68b4      	ldr	r4, [r6, #8]
 8025b5c:	e7a2      	b.n	8025aa4 <_vfiprintf_r+0x20>
 8025b5e:	4b4f      	ldr	r3, [pc, #316]	; (8025c9c <_vfiprintf_r+0x218>)
 8025b60:	429c      	cmp	r4, r3
 8025b62:	bf08      	it	eq
 8025b64:	68f4      	ldreq	r4, [r6, #12]
 8025b66:	e79d      	b.n	8025aa4 <_vfiprintf_r+0x20>
 8025b68:	4621      	mov	r1, r4
 8025b6a:	4630      	mov	r0, r6
 8025b6c:	f000 face 	bl	802610c <__swsetup_r>
 8025b70:	2800      	cmp	r0, #0
 8025b72:	d09d      	beq.n	8025ab0 <_vfiprintf_r+0x2c>
 8025b74:	f04f 30ff 	mov.w	r0, #4294967295
 8025b78:	b01d      	add	sp, #116	; 0x74
 8025b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b7e:	46a8      	mov	r8, r5
 8025b80:	e7a2      	b.n	8025ac8 <_vfiprintf_r+0x44>
 8025b82:	4a44      	ldr	r2, [pc, #272]	; (8025c94 <_vfiprintf_r+0x210>)
 8025b84:	1a80      	subs	r0, r0, r2
 8025b86:	fa0b f000 	lsl.w	r0, fp, r0
 8025b8a:	4318      	orrs	r0, r3
 8025b8c:	9004      	str	r0, [sp, #16]
 8025b8e:	4645      	mov	r5, r8
 8025b90:	e7be      	b.n	8025b10 <_vfiprintf_r+0x8c>
 8025b92:	9a03      	ldr	r2, [sp, #12]
 8025b94:	1d11      	adds	r1, r2, #4
 8025b96:	6812      	ldr	r2, [r2, #0]
 8025b98:	9103      	str	r1, [sp, #12]
 8025b9a:	2a00      	cmp	r2, #0
 8025b9c:	db01      	blt.n	8025ba2 <_vfiprintf_r+0x11e>
 8025b9e:	9207      	str	r2, [sp, #28]
 8025ba0:	e004      	b.n	8025bac <_vfiprintf_r+0x128>
 8025ba2:	4252      	negs	r2, r2
 8025ba4:	f043 0302 	orr.w	r3, r3, #2
 8025ba8:	9207      	str	r2, [sp, #28]
 8025baa:	9304      	str	r3, [sp, #16]
 8025bac:	f898 3000 	ldrb.w	r3, [r8]
 8025bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8025bb2:	d10e      	bne.n	8025bd2 <_vfiprintf_r+0x14e>
 8025bb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8025bba:	d138      	bne.n	8025c2e <_vfiprintf_r+0x1aa>
 8025bbc:	9b03      	ldr	r3, [sp, #12]
 8025bbe:	1d1a      	adds	r2, r3, #4
 8025bc0:	681b      	ldr	r3, [r3, #0]
 8025bc2:	9203      	str	r2, [sp, #12]
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	bfb8      	it	lt
 8025bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8025bcc:	f108 0802 	add.w	r8, r8, #2
 8025bd0:	9305      	str	r3, [sp, #20]
 8025bd2:	4d33      	ldr	r5, [pc, #204]	; (8025ca0 <_vfiprintf_r+0x21c>)
 8025bd4:	f898 1000 	ldrb.w	r1, [r8]
 8025bd8:	2203      	movs	r2, #3
 8025bda:	4628      	mov	r0, r5
 8025bdc:	f7da fb18 	bl	8000210 <memchr>
 8025be0:	b140      	cbz	r0, 8025bf4 <_vfiprintf_r+0x170>
 8025be2:	2340      	movs	r3, #64	; 0x40
 8025be4:	1b40      	subs	r0, r0, r5
 8025be6:	fa03 f000 	lsl.w	r0, r3, r0
 8025bea:	9b04      	ldr	r3, [sp, #16]
 8025bec:	4303      	orrs	r3, r0
 8025bee:	f108 0801 	add.w	r8, r8, #1
 8025bf2:	9304      	str	r3, [sp, #16]
 8025bf4:	f898 1000 	ldrb.w	r1, [r8]
 8025bf8:	482a      	ldr	r0, [pc, #168]	; (8025ca4 <_vfiprintf_r+0x220>)
 8025bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025bfe:	2206      	movs	r2, #6
 8025c00:	f108 0701 	add.w	r7, r8, #1
 8025c04:	f7da fb04 	bl	8000210 <memchr>
 8025c08:	2800      	cmp	r0, #0
 8025c0a:	d037      	beq.n	8025c7c <_vfiprintf_r+0x1f8>
 8025c0c:	4b26      	ldr	r3, [pc, #152]	; (8025ca8 <_vfiprintf_r+0x224>)
 8025c0e:	bb1b      	cbnz	r3, 8025c58 <_vfiprintf_r+0x1d4>
 8025c10:	9b03      	ldr	r3, [sp, #12]
 8025c12:	3307      	adds	r3, #7
 8025c14:	f023 0307 	bic.w	r3, r3, #7
 8025c18:	3308      	adds	r3, #8
 8025c1a:	9303      	str	r3, [sp, #12]
 8025c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c1e:	444b      	add	r3, r9
 8025c20:	9309      	str	r3, [sp, #36]	; 0x24
 8025c22:	e750      	b.n	8025ac6 <_vfiprintf_r+0x42>
 8025c24:	fb05 3202 	mla	r2, r5, r2, r3
 8025c28:	2001      	movs	r0, #1
 8025c2a:	4688      	mov	r8, r1
 8025c2c:	e78a      	b.n	8025b44 <_vfiprintf_r+0xc0>
 8025c2e:	2300      	movs	r3, #0
 8025c30:	f108 0801 	add.w	r8, r8, #1
 8025c34:	9305      	str	r3, [sp, #20]
 8025c36:	4619      	mov	r1, r3
 8025c38:	250a      	movs	r5, #10
 8025c3a:	4640      	mov	r0, r8
 8025c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025c40:	3a30      	subs	r2, #48	; 0x30
 8025c42:	2a09      	cmp	r2, #9
 8025c44:	d903      	bls.n	8025c4e <_vfiprintf_r+0x1ca>
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d0c3      	beq.n	8025bd2 <_vfiprintf_r+0x14e>
 8025c4a:	9105      	str	r1, [sp, #20]
 8025c4c:	e7c1      	b.n	8025bd2 <_vfiprintf_r+0x14e>
 8025c4e:	fb05 2101 	mla	r1, r5, r1, r2
 8025c52:	2301      	movs	r3, #1
 8025c54:	4680      	mov	r8, r0
 8025c56:	e7f0      	b.n	8025c3a <_vfiprintf_r+0x1b6>
 8025c58:	ab03      	add	r3, sp, #12
 8025c5a:	9300      	str	r3, [sp, #0]
 8025c5c:	4622      	mov	r2, r4
 8025c5e:	4b13      	ldr	r3, [pc, #76]	; (8025cac <_vfiprintf_r+0x228>)
 8025c60:	a904      	add	r1, sp, #16
 8025c62:	4630      	mov	r0, r6
 8025c64:	f3af 8000 	nop.w
 8025c68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025c6c:	4681      	mov	r9, r0
 8025c6e:	d1d5      	bne.n	8025c1c <_vfiprintf_r+0x198>
 8025c70:	89a3      	ldrh	r3, [r4, #12]
 8025c72:	065b      	lsls	r3, r3, #25
 8025c74:	f53f af7e 	bmi.w	8025b74 <_vfiprintf_r+0xf0>
 8025c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025c7a:	e77d      	b.n	8025b78 <_vfiprintf_r+0xf4>
 8025c7c:	ab03      	add	r3, sp, #12
 8025c7e:	9300      	str	r3, [sp, #0]
 8025c80:	4622      	mov	r2, r4
 8025c82:	4b0a      	ldr	r3, [pc, #40]	; (8025cac <_vfiprintf_r+0x228>)
 8025c84:	a904      	add	r1, sp, #16
 8025c86:	4630      	mov	r0, r6
 8025c88:	f000 f888 	bl	8025d9c <_printf_i>
 8025c8c:	e7ec      	b.n	8025c68 <_vfiprintf_r+0x1e4>
 8025c8e:	bf00      	nop
 8025c90:	0802b85c 	.word	0x0802b85c
 8025c94:	0802b804 	.word	0x0802b804
 8025c98:	0802b87c 	.word	0x0802b87c
 8025c9c:	0802b83c 	.word	0x0802b83c
 8025ca0:	0802b80a 	.word	0x0802b80a
 8025ca4:	0802b80e 	.word	0x0802b80e
 8025ca8:	00000000 	.word	0x00000000
 8025cac:	08025a5f 	.word	0x08025a5f

08025cb0 <_printf_common>:
 8025cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025cb4:	4691      	mov	r9, r2
 8025cb6:	461f      	mov	r7, r3
 8025cb8:	688a      	ldr	r2, [r1, #8]
 8025cba:	690b      	ldr	r3, [r1, #16]
 8025cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025cc0:	4293      	cmp	r3, r2
 8025cc2:	bfb8      	it	lt
 8025cc4:	4613      	movlt	r3, r2
 8025cc6:	f8c9 3000 	str.w	r3, [r9]
 8025cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025cce:	4606      	mov	r6, r0
 8025cd0:	460c      	mov	r4, r1
 8025cd2:	b112      	cbz	r2, 8025cda <_printf_common+0x2a>
 8025cd4:	3301      	adds	r3, #1
 8025cd6:	f8c9 3000 	str.w	r3, [r9]
 8025cda:	6823      	ldr	r3, [r4, #0]
 8025cdc:	0699      	lsls	r1, r3, #26
 8025cde:	bf42      	ittt	mi
 8025ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025ce4:	3302      	addmi	r3, #2
 8025ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8025cea:	6825      	ldr	r5, [r4, #0]
 8025cec:	f015 0506 	ands.w	r5, r5, #6
 8025cf0:	d107      	bne.n	8025d02 <_printf_common+0x52>
 8025cf2:	f104 0a19 	add.w	sl, r4, #25
 8025cf6:	68e3      	ldr	r3, [r4, #12]
 8025cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8025cfc:	1a9b      	subs	r3, r3, r2
 8025cfe:	42ab      	cmp	r3, r5
 8025d00:	dc28      	bgt.n	8025d54 <_printf_common+0xa4>
 8025d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025d06:	6822      	ldr	r2, [r4, #0]
 8025d08:	3300      	adds	r3, #0
 8025d0a:	bf18      	it	ne
 8025d0c:	2301      	movne	r3, #1
 8025d0e:	0692      	lsls	r2, r2, #26
 8025d10:	d42d      	bmi.n	8025d6e <_printf_common+0xbe>
 8025d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025d16:	4639      	mov	r1, r7
 8025d18:	4630      	mov	r0, r6
 8025d1a:	47c0      	blx	r8
 8025d1c:	3001      	adds	r0, #1
 8025d1e:	d020      	beq.n	8025d62 <_printf_common+0xb2>
 8025d20:	6823      	ldr	r3, [r4, #0]
 8025d22:	68e5      	ldr	r5, [r4, #12]
 8025d24:	f8d9 2000 	ldr.w	r2, [r9]
 8025d28:	f003 0306 	and.w	r3, r3, #6
 8025d2c:	2b04      	cmp	r3, #4
 8025d2e:	bf08      	it	eq
 8025d30:	1aad      	subeq	r5, r5, r2
 8025d32:	68a3      	ldr	r3, [r4, #8]
 8025d34:	6922      	ldr	r2, [r4, #16]
 8025d36:	bf0c      	ite	eq
 8025d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025d3c:	2500      	movne	r5, #0
 8025d3e:	4293      	cmp	r3, r2
 8025d40:	bfc4      	itt	gt
 8025d42:	1a9b      	subgt	r3, r3, r2
 8025d44:	18ed      	addgt	r5, r5, r3
 8025d46:	f04f 0900 	mov.w	r9, #0
 8025d4a:	341a      	adds	r4, #26
 8025d4c:	454d      	cmp	r5, r9
 8025d4e:	d11a      	bne.n	8025d86 <_printf_common+0xd6>
 8025d50:	2000      	movs	r0, #0
 8025d52:	e008      	b.n	8025d66 <_printf_common+0xb6>
 8025d54:	2301      	movs	r3, #1
 8025d56:	4652      	mov	r2, sl
 8025d58:	4639      	mov	r1, r7
 8025d5a:	4630      	mov	r0, r6
 8025d5c:	47c0      	blx	r8
 8025d5e:	3001      	adds	r0, #1
 8025d60:	d103      	bne.n	8025d6a <_printf_common+0xba>
 8025d62:	f04f 30ff 	mov.w	r0, #4294967295
 8025d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d6a:	3501      	adds	r5, #1
 8025d6c:	e7c3      	b.n	8025cf6 <_printf_common+0x46>
 8025d6e:	18e1      	adds	r1, r4, r3
 8025d70:	1c5a      	adds	r2, r3, #1
 8025d72:	2030      	movs	r0, #48	; 0x30
 8025d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025d78:	4422      	add	r2, r4
 8025d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025d82:	3302      	adds	r3, #2
 8025d84:	e7c5      	b.n	8025d12 <_printf_common+0x62>
 8025d86:	2301      	movs	r3, #1
 8025d88:	4622      	mov	r2, r4
 8025d8a:	4639      	mov	r1, r7
 8025d8c:	4630      	mov	r0, r6
 8025d8e:	47c0      	blx	r8
 8025d90:	3001      	adds	r0, #1
 8025d92:	d0e6      	beq.n	8025d62 <_printf_common+0xb2>
 8025d94:	f109 0901 	add.w	r9, r9, #1
 8025d98:	e7d8      	b.n	8025d4c <_printf_common+0x9c>
	...

08025d9c <_printf_i>:
 8025d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025da0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025da4:	460c      	mov	r4, r1
 8025da6:	7e09      	ldrb	r1, [r1, #24]
 8025da8:	b085      	sub	sp, #20
 8025daa:	296e      	cmp	r1, #110	; 0x6e
 8025dac:	4617      	mov	r7, r2
 8025dae:	4606      	mov	r6, r0
 8025db0:	4698      	mov	r8, r3
 8025db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025db4:	f000 80b3 	beq.w	8025f1e <_printf_i+0x182>
 8025db8:	d822      	bhi.n	8025e00 <_printf_i+0x64>
 8025dba:	2963      	cmp	r1, #99	; 0x63
 8025dbc:	d036      	beq.n	8025e2c <_printf_i+0x90>
 8025dbe:	d80a      	bhi.n	8025dd6 <_printf_i+0x3a>
 8025dc0:	2900      	cmp	r1, #0
 8025dc2:	f000 80b9 	beq.w	8025f38 <_printf_i+0x19c>
 8025dc6:	2958      	cmp	r1, #88	; 0x58
 8025dc8:	f000 8083 	beq.w	8025ed2 <_printf_i+0x136>
 8025dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025dd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025dd4:	e032      	b.n	8025e3c <_printf_i+0xa0>
 8025dd6:	2964      	cmp	r1, #100	; 0x64
 8025dd8:	d001      	beq.n	8025dde <_printf_i+0x42>
 8025dda:	2969      	cmp	r1, #105	; 0x69
 8025ddc:	d1f6      	bne.n	8025dcc <_printf_i+0x30>
 8025dde:	6820      	ldr	r0, [r4, #0]
 8025de0:	6813      	ldr	r3, [r2, #0]
 8025de2:	0605      	lsls	r5, r0, #24
 8025de4:	f103 0104 	add.w	r1, r3, #4
 8025de8:	d52a      	bpl.n	8025e40 <_printf_i+0xa4>
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	6011      	str	r1, [r2, #0]
 8025dee:	2b00      	cmp	r3, #0
 8025df0:	da03      	bge.n	8025dfa <_printf_i+0x5e>
 8025df2:	222d      	movs	r2, #45	; 0x2d
 8025df4:	425b      	negs	r3, r3
 8025df6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025dfa:	486f      	ldr	r0, [pc, #444]	; (8025fb8 <_printf_i+0x21c>)
 8025dfc:	220a      	movs	r2, #10
 8025dfe:	e039      	b.n	8025e74 <_printf_i+0xd8>
 8025e00:	2973      	cmp	r1, #115	; 0x73
 8025e02:	f000 809d 	beq.w	8025f40 <_printf_i+0x1a4>
 8025e06:	d808      	bhi.n	8025e1a <_printf_i+0x7e>
 8025e08:	296f      	cmp	r1, #111	; 0x6f
 8025e0a:	d020      	beq.n	8025e4e <_printf_i+0xb2>
 8025e0c:	2970      	cmp	r1, #112	; 0x70
 8025e0e:	d1dd      	bne.n	8025dcc <_printf_i+0x30>
 8025e10:	6823      	ldr	r3, [r4, #0]
 8025e12:	f043 0320 	orr.w	r3, r3, #32
 8025e16:	6023      	str	r3, [r4, #0]
 8025e18:	e003      	b.n	8025e22 <_printf_i+0x86>
 8025e1a:	2975      	cmp	r1, #117	; 0x75
 8025e1c:	d017      	beq.n	8025e4e <_printf_i+0xb2>
 8025e1e:	2978      	cmp	r1, #120	; 0x78
 8025e20:	d1d4      	bne.n	8025dcc <_printf_i+0x30>
 8025e22:	2378      	movs	r3, #120	; 0x78
 8025e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025e28:	4864      	ldr	r0, [pc, #400]	; (8025fbc <_printf_i+0x220>)
 8025e2a:	e055      	b.n	8025ed8 <_printf_i+0x13c>
 8025e2c:	6813      	ldr	r3, [r2, #0]
 8025e2e:	1d19      	adds	r1, r3, #4
 8025e30:	681b      	ldr	r3, [r3, #0]
 8025e32:	6011      	str	r1, [r2, #0]
 8025e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025e3c:	2301      	movs	r3, #1
 8025e3e:	e08c      	b.n	8025f5a <_printf_i+0x1be>
 8025e40:	681b      	ldr	r3, [r3, #0]
 8025e42:	6011      	str	r1, [r2, #0]
 8025e44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025e48:	bf18      	it	ne
 8025e4a:	b21b      	sxthne	r3, r3
 8025e4c:	e7cf      	b.n	8025dee <_printf_i+0x52>
 8025e4e:	6813      	ldr	r3, [r2, #0]
 8025e50:	6825      	ldr	r5, [r4, #0]
 8025e52:	1d18      	adds	r0, r3, #4
 8025e54:	6010      	str	r0, [r2, #0]
 8025e56:	0628      	lsls	r0, r5, #24
 8025e58:	d501      	bpl.n	8025e5e <_printf_i+0xc2>
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	e002      	b.n	8025e64 <_printf_i+0xc8>
 8025e5e:	0668      	lsls	r0, r5, #25
 8025e60:	d5fb      	bpl.n	8025e5a <_printf_i+0xbe>
 8025e62:	881b      	ldrh	r3, [r3, #0]
 8025e64:	4854      	ldr	r0, [pc, #336]	; (8025fb8 <_printf_i+0x21c>)
 8025e66:	296f      	cmp	r1, #111	; 0x6f
 8025e68:	bf14      	ite	ne
 8025e6a:	220a      	movne	r2, #10
 8025e6c:	2208      	moveq	r2, #8
 8025e6e:	2100      	movs	r1, #0
 8025e70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025e74:	6865      	ldr	r5, [r4, #4]
 8025e76:	60a5      	str	r5, [r4, #8]
 8025e78:	2d00      	cmp	r5, #0
 8025e7a:	f2c0 8095 	blt.w	8025fa8 <_printf_i+0x20c>
 8025e7e:	6821      	ldr	r1, [r4, #0]
 8025e80:	f021 0104 	bic.w	r1, r1, #4
 8025e84:	6021      	str	r1, [r4, #0]
 8025e86:	2b00      	cmp	r3, #0
 8025e88:	d13d      	bne.n	8025f06 <_printf_i+0x16a>
 8025e8a:	2d00      	cmp	r5, #0
 8025e8c:	f040 808e 	bne.w	8025fac <_printf_i+0x210>
 8025e90:	4665      	mov	r5, ip
 8025e92:	2a08      	cmp	r2, #8
 8025e94:	d10b      	bne.n	8025eae <_printf_i+0x112>
 8025e96:	6823      	ldr	r3, [r4, #0]
 8025e98:	07db      	lsls	r3, r3, #31
 8025e9a:	d508      	bpl.n	8025eae <_printf_i+0x112>
 8025e9c:	6923      	ldr	r3, [r4, #16]
 8025e9e:	6862      	ldr	r2, [r4, #4]
 8025ea0:	429a      	cmp	r2, r3
 8025ea2:	bfde      	ittt	le
 8025ea4:	2330      	movle	r3, #48	; 0x30
 8025ea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025eaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025eae:	ebac 0305 	sub.w	r3, ip, r5
 8025eb2:	6123      	str	r3, [r4, #16]
 8025eb4:	f8cd 8000 	str.w	r8, [sp]
 8025eb8:	463b      	mov	r3, r7
 8025eba:	aa03      	add	r2, sp, #12
 8025ebc:	4621      	mov	r1, r4
 8025ebe:	4630      	mov	r0, r6
 8025ec0:	f7ff fef6 	bl	8025cb0 <_printf_common>
 8025ec4:	3001      	adds	r0, #1
 8025ec6:	d14d      	bne.n	8025f64 <_printf_i+0x1c8>
 8025ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8025ecc:	b005      	add	sp, #20
 8025ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ed2:	4839      	ldr	r0, [pc, #228]	; (8025fb8 <_printf_i+0x21c>)
 8025ed4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025ed8:	6813      	ldr	r3, [r2, #0]
 8025eda:	6821      	ldr	r1, [r4, #0]
 8025edc:	1d1d      	adds	r5, r3, #4
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	6015      	str	r5, [r2, #0]
 8025ee2:	060a      	lsls	r2, r1, #24
 8025ee4:	d50b      	bpl.n	8025efe <_printf_i+0x162>
 8025ee6:	07ca      	lsls	r2, r1, #31
 8025ee8:	bf44      	itt	mi
 8025eea:	f041 0120 	orrmi.w	r1, r1, #32
 8025eee:	6021      	strmi	r1, [r4, #0]
 8025ef0:	b91b      	cbnz	r3, 8025efa <_printf_i+0x15e>
 8025ef2:	6822      	ldr	r2, [r4, #0]
 8025ef4:	f022 0220 	bic.w	r2, r2, #32
 8025ef8:	6022      	str	r2, [r4, #0]
 8025efa:	2210      	movs	r2, #16
 8025efc:	e7b7      	b.n	8025e6e <_printf_i+0xd2>
 8025efe:	064d      	lsls	r5, r1, #25
 8025f00:	bf48      	it	mi
 8025f02:	b29b      	uxthmi	r3, r3
 8025f04:	e7ef      	b.n	8025ee6 <_printf_i+0x14a>
 8025f06:	4665      	mov	r5, ip
 8025f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8025f0c:	fb02 3311 	mls	r3, r2, r1, r3
 8025f10:	5cc3      	ldrb	r3, [r0, r3]
 8025f12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025f16:	460b      	mov	r3, r1
 8025f18:	2900      	cmp	r1, #0
 8025f1a:	d1f5      	bne.n	8025f08 <_printf_i+0x16c>
 8025f1c:	e7b9      	b.n	8025e92 <_printf_i+0xf6>
 8025f1e:	6813      	ldr	r3, [r2, #0]
 8025f20:	6825      	ldr	r5, [r4, #0]
 8025f22:	6961      	ldr	r1, [r4, #20]
 8025f24:	1d18      	adds	r0, r3, #4
 8025f26:	6010      	str	r0, [r2, #0]
 8025f28:	0628      	lsls	r0, r5, #24
 8025f2a:	681b      	ldr	r3, [r3, #0]
 8025f2c:	d501      	bpl.n	8025f32 <_printf_i+0x196>
 8025f2e:	6019      	str	r1, [r3, #0]
 8025f30:	e002      	b.n	8025f38 <_printf_i+0x19c>
 8025f32:	066a      	lsls	r2, r5, #25
 8025f34:	d5fb      	bpl.n	8025f2e <_printf_i+0x192>
 8025f36:	8019      	strh	r1, [r3, #0]
 8025f38:	2300      	movs	r3, #0
 8025f3a:	6123      	str	r3, [r4, #16]
 8025f3c:	4665      	mov	r5, ip
 8025f3e:	e7b9      	b.n	8025eb4 <_printf_i+0x118>
 8025f40:	6813      	ldr	r3, [r2, #0]
 8025f42:	1d19      	adds	r1, r3, #4
 8025f44:	6011      	str	r1, [r2, #0]
 8025f46:	681d      	ldr	r5, [r3, #0]
 8025f48:	6862      	ldr	r2, [r4, #4]
 8025f4a:	2100      	movs	r1, #0
 8025f4c:	4628      	mov	r0, r5
 8025f4e:	f7da f95f 	bl	8000210 <memchr>
 8025f52:	b108      	cbz	r0, 8025f58 <_printf_i+0x1bc>
 8025f54:	1b40      	subs	r0, r0, r5
 8025f56:	6060      	str	r0, [r4, #4]
 8025f58:	6863      	ldr	r3, [r4, #4]
 8025f5a:	6123      	str	r3, [r4, #16]
 8025f5c:	2300      	movs	r3, #0
 8025f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025f62:	e7a7      	b.n	8025eb4 <_printf_i+0x118>
 8025f64:	6923      	ldr	r3, [r4, #16]
 8025f66:	462a      	mov	r2, r5
 8025f68:	4639      	mov	r1, r7
 8025f6a:	4630      	mov	r0, r6
 8025f6c:	47c0      	blx	r8
 8025f6e:	3001      	adds	r0, #1
 8025f70:	d0aa      	beq.n	8025ec8 <_printf_i+0x12c>
 8025f72:	6823      	ldr	r3, [r4, #0]
 8025f74:	079b      	lsls	r3, r3, #30
 8025f76:	d413      	bmi.n	8025fa0 <_printf_i+0x204>
 8025f78:	68e0      	ldr	r0, [r4, #12]
 8025f7a:	9b03      	ldr	r3, [sp, #12]
 8025f7c:	4298      	cmp	r0, r3
 8025f7e:	bfb8      	it	lt
 8025f80:	4618      	movlt	r0, r3
 8025f82:	e7a3      	b.n	8025ecc <_printf_i+0x130>
 8025f84:	2301      	movs	r3, #1
 8025f86:	464a      	mov	r2, r9
 8025f88:	4639      	mov	r1, r7
 8025f8a:	4630      	mov	r0, r6
 8025f8c:	47c0      	blx	r8
 8025f8e:	3001      	adds	r0, #1
 8025f90:	d09a      	beq.n	8025ec8 <_printf_i+0x12c>
 8025f92:	3501      	adds	r5, #1
 8025f94:	68e3      	ldr	r3, [r4, #12]
 8025f96:	9a03      	ldr	r2, [sp, #12]
 8025f98:	1a9b      	subs	r3, r3, r2
 8025f9a:	42ab      	cmp	r3, r5
 8025f9c:	dcf2      	bgt.n	8025f84 <_printf_i+0x1e8>
 8025f9e:	e7eb      	b.n	8025f78 <_printf_i+0x1dc>
 8025fa0:	2500      	movs	r5, #0
 8025fa2:	f104 0919 	add.w	r9, r4, #25
 8025fa6:	e7f5      	b.n	8025f94 <_printf_i+0x1f8>
 8025fa8:	2b00      	cmp	r3, #0
 8025faa:	d1ac      	bne.n	8025f06 <_printf_i+0x16a>
 8025fac:	7803      	ldrb	r3, [r0, #0]
 8025fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025fb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025fb6:	e76c      	b.n	8025e92 <_printf_i+0xf6>
 8025fb8:	0802b815 	.word	0x0802b815
 8025fbc:	0802b826 	.word	0x0802b826

08025fc0 <_sbrk_r>:
 8025fc0:	b538      	push	{r3, r4, r5, lr}
 8025fc2:	4c06      	ldr	r4, [pc, #24]	; (8025fdc <_sbrk_r+0x1c>)
 8025fc4:	2300      	movs	r3, #0
 8025fc6:	4605      	mov	r5, r0
 8025fc8:	4608      	mov	r0, r1
 8025fca:	6023      	str	r3, [r4, #0]
 8025fcc:	f7dd fcea 	bl	80039a4 <_sbrk>
 8025fd0:	1c43      	adds	r3, r0, #1
 8025fd2:	d102      	bne.n	8025fda <_sbrk_r+0x1a>
 8025fd4:	6823      	ldr	r3, [r4, #0]
 8025fd6:	b103      	cbz	r3, 8025fda <_sbrk_r+0x1a>
 8025fd8:	602b      	str	r3, [r5, #0]
 8025fda:	bd38      	pop	{r3, r4, r5, pc}
 8025fdc:	2000ca54 	.word	0x2000ca54

08025fe0 <_raise_r>:
 8025fe0:	291f      	cmp	r1, #31
 8025fe2:	b538      	push	{r3, r4, r5, lr}
 8025fe4:	4604      	mov	r4, r0
 8025fe6:	460d      	mov	r5, r1
 8025fe8:	d904      	bls.n	8025ff4 <_raise_r+0x14>
 8025fea:	2316      	movs	r3, #22
 8025fec:	6003      	str	r3, [r0, #0]
 8025fee:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff2:	bd38      	pop	{r3, r4, r5, pc}
 8025ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025ff6:	b112      	cbz	r2, 8025ffe <_raise_r+0x1e>
 8025ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025ffc:	b94b      	cbnz	r3, 8026012 <_raise_r+0x32>
 8025ffe:	4620      	mov	r0, r4
 8026000:	f000 f830 	bl	8026064 <_getpid_r>
 8026004:	462a      	mov	r2, r5
 8026006:	4601      	mov	r1, r0
 8026008:	4620      	mov	r0, r4
 802600a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802600e:	f000 b817 	b.w	8026040 <_kill_r>
 8026012:	2b01      	cmp	r3, #1
 8026014:	d00a      	beq.n	802602c <_raise_r+0x4c>
 8026016:	1c59      	adds	r1, r3, #1
 8026018:	d103      	bne.n	8026022 <_raise_r+0x42>
 802601a:	2316      	movs	r3, #22
 802601c:	6003      	str	r3, [r0, #0]
 802601e:	2001      	movs	r0, #1
 8026020:	e7e7      	b.n	8025ff2 <_raise_r+0x12>
 8026022:	2400      	movs	r4, #0
 8026024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026028:	4628      	mov	r0, r5
 802602a:	4798      	blx	r3
 802602c:	2000      	movs	r0, #0
 802602e:	e7e0      	b.n	8025ff2 <_raise_r+0x12>

08026030 <raise>:
 8026030:	4b02      	ldr	r3, [pc, #8]	; (802603c <raise+0xc>)
 8026032:	4601      	mov	r1, r0
 8026034:	6818      	ldr	r0, [r3, #0]
 8026036:	f7ff bfd3 	b.w	8025fe0 <_raise_r>
 802603a:	bf00      	nop
 802603c:	200000ac 	.word	0x200000ac

08026040 <_kill_r>:
 8026040:	b538      	push	{r3, r4, r5, lr}
 8026042:	4c07      	ldr	r4, [pc, #28]	; (8026060 <_kill_r+0x20>)
 8026044:	2300      	movs	r3, #0
 8026046:	4605      	mov	r5, r0
 8026048:	4608      	mov	r0, r1
 802604a:	4611      	mov	r1, r2
 802604c:	6023      	str	r3, [r4, #0]
 802604e:	f7dd fc21 	bl	8003894 <_kill>
 8026052:	1c43      	adds	r3, r0, #1
 8026054:	d102      	bne.n	802605c <_kill_r+0x1c>
 8026056:	6823      	ldr	r3, [r4, #0]
 8026058:	b103      	cbz	r3, 802605c <_kill_r+0x1c>
 802605a:	602b      	str	r3, [r5, #0]
 802605c:	bd38      	pop	{r3, r4, r5, pc}
 802605e:	bf00      	nop
 8026060:	2000ca54 	.word	0x2000ca54

08026064 <_getpid_r>:
 8026064:	f7dd bc0e 	b.w	8003884 <_getpid>

08026068 <__swbuf_r>:
 8026068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802606a:	460e      	mov	r6, r1
 802606c:	4614      	mov	r4, r2
 802606e:	4605      	mov	r5, r0
 8026070:	b118      	cbz	r0, 802607a <__swbuf_r+0x12>
 8026072:	6983      	ldr	r3, [r0, #24]
 8026074:	b90b      	cbnz	r3, 802607a <__swbuf_r+0x12>
 8026076:	f000 fa0b 	bl	8026490 <__sinit>
 802607a:	4b21      	ldr	r3, [pc, #132]	; (8026100 <__swbuf_r+0x98>)
 802607c:	429c      	cmp	r4, r3
 802607e:	d12a      	bne.n	80260d6 <__swbuf_r+0x6e>
 8026080:	686c      	ldr	r4, [r5, #4]
 8026082:	69a3      	ldr	r3, [r4, #24]
 8026084:	60a3      	str	r3, [r4, #8]
 8026086:	89a3      	ldrh	r3, [r4, #12]
 8026088:	071a      	lsls	r2, r3, #28
 802608a:	d52e      	bpl.n	80260ea <__swbuf_r+0x82>
 802608c:	6923      	ldr	r3, [r4, #16]
 802608e:	b363      	cbz	r3, 80260ea <__swbuf_r+0x82>
 8026090:	6923      	ldr	r3, [r4, #16]
 8026092:	6820      	ldr	r0, [r4, #0]
 8026094:	1ac0      	subs	r0, r0, r3
 8026096:	6963      	ldr	r3, [r4, #20]
 8026098:	b2f6      	uxtb	r6, r6
 802609a:	4283      	cmp	r3, r0
 802609c:	4637      	mov	r7, r6
 802609e:	dc04      	bgt.n	80260aa <__swbuf_r+0x42>
 80260a0:	4621      	mov	r1, r4
 80260a2:	4628      	mov	r0, r5
 80260a4:	f000 f98a 	bl	80263bc <_fflush_r>
 80260a8:	bb28      	cbnz	r0, 80260f6 <__swbuf_r+0x8e>
 80260aa:	68a3      	ldr	r3, [r4, #8]
 80260ac:	3b01      	subs	r3, #1
 80260ae:	60a3      	str	r3, [r4, #8]
 80260b0:	6823      	ldr	r3, [r4, #0]
 80260b2:	1c5a      	adds	r2, r3, #1
 80260b4:	6022      	str	r2, [r4, #0]
 80260b6:	701e      	strb	r6, [r3, #0]
 80260b8:	6963      	ldr	r3, [r4, #20]
 80260ba:	3001      	adds	r0, #1
 80260bc:	4283      	cmp	r3, r0
 80260be:	d004      	beq.n	80260ca <__swbuf_r+0x62>
 80260c0:	89a3      	ldrh	r3, [r4, #12]
 80260c2:	07db      	lsls	r3, r3, #31
 80260c4:	d519      	bpl.n	80260fa <__swbuf_r+0x92>
 80260c6:	2e0a      	cmp	r6, #10
 80260c8:	d117      	bne.n	80260fa <__swbuf_r+0x92>
 80260ca:	4621      	mov	r1, r4
 80260cc:	4628      	mov	r0, r5
 80260ce:	f000 f975 	bl	80263bc <_fflush_r>
 80260d2:	b190      	cbz	r0, 80260fa <__swbuf_r+0x92>
 80260d4:	e00f      	b.n	80260f6 <__swbuf_r+0x8e>
 80260d6:	4b0b      	ldr	r3, [pc, #44]	; (8026104 <__swbuf_r+0x9c>)
 80260d8:	429c      	cmp	r4, r3
 80260da:	d101      	bne.n	80260e0 <__swbuf_r+0x78>
 80260dc:	68ac      	ldr	r4, [r5, #8]
 80260de:	e7d0      	b.n	8026082 <__swbuf_r+0x1a>
 80260e0:	4b09      	ldr	r3, [pc, #36]	; (8026108 <__swbuf_r+0xa0>)
 80260e2:	429c      	cmp	r4, r3
 80260e4:	bf08      	it	eq
 80260e6:	68ec      	ldreq	r4, [r5, #12]
 80260e8:	e7cb      	b.n	8026082 <__swbuf_r+0x1a>
 80260ea:	4621      	mov	r1, r4
 80260ec:	4628      	mov	r0, r5
 80260ee:	f000 f80d 	bl	802610c <__swsetup_r>
 80260f2:	2800      	cmp	r0, #0
 80260f4:	d0cc      	beq.n	8026090 <__swbuf_r+0x28>
 80260f6:	f04f 37ff 	mov.w	r7, #4294967295
 80260fa:	4638      	mov	r0, r7
 80260fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260fe:	bf00      	nop
 8026100:	0802b85c 	.word	0x0802b85c
 8026104:	0802b87c 	.word	0x0802b87c
 8026108:	0802b83c 	.word	0x0802b83c

0802610c <__swsetup_r>:
 802610c:	4b32      	ldr	r3, [pc, #200]	; (80261d8 <__swsetup_r+0xcc>)
 802610e:	b570      	push	{r4, r5, r6, lr}
 8026110:	681d      	ldr	r5, [r3, #0]
 8026112:	4606      	mov	r6, r0
 8026114:	460c      	mov	r4, r1
 8026116:	b125      	cbz	r5, 8026122 <__swsetup_r+0x16>
 8026118:	69ab      	ldr	r3, [r5, #24]
 802611a:	b913      	cbnz	r3, 8026122 <__swsetup_r+0x16>
 802611c:	4628      	mov	r0, r5
 802611e:	f000 f9b7 	bl	8026490 <__sinit>
 8026122:	4b2e      	ldr	r3, [pc, #184]	; (80261dc <__swsetup_r+0xd0>)
 8026124:	429c      	cmp	r4, r3
 8026126:	d10f      	bne.n	8026148 <__swsetup_r+0x3c>
 8026128:	686c      	ldr	r4, [r5, #4]
 802612a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802612e:	b29a      	uxth	r2, r3
 8026130:	0715      	lsls	r5, r2, #28
 8026132:	d42c      	bmi.n	802618e <__swsetup_r+0x82>
 8026134:	06d0      	lsls	r0, r2, #27
 8026136:	d411      	bmi.n	802615c <__swsetup_r+0x50>
 8026138:	2209      	movs	r2, #9
 802613a:	6032      	str	r2, [r6, #0]
 802613c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026140:	81a3      	strh	r3, [r4, #12]
 8026142:	f04f 30ff 	mov.w	r0, #4294967295
 8026146:	e03e      	b.n	80261c6 <__swsetup_r+0xba>
 8026148:	4b25      	ldr	r3, [pc, #148]	; (80261e0 <__swsetup_r+0xd4>)
 802614a:	429c      	cmp	r4, r3
 802614c:	d101      	bne.n	8026152 <__swsetup_r+0x46>
 802614e:	68ac      	ldr	r4, [r5, #8]
 8026150:	e7eb      	b.n	802612a <__swsetup_r+0x1e>
 8026152:	4b24      	ldr	r3, [pc, #144]	; (80261e4 <__swsetup_r+0xd8>)
 8026154:	429c      	cmp	r4, r3
 8026156:	bf08      	it	eq
 8026158:	68ec      	ldreq	r4, [r5, #12]
 802615a:	e7e6      	b.n	802612a <__swsetup_r+0x1e>
 802615c:	0751      	lsls	r1, r2, #29
 802615e:	d512      	bpl.n	8026186 <__swsetup_r+0x7a>
 8026160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026162:	b141      	cbz	r1, 8026176 <__swsetup_r+0x6a>
 8026164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026168:	4299      	cmp	r1, r3
 802616a:	d002      	beq.n	8026172 <__swsetup_r+0x66>
 802616c:	4630      	mov	r0, r6
 802616e:	f7ff fbb7 	bl	80258e0 <_free_r>
 8026172:	2300      	movs	r3, #0
 8026174:	6363      	str	r3, [r4, #52]	; 0x34
 8026176:	89a3      	ldrh	r3, [r4, #12]
 8026178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802617c:	81a3      	strh	r3, [r4, #12]
 802617e:	2300      	movs	r3, #0
 8026180:	6063      	str	r3, [r4, #4]
 8026182:	6923      	ldr	r3, [r4, #16]
 8026184:	6023      	str	r3, [r4, #0]
 8026186:	89a3      	ldrh	r3, [r4, #12]
 8026188:	f043 0308 	orr.w	r3, r3, #8
 802618c:	81a3      	strh	r3, [r4, #12]
 802618e:	6923      	ldr	r3, [r4, #16]
 8026190:	b94b      	cbnz	r3, 80261a6 <__swsetup_r+0x9a>
 8026192:	89a3      	ldrh	r3, [r4, #12]
 8026194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802619c:	d003      	beq.n	80261a6 <__swsetup_r+0x9a>
 802619e:	4621      	mov	r1, r4
 80261a0:	4630      	mov	r0, r6
 80261a2:	f000 fa23 	bl	80265ec <__smakebuf_r>
 80261a6:	89a2      	ldrh	r2, [r4, #12]
 80261a8:	f012 0301 	ands.w	r3, r2, #1
 80261ac:	d00c      	beq.n	80261c8 <__swsetup_r+0xbc>
 80261ae:	2300      	movs	r3, #0
 80261b0:	60a3      	str	r3, [r4, #8]
 80261b2:	6963      	ldr	r3, [r4, #20]
 80261b4:	425b      	negs	r3, r3
 80261b6:	61a3      	str	r3, [r4, #24]
 80261b8:	6923      	ldr	r3, [r4, #16]
 80261ba:	b953      	cbnz	r3, 80261d2 <__swsetup_r+0xc6>
 80261bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80261c4:	d1ba      	bne.n	802613c <__swsetup_r+0x30>
 80261c6:	bd70      	pop	{r4, r5, r6, pc}
 80261c8:	0792      	lsls	r2, r2, #30
 80261ca:	bf58      	it	pl
 80261cc:	6963      	ldrpl	r3, [r4, #20]
 80261ce:	60a3      	str	r3, [r4, #8]
 80261d0:	e7f2      	b.n	80261b8 <__swsetup_r+0xac>
 80261d2:	2000      	movs	r0, #0
 80261d4:	e7f7      	b.n	80261c6 <__swsetup_r+0xba>
 80261d6:	bf00      	nop
 80261d8:	200000ac 	.word	0x200000ac
 80261dc:	0802b85c 	.word	0x0802b85c
 80261e0:	0802b87c 	.word	0x0802b87c
 80261e4:	0802b83c 	.word	0x0802b83c

080261e8 <__register_exitproc>:
 80261e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80261ec:	4d2c      	ldr	r5, [pc, #176]	; (80262a0 <__register_exitproc+0xb8>)
 80261ee:	682c      	ldr	r4, [r5, #0]
 80261f0:	4607      	mov	r7, r0
 80261f2:	460e      	mov	r6, r1
 80261f4:	4691      	mov	r9, r2
 80261f6:	4698      	mov	r8, r3
 80261f8:	b934      	cbnz	r4, 8026208 <__register_exitproc+0x20>
 80261fa:	4b2a      	ldr	r3, [pc, #168]	; (80262a4 <__register_exitproc+0xbc>)
 80261fc:	4c2a      	ldr	r4, [pc, #168]	; (80262a8 <__register_exitproc+0xc0>)
 80261fe:	602c      	str	r4, [r5, #0]
 8026200:	b113      	cbz	r3, 8026208 <__register_exitproc+0x20>
 8026202:	681b      	ldr	r3, [r3, #0]
 8026204:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026208:	6863      	ldr	r3, [r4, #4]
 802620a:	2b1f      	cmp	r3, #31
 802620c:	dd3d      	ble.n	802628a <__register_exitproc+0xa2>
 802620e:	4b27      	ldr	r3, [pc, #156]	; (80262ac <__register_exitproc+0xc4>)
 8026210:	b91b      	cbnz	r3, 802621a <__register_exitproc+0x32>
 8026212:	f04f 30ff 	mov.w	r0, #4294967295
 8026216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802621a:	208c      	movs	r0, #140	; 0x8c
 802621c:	f7ff fb3c 	bl	8025898 <malloc>
 8026220:	4604      	mov	r4, r0
 8026222:	2800      	cmp	r0, #0
 8026224:	d0f5      	beq.n	8026212 <__register_exitproc+0x2a>
 8026226:	2300      	movs	r3, #0
 8026228:	682a      	ldr	r2, [r5, #0]
 802622a:	6002      	str	r2, [r0, #0]
 802622c:	6043      	str	r3, [r0, #4]
 802622e:	6028      	str	r0, [r5, #0]
 8026230:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8026234:	b30f      	cbz	r7, 802627a <__register_exitproc+0x92>
 8026236:	f44f 7084 	mov.w	r0, #264	; 0x108
 802623a:	f7ff fb2d 	bl	8025898 <malloc>
 802623e:	2800      	cmp	r0, #0
 8026240:	d0e7      	beq.n	8026212 <__register_exitproc+0x2a>
 8026242:	2300      	movs	r3, #0
 8026244:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026248:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802624c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026250:	6862      	ldr	r2, [r4, #4]
 8026252:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8026256:	2301      	movs	r3, #1
 8026258:	4093      	lsls	r3, r2
 802625a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802625e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8026262:	431a      	orrs	r2, r3
 8026264:	2f02      	cmp	r7, #2
 8026266:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802626a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802626e:	bf02      	ittt	eq
 8026270:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8026274:	4313      	orreq	r3, r2
 8026276:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802627a:	6863      	ldr	r3, [r4, #4]
 802627c:	1c5a      	adds	r2, r3, #1
 802627e:	3302      	adds	r3, #2
 8026280:	6062      	str	r2, [r4, #4]
 8026282:	2000      	movs	r0, #0
 8026284:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026288:	e7c5      	b.n	8026216 <__register_exitproc+0x2e>
 802628a:	2f00      	cmp	r7, #0
 802628c:	d0f5      	beq.n	802627a <__register_exitproc+0x92>
 802628e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026292:	2800      	cmp	r0, #0
 8026294:	d1dc      	bne.n	8026250 <__register_exitproc+0x68>
 8026296:	4b05      	ldr	r3, [pc, #20]	; (80262ac <__register_exitproc+0xc4>)
 8026298:	2b00      	cmp	r3, #0
 802629a:	d0ba      	beq.n	8026212 <__register_exitproc+0x2a>
 802629c:	e7cb      	b.n	8026236 <__register_exitproc+0x4e>
 802629e:	bf00      	nop
 80262a0:	2000be4c 	.word	0x2000be4c
 80262a4:	0802b838 	.word	0x0802b838
 80262a8:	2000bdc0 	.word	0x2000bdc0
 80262ac:	08025899 	.word	0x08025899

080262b0 <__sflush_r>:
 80262b0:	898a      	ldrh	r2, [r1, #12]
 80262b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80262b6:	4605      	mov	r5, r0
 80262b8:	0710      	lsls	r0, r2, #28
 80262ba:	460c      	mov	r4, r1
 80262bc:	d458      	bmi.n	8026370 <__sflush_r+0xc0>
 80262be:	684b      	ldr	r3, [r1, #4]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	dc05      	bgt.n	80262d0 <__sflush_r+0x20>
 80262c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	dc02      	bgt.n	80262d0 <__sflush_r+0x20>
 80262ca:	2000      	movs	r0, #0
 80262cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80262d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80262d2:	2e00      	cmp	r6, #0
 80262d4:	d0f9      	beq.n	80262ca <__sflush_r+0x1a>
 80262d6:	2300      	movs	r3, #0
 80262d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80262dc:	682f      	ldr	r7, [r5, #0]
 80262de:	6a21      	ldr	r1, [r4, #32]
 80262e0:	602b      	str	r3, [r5, #0]
 80262e2:	d032      	beq.n	802634a <__sflush_r+0x9a>
 80262e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80262e6:	89a3      	ldrh	r3, [r4, #12]
 80262e8:	075a      	lsls	r2, r3, #29
 80262ea:	d505      	bpl.n	80262f8 <__sflush_r+0x48>
 80262ec:	6863      	ldr	r3, [r4, #4]
 80262ee:	1ac0      	subs	r0, r0, r3
 80262f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80262f2:	b10b      	cbz	r3, 80262f8 <__sflush_r+0x48>
 80262f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80262f6:	1ac0      	subs	r0, r0, r3
 80262f8:	2300      	movs	r3, #0
 80262fa:	4602      	mov	r2, r0
 80262fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80262fe:	6a21      	ldr	r1, [r4, #32]
 8026300:	4628      	mov	r0, r5
 8026302:	47b0      	blx	r6
 8026304:	1c43      	adds	r3, r0, #1
 8026306:	89a3      	ldrh	r3, [r4, #12]
 8026308:	d106      	bne.n	8026318 <__sflush_r+0x68>
 802630a:	6829      	ldr	r1, [r5, #0]
 802630c:	291d      	cmp	r1, #29
 802630e:	d848      	bhi.n	80263a2 <__sflush_r+0xf2>
 8026310:	4a29      	ldr	r2, [pc, #164]	; (80263b8 <__sflush_r+0x108>)
 8026312:	40ca      	lsrs	r2, r1
 8026314:	07d6      	lsls	r6, r2, #31
 8026316:	d544      	bpl.n	80263a2 <__sflush_r+0xf2>
 8026318:	2200      	movs	r2, #0
 802631a:	6062      	str	r2, [r4, #4]
 802631c:	04d9      	lsls	r1, r3, #19
 802631e:	6922      	ldr	r2, [r4, #16]
 8026320:	6022      	str	r2, [r4, #0]
 8026322:	d504      	bpl.n	802632e <__sflush_r+0x7e>
 8026324:	1c42      	adds	r2, r0, #1
 8026326:	d101      	bne.n	802632c <__sflush_r+0x7c>
 8026328:	682b      	ldr	r3, [r5, #0]
 802632a:	b903      	cbnz	r3, 802632e <__sflush_r+0x7e>
 802632c:	6560      	str	r0, [r4, #84]	; 0x54
 802632e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026330:	602f      	str	r7, [r5, #0]
 8026332:	2900      	cmp	r1, #0
 8026334:	d0c9      	beq.n	80262ca <__sflush_r+0x1a>
 8026336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802633a:	4299      	cmp	r1, r3
 802633c:	d002      	beq.n	8026344 <__sflush_r+0x94>
 802633e:	4628      	mov	r0, r5
 8026340:	f7ff face 	bl	80258e0 <_free_r>
 8026344:	2000      	movs	r0, #0
 8026346:	6360      	str	r0, [r4, #52]	; 0x34
 8026348:	e7c0      	b.n	80262cc <__sflush_r+0x1c>
 802634a:	2301      	movs	r3, #1
 802634c:	4628      	mov	r0, r5
 802634e:	47b0      	blx	r6
 8026350:	1c41      	adds	r1, r0, #1
 8026352:	d1c8      	bne.n	80262e6 <__sflush_r+0x36>
 8026354:	682b      	ldr	r3, [r5, #0]
 8026356:	2b00      	cmp	r3, #0
 8026358:	d0c5      	beq.n	80262e6 <__sflush_r+0x36>
 802635a:	2b1d      	cmp	r3, #29
 802635c:	d001      	beq.n	8026362 <__sflush_r+0xb2>
 802635e:	2b16      	cmp	r3, #22
 8026360:	d101      	bne.n	8026366 <__sflush_r+0xb6>
 8026362:	602f      	str	r7, [r5, #0]
 8026364:	e7b1      	b.n	80262ca <__sflush_r+0x1a>
 8026366:	89a3      	ldrh	r3, [r4, #12]
 8026368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802636c:	81a3      	strh	r3, [r4, #12]
 802636e:	e7ad      	b.n	80262cc <__sflush_r+0x1c>
 8026370:	690f      	ldr	r7, [r1, #16]
 8026372:	2f00      	cmp	r7, #0
 8026374:	d0a9      	beq.n	80262ca <__sflush_r+0x1a>
 8026376:	0793      	lsls	r3, r2, #30
 8026378:	680e      	ldr	r6, [r1, #0]
 802637a:	bf08      	it	eq
 802637c:	694b      	ldreq	r3, [r1, #20]
 802637e:	600f      	str	r7, [r1, #0]
 8026380:	bf18      	it	ne
 8026382:	2300      	movne	r3, #0
 8026384:	eba6 0807 	sub.w	r8, r6, r7
 8026388:	608b      	str	r3, [r1, #8]
 802638a:	f1b8 0f00 	cmp.w	r8, #0
 802638e:	dd9c      	ble.n	80262ca <__sflush_r+0x1a>
 8026390:	4643      	mov	r3, r8
 8026392:	463a      	mov	r2, r7
 8026394:	6a21      	ldr	r1, [r4, #32]
 8026396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026398:	4628      	mov	r0, r5
 802639a:	47b0      	blx	r6
 802639c:	2800      	cmp	r0, #0
 802639e:	dc06      	bgt.n	80263ae <__sflush_r+0xfe>
 80263a0:	89a3      	ldrh	r3, [r4, #12]
 80263a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80263a6:	81a3      	strh	r3, [r4, #12]
 80263a8:	f04f 30ff 	mov.w	r0, #4294967295
 80263ac:	e78e      	b.n	80262cc <__sflush_r+0x1c>
 80263ae:	4407      	add	r7, r0
 80263b0:	eba8 0800 	sub.w	r8, r8, r0
 80263b4:	e7e9      	b.n	802638a <__sflush_r+0xda>
 80263b6:	bf00      	nop
 80263b8:	20400001 	.word	0x20400001

080263bc <_fflush_r>:
 80263bc:	b538      	push	{r3, r4, r5, lr}
 80263be:	690b      	ldr	r3, [r1, #16]
 80263c0:	4605      	mov	r5, r0
 80263c2:	460c      	mov	r4, r1
 80263c4:	b1db      	cbz	r3, 80263fe <_fflush_r+0x42>
 80263c6:	b118      	cbz	r0, 80263d0 <_fflush_r+0x14>
 80263c8:	6983      	ldr	r3, [r0, #24]
 80263ca:	b90b      	cbnz	r3, 80263d0 <_fflush_r+0x14>
 80263cc:	f000 f860 	bl	8026490 <__sinit>
 80263d0:	4b0c      	ldr	r3, [pc, #48]	; (8026404 <_fflush_r+0x48>)
 80263d2:	429c      	cmp	r4, r3
 80263d4:	d109      	bne.n	80263ea <_fflush_r+0x2e>
 80263d6:	686c      	ldr	r4, [r5, #4]
 80263d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80263dc:	b17b      	cbz	r3, 80263fe <_fflush_r+0x42>
 80263de:	4621      	mov	r1, r4
 80263e0:	4628      	mov	r0, r5
 80263e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80263e6:	f7ff bf63 	b.w	80262b0 <__sflush_r>
 80263ea:	4b07      	ldr	r3, [pc, #28]	; (8026408 <_fflush_r+0x4c>)
 80263ec:	429c      	cmp	r4, r3
 80263ee:	d101      	bne.n	80263f4 <_fflush_r+0x38>
 80263f0:	68ac      	ldr	r4, [r5, #8]
 80263f2:	e7f1      	b.n	80263d8 <_fflush_r+0x1c>
 80263f4:	4b05      	ldr	r3, [pc, #20]	; (802640c <_fflush_r+0x50>)
 80263f6:	429c      	cmp	r4, r3
 80263f8:	bf08      	it	eq
 80263fa:	68ec      	ldreq	r4, [r5, #12]
 80263fc:	e7ec      	b.n	80263d8 <_fflush_r+0x1c>
 80263fe:	2000      	movs	r0, #0
 8026400:	bd38      	pop	{r3, r4, r5, pc}
 8026402:	bf00      	nop
 8026404:	0802b85c 	.word	0x0802b85c
 8026408:	0802b87c 	.word	0x0802b87c
 802640c:	0802b83c 	.word	0x0802b83c

08026410 <std>:
 8026410:	2300      	movs	r3, #0
 8026412:	b510      	push	{r4, lr}
 8026414:	4604      	mov	r4, r0
 8026416:	e9c0 3300 	strd	r3, r3, [r0]
 802641a:	6083      	str	r3, [r0, #8]
 802641c:	8181      	strh	r1, [r0, #12]
 802641e:	6643      	str	r3, [r0, #100]	; 0x64
 8026420:	81c2      	strh	r2, [r0, #14]
 8026422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026426:	6183      	str	r3, [r0, #24]
 8026428:	4619      	mov	r1, r3
 802642a:	2208      	movs	r2, #8
 802642c:	305c      	adds	r0, #92	; 0x5c
 802642e:	f7ff fa4e 	bl	80258ce <memset>
 8026432:	4b05      	ldr	r3, [pc, #20]	; (8026448 <std+0x38>)
 8026434:	6263      	str	r3, [r4, #36]	; 0x24
 8026436:	4b05      	ldr	r3, [pc, #20]	; (802644c <std+0x3c>)
 8026438:	62a3      	str	r3, [r4, #40]	; 0x28
 802643a:	4b05      	ldr	r3, [pc, #20]	; (8026450 <std+0x40>)
 802643c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802643e:	4b05      	ldr	r3, [pc, #20]	; (8026454 <std+0x44>)
 8026440:	6224      	str	r4, [r4, #32]
 8026442:	6323      	str	r3, [r4, #48]	; 0x30
 8026444:	bd10      	pop	{r4, pc}
 8026446:	bf00      	nop
 8026448:	08026671 	.word	0x08026671
 802644c:	08026693 	.word	0x08026693
 8026450:	080266cb 	.word	0x080266cb
 8026454:	080266ef 	.word	0x080266ef

08026458 <_cleanup_r>:
 8026458:	4901      	ldr	r1, [pc, #4]	; (8026460 <_cleanup_r+0x8>)
 802645a:	f000 b885 	b.w	8026568 <_fwalk_reent>
 802645e:	bf00      	nop
 8026460:	080263bd 	.word	0x080263bd

08026464 <__sfmoreglue>:
 8026464:	b570      	push	{r4, r5, r6, lr}
 8026466:	1e4a      	subs	r2, r1, #1
 8026468:	2568      	movs	r5, #104	; 0x68
 802646a:	4355      	muls	r5, r2
 802646c:	460e      	mov	r6, r1
 802646e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026472:	f7ff fa83 	bl	802597c <_malloc_r>
 8026476:	4604      	mov	r4, r0
 8026478:	b140      	cbz	r0, 802648c <__sfmoreglue+0x28>
 802647a:	2100      	movs	r1, #0
 802647c:	e9c0 1600 	strd	r1, r6, [r0]
 8026480:	300c      	adds	r0, #12
 8026482:	60a0      	str	r0, [r4, #8]
 8026484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026488:	f7ff fa21 	bl	80258ce <memset>
 802648c:	4620      	mov	r0, r4
 802648e:	bd70      	pop	{r4, r5, r6, pc}

08026490 <__sinit>:
 8026490:	6983      	ldr	r3, [r0, #24]
 8026492:	b510      	push	{r4, lr}
 8026494:	4604      	mov	r4, r0
 8026496:	bb33      	cbnz	r3, 80264e6 <__sinit+0x56>
 8026498:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802649c:	6503      	str	r3, [r0, #80]	; 0x50
 802649e:	4b12      	ldr	r3, [pc, #72]	; (80264e8 <__sinit+0x58>)
 80264a0:	4a12      	ldr	r2, [pc, #72]	; (80264ec <__sinit+0x5c>)
 80264a2:	681b      	ldr	r3, [r3, #0]
 80264a4:	6282      	str	r2, [r0, #40]	; 0x28
 80264a6:	4298      	cmp	r0, r3
 80264a8:	bf04      	itt	eq
 80264aa:	2301      	moveq	r3, #1
 80264ac:	6183      	streq	r3, [r0, #24]
 80264ae:	f000 f81f 	bl	80264f0 <__sfp>
 80264b2:	6060      	str	r0, [r4, #4]
 80264b4:	4620      	mov	r0, r4
 80264b6:	f000 f81b 	bl	80264f0 <__sfp>
 80264ba:	60a0      	str	r0, [r4, #8]
 80264bc:	4620      	mov	r0, r4
 80264be:	f000 f817 	bl	80264f0 <__sfp>
 80264c2:	2200      	movs	r2, #0
 80264c4:	60e0      	str	r0, [r4, #12]
 80264c6:	2104      	movs	r1, #4
 80264c8:	6860      	ldr	r0, [r4, #4]
 80264ca:	f7ff ffa1 	bl	8026410 <std>
 80264ce:	2201      	movs	r2, #1
 80264d0:	2109      	movs	r1, #9
 80264d2:	68a0      	ldr	r0, [r4, #8]
 80264d4:	f7ff ff9c 	bl	8026410 <std>
 80264d8:	2202      	movs	r2, #2
 80264da:	2112      	movs	r1, #18
 80264dc:	68e0      	ldr	r0, [r4, #12]
 80264de:	f7ff ff97 	bl	8026410 <std>
 80264e2:	2301      	movs	r3, #1
 80264e4:	61a3      	str	r3, [r4, #24]
 80264e6:	bd10      	pop	{r4, pc}
 80264e8:	0802b800 	.word	0x0802b800
 80264ec:	08026459 	.word	0x08026459

080264f0 <__sfp>:
 80264f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264f2:	4b1b      	ldr	r3, [pc, #108]	; (8026560 <__sfp+0x70>)
 80264f4:	681e      	ldr	r6, [r3, #0]
 80264f6:	69b3      	ldr	r3, [r6, #24]
 80264f8:	4607      	mov	r7, r0
 80264fa:	b913      	cbnz	r3, 8026502 <__sfp+0x12>
 80264fc:	4630      	mov	r0, r6
 80264fe:	f7ff ffc7 	bl	8026490 <__sinit>
 8026502:	3648      	adds	r6, #72	; 0x48
 8026504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026508:	3b01      	subs	r3, #1
 802650a:	d503      	bpl.n	8026514 <__sfp+0x24>
 802650c:	6833      	ldr	r3, [r6, #0]
 802650e:	b133      	cbz	r3, 802651e <__sfp+0x2e>
 8026510:	6836      	ldr	r6, [r6, #0]
 8026512:	e7f7      	b.n	8026504 <__sfp+0x14>
 8026514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026518:	b16d      	cbz	r5, 8026536 <__sfp+0x46>
 802651a:	3468      	adds	r4, #104	; 0x68
 802651c:	e7f4      	b.n	8026508 <__sfp+0x18>
 802651e:	2104      	movs	r1, #4
 8026520:	4638      	mov	r0, r7
 8026522:	f7ff ff9f 	bl	8026464 <__sfmoreglue>
 8026526:	6030      	str	r0, [r6, #0]
 8026528:	2800      	cmp	r0, #0
 802652a:	d1f1      	bne.n	8026510 <__sfp+0x20>
 802652c:	230c      	movs	r3, #12
 802652e:	603b      	str	r3, [r7, #0]
 8026530:	4604      	mov	r4, r0
 8026532:	4620      	mov	r0, r4
 8026534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026536:	4b0b      	ldr	r3, [pc, #44]	; (8026564 <__sfp+0x74>)
 8026538:	6665      	str	r5, [r4, #100]	; 0x64
 802653a:	e9c4 5500 	strd	r5, r5, [r4]
 802653e:	60a5      	str	r5, [r4, #8]
 8026540:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8026544:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026548:	2208      	movs	r2, #8
 802654a:	4629      	mov	r1, r5
 802654c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026550:	f7ff f9bd 	bl	80258ce <memset>
 8026554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802655c:	e7e9      	b.n	8026532 <__sfp+0x42>
 802655e:	bf00      	nop
 8026560:	0802b800 	.word	0x0802b800
 8026564:	ffff0001 	.word	0xffff0001

08026568 <_fwalk_reent>:
 8026568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802656c:	4680      	mov	r8, r0
 802656e:	4689      	mov	r9, r1
 8026570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026574:	2600      	movs	r6, #0
 8026576:	b914      	cbnz	r4, 802657e <_fwalk_reent+0x16>
 8026578:	4630      	mov	r0, r6
 802657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802657e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8026582:	3f01      	subs	r7, #1
 8026584:	d501      	bpl.n	802658a <_fwalk_reent+0x22>
 8026586:	6824      	ldr	r4, [r4, #0]
 8026588:	e7f5      	b.n	8026576 <_fwalk_reent+0xe>
 802658a:	89ab      	ldrh	r3, [r5, #12]
 802658c:	2b01      	cmp	r3, #1
 802658e:	d907      	bls.n	80265a0 <_fwalk_reent+0x38>
 8026590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026594:	3301      	adds	r3, #1
 8026596:	d003      	beq.n	80265a0 <_fwalk_reent+0x38>
 8026598:	4629      	mov	r1, r5
 802659a:	4640      	mov	r0, r8
 802659c:	47c8      	blx	r9
 802659e:	4306      	orrs	r6, r0
 80265a0:	3568      	adds	r5, #104	; 0x68
 80265a2:	e7ee      	b.n	8026582 <_fwalk_reent+0x1a>

080265a4 <__swhatbuf_r>:
 80265a4:	b570      	push	{r4, r5, r6, lr}
 80265a6:	460e      	mov	r6, r1
 80265a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80265ac:	2900      	cmp	r1, #0
 80265ae:	b096      	sub	sp, #88	; 0x58
 80265b0:	4614      	mov	r4, r2
 80265b2:	461d      	mov	r5, r3
 80265b4:	da07      	bge.n	80265c6 <__swhatbuf_r+0x22>
 80265b6:	2300      	movs	r3, #0
 80265b8:	602b      	str	r3, [r5, #0]
 80265ba:	89b3      	ldrh	r3, [r6, #12]
 80265bc:	061a      	lsls	r2, r3, #24
 80265be:	d410      	bmi.n	80265e2 <__swhatbuf_r+0x3e>
 80265c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80265c4:	e00e      	b.n	80265e4 <__swhatbuf_r+0x40>
 80265c6:	466a      	mov	r2, sp
 80265c8:	f000 f8b8 	bl	802673c <_fstat_r>
 80265cc:	2800      	cmp	r0, #0
 80265ce:	dbf2      	blt.n	80265b6 <__swhatbuf_r+0x12>
 80265d0:	9a01      	ldr	r2, [sp, #4]
 80265d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80265d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80265da:	425a      	negs	r2, r3
 80265dc:	415a      	adcs	r2, r3
 80265de:	602a      	str	r2, [r5, #0]
 80265e0:	e7ee      	b.n	80265c0 <__swhatbuf_r+0x1c>
 80265e2:	2340      	movs	r3, #64	; 0x40
 80265e4:	2000      	movs	r0, #0
 80265e6:	6023      	str	r3, [r4, #0]
 80265e8:	b016      	add	sp, #88	; 0x58
 80265ea:	bd70      	pop	{r4, r5, r6, pc}

080265ec <__smakebuf_r>:
 80265ec:	898b      	ldrh	r3, [r1, #12]
 80265ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80265f0:	079d      	lsls	r5, r3, #30
 80265f2:	4606      	mov	r6, r0
 80265f4:	460c      	mov	r4, r1
 80265f6:	d507      	bpl.n	8026608 <__smakebuf_r+0x1c>
 80265f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80265fc:	6023      	str	r3, [r4, #0]
 80265fe:	6123      	str	r3, [r4, #16]
 8026600:	2301      	movs	r3, #1
 8026602:	6163      	str	r3, [r4, #20]
 8026604:	b002      	add	sp, #8
 8026606:	bd70      	pop	{r4, r5, r6, pc}
 8026608:	ab01      	add	r3, sp, #4
 802660a:	466a      	mov	r2, sp
 802660c:	f7ff ffca 	bl	80265a4 <__swhatbuf_r>
 8026610:	9900      	ldr	r1, [sp, #0]
 8026612:	4605      	mov	r5, r0
 8026614:	4630      	mov	r0, r6
 8026616:	f7ff f9b1 	bl	802597c <_malloc_r>
 802661a:	b948      	cbnz	r0, 8026630 <__smakebuf_r+0x44>
 802661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026620:	059a      	lsls	r2, r3, #22
 8026622:	d4ef      	bmi.n	8026604 <__smakebuf_r+0x18>
 8026624:	f023 0303 	bic.w	r3, r3, #3
 8026628:	f043 0302 	orr.w	r3, r3, #2
 802662c:	81a3      	strh	r3, [r4, #12]
 802662e:	e7e3      	b.n	80265f8 <__smakebuf_r+0xc>
 8026630:	4b0d      	ldr	r3, [pc, #52]	; (8026668 <__smakebuf_r+0x7c>)
 8026632:	62b3      	str	r3, [r6, #40]	; 0x28
 8026634:	89a3      	ldrh	r3, [r4, #12]
 8026636:	6020      	str	r0, [r4, #0]
 8026638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802663c:	81a3      	strh	r3, [r4, #12]
 802663e:	9b00      	ldr	r3, [sp, #0]
 8026640:	6163      	str	r3, [r4, #20]
 8026642:	9b01      	ldr	r3, [sp, #4]
 8026644:	6120      	str	r0, [r4, #16]
 8026646:	b15b      	cbz	r3, 8026660 <__smakebuf_r+0x74>
 8026648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802664c:	4630      	mov	r0, r6
 802664e:	f000 f887 	bl	8026760 <_isatty_r>
 8026652:	b128      	cbz	r0, 8026660 <__smakebuf_r+0x74>
 8026654:	89a3      	ldrh	r3, [r4, #12]
 8026656:	f023 0303 	bic.w	r3, r3, #3
 802665a:	f043 0301 	orr.w	r3, r3, #1
 802665e:	81a3      	strh	r3, [r4, #12]
 8026660:	89a3      	ldrh	r3, [r4, #12]
 8026662:	431d      	orrs	r5, r3
 8026664:	81a5      	strh	r5, [r4, #12]
 8026666:	e7cd      	b.n	8026604 <__smakebuf_r+0x18>
 8026668:	08026459 	.word	0x08026459

0802666c <__malloc_lock>:
 802666c:	4770      	bx	lr

0802666e <__malloc_unlock>:
 802666e:	4770      	bx	lr

08026670 <__sread>:
 8026670:	b510      	push	{r4, lr}
 8026672:	460c      	mov	r4, r1
 8026674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026678:	f000 f894 	bl	80267a4 <_read_r>
 802667c:	2800      	cmp	r0, #0
 802667e:	bfab      	itete	ge
 8026680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026682:	89a3      	ldrhlt	r3, [r4, #12]
 8026684:	181b      	addge	r3, r3, r0
 8026686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802668a:	bfac      	ite	ge
 802668c:	6563      	strge	r3, [r4, #84]	; 0x54
 802668e:	81a3      	strhlt	r3, [r4, #12]
 8026690:	bd10      	pop	{r4, pc}

08026692 <__swrite>:
 8026692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026696:	461f      	mov	r7, r3
 8026698:	898b      	ldrh	r3, [r1, #12]
 802669a:	05db      	lsls	r3, r3, #23
 802669c:	4605      	mov	r5, r0
 802669e:	460c      	mov	r4, r1
 80266a0:	4616      	mov	r6, r2
 80266a2:	d505      	bpl.n	80266b0 <__swrite+0x1e>
 80266a4:	2302      	movs	r3, #2
 80266a6:	2200      	movs	r2, #0
 80266a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266ac:	f000 f868 	bl	8026780 <_lseek_r>
 80266b0:	89a3      	ldrh	r3, [r4, #12]
 80266b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80266b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80266ba:	81a3      	strh	r3, [r4, #12]
 80266bc:	4632      	mov	r2, r6
 80266be:	463b      	mov	r3, r7
 80266c0:	4628      	mov	r0, r5
 80266c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80266c6:	f000 b817 	b.w	80266f8 <_write_r>

080266ca <__sseek>:
 80266ca:	b510      	push	{r4, lr}
 80266cc:	460c      	mov	r4, r1
 80266ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266d2:	f000 f855 	bl	8026780 <_lseek_r>
 80266d6:	1c43      	adds	r3, r0, #1
 80266d8:	89a3      	ldrh	r3, [r4, #12]
 80266da:	bf15      	itete	ne
 80266dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80266de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80266e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80266e6:	81a3      	strheq	r3, [r4, #12]
 80266e8:	bf18      	it	ne
 80266ea:	81a3      	strhne	r3, [r4, #12]
 80266ec:	bd10      	pop	{r4, pc}

080266ee <__sclose>:
 80266ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266f2:	f000 b813 	b.w	802671c <_close_r>
	...

080266f8 <_write_r>:
 80266f8:	b538      	push	{r3, r4, r5, lr}
 80266fa:	4c07      	ldr	r4, [pc, #28]	; (8026718 <_write_r+0x20>)
 80266fc:	4605      	mov	r5, r0
 80266fe:	4608      	mov	r0, r1
 8026700:	4611      	mov	r1, r2
 8026702:	2200      	movs	r2, #0
 8026704:	6022      	str	r2, [r4, #0]
 8026706:	461a      	mov	r2, r3
 8026708:	f7dd f8fb 	bl	8003902 <_write>
 802670c:	1c43      	adds	r3, r0, #1
 802670e:	d102      	bne.n	8026716 <_write_r+0x1e>
 8026710:	6823      	ldr	r3, [r4, #0]
 8026712:	b103      	cbz	r3, 8026716 <_write_r+0x1e>
 8026714:	602b      	str	r3, [r5, #0]
 8026716:	bd38      	pop	{r3, r4, r5, pc}
 8026718:	2000ca54 	.word	0x2000ca54

0802671c <_close_r>:
 802671c:	b538      	push	{r3, r4, r5, lr}
 802671e:	4c06      	ldr	r4, [pc, #24]	; (8026738 <_close_r+0x1c>)
 8026720:	2300      	movs	r3, #0
 8026722:	4605      	mov	r5, r0
 8026724:	4608      	mov	r0, r1
 8026726:	6023      	str	r3, [r4, #0]
 8026728:	f7dd f907 	bl	800393a <_close>
 802672c:	1c43      	adds	r3, r0, #1
 802672e:	d102      	bne.n	8026736 <_close_r+0x1a>
 8026730:	6823      	ldr	r3, [r4, #0]
 8026732:	b103      	cbz	r3, 8026736 <_close_r+0x1a>
 8026734:	602b      	str	r3, [r5, #0]
 8026736:	bd38      	pop	{r3, r4, r5, pc}
 8026738:	2000ca54 	.word	0x2000ca54

0802673c <_fstat_r>:
 802673c:	b538      	push	{r3, r4, r5, lr}
 802673e:	4c07      	ldr	r4, [pc, #28]	; (802675c <_fstat_r+0x20>)
 8026740:	2300      	movs	r3, #0
 8026742:	4605      	mov	r5, r0
 8026744:	4608      	mov	r0, r1
 8026746:	4611      	mov	r1, r2
 8026748:	6023      	str	r3, [r4, #0]
 802674a:	f7dd f902 	bl	8003952 <_fstat>
 802674e:	1c43      	adds	r3, r0, #1
 8026750:	d102      	bne.n	8026758 <_fstat_r+0x1c>
 8026752:	6823      	ldr	r3, [r4, #0]
 8026754:	b103      	cbz	r3, 8026758 <_fstat_r+0x1c>
 8026756:	602b      	str	r3, [r5, #0]
 8026758:	bd38      	pop	{r3, r4, r5, pc}
 802675a:	bf00      	nop
 802675c:	2000ca54 	.word	0x2000ca54

08026760 <_isatty_r>:
 8026760:	b538      	push	{r3, r4, r5, lr}
 8026762:	4c06      	ldr	r4, [pc, #24]	; (802677c <_isatty_r+0x1c>)
 8026764:	2300      	movs	r3, #0
 8026766:	4605      	mov	r5, r0
 8026768:	4608      	mov	r0, r1
 802676a:	6023      	str	r3, [r4, #0]
 802676c:	f7dd f901 	bl	8003972 <_isatty>
 8026770:	1c43      	adds	r3, r0, #1
 8026772:	d102      	bne.n	802677a <_isatty_r+0x1a>
 8026774:	6823      	ldr	r3, [r4, #0]
 8026776:	b103      	cbz	r3, 802677a <_isatty_r+0x1a>
 8026778:	602b      	str	r3, [r5, #0]
 802677a:	bd38      	pop	{r3, r4, r5, pc}
 802677c:	2000ca54 	.word	0x2000ca54

08026780 <_lseek_r>:
 8026780:	b538      	push	{r3, r4, r5, lr}
 8026782:	4c07      	ldr	r4, [pc, #28]	; (80267a0 <_lseek_r+0x20>)
 8026784:	4605      	mov	r5, r0
 8026786:	4608      	mov	r0, r1
 8026788:	4611      	mov	r1, r2
 802678a:	2200      	movs	r2, #0
 802678c:	6022      	str	r2, [r4, #0]
 802678e:	461a      	mov	r2, r3
 8026790:	f7dd f8fa 	bl	8003988 <_lseek>
 8026794:	1c43      	adds	r3, r0, #1
 8026796:	d102      	bne.n	802679e <_lseek_r+0x1e>
 8026798:	6823      	ldr	r3, [r4, #0]
 802679a:	b103      	cbz	r3, 802679e <_lseek_r+0x1e>
 802679c:	602b      	str	r3, [r5, #0]
 802679e:	bd38      	pop	{r3, r4, r5, pc}
 80267a0:	2000ca54 	.word	0x2000ca54

080267a4 <_read_r>:
 80267a4:	b538      	push	{r3, r4, r5, lr}
 80267a6:	4c07      	ldr	r4, [pc, #28]	; (80267c4 <_read_r+0x20>)
 80267a8:	4605      	mov	r5, r0
 80267aa:	4608      	mov	r0, r1
 80267ac:	4611      	mov	r1, r2
 80267ae:	2200      	movs	r2, #0
 80267b0:	6022      	str	r2, [r4, #0]
 80267b2:	461a      	mov	r2, r3
 80267b4:	f7dd f888 	bl	80038c8 <_read>
 80267b8:	1c43      	adds	r3, r0, #1
 80267ba:	d102      	bne.n	80267c2 <_read_r+0x1e>
 80267bc:	6823      	ldr	r3, [r4, #0]
 80267be:	b103      	cbz	r3, 80267c2 <_read_r+0x1e>
 80267c0:	602b      	str	r3, [r5, #0]
 80267c2:	bd38      	pop	{r3, r4, r5, pc}
 80267c4:	2000ca54 	.word	0x2000ca54

080267c8 <_init>:
 80267c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267ca:	bf00      	nop
 80267cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80267ce:	bc08      	pop	{r3}
 80267d0:	469e      	mov	lr, r3
 80267d2:	4770      	bx	lr

080267d4 <_fini>:
 80267d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267d6:	bf00      	nop
 80267d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80267da:	bc08      	pop	{r3}
 80267dc:	469e      	mov	lr, r3
 80267de:	4770      	bx	lr
